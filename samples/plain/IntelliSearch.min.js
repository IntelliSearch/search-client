!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("IntelliSearch",[],t):"object"==typeof exports?exports.IntelliSearch=t():e.IntelliSearch=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/SearchClient.ts")}({"./node_modules/asn1.js/lib/asn1.js":
/*!******************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=t;r.bignum=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),r.define=n(/*! ./asn1/api */"./node_modules/asn1.js/lib/asn1/api.js").define,r.base=n(/*! ./asn1/base */"./node_modules/asn1.js/lib/asn1/base/index.js"),r.constants=n(/*! ./asn1/constants */"./node_modules/asn1.js/lib/asn1/constants/index.js"),r.decoders=n(/*! ./asn1/decoders */"./node_modules/asn1.js/lib/asn1/decoders/index.js"),r.encoders=n(/*! ./asn1/encoders */"./node_modules/asn1.js/lib/asn1/encoders/index.js")},"./node_modules/asn1.js/lib/asn1/api.js":
/*!**********************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/api.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../asn1 */"./node_modules/asn1.js/lib/asn1.js"),s=n(/*! inherits */"./node_modules/inherits/inherits_browser.js");function i(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new i(e,t)},i.prototype._createNamed=function(e){var t;try{t=n(/*! vm */"./node_modules/vm-browserify/index.js").runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return s(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},i.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(r.decoders[e])),this.decoders[e]},i.prototype.decode=function(e,t,n){return this._getDecoder(t).decode(e,n)},i.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(r.encoders[e])),this.encoders[e]},i.prototype.encode=function(e,t,n){return this._getEncoder(t).encode(e,n)}},"./node_modules/asn1.js/lib/asn1/base/buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/buffer.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ../base */"./node_modules/asn1.js/lib/asn1/base/index.js").Reporter,i=n(/*! buffer */"./node_modules/buffer/index.js").Buffer;function a(e,t){s.call(this,t),i.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function o(e,t){if(Array.isArray(e))this.length=0,this.value=e.map(function(e){return e instanceof o||(e=new o(e,t)),this.length+=e.length,e},this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=i.byteLength(e);else{if(!i.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}r(a,s),t.DecoderBuffer=a,a.prototype.save=function(){return{offset:this.offset,reporter:s.prototype.save.call(this)}},a.prototype.restore=function(e){var t=new a(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,s.prototype.restore.call(this,e.reporter),t},a.prototype.isEmpty=function(){return this.offset===this.length},a.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},a.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var n=new a(this.base);return n._reporterState=this._reporterState,n.offset=this.offset,n.length=this.offset+e,this.offset+=e,n},a.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=o,o.prototype.join=function(e,t){return e||(e=new i(this.length)),t||(t=0),0===this.length?e:(Array.isArray(this.value)?this.value.forEach(function(n){n.join(e,t),t+=n.length}):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):i.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length),e)}},"./node_modules/asn1.js/lib/asn1/base/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/index.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var r=t;r.Reporter=n(/*! ./reporter */"./node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter,r.DecoderBuffer=n(/*! ./buffer */"./node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer,r.EncoderBuffer=n(/*! ./buffer */"./node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer,r.Node=n(/*! ./node */"./node_modules/asn1.js/lib/asn1/base/node.js")},"./node_modules/asn1.js/lib/asn1/base/node.js":
/*!****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/node.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../base */"./node_modules/asn1.js/lib/asn1/base/index.js").Reporter,s=n(/*! ../base */"./node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer,i=n(/*! ../base */"./node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer,a=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),o=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],d=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(o);function u(e,t){var n={};this._baseState=n,n.enc=e,n.parent=t||null,n.children=null,n.tag=null,n.args=null,n.reverseArgs=null,n.choice=null,n.optional=!1,n.any=!1,n.obj=!1,n.use=null,n.useDecoder=null,n.key=null,n.default=null,n.explicit=null,n.implicit=null,n.contains=null,n.parent||(n.children=[],this._wrap())}e.exports=u;var c=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];u.prototype.clone=function(){var e=this._baseState,t={};c.forEach(function(n){t[n]=e[n]});var n=new this.constructor(t.parent);return n._baseState=t,n},u.prototype._wrap=function(){var e=this._baseState;d.forEach(function(t){this[t]=function(){var n=new this.constructor(this);return e.children.push(n),n[t].apply(n,arguments)}},this)},u.prototype._init=function(e){var t=this._baseState;a(null===t.parent),e.call(this),t.children=t.children.filter(function(e){return e._baseState.parent===this},this),a.equal(t.children.length,1,"Root node can have only one child")},u.prototype._useArgs=function(e){var t=this._baseState,n=e.filter(function(e){return e instanceof this.constructor},this);e=e.filter(function(e){return!(e instanceof this.constructor)},this),0!==n.length&&(a(null===t.children),t.children=n,n.forEach(function(e){e._baseState.parent=this},this)),0!==e.length&&(a(null===t.args),t.args=e,t.reverseArgs=e.map(function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach(function(n){n==(0|n)&&(n|=0);var r=e[n];t[r]=n}),t}))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach(function(e){u.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}}),o.forEach(function(e){u.prototype[e]=function(){var t=this._baseState,n=Array.prototype.slice.call(arguments);return a(null===t.tag),t.tag=e,this._useArgs(n),this}}),u.prototype.use=function(e){a(e);var t=this._baseState;return a(null===t.use),t.use=e,this},u.prototype.optional=function(){return this._baseState.optional=!0,this},u.prototype.def=function(e){var t=this._baseState;return a(null===t.default),t.default=e,t.optional=!0,this},u.prototype.explicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.explicit=e,this},u.prototype.implicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.implicit=e,this},u.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},u.prototype.key=function(e){var t=this._baseState;return a(null===t.key),t.key=e,this},u.prototype.any=function(){return this._baseState.any=!0,this},u.prototype.choice=function(e){var t=this._baseState;return a(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map(function(t){return e[t]})),this},u.prototype.contains=function(e){var t=this._baseState;return a(null===t.use),t.contains=e,this},u.prototype._decode=function(e,t){var n=this._baseState;if(null===n.parent)return e.wrapResult(n.children[0]._decode(e,t));var r,s=n.default,a=!0,o=null;if(null!==n.key&&(o=e.enterKey(n.key)),n.optional){var d=null;if(null!==n.explicit?d=n.explicit:null!==n.implicit?d=n.implicit:null!==n.tag&&(d=n.tag),null!==d||n.any){if(a=this._peekTag(e,d,n.any),e.isError(a))return a}else{var u=e.save();try{null===n.choice?this._decodeGeneric(n.tag,e,t):this._decodeChoice(e,t),a=!0}catch(e){a=!1}e.restore(u)}}if(n.obj&&a&&(r=e.enterObject()),a){if(null!==n.explicit){var c=this._decodeTag(e,n.explicit);if(e.isError(c))return c;e=c}var l=e.offset;if(null===n.use&&null===n.choice){if(n.any)u=e.save();var h=this._decodeTag(e,null!==n.implicit?n.implicit:n.tag,n.any);if(e.isError(h))return h;n.any?s=e.raw(u):e=h}if(t&&t.track&&null!==n.tag&&t.track(e.path(),l,e.length,"tagged"),t&&t.track&&null!==n.tag&&t.track(e.path(),e.offset,e.length,"content"),s=n.any?s:null===n.choice?this._decodeGeneric(n.tag,e,t):this._decodeChoice(e,t),e.isError(s))return s;if(n.any||null!==n.choice||null===n.children||n.children.forEach(function(n){n._decode(e,t)}),n.contains&&("octstr"===n.tag||"bitstr"===n.tag)){var f=new i(s);s=this._getUse(n.contains,e._reporterState.obj)._decode(f,t)}}return n.obj&&a&&(s=e.leaveObject(r)),null===n.key||null===s&&!0!==a?null!==o&&e.exitKey(o):e.leaveKey(o,n.key,s),s},u.prototype._decodeGeneric=function(e,t,n){var r=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,r.args[0],n):/str$/.test(e)?this._decodeStr(t,e,n):"objid"===e&&r.args?this._decodeObjid(t,r.args[0],r.args[1],n):"objid"===e?this._decodeObjid(t,null,null,n):"gentime"===e||"utctime"===e?this._decodeTime(t,e,n):"null_"===e?this._decodeNull(t,n):"bool"===e?this._decodeBool(t,n):"objDesc"===e?this._decodeStr(t,e,n):"int"===e||"enum"===e?this._decodeInt(t,r.args&&r.args[0],n):null!==r.use?this._getUse(r.use,t._reporterState.obj)._decode(t,n):t.error("unknown tag: "+e)},u.prototype._getUse=function(e,t){var n=this._baseState;return n.useDecoder=this._use(e,t),a(null===n.useDecoder._baseState.parent),n.useDecoder=n.useDecoder._baseState.children[0],n.implicit!==n.useDecoder._baseState.implicit&&(n.useDecoder=n.useDecoder.clone(),n.useDecoder._baseState.implicit=n.implicit),n.useDecoder},u.prototype._decodeChoice=function(e,t){var n=this._baseState,r=null,s=!1;return Object.keys(n.choice).some(function(i){var a=e.save(),o=n.choice[i];try{var d=o._decode(e,t);if(e.isError(d))return!1;r={type:i,value:d},s=!0}catch(t){return e.restore(a),!1}return!0},this),s?r:e.error("Choice not matched")},u.prototype._createEncoderBuffer=function(e){return new s(e,this.reporter)},u.prototype._encode=function(e,t,n){var r=this._baseState;if(null===r.default||r.default!==e){var s=this._encodeValue(e,t,n);if(void 0!==s&&!this._skipDefault(s,t,n))return s}},u.prototype._encodeValue=function(e,t,n){var s=this._baseState;if(null===s.parent)return s.children[0]._encode(e,t||new r);var i=null;if(this.reporter=t,s.optional&&void 0===e){if(null===s.default)return;e=s.default}var a=null,o=!1;if(s.any)i=this._createEncoderBuffer(e);else if(s.choice)i=this._encodeChoice(e,t);else if(s.contains)a=this._getUse(s.contains,n)._encode(e,t),o=!0;else if(s.children)a=s.children.map(function(n){if("null_"===n._baseState.tag)return n._encode(null,t,e);if(null===n._baseState.key)return t.error("Child should have a key");var r=t.enterKey(n._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var s=n._encode(e[n._baseState.key],t,e);return t.leaveKey(r),s},this).filter(function(e){return e}),a=this._createEncoderBuffer(a);else if("seqof"===s.tag||"setof"===s.tag){if(!s.args||1!==s.args.length)return t.error("Too many args for : "+s.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var d=this.clone();d._baseState.implicit=null,a=this._createEncoderBuffer(e.map(function(n){var r=this._baseState;return this._getUse(r.args[0],e)._encode(n,t)},d))}else null!==s.use?i=this._getUse(s.use,n)._encode(e,t):(a=this._encodePrimitive(s.tag,e),o=!0);if(!s.any&&null===s.choice){var u=null!==s.implicit?s.implicit:s.tag,c=null===s.implicit?"universal":"context";null===u?null===s.use&&t.error("Tag could be omitted only for .use()"):null===s.use&&(i=this._encodeComposite(u,o,c,a))}return null!==s.explicit&&(i=this._encodeComposite(s.explicit,!1,"context",i)),i},u.prototype._encodeChoice=function(e,t){var n=this._baseState,r=n.choice[e.type];return r||a(!1,e.type+" not found in "+JSON.stringify(Object.keys(n.choice))),r._encode(e.value,t)},u.prototype._encodePrimitive=function(e,t){var n=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&n.args)return this._encodeObjid(t,n.reverseArgs[0],n.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,n.args&&n.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},u.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},u.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},"./node_modules/asn1.js/lib/asn1/base/reporter.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/reporter.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js");function s(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function i(e,t){this.path=e,this.rethrow(t)}t.Reporter=s,s.prototype.isError=function(e){return e instanceof i},s.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},s.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},s.prototype.enterKey=function(e){return this._reporterState.path.push(e)},s.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},s.prototype.leaveKey=function(e,t,n){var r=this._reporterState;this.exitKey(e),null!==r.obj&&(r.obj[t]=n)},s.prototype.path=function(){return this._reporterState.path.join("/")},s.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},s.prototype.leaveObject=function(e){var t=this._reporterState,n=t.obj;return t.obj=e,n},s.prototype.error=function(e){var t,n=this._reporterState,r=e instanceof i;if(t=r?e:new i(n.path.map(function(e){return"["+JSON.stringify(e)+"]"}).join(""),e.message||e,e.stack),!n.options.partial)throw t;return r||n.errors.push(t),t},s.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},r(i,Error),i.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,i),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},"./node_modules/asn1.js/lib/asn1/constants/der.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/der.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../constants */"./node_modules/asn1.js/lib/asn1/constants/index.js");t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=r._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=r._reverse(t.tag)},"./node_modules/asn1.js/lib/asn1/constants/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/index.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){var r=t;r._reverse=function(e){var t={};return Object.keys(e).forEach(function(n){(0|n)==n&&(n|=0);var r=e[n];t[r]=n}),t},r.der=n(/*! ./der */"./node_modules/asn1.js/lib/asn1/constants/der.js")},"./node_modules/asn1.js/lib/asn1/decoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/der.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ../../asn1 */"./node_modules/asn1.js/lib/asn1.js"),i=s.base,a=s.bignum,o=s.constants.der;function d(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new u,this.tree._init(e.body)}function u(e){i.Node.call(this,"der",e)}function c(e,t){var n=e.readUInt8(t);if(e.isError(n))return n;var r=o.tagClass[n>>6],s=0==(32&n);if(31==(31&n)){var i=n;for(n=0;128==(128&i);){if(i=e.readUInt8(t),e.isError(i))return i;n<<=7,n|=127&i}}else n&=31;return{cls:r,primitive:s,tag:n,tagStr:o.tag[n]}}function l(e,t,n){var r=e.readUInt8(n);if(e.isError(r))return r;if(!t&&128===r)return null;if(0==(128&r))return r;var s=127&r;if(s>4)return e.error("length octect is too long");r=0;for(var i=0;i<s;i++){r<<=8;var a=e.readUInt8(n);if(e.isError(a))return a;r|=a}return r}e.exports=d,d.prototype.decode=function(e,t){return e instanceof i.DecoderBuffer||(e=new i.DecoderBuffer(e,t)),this.tree._decode(e,t)},r(u,i.Node),u.prototype._peekTag=function(e,t,n){if(e.isEmpty())return!1;var r=e.save(),s=c(e,'Failed to peek tag: "'+t+'"');return e.isError(s)?s:(e.restore(r),s.tag===t||s.tagStr===t||s.tagStr+"of"===t||n)},u.prototype._decodeTag=function(e,t,n){var r=c(e,'Failed to decode tag of "'+t+'"');if(e.isError(r))return r;var s=l(e,r.primitive,'Failed to get length of "'+t+'"');if(e.isError(s))return s;if(!n&&r.tag!==t&&r.tagStr!==t&&r.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(r.primitive||null!==s)return e.skip(s,'Failed to match body of: "'+t+'"');var i=e.save(),a=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(a)?a:(s=e.offset-i.offset,e.restore(i),e.skip(s,'Failed to match body of: "'+t+'"'))},u.prototype._skipUntilEnd=function(e,t){for(;;){var n=c(e,t);if(e.isError(n))return n;var r,s=l(e,n.primitive,t);if(e.isError(s))return s;if(r=n.primitive||null!==s?e.skip(s):this._skipUntilEnd(e,t),e.isError(r))return r;if("end"===n.tagStr)break}},u.prototype._decodeList=function(e,t,n,r){for(var s=[];!e.isEmpty();){var i=this._peekTag(e,"end");if(e.isError(i))return i;var a=n.decode(e,"der",r);if(e.isError(a)&&i)break;s.push(a)}return s},u.prototype._decodeStr=function(e,t){if("bitstr"===t){var n=e.readUInt8();return e.isError(n)?n:{unused:n,data:e.raw()}}if("bmpstr"===t){var r=e.raw();if(r.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var s="",i=0;i<r.length/2;i++)s+=String.fromCharCode(r.readUInt16BE(2*i));return s}if("numstr"===t){var a=e.raw().toString("ascii");return this._isNumstr(a)?a:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var o=e.raw().toString("ascii");return this._isPrintstr(o)?o:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},u.prototype._decodeObjid=function(e,t,n){for(var r,s=[],i=0;!e.isEmpty();){var a=e.readUInt8();i<<=7,i|=127&a,0==(128&a)&&(s.push(i),i=0)}128&a&&s.push(i);var o=s[0]/40|0,d=s[0]%40;if(r=n?s:[o,d].concat(s.slice(1)),t){var u=t[r.join(" ")];void 0===u&&(u=t[r.join(".")]),void 0!==u&&(r=u)}return r},u.prototype._decodeTime=function(e,t){var n=e.raw().toString();if("gentime"===t)var r=0|n.slice(0,4),s=0|n.slice(4,6),i=0|n.slice(6,8),a=0|n.slice(8,10),o=0|n.slice(10,12),d=0|n.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");r=0|n.slice(0,2),s=0|n.slice(2,4),i=0|n.slice(4,6),a=0|n.slice(6,8),o=0|n.slice(8,10),d=0|n.slice(10,12);r=r<70?2e3+r:1900+r}return Date.UTC(r,s-1,i,a,o,d,0)},u.prototype._decodeNull=function(e){return null},u.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},u.prototype._decodeInt=function(e,t){var n=e.raw(),r=new a(n);return t&&(r=t[r.toString(10)]||r),r},u.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},"./node_modules/asn1.js/lib/asn1/decoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){var r=t;r.der=n(/*! ./der */"./node_modules/asn1.js/lib/asn1/decoders/der.js"),r.pem=n(/*! ./pem */"./node_modules/asn1.js/lib/asn1/decoders/pem.js")},"./node_modules/asn1.js/lib/asn1/decoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! buffer */"./node_modules/buffer/index.js").Buffer,i=n(/*! ./der */"./node_modules/asn1.js/lib/asn1/decoders/der.js");function a(e){i.call(this,e),this.enc="pem"}r(a,i),e.exports=a,a.prototype.decode=function(e,t){for(var n=e.toString().split(/[\r\n]+/g),r=t.label.toUpperCase(),a=/^-----(BEGIN|END) ([^-]+)-----$/,o=-1,d=-1,u=0;u<n.length;u++){var c=n[u].match(a);if(null!==c&&c[2]===r){if(-1!==o){if("END"!==c[1])break;d=u;break}if("BEGIN"!==c[1])break;o=u}}if(-1===o||-1===d)throw new Error("PEM section not found for: "+r);var l=n.slice(o+1,d).join("");l.replace(/[^a-z0-9\+\/=]+/gi,"");var h=new s(l,"base64");return i.prototype.decode.call(this,h,t)}},"./node_modules/asn1.js/lib/asn1/encoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/der.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! buffer */"./node_modules/buffer/index.js").Buffer,i=n(/*! ../../asn1 */"./node_modules/asn1.js/lib/asn1.js"),a=i.base,o=i.constants.der;function d(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new u,this.tree._init(e.body)}function u(e){a.Node.call(this,"der",e)}function c(e){return e<10?"0"+e:e}e.exports=d,d.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},r(u,a.Node),u.prototype._encodeComposite=function(e,t,n,r){var i,a=function(e,t,n,r){var s;"seqof"===e?e="seq":"setof"===e&&(e="set");if(o.tagByName.hasOwnProperty(e))s=o.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return r.error("Unknown tag: "+e);s=e}if(s>=31)return r.error("Multi-octet tag encoding unsupported");t||(s|=32);return s|=o.tagClassByName[n||"universal"]<<6}(e,t,n,this.reporter);if(r.length<128)return(i=new s(2))[0]=a,i[1]=r.length,this._createEncoderBuffer([i,r]);for(var d=1,u=r.length;u>=256;u>>=8)d++;(i=new s(2+d))[0]=a,i[1]=128|d;u=1+d;for(var c=r.length;c>0;u--,c>>=8)i[u]=255&c;return this._createEncoderBuffer([i,r])},u.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var n=new s(2*e.length),r=0;r<e.length;r++)n.writeUInt16BE(e.charCodeAt(r),2*r);return this._createEncoderBuffer(n)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)?this._createEncoderBuffer(e):"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},u.prototype._encodeObjid=function(e,t,n){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var r=0;r<e.length;r++)e[r]|=0}else if(Array.isArray(e)){e=e.slice();for(r=0;r<e.length;r++)e[r]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!n){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var i=0;for(r=0;r<e.length;r++){var a=e[r];for(i++;a>=128;a>>=7)i++}var o=new s(i),d=o.length-1;for(r=e.length-1;r>=0;r--){a=e[r];for(o[d--]=127&a;(a>>=7)>0;)o[d--]=128|127&a}return this._createEncoderBuffer(o)},u.prototype._encodeTime=function(e,t){var n,r=new Date(e);return"gentime"===t?n=[c(r.getFullYear()),c(r.getUTCMonth()+1),c(r.getUTCDate()),c(r.getUTCHours()),c(r.getUTCMinutes()),c(r.getUTCSeconds()),"Z"].join(""):"utctime"===t?n=[c(r.getFullYear()%100),c(r.getUTCMonth()+1),c(r.getUTCDate()),c(r.getUTCHours()),c(r.getUTCMinutes()),c(r.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(n,"octstr")},u.prototype._encodeNull=function(){return this._createEncoderBuffer("")},u.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!s.isBuffer(e)){var n=e.toArray();!e.sign&&128&n[0]&&n.unshift(0),e=new s(n)}if(s.isBuffer(e)){var r=e.length;0===e.length&&r++;var i=new s(r);return e.copy(i),0===e.length&&(i[0]=0),this._createEncoderBuffer(i)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);r=1;for(var a=e;a>=256;a>>=8)r++;for(a=(i=new Array(r)).length-1;a>=0;a--)i[a]=255&e,e>>=8;return 128&i[0]&&i.unshift(0),this._createEncoderBuffer(new s(i))},u.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},u.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},u.prototype._skipDefault=function(e,t,n){var r,s=this._baseState;if(null===s.default)return!1;var i=e.join();if(void 0===s.defaultBuffer&&(s.defaultBuffer=this._encodeValue(s.default,t,n).join()),i.length!==s.defaultBuffer.length)return!1;for(r=0;r<i.length;r++)if(i[r]!==s.defaultBuffer[r])return!1;return!0}},"./node_modules/asn1.js/lib/asn1/encoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/index.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){var r=t;r.der=n(/*! ./der */"./node_modules/asn1.js/lib/asn1/encoders/der.js"),r.pem=n(/*! ./pem */"./node_modules/asn1.js/lib/asn1/encoders/pem.js")},"./node_modules/asn1.js/lib/asn1/encoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./der */"./node_modules/asn1.js/lib/asn1/encoders/der.js");function i(e){s.call(this,e),this.enc="pem"}r(i,s),e.exports=i,i.prototype.encode=function(e,t){for(var n=s.prototype.encode.call(this,e).toString("base64"),r=["-----BEGIN "+t.label+"-----"],i=0;i<n.length;i+=64)r.push(n.slice(i,i+64));return r.push("-----END "+t.label+"-----"),r.join("\n")}},"./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=u(e),r=n[0],a=n[1],o=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),d=0,c=a>0?r-4:r,l=0;l<c;l+=4)t=s[e.charCodeAt(l)]<<18|s[e.charCodeAt(l+1)]<<12|s[e.charCodeAt(l+2)]<<6|s[e.charCodeAt(l+3)],o[d++]=t>>16&255,o[d++]=t>>8&255,o[d++]=255&t;2===a&&(t=s[e.charCodeAt(l)]<<2|s[e.charCodeAt(l+1)]>>4,o[d++]=255&t);1===a&&(t=s[e.charCodeAt(l)]<<10|s[e.charCodeAt(l+1)]<<4|s[e.charCodeAt(l+2)]>>2,o[d++]=t>>8&255,o[d++]=255&t);return o},t.fromByteArray=function(e){for(var t,n=e.length,s=n%3,i=[],a=0,o=n-s;a<o;a+=16383)i.push(l(e,a,a+16383>o?o:a+16383));1===s?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],s=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,d=a.length;o<d;++o)r[o]=a[o],s[a.charCodeAt(o)]=o;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e){return r[e>>18&63]+r[e>>12&63]+r[e>>6&63]+r[63&e]}function l(e,t,n){for(var r,s=[],i=t;i<n;i+=3)r=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),s.push(c(r));return s.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},"./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){(function(e){!function(e,t){"use strict";function r(e,t){if(!e)throw new Error(t||"Assertion failed")}function s(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}function i(e,t,n){if(i.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(n=t,t=10),this._init(e||0,t||10,n||"be"))}var a;"object"==typeof e?e.exports=i:t.BN=i,i.BN=i,i.wordSize=26;try{a=n(/*! buffer */2).Buffer}catch(e){}function o(e,t,n){for(var r=0,s=Math.min(e.length,n),i=t;i<s;i++){var a=e.charCodeAt(i)-48;r<<=4,r|=a>=49&&a<=54?a-49+10:a>=17&&a<=22?a-17+10:15&a}return r}function d(e,t,n,r){for(var s=0,i=Math.min(e.length,n),a=t;a<i;a++){var o=e.charCodeAt(a)-48;s*=r,s+=o>=49?o-49+10:o>=17?o-17+10:o}return s}i.isBN=function(e){return e instanceof i||null!==e&&"object"==typeof e&&e.constructor.wordSize===i.wordSize&&Array.isArray(e.words)},i.max=function(e,t){return e.cmp(t)>0?e:t},i.min=function(e,t){return e.cmp(t)<0?e:t},i.prototype._init=function(e,t,n){if("number"==typeof e)return this._initNumber(e,t,n);if("object"==typeof e)return this._initArray(e,t,n);"hex"===t&&(t=16),r(t===(0|t)&&t>=2&&t<=36);var s=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&s++,16===t?this._parseHex(e,s):this._parseBase(e,t,s),"-"===e[0]&&(this.negative=1),this.strip(),"le"===n&&this._initArray(this.toArray(),t,n)},i.prototype._initNumber=function(e,t,n){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(r(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),t,n)},i.prototype._initArray=function(e,t,n){if(r("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var s=0;s<this.length;s++)this.words[s]=0;var i,a,o=0;if("be"===n)for(s=e.length-1,i=0;s>=0;s-=3)a=e[s]|e[s-1]<<8|e[s-2]<<16,this.words[i]|=a<<o&67108863,this.words[i+1]=a>>>26-o&67108863,(o+=24)>=26&&(o-=26,i++);else if("le"===n)for(s=0,i=0;s<e.length;s+=3)a=e[s]|e[s+1]<<8|e[s+2]<<16,this.words[i]|=a<<o&67108863,this.words[i+1]=a>>>26-o&67108863,(o+=24)>=26&&(o-=26,i++);return this.strip()},i.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var r,s,i=0;for(n=e.length-6,r=0;n>=t;n-=6)s=o(e,n,n+6),this.words[r]|=s<<i&67108863,this.words[r+1]|=s>>>26-i&4194303,(i+=24)>=26&&(i-=26,r++);n+6!==t&&(s=o(e,t,n+6),this.words[r]|=s<<i&67108863,this.words[r+1]|=s>>>26-i&4194303),this.strip()},i.prototype._parseBase=function(e,t,n){this.words=[0],this.length=1;for(var r=0,s=1;s<=67108863;s*=t)r++;r--,s=s/t|0;for(var i=e.length-n,a=i%r,o=Math.min(i,i-a)+n,u=0,c=n;c<o;c+=r)u=d(e,c,c+r,t),this.imuln(s),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==a){var l=1;for(u=d(e,c,e.length,t),c=0;c<a;c++)l*=t;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},i.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},i.prototype.clone=function(){var e=new i(null);return this.copy(e),e},i.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},i.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},i.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},i.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function h(e,t,n){n.negative=t.negative^e.negative;var r=e.length+t.length|0;n.length=r,r=r-1|0;var s=0|e.words[0],i=0|t.words[0],a=s*i,o=67108863&a,d=a/67108864|0;n.words[0]=o;for(var u=1;u<r;u++){for(var c=d>>>26,l=67108863&d,h=Math.min(u,t.length-1),f=Math.max(0,u-e.length+1);f<=h;f++){var m=u-f|0;c+=(a=(s=0|e.words[m])*(i=0|t.words[f])+l)/67108864|0,l=67108863&a}n.words[u]=0|l,d=0|c}return 0!==d?n.words[u]=0|d:n.length--,n.strip()}i.prototype.toString=function(e,t){var n;if(e=e||10,t=0|t||1,16===e||"hex"===e){n="";for(var s=0,i=0,a=0;a<this.length;a++){var o=this.words[a],d=(16777215&(o<<s|i)).toString(16);n=0!==(i=o>>>24-s&16777215)||a!==this.length-1?u[6-d.length]+d+n:d+n,(s+=2)>=26&&(s-=26,a--)}for(0!==i&&(n=i.toString(16)+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(e===(0|e)&&e>=2&&e<=36){var h=c[e],f=l[e];n="";var m=this.clone();for(m.negative=0;!m.isZero();){var _=m.modn(f).toString(e);n=(m=m.idivn(f)).isZero()?_+n:u[h-_.length]+_+n}for(this.isZero()&&(n="0"+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},i.prototype.toJSON=function(){return this.toString(16)},i.prototype.toBuffer=function(e,t){return r(void 0!==a),this.toArrayLike(a,e,t)},i.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},i.prototype.toArrayLike=function(e,t,n){var s=this.byteLength(),i=n||Math.max(1,s);r(s<=i,"byte array longer than desired length"),r(i>0,"Requested array length <= 0"),this.strip();var a,o,d="le"===t,u=new e(i),c=this.clone();if(d){for(o=0;!c.isZero();o++)a=c.andln(255),c.iushrn(8),u[o]=a;for(;o<i;o++)u[o]=0}else{for(o=0;o<i-s;o++)u[o]=0;for(o=0;!c.isZero();o++)a=c.andln(255),c.iushrn(8),u[i-o-1]=a}return u},Math.clz32?i.prototype._countBits=function(e){return 32-Math.clz32(e)}:i.prototype._countBits=function(e){var t=e,n=0;return t>=4096&&(n+=13,t>>>=13),t>=64&&(n+=7,t>>>=7),t>=8&&(n+=4,t>>>=4),t>=2&&(n+=2,t>>>=2),n+t},i.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,n=0;return 0==(8191&t)&&(n+=13,t>>>=13),0==(127&t)&&(n+=7,t>>>=7),0==(15&t)&&(n+=4,t>>>=4),0==(3&t)&&(n+=2,t>>>=2),0==(1&t)&&n++,n},i.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var n=this._zeroBits(this.words[t]);if(e+=n,26!==n)break}return e},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},i.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return 0!==this.negative},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},i.prototype.ior=function(e){return r(0==(this.negative|e.negative)),this.iuor(e)},i.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},i.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},i.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var n=0;n<t.length;n++)this.words[n]=this.words[n]&e.words[n];return this.length=t.length,this.strip()},i.prototype.iand=function(e){return r(0==(this.negative|e.negative)),this.iuand(e)},i.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},i.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},i.prototype.iuxor=function(e){var t,n;this.length>e.length?(t=this,n=e):(t=e,n=this);for(var r=0;r<n.length;r++)this.words[r]=t.words[r]^n.words[r];if(this!==t)for(;r<t.length;r++)this.words[r]=t.words[r];return this.length=t.length,this.strip()},i.prototype.ixor=function(e){return r(0==(this.negative|e.negative)),this.iuxor(e)},i.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},i.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},i.prototype.inotn=function(e){r("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),n=e%26;this._expand(t),n>0&&t--;for(var s=0;s<t;s++)this.words[s]=67108863&~this.words[s];return n>0&&(this.words[s]=~this.words[s]&67108863>>26-n),this.strip()},i.prototype.notn=function(e){return this.clone().inotn(e)},i.prototype.setn=function(e,t){r("number"==typeof e&&e>=0);var n=e/26|0,s=e%26;return this._expand(n+1),this.words[n]=t?this.words[n]|1<<s:this.words[n]&~(1<<s),this.strip()},i.prototype.iadd=function(e){var t,n,r;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(n=this,r=e):(n=e,r=this);for(var s=0,i=0;i<r.length;i++)t=(0|n.words[i])+(0|r.words[i])+s,this.words[i]=67108863&t,s=t>>>26;for(;0!==s&&i<n.length;i++)t=(0|n.words[i])+s,this.words[i]=67108863&t,s=t>>>26;if(this.length=n.length,0!==s)this.words[this.length]=s,this.length++;else if(n!==this)for(;i<n.length;i++)this.words[i]=n.words[i];return this},i.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},i.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var n,r,s=this.cmp(e);if(0===s)return this.negative=0,this.length=1,this.words[0]=0,this;s>0?(n=this,r=e):(n=e,r=this);for(var i=0,a=0;a<r.length;a++)i=(t=(0|n.words[a])-(0|r.words[a])+i)>>26,this.words[a]=67108863&t;for(;0!==i&&a<n.length;a++)i=(t=(0|n.words[a])+i)>>26,this.words[a]=67108863&t;if(0===i&&a<n.length&&n!==this)for(;a<n.length;a++)this.words[a]=n.words[a];return this.length=Math.max(this.length,a),n!==this&&(this.negative=1),this.strip()},i.prototype.sub=function(e){return this.clone().isub(e)};var f=function(e,t,n){var r,s,i,a=e.words,o=t.words,d=n.words,u=0,c=0|a[0],l=8191&c,h=c>>>13,f=0|a[1],m=8191&f,_=f>>>13,p=0|a[2],y=8191&p,b=p>>>13,g=0|a[3],M=8191&g,v=g>>>13,w=0|a[4],L=8191&w,Y=w>>>13,k=0|a[5],j=8191&k,S=k>>>13,D=0|a[6],T=8191&D,x=D>>>13,A=0|a[7],E=8191&A,H=A>>>13,C=0|a[8],P=8191&C,O=C>>>13,I=0|a[9],z=8191&I,B=I>>>13,R=0|o[0],F=8191&R,q=R>>>13,W=0|o[1],U=8191&W,N=W>>>13,J=0|o[2],G=8191&J,K=J>>>13,V=0|o[3],Q=8191&V,Z=V>>>13,$=0|o[4],X=8191&$,ee=$>>>13,te=0|o[5],ne=8191&te,re=te>>>13,se=0|o[6],ie=8191&se,ae=se>>>13,oe=0|o[7],de=8191&oe,ue=oe>>>13,ce=0|o[8],le=8191&ce,he=ce>>>13,fe=0|o[9],me=8191&fe,_e=fe>>>13;n.negative=e.negative^t.negative,n.length=19;var pe=(u+(r=Math.imul(l,F))|0)+((8191&(s=(s=Math.imul(l,q))+Math.imul(h,F)|0))<<13)|0;u=((i=Math.imul(h,q))+(s>>>13)|0)+(pe>>>26)|0,pe&=67108863,r=Math.imul(m,F),s=(s=Math.imul(m,q))+Math.imul(_,F)|0,i=Math.imul(_,q);var ye=(u+(r=r+Math.imul(l,U)|0)|0)+((8191&(s=(s=s+Math.imul(l,N)|0)+Math.imul(h,U)|0))<<13)|0;u=((i=i+Math.imul(h,N)|0)+(s>>>13)|0)+(ye>>>26)|0,ye&=67108863,r=Math.imul(y,F),s=(s=Math.imul(y,q))+Math.imul(b,F)|0,i=Math.imul(b,q),r=r+Math.imul(m,U)|0,s=(s=s+Math.imul(m,N)|0)+Math.imul(_,U)|0,i=i+Math.imul(_,N)|0;var be=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(s=(s=s+Math.imul(l,K)|0)+Math.imul(h,G)|0))<<13)|0;u=((i=i+Math.imul(h,K)|0)+(s>>>13)|0)+(be>>>26)|0,be&=67108863,r=Math.imul(M,F),s=(s=Math.imul(M,q))+Math.imul(v,F)|0,i=Math.imul(v,q),r=r+Math.imul(y,U)|0,s=(s=s+Math.imul(y,N)|0)+Math.imul(b,U)|0,i=i+Math.imul(b,N)|0,r=r+Math.imul(m,G)|0,s=(s=s+Math.imul(m,K)|0)+Math.imul(_,G)|0,i=i+Math.imul(_,K)|0;var ge=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(s=(s=s+Math.imul(l,Z)|0)+Math.imul(h,Q)|0))<<13)|0;u=((i=i+Math.imul(h,Z)|0)+(s>>>13)|0)+(ge>>>26)|0,ge&=67108863,r=Math.imul(L,F),s=(s=Math.imul(L,q))+Math.imul(Y,F)|0,i=Math.imul(Y,q),r=r+Math.imul(M,U)|0,s=(s=s+Math.imul(M,N)|0)+Math.imul(v,U)|0,i=i+Math.imul(v,N)|0,r=r+Math.imul(y,G)|0,s=(s=s+Math.imul(y,K)|0)+Math.imul(b,G)|0,i=i+Math.imul(b,K)|0,r=r+Math.imul(m,Q)|0,s=(s=s+Math.imul(m,Z)|0)+Math.imul(_,Q)|0,i=i+Math.imul(_,Z)|0;var Me=(u+(r=r+Math.imul(l,X)|0)|0)+((8191&(s=(s=s+Math.imul(l,ee)|0)+Math.imul(h,X)|0))<<13)|0;u=((i=i+Math.imul(h,ee)|0)+(s>>>13)|0)+(Me>>>26)|0,Me&=67108863,r=Math.imul(j,F),s=(s=Math.imul(j,q))+Math.imul(S,F)|0,i=Math.imul(S,q),r=r+Math.imul(L,U)|0,s=(s=s+Math.imul(L,N)|0)+Math.imul(Y,U)|0,i=i+Math.imul(Y,N)|0,r=r+Math.imul(M,G)|0,s=(s=s+Math.imul(M,K)|0)+Math.imul(v,G)|0,i=i+Math.imul(v,K)|0,r=r+Math.imul(y,Q)|0,s=(s=s+Math.imul(y,Z)|0)+Math.imul(b,Q)|0,i=i+Math.imul(b,Z)|0,r=r+Math.imul(m,X)|0,s=(s=s+Math.imul(m,ee)|0)+Math.imul(_,X)|0,i=i+Math.imul(_,ee)|0;var ve=(u+(r=r+Math.imul(l,ne)|0)|0)+((8191&(s=(s=s+Math.imul(l,re)|0)+Math.imul(h,ne)|0))<<13)|0;u=((i=i+Math.imul(h,re)|0)+(s>>>13)|0)+(ve>>>26)|0,ve&=67108863,r=Math.imul(T,F),s=(s=Math.imul(T,q))+Math.imul(x,F)|0,i=Math.imul(x,q),r=r+Math.imul(j,U)|0,s=(s=s+Math.imul(j,N)|0)+Math.imul(S,U)|0,i=i+Math.imul(S,N)|0,r=r+Math.imul(L,G)|0,s=(s=s+Math.imul(L,K)|0)+Math.imul(Y,G)|0,i=i+Math.imul(Y,K)|0,r=r+Math.imul(M,Q)|0,s=(s=s+Math.imul(M,Z)|0)+Math.imul(v,Q)|0,i=i+Math.imul(v,Z)|0,r=r+Math.imul(y,X)|0,s=(s=s+Math.imul(y,ee)|0)+Math.imul(b,X)|0,i=i+Math.imul(b,ee)|0,r=r+Math.imul(m,ne)|0,s=(s=s+Math.imul(m,re)|0)+Math.imul(_,ne)|0,i=i+Math.imul(_,re)|0;var we=(u+(r=r+Math.imul(l,ie)|0)|0)+((8191&(s=(s=s+Math.imul(l,ae)|0)+Math.imul(h,ie)|0))<<13)|0;u=((i=i+Math.imul(h,ae)|0)+(s>>>13)|0)+(we>>>26)|0,we&=67108863,r=Math.imul(E,F),s=(s=Math.imul(E,q))+Math.imul(H,F)|0,i=Math.imul(H,q),r=r+Math.imul(T,U)|0,s=(s=s+Math.imul(T,N)|0)+Math.imul(x,U)|0,i=i+Math.imul(x,N)|0,r=r+Math.imul(j,G)|0,s=(s=s+Math.imul(j,K)|0)+Math.imul(S,G)|0,i=i+Math.imul(S,K)|0,r=r+Math.imul(L,Q)|0,s=(s=s+Math.imul(L,Z)|0)+Math.imul(Y,Q)|0,i=i+Math.imul(Y,Z)|0,r=r+Math.imul(M,X)|0,s=(s=s+Math.imul(M,ee)|0)+Math.imul(v,X)|0,i=i+Math.imul(v,ee)|0,r=r+Math.imul(y,ne)|0,s=(s=s+Math.imul(y,re)|0)+Math.imul(b,ne)|0,i=i+Math.imul(b,re)|0,r=r+Math.imul(m,ie)|0,s=(s=s+Math.imul(m,ae)|0)+Math.imul(_,ie)|0,i=i+Math.imul(_,ae)|0;var Le=(u+(r=r+Math.imul(l,de)|0)|0)+((8191&(s=(s=s+Math.imul(l,ue)|0)+Math.imul(h,de)|0))<<13)|0;u=((i=i+Math.imul(h,ue)|0)+(s>>>13)|0)+(Le>>>26)|0,Le&=67108863,r=Math.imul(P,F),s=(s=Math.imul(P,q))+Math.imul(O,F)|0,i=Math.imul(O,q),r=r+Math.imul(E,U)|0,s=(s=s+Math.imul(E,N)|0)+Math.imul(H,U)|0,i=i+Math.imul(H,N)|0,r=r+Math.imul(T,G)|0,s=(s=s+Math.imul(T,K)|0)+Math.imul(x,G)|0,i=i+Math.imul(x,K)|0,r=r+Math.imul(j,Q)|0,s=(s=s+Math.imul(j,Z)|0)+Math.imul(S,Q)|0,i=i+Math.imul(S,Z)|0,r=r+Math.imul(L,X)|0,s=(s=s+Math.imul(L,ee)|0)+Math.imul(Y,X)|0,i=i+Math.imul(Y,ee)|0,r=r+Math.imul(M,ne)|0,s=(s=s+Math.imul(M,re)|0)+Math.imul(v,ne)|0,i=i+Math.imul(v,re)|0,r=r+Math.imul(y,ie)|0,s=(s=s+Math.imul(y,ae)|0)+Math.imul(b,ie)|0,i=i+Math.imul(b,ae)|0,r=r+Math.imul(m,de)|0,s=(s=s+Math.imul(m,ue)|0)+Math.imul(_,de)|0,i=i+Math.imul(_,ue)|0;var Ye=(u+(r=r+Math.imul(l,le)|0)|0)+((8191&(s=(s=s+Math.imul(l,he)|0)+Math.imul(h,le)|0))<<13)|0;u=((i=i+Math.imul(h,he)|0)+(s>>>13)|0)+(Ye>>>26)|0,Ye&=67108863,r=Math.imul(z,F),s=(s=Math.imul(z,q))+Math.imul(B,F)|0,i=Math.imul(B,q),r=r+Math.imul(P,U)|0,s=(s=s+Math.imul(P,N)|0)+Math.imul(O,U)|0,i=i+Math.imul(O,N)|0,r=r+Math.imul(E,G)|0,s=(s=s+Math.imul(E,K)|0)+Math.imul(H,G)|0,i=i+Math.imul(H,K)|0,r=r+Math.imul(T,Q)|0,s=(s=s+Math.imul(T,Z)|0)+Math.imul(x,Q)|0,i=i+Math.imul(x,Z)|0,r=r+Math.imul(j,X)|0,s=(s=s+Math.imul(j,ee)|0)+Math.imul(S,X)|0,i=i+Math.imul(S,ee)|0,r=r+Math.imul(L,ne)|0,s=(s=s+Math.imul(L,re)|0)+Math.imul(Y,ne)|0,i=i+Math.imul(Y,re)|0,r=r+Math.imul(M,ie)|0,s=(s=s+Math.imul(M,ae)|0)+Math.imul(v,ie)|0,i=i+Math.imul(v,ae)|0,r=r+Math.imul(y,de)|0,s=(s=s+Math.imul(y,ue)|0)+Math.imul(b,de)|0,i=i+Math.imul(b,ue)|0,r=r+Math.imul(m,le)|0,s=(s=s+Math.imul(m,he)|0)+Math.imul(_,le)|0,i=i+Math.imul(_,he)|0;var ke=(u+(r=r+Math.imul(l,me)|0)|0)+((8191&(s=(s=s+Math.imul(l,_e)|0)+Math.imul(h,me)|0))<<13)|0;u=((i=i+Math.imul(h,_e)|0)+(s>>>13)|0)+(ke>>>26)|0,ke&=67108863,r=Math.imul(z,U),s=(s=Math.imul(z,N))+Math.imul(B,U)|0,i=Math.imul(B,N),r=r+Math.imul(P,G)|0,s=(s=s+Math.imul(P,K)|0)+Math.imul(O,G)|0,i=i+Math.imul(O,K)|0,r=r+Math.imul(E,Q)|0,s=(s=s+Math.imul(E,Z)|0)+Math.imul(H,Q)|0,i=i+Math.imul(H,Z)|0,r=r+Math.imul(T,X)|0,s=(s=s+Math.imul(T,ee)|0)+Math.imul(x,X)|0,i=i+Math.imul(x,ee)|0,r=r+Math.imul(j,ne)|0,s=(s=s+Math.imul(j,re)|0)+Math.imul(S,ne)|0,i=i+Math.imul(S,re)|0,r=r+Math.imul(L,ie)|0,s=(s=s+Math.imul(L,ae)|0)+Math.imul(Y,ie)|0,i=i+Math.imul(Y,ae)|0,r=r+Math.imul(M,de)|0,s=(s=s+Math.imul(M,ue)|0)+Math.imul(v,de)|0,i=i+Math.imul(v,ue)|0,r=r+Math.imul(y,le)|0,s=(s=s+Math.imul(y,he)|0)+Math.imul(b,le)|0,i=i+Math.imul(b,he)|0;var je=(u+(r=r+Math.imul(m,me)|0)|0)+((8191&(s=(s=s+Math.imul(m,_e)|0)+Math.imul(_,me)|0))<<13)|0;u=((i=i+Math.imul(_,_e)|0)+(s>>>13)|0)+(je>>>26)|0,je&=67108863,r=Math.imul(z,G),s=(s=Math.imul(z,K))+Math.imul(B,G)|0,i=Math.imul(B,K),r=r+Math.imul(P,Q)|0,s=(s=s+Math.imul(P,Z)|0)+Math.imul(O,Q)|0,i=i+Math.imul(O,Z)|0,r=r+Math.imul(E,X)|0,s=(s=s+Math.imul(E,ee)|0)+Math.imul(H,X)|0,i=i+Math.imul(H,ee)|0,r=r+Math.imul(T,ne)|0,s=(s=s+Math.imul(T,re)|0)+Math.imul(x,ne)|0,i=i+Math.imul(x,re)|0,r=r+Math.imul(j,ie)|0,s=(s=s+Math.imul(j,ae)|0)+Math.imul(S,ie)|0,i=i+Math.imul(S,ae)|0,r=r+Math.imul(L,de)|0,s=(s=s+Math.imul(L,ue)|0)+Math.imul(Y,de)|0,i=i+Math.imul(Y,ue)|0,r=r+Math.imul(M,le)|0,s=(s=s+Math.imul(M,he)|0)+Math.imul(v,le)|0,i=i+Math.imul(v,he)|0;var Se=(u+(r=r+Math.imul(y,me)|0)|0)+((8191&(s=(s=s+Math.imul(y,_e)|0)+Math.imul(b,me)|0))<<13)|0;u=((i=i+Math.imul(b,_e)|0)+(s>>>13)|0)+(Se>>>26)|0,Se&=67108863,r=Math.imul(z,Q),s=(s=Math.imul(z,Z))+Math.imul(B,Q)|0,i=Math.imul(B,Z),r=r+Math.imul(P,X)|0,s=(s=s+Math.imul(P,ee)|0)+Math.imul(O,X)|0,i=i+Math.imul(O,ee)|0,r=r+Math.imul(E,ne)|0,s=(s=s+Math.imul(E,re)|0)+Math.imul(H,ne)|0,i=i+Math.imul(H,re)|0,r=r+Math.imul(T,ie)|0,s=(s=s+Math.imul(T,ae)|0)+Math.imul(x,ie)|0,i=i+Math.imul(x,ae)|0,r=r+Math.imul(j,de)|0,s=(s=s+Math.imul(j,ue)|0)+Math.imul(S,de)|0,i=i+Math.imul(S,ue)|0,r=r+Math.imul(L,le)|0,s=(s=s+Math.imul(L,he)|0)+Math.imul(Y,le)|0,i=i+Math.imul(Y,he)|0;var De=(u+(r=r+Math.imul(M,me)|0)|0)+((8191&(s=(s=s+Math.imul(M,_e)|0)+Math.imul(v,me)|0))<<13)|0;u=((i=i+Math.imul(v,_e)|0)+(s>>>13)|0)+(De>>>26)|0,De&=67108863,r=Math.imul(z,X),s=(s=Math.imul(z,ee))+Math.imul(B,X)|0,i=Math.imul(B,ee),r=r+Math.imul(P,ne)|0,s=(s=s+Math.imul(P,re)|0)+Math.imul(O,ne)|0,i=i+Math.imul(O,re)|0,r=r+Math.imul(E,ie)|0,s=(s=s+Math.imul(E,ae)|0)+Math.imul(H,ie)|0,i=i+Math.imul(H,ae)|0,r=r+Math.imul(T,de)|0,s=(s=s+Math.imul(T,ue)|0)+Math.imul(x,de)|0,i=i+Math.imul(x,ue)|0,r=r+Math.imul(j,le)|0,s=(s=s+Math.imul(j,he)|0)+Math.imul(S,le)|0,i=i+Math.imul(S,he)|0;var Te=(u+(r=r+Math.imul(L,me)|0)|0)+((8191&(s=(s=s+Math.imul(L,_e)|0)+Math.imul(Y,me)|0))<<13)|0;u=((i=i+Math.imul(Y,_e)|0)+(s>>>13)|0)+(Te>>>26)|0,Te&=67108863,r=Math.imul(z,ne),s=(s=Math.imul(z,re))+Math.imul(B,ne)|0,i=Math.imul(B,re),r=r+Math.imul(P,ie)|0,s=(s=s+Math.imul(P,ae)|0)+Math.imul(O,ie)|0,i=i+Math.imul(O,ae)|0,r=r+Math.imul(E,de)|0,s=(s=s+Math.imul(E,ue)|0)+Math.imul(H,de)|0,i=i+Math.imul(H,ue)|0,r=r+Math.imul(T,le)|0,s=(s=s+Math.imul(T,he)|0)+Math.imul(x,le)|0,i=i+Math.imul(x,he)|0;var xe=(u+(r=r+Math.imul(j,me)|0)|0)+((8191&(s=(s=s+Math.imul(j,_e)|0)+Math.imul(S,me)|0))<<13)|0;u=((i=i+Math.imul(S,_e)|0)+(s>>>13)|0)+(xe>>>26)|0,xe&=67108863,r=Math.imul(z,ie),s=(s=Math.imul(z,ae))+Math.imul(B,ie)|0,i=Math.imul(B,ae),r=r+Math.imul(P,de)|0,s=(s=s+Math.imul(P,ue)|0)+Math.imul(O,de)|0,i=i+Math.imul(O,ue)|0,r=r+Math.imul(E,le)|0,s=(s=s+Math.imul(E,he)|0)+Math.imul(H,le)|0,i=i+Math.imul(H,he)|0;var Ae=(u+(r=r+Math.imul(T,me)|0)|0)+((8191&(s=(s=s+Math.imul(T,_e)|0)+Math.imul(x,me)|0))<<13)|0;u=((i=i+Math.imul(x,_e)|0)+(s>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,r=Math.imul(z,de),s=(s=Math.imul(z,ue))+Math.imul(B,de)|0,i=Math.imul(B,ue),r=r+Math.imul(P,le)|0,s=(s=s+Math.imul(P,he)|0)+Math.imul(O,le)|0,i=i+Math.imul(O,he)|0;var Ee=(u+(r=r+Math.imul(E,me)|0)|0)+((8191&(s=(s=s+Math.imul(E,_e)|0)+Math.imul(H,me)|0))<<13)|0;u=((i=i+Math.imul(H,_e)|0)+(s>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,r=Math.imul(z,le),s=(s=Math.imul(z,he))+Math.imul(B,le)|0,i=Math.imul(B,he);var He=(u+(r=r+Math.imul(P,me)|0)|0)+((8191&(s=(s=s+Math.imul(P,_e)|0)+Math.imul(O,me)|0))<<13)|0;u=((i=i+Math.imul(O,_e)|0)+(s>>>13)|0)+(He>>>26)|0,He&=67108863;var Ce=(u+(r=Math.imul(z,me))|0)+((8191&(s=(s=Math.imul(z,_e))+Math.imul(B,me)|0))<<13)|0;return u=((i=Math.imul(B,_e))+(s>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,d[0]=pe,d[1]=ye,d[2]=be,d[3]=ge,d[4]=Me,d[5]=ve,d[6]=we,d[7]=Le,d[8]=Ye,d[9]=ke,d[10]=je,d[11]=Se,d[12]=De,d[13]=Te,d[14]=xe,d[15]=Ae,d[16]=Ee,d[17]=He,d[18]=Ce,0!==u&&(d[19]=u,n.length++),n};function m(e,t,n){return(new _).mulp(e,t,n)}function _(e,t){this.x=e,this.y=t}Math.imul||(f=h),i.prototype.mulTo=function(e,t){var n=this.length+e.length;return 10===this.length&&10===e.length?f(this,e,t):n<63?h(this,e,t):n<1024?function(e,t,n){n.negative=t.negative^e.negative,n.length=e.length+t.length;for(var r=0,s=0,i=0;i<n.length-1;i++){var a=s;s=0;for(var o=67108863&r,d=Math.min(i,t.length-1),u=Math.max(0,i-e.length+1);u<=d;u++){var c=i-u,l=(0|e.words[c])*(0|t.words[u]),h=67108863&l;o=67108863&(h=h+o|0),s+=(a=(a=a+(l/67108864|0)|0)+(h>>>26)|0)>>>26,a&=67108863}n.words[i]=o,r=a,a=s}return 0!==r?n.words[i]=r:n.length--,n.strip()}(this,e,t):m(this,e,t)},_.prototype.makeRBT=function(e){for(var t=new Array(e),n=i.prototype._countBits(e)-1,r=0;r<e;r++)t[r]=this.revBin(r,n,e);return t},_.prototype.revBin=function(e,t,n){if(0===e||e===n-1)return e;for(var r=0,s=0;s<t;s++)r|=(1&e)<<t-s-1,e>>=1;return r},_.prototype.permute=function(e,t,n,r,s,i){for(var a=0;a<i;a++)r[a]=t[e[a]],s[a]=n[e[a]]},_.prototype.transform=function(e,t,n,r,s,i){this.permute(i,e,t,n,r,s);for(var a=1;a<s;a<<=1)for(var o=a<<1,d=Math.cos(2*Math.PI/o),u=Math.sin(2*Math.PI/o),c=0;c<s;c+=o)for(var l=d,h=u,f=0;f<a;f++){var m=n[c+f],_=r[c+f],p=n[c+f+a],y=r[c+f+a],b=l*p-h*y;y=l*y+h*p,p=b,n[c+f]=m+p,r[c+f]=_+y,n[c+f+a]=m-p,r[c+f+a]=_-y,f!==o&&(b=d*l-u*h,h=d*h+u*l,l=b)}},_.prototype.guessLen13b=function(e,t){var n=1|Math.max(t,e),r=1&n,s=0;for(n=n/2|0;n;n>>>=1)s++;return 1<<s+1+r},_.prototype.conjugate=function(e,t,n){if(!(n<=1))for(var r=0;r<n/2;r++){var s=e[r];e[r]=e[n-r-1],e[n-r-1]=s,s=t[r],t[r]=-t[n-r-1],t[n-r-1]=-s}},_.prototype.normalize13b=function(e,t){for(var n=0,r=0;r<t/2;r++){var s=8192*Math.round(e[2*r+1]/t)+Math.round(e[2*r]/t)+n;e[r]=67108863&s,n=s<67108864?0:s/67108864|0}return e},_.prototype.convert13b=function(e,t,n,s){for(var i=0,a=0;a<t;a++)i+=0|e[a],n[2*a]=8191&i,i>>>=13,n[2*a+1]=8191&i,i>>>=13;for(a=2*t;a<s;++a)n[a]=0;r(0===i),r(0==(-8192&i))},_.prototype.stub=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=0;return t},_.prototype.mulp=function(e,t,n){var r=2*this.guessLen13b(e.length,t.length),s=this.makeRBT(r),i=this.stub(r),a=new Array(r),o=new Array(r),d=new Array(r),u=new Array(r),c=new Array(r),l=new Array(r),h=n.words;h.length=r,this.convert13b(e.words,e.length,a,r),this.convert13b(t.words,t.length,u,r),this.transform(a,i,o,d,r,s),this.transform(u,i,c,l,r,s);for(var f=0;f<r;f++){var m=o[f]*c[f]-d[f]*l[f];d[f]=o[f]*l[f]+d[f]*c[f],o[f]=m}return this.conjugate(o,d,r),this.transform(o,d,h,i,r,s),this.conjugate(h,i,r),this.normalize13b(h,r),n.negative=e.negative^t.negative,n.length=e.length+t.length,n.strip()},i.prototype.mul=function(e){var t=new i(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},i.prototype.mulf=function(e){var t=new i(null);return t.words=new Array(this.length+e.length),m(this,e,t)},i.prototype.imul=function(e){return this.clone().mulTo(e,this)},i.prototype.imuln=function(e){r("number"==typeof e),r(e<67108864);for(var t=0,n=0;n<this.length;n++){var s=(0|this.words[n])*e,i=(67108863&s)+(67108863&t);t>>=26,t+=s/67108864|0,t+=i>>>26,this.words[n]=67108863&i}return 0!==t&&(this.words[n]=t,this.length++),this},i.prototype.muln=function(e){return this.clone().imuln(e)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),n=0;n<t.length;n++){var r=n/26|0,s=n%26;t[n]=(e.words[r]&1<<s)>>>s}return t}(e);if(0===t.length)return new i(1);for(var n=this,r=0;r<t.length&&0===t[r];r++,n=n.sqr());if(++r<t.length)for(var s=n.sqr();r<t.length;r++,s=s.sqr())0!==t[r]&&(n=n.mul(s));return n},i.prototype.iushln=function(e){r("number"==typeof e&&e>=0);var t,n=e%26,s=(e-n)/26,i=67108863>>>26-n<<26-n;if(0!==n){var a=0;for(t=0;t<this.length;t++){var o=this.words[t]&i,d=(0|this.words[t])-o<<n;this.words[t]=d|a,a=o>>>26-n}a&&(this.words[t]=a,this.length++)}if(0!==s){for(t=this.length-1;t>=0;t--)this.words[t+s]=this.words[t];for(t=0;t<s;t++)this.words[t]=0;this.length+=s}return this.strip()},i.prototype.ishln=function(e){return r(0===this.negative),this.iushln(e)},i.prototype.iushrn=function(e,t,n){var s;r("number"==typeof e&&e>=0),s=t?(t-t%26)/26:0;var i=e%26,a=Math.min((e-i)/26,this.length),o=67108863^67108863>>>i<<i,d=n;if(s-=a,s=Math.max(0,s),d){for(var u=0;u<a;u++)d.words[u]=this.words[u];d.length=a}if(0===a);else if(this.length>a)for(this.length-=a,u=0;u<this.length;u++)this.words[u]=this.words[u+a];else this.words[0]=0,this.length=1;var c=0;for(u=this.length-1;u>=0&&(0!==c||u>=s);u--){var l=0|this.words[u];this.words[u]=c<<26-i|l>>>i,c=l&o}return d&&0!==c&&(d.words[d.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},i.prototype.ishrn=function(e,t,n){return r(0===this.negative),this.iushrn(e,t,n)},i.prototype.shln=function(e){return this.clone().ishln(e)},i.prototype.ushln=function(e){return this.clone().iushln(e)},i.prototype.shrn=function(e){return this.clone().ishrn(e)},i.prototype.ushrn=function(e){return this.clone().iushrn(e)},i.prototype.testn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26,s=1<<t;return!(this.length<=n)&&!!(this.words[n]&s)},i.prototype.imaskn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==t&&n++,this.length=Math.min(n,this.length),0!==t){var s=67108863^67108863>>>t<<t;this.words[this.length-1]&=s}return this.strip()},i.prototype.maskn=function(e){return this.clone().imaskn(e)},i.prototype.iaddn=function(e){return r("number"==typeof e),r(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},i.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},i.prototype.isubn=function(e){if(r("number"==typeof e),r(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},i.prototype.addn=function(e){return this.clone().iaddn(e)},i.prototype.subn=function(e){return this.clone().isubn(e)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(e,t,n){var s,i,a=e.length+n;this._expand(a);var o=0;for(s=0;s<e.length;s++){i=(0|this.words[s+n])+o;var d=(0|e.words[s])*t;o=((i-=67108863&d)>>26)-(d/67108864|0),this.words[s+n]=67108863&i}for(;s<this.length-n;s++)o=(i=(0|this.words[s+n])+o)>>26,this.words[s+n]=67108863&i;if(0===o)return this.strip();for(r(-1===o),o=0,s=0;s<this.length;s++)o=(i=-(0|this.words[s])+o)>>26,this.words[s]=67108863&i;return this.negative=1,this.strip()},i.prototype._wordDiv=function(e,t){var n=(this.length,e.length),r=this.clone(),s=e,a=0|s.words[s.length-1];0!==(n=26-this._countBits(a))&&(s=s.ushln(n),r.iushln(n),a=0|s.words[s.length-1]);var o,d=r.length-s.length;if("mod"!==t){(o=new i(null)).length=d+1,o.words=new Array(o.length);for(var u=0;u<o.length;u++)o.words[u]=0}var c=r.clone()._ishlnsubmul(s,1,d);0===c.negative&&(r=c,o&&(o.words[d]=1));for(var l=d-1;l>=0;l--){var h=67108864*(0|r.words[s.length+l])+(0|r.words[s.length+l-1]);for(h=Math.min(h/a|0,67108863),r._ishlnsubmul(s,h,l);0!==r.negative;)h--,r.negative=0,r._ishlnsubmul(s,1,l),r.isZero()||(r.negative^=1);o&&(o.words[l]=h)}return o&&o.strip(),r.strip(),"div"!==t&&0!==n&&r.iushrn(n),{div:o||null,mod:r}},i.prototype.divmod=function(e,t,n){return r(!e.isZero()),this.isZero()?{div:new i(0),mod:new i(0)}:0!==this.negative&&0===e.negative?(o=this.neg().divmod(e,t),"mod"!==t&&(s=o.div.neg()),"div"!==t&&(a=o.mod.neg(),n&&0!==a.negative&&a.iadd(e)),{div:s,mod:a}):0===this.negative&&0!==e.negative?(o=this.divmod(e.neg(),t),"mod"!==t&&(s=o.div.neg()),{div:s,mod:o.mod}):0!=(this.negative&e.negative)?(o=this.neg().divmod(e.neg(),t),"div"!==t&&(a=o.mod.neg(),n&&0!==a.negative&&a.isub(e)),{div:o.div,mod:a}):e.length>this.length||this.cmp(e)<0?{div:new i(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new i(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new i(this.modn(e.words[0]))}:this._wordDiv(e,t);var s,a,o},i.prototype.div=function(e){return this.divmod(e,"div",!1).div},i.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},i.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},i.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var n=0!==t.div.negative?t.mod.isub(e):t.mod,r=e.ushrn(1),s=e.andln(1),i=n.cmp(r);return i<0||1===s&&0===i?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},i.prototype.modn=function(e){r(e<=67108863);for(var t=(1<<26)%e,n=0,s=this.length-1;s>=0;s--)n=(t*n+(0|this.words[s]))%e;return n},i.prototype.idivn=function(e){r(e<=67108863);for(var t=0,n=this.length-1;n>=0;n--){var s=(0|this.words[n])+67108864*t;this.words[n]=s/e|0,t=s%e}return this.strip()},i.prototype.divn=function(e){return this.clone().idivn(e)},i.prototype.egcd=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var s=new i(1),a=new i(0),o=new i(0),d=new i(1),u=0;t.isEven()&&n.isEven();)t.iushrn(1),n.iushrn(1),++u;for(var c=n.clone(),l=t.clone();!t.isZero();){for(var h=0,f=1;0==(t.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(t.iushrn(h);h-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(l)),s.iushrn(1),a.iushrn(1);for(var m=0,_=1;0==(n.words[0]&_)&&m<26;++m,_<<=1);if(m>0)for(n.iushrn(m);m-- >0;)(o.isOdd()||d.isOdd())&&(o.iadd(c),d.isub(l)),o.iushrn(1),d.iushrn(1);t.cmp(n)>=0?(t.isub(n),s.isub(o),a.isub(d)):(n.isub(t),o.isub(s),d.isub(a))}return{a:o,b:d,gcd:n.iushln(u)}},i.prototype._invmp=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var s,a=new i(1),o=new i(0),d=n.clone();t.cmpn(1)>0&&n.cmpn(1)>0;){for(var u=0,c=1;0==(t.words[0]&c)&&u<26;++u,c<<=1);if(u>0)for(t.iushrn(u);u-- >0;)a.isOdd()&&a.iadd(d),a.iushrn(1);for(var l=0,h=1;0==(n.words[0]&h)&&l<26;++l,h<<=1);if(l>0)for(n.iushrn(l);l-- >0;)o.isOdd()&&o.iadd(d),o.iushrn(1);t.cmp(n)>=0?(t.isub(n),a.isub(o)):(n.isub(t),o.isub(a))}return(s=0===t.cmpn(1)?a:o).cmpn(0)<0&&s.iadd(e),s},i.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),n=e.clone();t.negative=0,n.negative=0;for(var r=0;t.isEven()&&n.isEven();r++)t.iushrn(1),n.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;n.isEven();)n.iushrn(1);var s=t.cmp(n);if(s<0){var i=t;t=n,n=i}else if(0===s||0===n.cmpn(1))break;t.isub(n)}return n.iushln(r)},i.prototype.invm=function(e){return this.egcd(e).a.umod(e)},i.prototype.isEven=function(){return 0==(1&this.words[0])},i.prototype.isOdd=function(){return 1==(1&this.words[0])},i.prototype.andln=function(e){return this.words[0]&e},i.prototype.bincn=function(e){r("number"==typeof e);var t=e%26,n=(e-t)/26,s=1<<t;if(this.length<=n)return this._expand(n+1),this.words[n]|=s,this;for(var i=s,a=n;0!==i&&a<this.length;a++){var o=0|this.words[a];i=(o+=i)>>>26,o&=67108863,this.words[a]=o}return 0!==i&&(this.words[a]=i,this.length++),this},i.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},i.prototype.cmpn=function(e){var t,n=e<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this.strip(),this.length>1)t=1;else{n&&(e=-e),r(e<=67108863,"Number is too big");var s=0|this.words[0];t=s===e?0:s<e?-1:1}return 0!==this.negative?0|-t:t},i.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},i.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,n=this.length-1;n>=0;n--){var r=0|this.words[n],s=0|e.words[n];if(r!==s){r<s?t=-1:r>s&&(t=1);break}}return t},i.prototype.gtn=function(e){return 1===this.cmpn(e)},i.prototype.gt=function(e){return 1===this.cmp(e)},i.prototype.gten=function(e){return this.cmpn(e)>=0},i.prototype.gte=function(e){return this.cmp(e)>=0},i.prototype.ltn=function(e){return-1===this.cmpn(e)},i.prototype.lt=function(e){return-1===this.cmp(e)},i.prototype.lten=function(e){return this.cmpn(e)<=0},i.prototype.lte=function(e){return this.cmp(e)<=0},i.prototype.eqn=function(e){return 0===this.cmpn(e)},i.prototype.eq=function(e){return 0===this.cmp(e)},i.red=function(e){return new w(e)},i.prototype.toRed=function(e){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},i.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(e){return this.red=e,this},i.prototype.forceRed=function(e){return r(!this.red,"Already a number in reduction context"),this._forceRed(e)},i.prototype.redAdd=function(e){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},i.prototype.redIAdd=function(e){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},i.prototype.redSub=function(e){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},i.prototype.redISub=function(e){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},i.prototype.redShl=function(e){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},i.prototype.redMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},i.prototype.redIMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},i.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(e){return r(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var p={k256:null,p224:null,p192:null,p25519:null};function y(e,t){this.name=e,this.p=new i(t,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function g(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function M(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function v(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function w(e){if("string"==typeof e){var t=i._prime(e);this.m=t.p,this.prime=t}else r(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function L(e){w.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var e=new i(null);return e.words=new Array(Math.ceil(this.n/13)),e},y.prototype.ireduce=function(e){var t,n=e;do{this.split(n,this.tmp),t=(n=(n=this.imulK(n)).iadd(this.tmp)).bitLength()}while(t>this.n);var r=t<this.n?-1:n.ucmp(this.p);return 0===r?(n.words[0]=0,n.length=1):r>0?n.isub(this.p):n.strip(),n},y.prototype.split=function(e,t){e.iushrn(this.n,0,t)},y.prototype.imulK=function(e){return e.imul(this.k)},s(b,y),b.prototype.split=function(e,t){for(var n=Math.min(e.length,9),r=0;r<n;r++)t.words[r]=e.words[r];if(t.length=n,e.length<=9)return e.words[0]=0,void(e.length=1);var s=e.words[9];for(t.words[t.length++]=4194303&s,r=10;r<e.length;r++){var i=0|e.words[r];e.words[r-10]=(4194303&i)<<4|s>>>22,s=i}s>>>=22,e.words[r-10]=s,0===s&&e.length>10?e.length-=10:e.length-=9},b.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,n=0;n<e.length;n++){var r=0|e.words[n];t+=977*r,e.words[n]=67108863&t,t=64*r+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},s(g,y),s(M,y),s(v,y),v.prototype.imulK=function(e){for(var t=0,n=0;n<e.length;n++){var r=19*(0|e.words[n])+t,s=67108863&r;r>>>=26,e.words[n]=s,t=r}return 0!==t&&(e.words[e.length++]=t),e},i._prime=function(e){if(p[e])return p[e];var t;if("k256"===e)t=new b;else if("p224"===e)t=new g;else if("p192"===e)t=new M;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new v}return p[e]=t,t},w.prototype._verify1=function(e){r(0===e.negative,"red works only with positives"),r(e.red,"red works only with red numbers")},w.prototype._verify2=function(e,t){r(0==(e.negative|t.negative),"red works only with positives"),r(e.red&&e.red===t.red,"red works only with red numbers")},w.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},w.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},w.prototype.add=function(e,t){this._verify2(e,t);var n=e.add(t);return n.cmp(this.m)>=0&&n.isub(this.m),n._forceRed(this)},w.prototype.iadd=function(e,t){this._verify2(e,t);var n=e.iadd(t);return n.cmp(this.m)>=0&&n.isub(this.m),n},w.prototype.sub=function(e,t){this._verify2(e,t);var n=e.sub(t);return n.cmpn(0)<0&&n.iadd(this.m),n._forceRed(this)},w.prototype.isub=function(e,t){this._verify2(e,t);var n=e.isub(t);return n.cmpn(0)<0&&n.iadd(this.m),n},w.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},w.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},w.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},w.prototype.isqr=function(e){return this.imul(e,e.clone())},w.prototype.sqr=function(e){return this.mul(e,e)},w.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(r(t%2==1),3===t){var n=this.m.add(new i(1)).iushrn(2);return this.pow(e,n)}for(var s=this.m.subn(1),a=0;!s.isZero()&&0===s.andln(1);)a++,s.iushrn(1);r(!s.isZero());var o=new i(1).toRed(this),d=o.redNeg(),u=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new i(2*c*c).toRed(this);0!==this.pow(c,u).cmp(d);)c.redIAdd(d);for(var l=this.pow(c,s),h=this.pow(e,s.addn(1).iushrn(1)),f=this.pow(e,s),m=a;0!==f.cmp(o);){for(var _=f,p=0;0!==_.cmp(o);p++)_=_.redSqr();r(p<m);var y=this.pow(l,new i(1).iushln(m-p-1));h=h.redMul(y),l=y.redSqr(),f=f.redMul(l),m=p}return h},w.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},w.prototype.pow=function(e,t){if(t.isZero())return new i(1).toRed(this);if(0===t.cmpn(1))return e.clone();var n=new Array(16);n[0]=new i(1).toRed(this),n[1]=e;for(var r=2;r<n.length;r++)n[r]=this.mul(n[r-1],e);var s=n[0],a=0,o=0,d=t.bitLength()%26;for(0===d&&(d=26),r=t.length-1;r>=0;r--){for(var u=t.words[r],c=d-1;c>=0;c--){var l=u>>c&1;s!==n[0]&&(s=this.sqr(s)),0!==l||0!==a?(a<<=1,a|=l,(4===++o||0===r&&0===c)&&(s=this.mul(s,n[a]),o=0,a=0)):o=0}d=26}return s},w.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},w.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},i.mont=function(e){return new L(e)},s(L,w),L.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},L.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},L.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var n=e.imul(t),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),s=n.isub(r).iushrn(this.shift),i=s;return s.cmp(this.m)>=0?i=s.isub(this.m):s.cmpn(0)<0&&(i=s.iadd(this.m)),i._forceRed(this)},L.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new i(0)._forceRed(this);var n=e.mul(t),r=n.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),s=n.isub(r).iushrn(this.shift),a=s;return s.cmp(this.m)>=0?a=s.isub(this.m):s.cmpn(0)<0&&(a=s.iadd(this.m)),a._forceRed(this)},L.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(void 0===e||e,this)}).call(this,n(/*! ./../../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/brorand/index.js":
/*!***************************************!*\
  !*** ./node_modules/brorand/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r;function s(e){this.rand=e}if(e.exports=function(e){return r||(r=new s(null)),r.generate(e)},e.exports.Rand=s,s.prototype.generate=function(e){return this._rand(e)},s.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),n=0;n<t.length;n++)t[n]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?s.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?s.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(s.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var i=n(/*! crypto */3);if("function"!=typeof i.randomBytes)throw new Error("Not supported");s.prototype._rand=function(e){return i.randomBytes(e)}}catch(e){}},"./node_modules/browserify-aes/aes.js":
/*!********************************************!*\
  !*** ./node_modules/browserify-aes/aes.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer;function s(e){r.isBuffer(e)||(e=r.from(e));for(var t=e.length/4|0,n=new Array(t),s=0;s<t;s++)n[s]=e.readUInt32BE(4*s);return n}function i(e){for(;0<e.length;e++)e[0]=0}function a(e,t,n,r,s){for(var i,a,o,d,u=n[0],c=n[1],l=n[2],h=n[3],f=e[0]^t[0],m=e[1]^t[1],_=e[2]^t[2],p=e[3]^t[3],y=4,b=1;b<s;b++)i=u[f>>>24]^c[m>>>16&255]^l[_>>>8&255]^h[255&p]^t[y++],a=u[m>>>24]^c[_>>>16&255]^l[p>>>8&255]^h[255&f]^t[y++],o=u[_>>>24]^c[p>>>16&255]^l[f>>>8&255]^h[255&m]^t[y++],d=u[p>>>24]^c[f>>>16&255]^l[m>>>8&255]^h[255&_]^t[y++],f=i,m=a,_=o,p=d;return i=(r[f>>>24]<<24|r[m>>>16&255]<<16|r[_>>>8&255]<<8|r[255&p])^t[y++],a=(r[m>>>24]<<24|r[_>>>16&255]<<16|r[p>>>8&255]<<8|r[255&f])^t[y++],o=(r[_>>>24]<<24|r[p>>>16&255]<<16|r[f>>>8&255]<<8|r[255&m])^t[y++],d=(r[p>>>24]<<24|r[f>>>16&255]<<16|r[m>>>8&255]<<8|r[255&_])^t[y++],[i>>>=0,a>>>=0,o>>>=0,d>>>=0]}var o=[0,1,2,4,8,16,32,64,128,27,54],d=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var n=[],r=[],s=[[],[],[],[]],i=[[],[],[],[]],a=0,o=0,d=0;d<256;++d){var u=o^o<<1^o<<2^o<<3^o<<4;u=u>>>8^255&u^99,n[a]=u,r[u]=a;var c=e[a],l=e[c],h=e[l],f=257*e[u]^16843008*u;s[0][a]=f<<24|f>>>8,s[1][a]=f<<16|f>>>16,s[2][a]=f<<8|f>>>24,s[3][a]=f,f=16843009*h^65537*l^257*c^16843008*a,i[0][u]=f<<24|f>>>8,i[1][u]=f<<16|f>>>16,i[2][u]=f<<8|f>>>24,i[3][u]=f,0===a?a=o=1:(a=c^e[e[e[h^c]]],o^=e[e[o]])}return{SBOX:n,INV_SBOX:r,SUB_MIX:s,INV_SUB_MIX:i}}();function u(e){this._key=s(e),this._reset()}u.blockSize=16,u.keySize=32,u.prototype.blockSize=u.blockSize,u.prototype.keySize=u.keySize,u.prototype._reset=function(){for(var e=this._key,t=e.length,n=t+6,r=4*(n+1),s=[],i=0;i<t;i++)s[i]=e[i];for(i=t;i<r;i++){var a=s[i-1];i%t==0?(a=a<<8|a>>>24,a=d.SBOX[a>>>24]<<24|d.SBOX[a>>>16&255]<<16|d.SBOX[a>>>8&255]<<8|d.SBOX[255&a],a^=o[i/t|0]<<24):t>6&&i%t==4&&(a=d.SBOX[a>>>24]<<24|d.SBOX[a>>>16&255]<<16|d.SBOX[a>>>8&255]<<8|d.SBOX[255&a]),s[i]=s[i-t]^a}for(var u=[],c=0;c<r;c++){var l=r-c,h=s[l-(c%4?0:4)];u[c]=c<4||l<=4?h:d.INV_SUB_MIX[0][d.SBOX[h>>>24]]^d.INV_SUB_MIX[1][d.SBOX[h>>>16&255]]^d.INV_SUB_MIX[2][d.SBOX[h>>>8&255]]^d.INV_SUB_MIX[3][d.SBOX[255&h]]}this._nRounds=n,this._keySchedule=s,this._invKeySchedule=u},u.prototype.encryptBlockRaw=function(e){return a(e=s(e),this._keySchedule,d.SUB_MIX,d.SBOX,this._nRounds)},u.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),n=r.allocUnsafe(16);return n.writeUInt32BE(t[0],0),n.writeUInt32BE(t[1],4),n.writeUInt32BE(t[2],8),n.writeUInt32BE(t[3],12),n},u.prototype.decryptBlock=function(e){var t=(e=s(e))[1];e[1]=e[3],e[3]=t;var n=a(e,this._invKeySchedule,d.INV_SUB_MIX,d.INV_SBOX,this._nRounds),i=r.allocUnsafe(16);return i.writeUInt32BE(n[0],0),i.writeUInt32BE(n[3],4),i.writeUInt32BE(n[2],8),i.writeUInt32BE(n[1],12),i},u.prototype.scrub=function(){i(this._keySchedule),i(this._invKeySchedule),i(this._key)},e.exports.AES=u},"./node_modules/browserify-aes/authCipher.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/authCipher.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./aes */"./node_modules/browserify-aes/aes.js"),s=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,i=n(/*! cipher-base */"./node_modules/cipher-base/index.js"),a=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),o=n(/*! ./ghash */"./node_modules/browserify-aes/ghash.js"),d=n(/*! buffer-xor */"./node_modules/buffer-xor/index.js"),u=n(/*! ./incr32 */"./node_modules/browserify-aes/incr32.js");function c(e,t,n,a){i.call(this);var d=s.alloc(4,0);this._cipher=new r.AES(t);var c=this._cipher.encryptBlock(d);this._ghash=new o(c),n=function(e,t,n){if(12===t.length)return e._finID=s.concat([t,s.from([0,0,0,1])]),s.concat([t,s.from([0,0,0,2])]);var r=new o(n),i=t.length,a=i%16;r.update(t),a&&(a=16-a,r.update(s.alloc(a,0))),r.update(s.alloc(8,0));var d=8*i,c=s.alloc(8);c.writeUIntBE(d,0,8),r.update(c),e._finID=r.state;var l=s.from(e._finID);return u(l),l}(this,n,c),this._prev=s.from(n),this._cache=s.allocUnsafe(0),this._secCache=s.allocUnsafe(0),this._decrypt=a,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}a(c,i),c.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=s.alloc(t,0),this._ghash.update(t))}this._called=!0;var n=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(n),this._len+=e.length,n},c.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=d(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var n=0;e.length!==t.length&&n++;for(var r=Math.min(e.length,t.length),s=0;s<r;++s)n+=e[s]^t[s];return n}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},c.prototype.getAuthTag=function(){if(this._decrypt||!s.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},c.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},c.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=c},"./node_modules/browserify-aes/browser.js":
/*!************************************************!*\
  !*** ./node_modules/browserify-aes/browser.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./encrypter */"./node_modules/browserify-aes/encrypter.js"),s=n(/*! ./decrypter */"./node_modules/browserify-aes/decrypter.js"),i=n(/*! ./modes/list.json */"./node_modules/browserify-aes/modes/list.json");t.createCipher=t.Cipher=r.createCipher,t.createCipheriv=t.Cipheriv=r.createCipheriv,t.createDecipher=t.Decipher=s.createDecipher,t.createDecipheriv=t.Decipheriv=s.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(i)}},"./node_modules/browserify-aes/decrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/decrypter.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./authCipher */"./node_modules/browserify-aes/authCipher.js"),s=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,i=n(/*! ./modes */"./node_modules/browserify-aes/modes/index.js"),a=n(/*! ./streamCipher */"./node_modules/browserify-aes/streamCipher.js"),o=n(/*! cipher-base */"./node_modules/cipher-base/index.js"),d=n(/*! ./aes */"./node_modules/browserify-aes/aes.js"),u=n(/*! evp_bytestokey */"./node_modules/evp_bytestokey/index.js");function c(e,t,n){o.call(this),this._cache=new l,this._last=void 0,this._cipher=new d.AES(t),this._prev=s.from(n),this._mode=e,this._autopadding=!0}function l(){this.cache=s.allocUnsafe(0)}function h(e,t,n){var o=i[e.toLowerCase()];if(!o)throw new TypeError("invalid suite type");if("string"==typeof n&&(n=s.from(n)),"GCM"!==o.mode&&n.length!==o.iv)throw new TypeError("invalid iv length "+n.length);if("string"==typeof t&&(t=s.from(t)),t.length!==o.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===o.type?new a(o.module,t,n,!0):"auth"===o.type?new r(o.module,t,n,!0):new c(o.module,t,n)}n(/*! inherits */"./node_modules/inherits/inherits_browser.js")(c,o),c.prototype._update=function(e){var t,n;this._cache.add(e);for(var r=[];t=this._cache.get(this._autopadding);)n=this._mode.decrypt(this,t),r.push(n);return s.concat(r)},c.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var n=-1;for(;++n<t;)if(e[n+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},l.prototype.add=function(e){this.cache=s.concat([this.cache,e])},l.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},l.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var n=i[e.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var r=u(t,!1,n.key,n.iv);return h(e,r.key,r.iv)},t.createDecipheriv=h},"./node_modules/browserify-aes/encrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/encrypter.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./modes */"./node_modules/browserify-aes/modes/index.js"),s=n(/*! ./authCipher */"./node_modules/browserify-aes/authCipher.js"),i=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,a=n(/*! ./streamCipher */"./node_modules/browserify-aes/streamCipher.js"),o=n(/*! cipher-base */"./node_modules/cipher-base/index.js"),d=n(/*! ./aes */"./node_modules/browserify-aes/aes.js"),u=n(/*! evp_bytestokey */"./node_modules/evp_bytestokey/index.js");function c(e,t,n){o.call(this),this._cache=new h,this._cipher=new d.AES(t),this._prev=i.from(n),this._mode=e,this._autopadding=!0}n(/*! inherits */"./node_modules/inherits/inherits_browser.js")(c,o),c.prototype._update=function(e){var t,n;this._cache.add(e);for(var r=[];t=this._cache.get();)n=this._mode.encrypt(this,t),r.push(n);return i.concat(r)};var l=i.alloc(16,16);function h(){this.cache=i.allocUnsafe(0)}function f(e,t,n){var o=r[e.toLowerCase()];if(!o)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=i.from(t)),t.length!==o.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof n&&(n=i.from(n)),"GCM"!==o.mode&&n.length!==o.iv)throw new TypeError("invalid iv length "+n.length);return"stream"===o.type?new a(o.module,t,n):"auth"===o.type?new s(o.module,t,n):new c(o.module,t,n)}c.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(l))throw this._cipher.scrub(),new Error("data not multiple of block length")},c.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},h.prototype.add=function(e){this.cache=i.concat([this.cache,e])},h.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},h.prototype.flush=function(){for(var e=16-this.cache.length,t=i.allocUnsafe(e),n=-1;++n<e;)t.writeUInt8(e,n);return i.concat([this.cache,t])},t.createCipheriv=f,t.createCipher=function(e,t){var n=r[e.toLowerCase()];if(!n)throw new TypeError("invalid suite type");var s=u(t,!1,n.key,n.iv);return f(e,s.key,s.iv)}},"./node_modules/browserify-aes/ghash.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-aes/ghash.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=r.alloc(16,0);function i(e){var t=r.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function a(e){this.h=e,this.state=r.alloc(16,0),this.cache=r.allocUnsafe(0)}a.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},a.prototype._multiply=function(){for(var e,t,n=function(e){return[e.readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)]}(this.h),r=[0,0,0,0],s=-1;++s<128;){for(0!=(this.state[~~(s/8)]&1<<7-s%8)&&(r[0]^=n[0],r[1]^=n[1],r[2]^=n[2],r[3]^=n[3]),t=0!=(1&n[3]),e=3;e>0;e--)n[e]=n[e]>>>1|(1&n[e-1])<<31;n[0]=n[0]>>>1,t&&(n[0]=n[0]^225<<24)}this.state=i(r)},a.prototype.update=function(e){var t;for(this.cache=r.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},a.prototype.final=function(e,t){return this.cache.length&&this.ghash(r.concat([this.cache,s],16)),this.ghash(i([0,e,0,t])),this.state},e.exports=a},"./node_modules/browserify-aes/incr32.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-aes/incr32.js ***!
  \***********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){for(var t,n=e.length;n--;){if(255!==(t=e.readUInt8(n))){t++,e.writeUInt8(t,n);break}e.writeUInt8(0,n)}}},"./node_modules/browserify-aes/modes/cbc.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cbc.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! buffer-xor */"./node_modules/buffer-xor/index.js");t.encrypt=function(e,t){var n=r(t,e._prev);return e._prev=e._cipher.encryptBlock(n),e._prev},t.decrypt=function(e,t){var n=e._prev;e._prev=t;var s=e._cipher.decryptBlock(t);return r(s,n)}},"./node_modules/browserify-aes/modes/cfb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=n(/*! buffer-xor */"./node_modules/buffer-xor/index.js");function i(e,t,n){var i=t.length,a=s(t,e._cache);return e._cache=e._cache.slice(i),e._prev=r.concat([e._prev,n?t:a]),a}t.encrypt=function(e,t,n){for(var s,a=r.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=r.allocUnsafe(0)),!(e._cache.length<=t.length)){a=r.concat([a,i(e,t,n)]);break}s=e._cache.length,a=r.concat([a,i(e,t.slice(0,s),n)]),t=t.slice(s)}return a}},"./node_modules/browserify-aes/modes/cfb1.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb1.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer;function s(e,t,n){for(var r,s,a,o=-1,d=0;++o<8;)r=e._cipher.encryptBlock(e._prev),s=t&1<<7-o?128:0,d+=(128&(a=r[0]^s))>>o%8,e._prev=i(e._prev,n?s:a);return d}function i(e,t){var n=e.length,s=-1,i=r.allocUnsafe(e.length);for(e=r.concat([e,r.from([t])]);++s<n;)i[s]=e[s]<<1|e[s+1]>>7;return i}t.encrypt=function(e,t,n){for(var i=t.length,a=r.allocUnsafe(i),o=-1;++o<i;)a[o]=s(e,t[o],n);return a}},"./node_modules/browserify-aes/modes/cfb8.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb8.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer;function s(e,t,n){var s=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=r.concat([e._prev.slice(1),r.from([n?t:s])]),s}t.encrypt=function(e,t,n){for(var i=t.length,a=r.allocUnsafe(i),o=-1;++o<i;)a[o]=s(e,t[o],n);return a}},"./node_modules/browserify-aes/modes/ctr.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ctr.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! buffer-xor */"./node_modules/buffer-xor/index.js"),s=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,i=n(/*! ../incr32 */"./node_modules/browserify-aes/incr32.js");function a(e){var t=e._cipher.encryptBlockRaw(e._prev);return i(e._prev),t}t.encrypt=function(e,t){var n=Math.ceil(t.length/16),i=e._cache.length;e._cache=s.concat([e._cache,s.allocUnsafe(16*n)]);for(var o=0;o<n;o++){var d=a(e),u=i+16*o;e._cache.writeUInt32BE(d[0],u+0),e._cache.writeUInt32BE(d[1],u+4),e._cache.writeUInt32BE(d[2],u+8),e._cache.writeUInt32BE(d[3],u+12)}var c=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),r(t,c)}},"./node_modules/browserify-aes/modes/ecb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ecb.js ***!
  \**************************************************/
/*! no static exports found */function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},"./node_modules/browserify-aes/modes/index.js":
/*!****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/index.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var r={ECB:n(/*! ./ecb */"./node_modules/browserify-aes/modes/ecb.js"),CBC:n(/*! ./cbc */"./node_modules/browserify-aes/modes/cbc.js"),CFB:n(/*! ./cfb */"./node_modules/browserify-aes/modes/cfb.js"),CFB8:n(/*! ./cfb8 */"./node_modules/browserify-aes/modes/cfb8.js"),CFB1:n(/*! ./cfb1 */"./node_modules/browserify-aes/modes/cfb1.js"),OFB:n(/*! ./ofb */"./node_modules/browserify-aes/modes/ofb.js"),CTR:n(/*! ./ctr */"./node_modules/browserify-aes/modes/ctr.js"),GCM:n(/*! ./ctr */"./node_modules/browserify-aes/modes/ctr.js")},s=n(/*! ./list.json */"./node_modules/browserify-aes/modes/list.json");for(var i in s)s[i].module=r[s[i].mode];e.exports=s},"./node_modules/browserify-aes/modes/list.json":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/list.json ***!
  \*****************************************************/
/*! exports provided: aes-128-ecb, aes-192-ecb, aes-256-ecb, aes-128-cbc, aes-192-cbc, aes-256-cbc, aes128, aes192, aes256, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-cfb8, aes-192-cfb8, aes-256-cfb8, aes-128-cfb1, aes-192-cfb1, aes-256-cfb1, aes-128-ofb, aes-192-ofb, aes-256-ofb, aes-128-ctr, aes-192-ctr, aes-256-ctr, aes-128-gcm, aes-192-gcm, aes-256-gcm, default */function(e){e.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},"./node_modules/browserify-aes/modes/ofb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ofb.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){(function(e){var r=n(/*! buffer-xor */"./node_modules/buffer-xor/index.js");function s(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,n){for(;t._cache.length<n.length;)t._cache=e.concat([t._cache,s(t)]);var i=t._cache.slice(0,n.length);return t._cache=t._cache.slice(n.length),r(n,i)}}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/browserify-aes/streamCipher.js":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/streamCipher.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./aes */"./node_modules/browserify-aes/aes.js"),s=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,i=n(/*! cipher-base */"./node_modules/cipher-base/index.js");function a(e,t,n,a){i.call(this),this._cipher=new r.AES(t),this._prev=s.from(n),this._cache=s.allocUnsafe(0),this._secCache=s.allocUnsafe(0),this._decrypt=a,this._mode=e}n(/*! inherits */"./node_modules/inherits/inherits_browser.js")(a,i),a.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},a.prototype._final=function(){this._cipher.scrub()},e.exports=a},"./node_modules/browserify-cipher/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-cipher/browser.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! browserify-des */"./node_modules/browserify-des/index.js"),s=n(/*! browserify-aes/browser */"./node_modules/browserify-aes/browser.js"),i=n(/*! browserify-aes/modes */"./node_modules/browserify-aes/modes/index.js"),a=n(/*! browserify-des/modes */"./node_modules/browserify-des/modes.js"),o=n(/*! evp_bytestokey */"./node_modules/evp_bytestokey/index.js");function d(e,t,n){if(e=e.toLowerCase(),i[e])return s.createCipheriv(e,t,n);if(a[e])return new r({key:t,iv:n,mode:e});throw new TypeError("invalid suite type")}function u(e,t,n){if(e=e.toLowerCase(),i[e])return s.createDecipheriv(e,t,n);if(a[e])return new r({key:t,iv:n,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var n,r;if(e=e.toLowerCase(),i[e])n=i[e].key,r=i[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");n=8*a[e].key,r=a[e].iv}var s=o(t,!1,n,r);return d(e,s.key,s.iv)},t.createCipheriv=t.Cipheriv=d,t.createDecipher=t.Decipher=function(e,t){var n,r;if(e=e.toLowerCase(),i[e])n=i[e].key,r=i[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");n=8*a[e].key,r=a[e].iv}var s=o(t,!1,n,r);return u(e,s.key,s.iv)},t.createDecipheriv=t.Decipheriv=u,t.listCiphers=t.getCiphers=function(){return Object.keys(a).concat(s.getCiphers())}},"./node_modules/browserify-des/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! cipher-base */"./node_modules/cipher-base/index.js"),s=n(/*! des.js */"./node_modules/des.js/lib/des.js"),i=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),a={"des-ede3-cbc":s.CBC.instantiate(s.EDE),"des-ede3":s.EDE,"des-ede-cbc":s.CBC.instantiate(s.EDE),"des-ede":s.EDE,"des-cbc":s.CBC.instantiate(s.DES),"des-ecb":s.DES};function o(e){r.call(this);var n,s=e.mode.toLowerCase(),i=a[s];n=e.decrypt?"decrypt":"encrypt";var o=e.key;"des-ede"!==s&&"des-ede-cbc"!==s||(o=t.concat([o,o.slice(0,8)]));var d=e.iv;this._des=i.create({key:o,iv:d,type:n})}a.des=a["des-cbc"],a.des3=a["des-ede3-cbc"],e.exports=o,i(o,r),o.prototype._update=function(e){return new t(this._des.update(e))},o.prototype._final=function(){return new t(this._des.final())}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/browserify-des/modes.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/modes.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},"./node_modules/browserify-rsa/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-rsa/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! randombytes */"./node_modules/randombytes/browser.js");function i(e,n){var s=function(e){var t=a(e);return{blinder:t.toRed(r.mont(e.modulus)).redPow(new r(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(n),i=n.modulus.byteLength(),o=(r.mont(n.modulus),new r(e).mul(s.blinder).umod(n.modulus)),d=o.toRed(r.mont(n.prime1)),u=o.toRed(r.mont(n.prime2)),c=n.coefficient,l=n.prime1,h=n.prime2,f=d.redPow(n.exponent1),m=u.redPow(n.exponent2);f=f.fromRed(),m=m.fromRed();var _=f.isub(m).imul(c).umod(l);return _.imul(h),m.iadd(_),new t(m.imul(s.unblinder).umod(n.modulus).toArray(!1,i))}function a(e){for(var t=e.modulus.byteLength(),n=new r(s(t));n.cmp(e.modulus)>=0||!n.umod(e.prime1)||!n.umod(e.prime2);)n=new r(s(t));return n}e.exports=i,i.getr=a}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/browserify-sign/algos.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-sign/algos.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./browser/algorithms.json */"./node_modules/browserify-sign/browser/algorithms.json")},"./node_modules/browserify-sign/browser/algorithms.json":
/*!**************************************************************!*\
  !*** ./node_modules/browserify-sign/browser/algorithms.json ***!
  \**************************************************************/
/*! exports provided: sha224WithRSAEncryption, RSA-SHA224, sha256WithRSAEncryption, RSA-SHA256, sha384WithRSAEncryption, RSA-SHA384, sha512WithRSAEncryption, RSA-SHA512, RSA-SHA1, ecdsa-with-SHA1, sha256, sha224, sha384, sha512, DSA-SHA, DSA-SHA1, DSA, DSA-WITH-SHA224, DSA-SHA224, DSA-WITH-SHA256, DSA-SHA256, DSA-WITH-SHA384, DSA-SHA384, DSA-WITH-SHA512, DSA-SHA512, DSA-RIPEMD160, ripemd160WithRSA, RSA-RIPEMD160, md5WithRSAEncryption, RSA-MD5, default */function(e){e.exports={sha224WithRSAEncryption:{sign:"rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},"RSA-SHA224":{sign:"ecdsa/rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},sha256WithRSAEncryption:{sign:"rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},"RSA-SHA256":{sign:"ecdsa/rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},sha384WithRSAEncryption:{sign:"rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},"RSA-SHA384":{sign:"ecdsa/rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},sha512WithRSAEncryption:{sign:"rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA512":{sign:"ecdsa/rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA1":{sign:"rsa",hash:"sha1",id:"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{sign:"ecdsa",hash:"sha1",id:""},sha256:{sign:"ecdsa",hash:"sha256",id:""},sha224:{sign:"ecdsa",hash:"sha224",id:""},sha384:{sign:"ecdsa",hash:"sha384",id:""},sha512:{sign:"ecdsa",hash:"sha512",id:""},"DSA-SHA":{sign:"dsa",hash:"sha1",id:""},"DSA-SHA1":{sign:"dsa",hash:"sha1",id:""},DSA:{sign:"dsa",hash:"sha1",id:""},"DSA-WITH-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-WITH-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-WITH-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-WITH-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-RIPEMD160":{sign:"dsa",hash:"rmd160",id:""},ripemd160WithRSA:{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},"RSA-RIPEMD160":{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},md5WithRSAEncryption:{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"},"RSA-MD5":{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"}}},"./node_modules/browserify-sign/browser/curves.json":
/*!**********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/curves.json ***!
  \**********************************************************/
/*! exports provided: 1.3.132.0.10, 1.3.132.0.33, 1.2.840.10045.3.1.1, 1.2.840.10045.3.1.7, 1.3.132.0.34, 1.3.132.0.35, default */function(e){e.exports={"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}},"./node_modules/browserify-sign/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/index.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! create-hash */"./node_modules/create-hash/browser.js"),s=n(/*! stream */"./node_modules/stream-browserify/index.js"),i=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),a=n(/*! ./sign */"./node_modules/browserify-sign/browser/sign.js"),o=n(/*! ./verify */"./node_modules/browserify-sign/browser/verify.js"),d=n(/*! ./algorithms.json */"./node_modules/browserify-sign/browser/algorithms.json");function u(e){s.Writable.call(this);var t=d[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=r(t.hash),this._tag=t.id,this._signType=t.sign}function c(e){s.Writable.call(this);var t=d[e];if(!t)throw new Error("Unknown message digest");this._hash=r(t.hash),this._tag=t.id,this._signType=t.sign}function l(e){return new u(e)}function h(e){return new c(e)}Object.keys(d).forEach(function(e){d[e].id=new t(d[e].id,"hex"),d[e.toLowerCase()]=d[e]}),i(u,s.Writable),u.prototype._write=function(e,t,n){this._hash.update(e),n()},u.prototype.update=function(e,n){return"string"==typeof e&&(e=new t(e,n)),this._hash.update(e),this},u.prototype.sign=function(e,t){this.end();var n=this._hash.digest(),r=a(n,e,this._hashType,this._signType,this._tag);return t?r.toString(t):r},i(c,s.Writable),c.prototype._write=function(e,t,n){this._hash.update(e),n()},c.prototype.update=function(e,n){return"string"==typeof e&&(e=new t(e,n)),this._hash.update(e),this},c.prototype.verify=function(e,n,r){"string"==typeof n&&(n=new t(n,r)),this.end();var s=this._hash.digest();return o(n,s,e,this._signType,this._tag)},e.exports={Sign:l,Verify:h,createSign:l,createVerify:h}}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/browserify-sign/browser/sign.js":
/*!******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/sign.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! create-hmac */"./node_modules/create-hmac/browser.js"),s=n(/*! browserify-rsa */"./node_modules/browserify-rsa/index.js"),i=n(/*! elliptic */"./node_modules/elliptic/lib/elliptic.js").ec,a=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),o=n(/*! parse-asn1 */"./node_modules/parse-asn1/index.js"),d=n(/*! ./curves.json */"./node_modules/browserify-sign/browser/curves.json");function u(e,n,s,i){if((e=new t(e.toArray())).length<n.byteLength()){var a=new t(n.byteLength()-e.length);a.fill(0),e=t.concat([a,e])}var o=s.length,d=function(e,n){e=(e=c(e,n)).mod(n);var r=new t(e.toArray());if(r.length<n.byteLength()){var s=new t(n.byteLength()-r.length);s.fill(0),r=t.concat([s,r])}return r}(s,n),u=new t(o);u.fill(1);var l=new t(o);return l.fill(0),l=r(i,l).update(u).update(new t([0])).update(e).update(d).digest(),u=r(i,l).update(u).digest(),{k:l=r(i,l).update(u).update(new t([1])).update(e).update(d).digest(),v:u=r(i,l).update(u).digest()}}function c(e,t){var n=new a(e),r=(e.length<<3)-t.bitLength();return r>0&&n.ishrn(r),n}function l(e,n,s){var i,a;do{for(i=new t(0);8*i.length<e.bitLength();)n.v=r(s,n.k).update(n.v).digest(),i=t.concat([i,n.v]);a=c(i,e),n.k=r(s,n.k).update(n.v).update(new t([0])).digest(),n.v=r(s,n.k).update(n.v).digest()}while(-1!==a.cmp(e));return a}function h(e,t,n,r){return e.toRed(a.mont(n)).redPow(t).fromRed().mod(r)}e.exports=function(e,n,r,f,m){var _=o(n);if(_.curve){if("ecdsa"!==f&&"ecdsa/rsa"!==f)throw new Error("wrong private key type");return function(e,n){var r=d[n.curve.join(".")];if(!r)throw new Error("unknown curve "+n.curve.join("."));var s=new i(r).keyFromPrivate(n.privateKey).sign(e);return new t(s.toDER())}(e,_)}if("dsa"===_.type){if("dsa"!==f)throw new Error("wrong private key type");return function(e,n,r){for(var s,i=n.params.priv_key,o=n.params.p,d=n.params.q,f=n.params.g,m=new a(0),_=c(e,d).mod(d),p=!1,y=u(i,d,e,r);!1===p;)s=l(d,y,r),m=h(f,s,o,d),0===(p=s.invm(d).imul(_.add(i.mul(m))).mod(d)).cmpn(0)&&(p=!1,m=new a(0));return function(e,n){e=e.toArray(),n=n.toArray(),128&e[0]&&(e=[0].concat(e)),128&n[0]&&(n=[0].concat(n));var r=[48,e.length+n.length+4,2,e.length];return r=r.concat(e,[2,n.length],n),new t(r)}(m,p)}(e,_,r)}if("rsa"!==f&&"ecdsa/rsa"!==f)throw new Error("wrong private key type");e=t.concat([m,e]);for(var p=_.modulus.byteLength(),y=[0,1];e.length+y.length+1<p;)y.push(255);y.push(0);for(var b=-1;++b<e.length;)y.push(e[b]);return s(y,_)},e.exports.getKey=u,e.exports.makeKey=l}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/browserify-sign/browser/verify.js":
/*!********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/verify.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! elliptic */"./node_modules/elliptic/lib/elliptic.js").ec,i=n(/*! parse-asn1 */"./node_modules/parse-asn1/index.js"),a=n(/*! ./curves.json */"./node_modules/browserify-sign/browser/curves.json");function o(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,n,d,u,c){var l=i(d);if("ec"===l.type){if("ecdsa"!==u&&"ecdsa/rsa"!==u)throw new Error("wrong public key type");return function(e,t,n){var r=a[n.data.algorithm.curve.join(".")];if(!r)throw new Error("unknown curve "+n.data.algorithm.curve.join("."));var i=new s(r),o=n.data.subjectPrivateKey.data;return i.verify(t,e,o)}(e,n,l)}if("dsa"===l.type){if("dsa"!==u)throw new Error("wrong public key type");return function(e,t,n){var s=n.data.p,a=n.data.q,d=n.data.g,u=n.data.pub_key,c=i.signature.decode(e,"der"),l=c.s,h=c.r;o(l,a),o(h,a);var f=r.mont(s),m=l.invm(a);return 0===d.toRed(f).redPow(new r(t).mul(m).mod(a)).fromRed().mul(u.toRed(f).redPow(h.mul(m).mod(a)).fromRed()).mod(s).mod(a).cmp(h)}(e,n,l)}if("rsa"!==u&&"ecdsa/rsa"!==u)throw new Error("wrong public key type");n=t.concat([c,n]);for(var h=l.modulus.byteLength(),f=[1],m=0;n.length+f.length+2<h;)f.push(255),m++;f.push(0);for(var _=-1;++_<n.length;)f.push(n[_]);f=new t(f);var p=r.mont(l.modulus);e=(e=new r(e).toRed(p)).redPow(new r(l.publicExponent)),e=new t(e.fromRed().toArray());var y=m<8?1:0;for(h=Math.min(e.length,f.length),e.length!==f.length&&(y=1),_=-1;++_<h;)y|=e[_]^f[_];return 0===y}}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/buffer-xor/index.js":
/*!******************************************!*\
  !*** ./node_modules/buffer-xor/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){(function(t){e.exports=function(e,n){for(var r=Math.min(e.length,n.length),s=new t(r),i=0;i<r;++i)s[i]=e[i]^n[i];return s}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(/*! base64-js */"./node_modules/base64-js/index.js"),s=n(/*! ieee754 */"./node_modules/ieee754/index.js"),i=n(/*! isarray */"./node_modules/isarray/index.js");function a(){return d.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return d.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=d.prototype:(null===e&&(e=new d(t)),e.length=t),e}function d(e,t,n){if(!(d.TYPED_ARRAY_SUPPORT||this instanceof d))return new d(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);d.TYPED_ARRAY_SUPPORT?(e=t).__proto__=d.prototype:e=h(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!d.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|m(t,n),s=(e=o(e,r)).write(t,n);s!==r&&(e=e.slice(0,s));return e}(e,t,n):function(e,t){if(d.isBuffer(t)){var n=0|f(t.length);return 0===(e=o(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?o(e,0):h(e,t);if("Buffer"===t.type&&i(t.data))return h(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(c(t),e=o(e,t<0?0:0|f(t)),!d.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function h(e,t){var n=t.length<0?0:0|f(t.length);e=o(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function m(e,t){if(d.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return R(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(e).length;default:if(r)return R(e).length;t=(""+t).toLowerCase(),r=!0}}function _(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function p(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=d.from(t,r)),d.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,s);if("number"==typeof t)return t&=255,d.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,s){var i,a=1,o=e.length,d=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,o/=2,d/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(s){var c=-1;for(i=n;i<o;i++)if(u(e,i)===u(t,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===d)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(n+d>o&&(n=o-d),i=n;i>=0;i--){for(var l=!0,h=0;h<d;h++)if(u(e,i+h)!==u(t,h)){l=!1;break}if(l)return i}return-1}function b(e,t,n,r){n=Number(n)||0;var s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var o=parseInt(t.substr(2*a,2),16);if(isNaN(o))return a;e[n+a]=o}return a}function g(e,t,n,r){return q(R(t,e.length-n),e,n,r)}function M(e,t,n,r){return q(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function v(e,t,n,r){return M(e,t,n,r)}function w(e,t,n,r){return q(F(t),e,n,r)}function L(e,t,n,r){return q(function(e,t){for(var n,r,s,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,s=n%256,i.push(s),i.push(r);return i}(t,e.length-n),e,n,r)}function Y(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function k(e,t,n){n=Math.min(e.length,n);for(var r=[],s=t;s<n;){var i,a,o,d,u=e[s],c=null,l=u>239?4:u>223?3:u>191?2:1;if(s+l<=n)switch(l){case 1:u<128&&(c=u);break;case 2:128==(192&(i=e[s+1]))&&(d=(31&u)<<6|63&i)>127&&(c=d);break;case 3:i=e[s+1],a=e[s+2],128==(192&i)&&128==(192&a)&&(d=(15&u)<<12|(63&i)<<6|63&a)>2047&&(d<55296||d>57343)&&(c=d);break;case 4:i=e[s+1],a=e[s+2],o=e[s+3],128==(192&i)&&128==(192&a)&&128==(192&o)&&(d=(15&u)<<18|(63&i)<<12|(63&a)<<6|63&o)>65535&&d<1114112&&(c=d)}null===c?(c=65533,l=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),s+=l}return function(e){var t=e.length;if(t<=j)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=j));return n}(r)}t.Buffer=d,t.SlowBuffer=function(e){+e!=e&&(e=0);return d.alloc(+e)},t.INSPECT_MAX_BYTES=50,d.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),d.poolSize=8192,d._augment=function(e){return e.__proto__=d.prototype,e},d.from=function(e,t,n){return u(null,e,t,n)},d.TYPED_ARRAY_SUPPORT&&(d.prototype.__proto__=Uint8Array.prototype,d.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&d[Symbol.species]===d&&Object.defineProperty(d,Symbol.species,{value:null,configurable:!0})),d.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?o(e,t):void 0!==n?"string"==typeof r?o(e,t).fill(n,r):o(e,t).fill(n):o(e,t)}(null,e,t,n)},d.allocUnsafe=function(e){return l(null,e)},d.allocUnsafeSlow=function(e){return l(null,e)},d.isBuffer=function(e){return!(null==e||!e._isBuffer)},d.compare=function(e,t){if(!d.isBuffer(e)||!d.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,s=0,i=Math.min(n,r);s<i;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},d.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},d.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return d.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=d.allocUnsafe(t),s=0;for(n=0;n<e.length;++n){var a=e[n];if(!d.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,s),s+=a.length}return r},d.byteLength=m,d.prototype._isBuffer=!0,d.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)_(this,t,t+1);return this},d.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)_(this,t,t+3),_(this,t+1,t+2);return this},d.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)_(this,t,t+7),_(this,t+1,t+6),_(this,t+2,t+5),_(this,t+3,t+4);return this},d.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?k(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return k(this,t,n);case"ascii":return S(this,t,n);case"latin1":case"binary":return D(this,t,n);case"base64":return Y(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},d.prototype.equals=function(e){if(!d.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===d.compare(this,e)},d.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},d.prototype.compare=function(e,t,n,r,s){if(!d.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,s>>>=0,this===e)return 0;for(var i=s-r,a=n-t,o=Math.min(i,a),u=this.slice(r,s),c=e.slice(t,n),l=0;l<o;++l)if(u[l]!==c[l]){i=u[l],a=c[l];break}return i<a?-1:a<i?1:0},d.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},d.prototype.indexOf=function(e,t,n){return p(this,e,t,n,!0)},d.prototype.lastIndexOf=function(e,t,n){return p(this,e,t,n,!1)},d.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return g(this,e,t,n);case"ascii":return M(this,e,t,n);case"latin1":case"binary":return v(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},d.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var j=4096;function S(e,t,n){var r="";n=Math.min(e.length,n);for(var s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function D(e,t,n){var r="";n=Math.min(e.length,n);for(var s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function T(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var s="",i=t;i<n;++i)s+=B(e[i]);return s}function x(e,t,n){for(var r=e.slice(t,n),s="",i=0;i<r.length;i+=2)s+=String.fromCharCode(r[i]+256*r[i+1]);return s}function A(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function E(e,t,n,r,s,i){if(!d.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function H(e,t,n,r){t<0&&(t=65535+t+1);for(var s=0,i=Math.min(e.length-n,2);s<i;++s)e[n+s]=(t&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function C(e,t,n,r){t<0&&(t=4294967295+t+1);for(var s=0,i=Math.min(e.length-n,4);s<i;++s)e[n+s]=t>>>8*(r?s:3-s)&255}function P(e,t,n,r,s,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function O(e,t,n,r,i){return i||P(e,0,n,4),s.write(e,t,n,r,23,4),n+4}function I(e,t,n,r,i){return i||P(e,0,n,8),s.write(e,t,n,r,52,8),n+8}d.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),d.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=d.prototype;else{var s=t-e;n=new d(s,void 0);for(var i=0;i<s;++i)n[i]=this[i+e]}return n},d.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],s=1,i=0;++i<t&&(s*=256);)r+=this[e+i]*s;return r},d.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e+--t],s=1;t>0&&(s*=256);)r+=this[e+--t]*s;return r},d.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},d.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},d.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},d.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},d.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},d.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=this[e],s=1,i=0;++i<t&&(s*=256);)r+=this[e+i]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*t)),r},d.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var r=t,s=1,i=this[e+--r];r>0&&(s*=256);)i+=this[e+--r]*s;return i>=(s*=128)&&(i-=Math.pow(2,8*t)),i},d.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},d.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},d.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},d.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},d.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},d.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),s.read(this,e,!0,23,4)},d.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),s.read(this,e,!1,23,4)},d.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),s.read(this,e,!0,52,8)},d.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),s.read(this,e,!1,52,8)},d.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||E(this,e,t,n,Math.pow(2,8*n)-1,0);var s=1,i=0;for(this[t]=255&e;++i<n&&(s*=256);)this[t+i]=e/s&255;return t+n},d.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||E(this,e,t,n,Math.pow(2,8*n)-1,0);var s=n-1,i=1;for(this[t+s]=255&e;--s>=0&&(i*=256);)this[t+s]=e/i&255;return t+n},d.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,1,255,0),d.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},d.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,2,65535,0),d.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):H(this,e,t,!0),t+2},d.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,2,65535,0),d.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):H(this,e,t,!1),t+2},d.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,4,4294967295,0),d.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):C(this,e,t,!0),t+4},d.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,4,4294967295,0),d.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},d.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var s=Math.pow(2,8*n-1);E(this,e,t,n,s-1,-s)}var i=0,a=1,o=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===o&&0!==this[t+i-1]&&(o=1),this[t+i]=(e/a>>0)-o&255;return t+n},d.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var s=Math.pow(2,8*n-1);E(this,e,t,n,s-1,-s)}var i=n-1,a=1,o=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===o&&0!==this[t+i+1]&&(o=1),this[t+i]=(e/a>>0)-o&255;return t+n},d.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,1,127,-128),d.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},d.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,2,32767,-32768),d.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):H(this,e,t,!0),t+2},d.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,2,32767,-32768),d.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):H(this,e,t,!1),t+2},d.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,4,2147483647,-2147483648),d.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):C(this,e,t,!0),t+4},d.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||E(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),d.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},d.prototype.writeFloatLE=function(e,t,n){return O(this,e,t,!0,n)},d.prototype.writeFloatBE=function(e,t,n){return O(this,e,t,!1,n)},d.prototype.writeDoubleLE=function(e,t,n){return I(this,e,t,!0,n)},d.prototype.writeDoubleBE=function(e,t,n){return I(this,e,t,!1,n)},d.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var s,i=r-n;if(this===e&&n<t&&t<r)for(s=i-1;s>=0;--s)e[s+t]=this[s+n];else if(i<1e3||!d.TYPED_ARRAY_SUPPORT)for(s=0;s<i;++s)e[s+t]=this[s+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},d.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var s=e.charCodeAt(0);s<256&&(e=s)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!d.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=d.isBuffer(e)?e:R(new d(e,r).toString()),o=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%o]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function R(e,t){var n;t=t||1/0;for(var r=e.length,s=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&i.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function F(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,r){for(var s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/cipher-base/index.js":
/*!*******************************************!*\
  !*** ./node_modules/cipher-base/index.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=n(/*! stream */"./node_modules/stream-browserify/index.js").Transform,i=n(/*! string_decoder */"./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;function a(e){s.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}n(/*! inherits */"./node_modules/inherits/inherits_browser.js")(a,s),a.prototype.update=function(e,t,n){"string"==typeof e&&(e=r.from(e,t));var s=this._update(e);return this.hashMode?this:(n&&(s=this._toString(s,n)),s)},a.prototype.setAutoPadding=function(){},a.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},a.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},a.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},a.prototype._transform=function(e,t,n){var r;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){r=e}finally{n(r)}},a.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},a.prototype._finalOrDigest=function(e){var t=this.__final()||r.alloc(0);return e&&(t=this._toString(t,e,!0)),t},a.prototype._toString=function(e,t,n){if(this._decoder||(this._decoder=new i(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var r=this._decoder.write(e);return n&&(r+=this._decoder.end()),r},e.exports=a},"./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/create-ecdh/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-ecdh/browser.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! elliptic */"./node_modules/elliptic/lib/elliptic.js"),s=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js");e.exports=function(e){return new a(e)};var i={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function a(e){this.curveType=i[e],this.curveType||(this.curveType={name:e}),this.curve=new r.ec(this.curveType.name),this.keys=void 0}function o(e,n,r){Array.isArray(e)||(e=e.toArray());var s=new t(e);if(r&&s.length<r){var i=new t(r-s.length);i.fill(0),s=t.concat([i,s])}return n?s.toString(n):s}i.p224=i.secp224r1,i.p256=i.secp256r1=i.prime256v1,i.p192=i.secp192r1=i.prime192v1,i.p384=i.secp384r1,i.p521=i.secp521r1,a.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},a.prototype.computeSecret=function(e,n,r){return n=n||"utf8",t.isBuffer(e)||(e=new t(e,n)),o(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),r,this.curveType.byteLength)},a.prototype.getPublicKey=function(e,t){var n=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(n[n.length-1]%2?n[0]=7:n[0]=6),o(n,e)},a.prototype.getPrivateKey=function(e){return o(this.keys.getPrivate(),e)},a.prototype.setPublicKey=function(e,n){return n=n||"utf8",t.isBuffer(e)||(e=new t(e,n)),this.keys._importPublic(e),this},a.prototype.setPrivateKey=function(e,n){n=n||"utf8",t.isBuffer(e)||(e=new t(e,n));var r=new s(e);return r=r.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(r),this}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/create-hash/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hash/browser.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! md5.js */"./node_modules/md5.js/index.js"),i=n(/*! ripemd160 */"./node_modules/ripemd160/index.js"),a=n(/*! sha.js */"./node_modules/sha.js/index.js"),o=n(/*! cipher-base */"./node_modules/cipher-base/index.js");function d(e){o.call(this,"digest"),this._hash=e}r(d,o),d.prototype._update=function(e){this._hash.update(e)},d.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new s:"rmd160"===e||"ripemd160"===e?new i:new d(a(e))}},"./node_modules/create-hash/md5.js":
/*!*****************************************!*\
  !*** ./node_modules/create-hash/md5.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! md5.js */"./node_modules/md5.js/index.js");e.exports=function(e){return(new r).update(e).digest()}},"./node_modules/create-hmac/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hmac/browser.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./legacy */"./node_modules/create-hmac/legacy.js"),i=n(/*! cipher-base */"./node_modules/cipher-base/index.js"),a=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,o=n(/*! create-hash/md5 */"./node_modules/create-hash/md5.js"),d=n(/*! ripemd160 */"./node_modules/ripemd160/index.js"),u=n(/*! sha.js */"./node_modules/sha.js/index.js"),c=a.alloc(128);function l(e,t){i.call(this,"digest"),"string"==typeof t&&(t=a.from(t));var n="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>n)?t=("rmd160"===e?new d:u(e)).update(t).digest():t.length<n&&(t=a.concat([t,c],n));for(var r=this._ipad=a.allocUnsafe(n),s=this._opad=a.allocUnsafe(n),o=0;o<n;o++)r[o]=54^t[o],s[o]=92^t[o];this._hash="rmd160"===e?new d:u(e),this._hash.update(r)}r(l,i),l.prototype._update=function(e){this._hash.update(e)},l.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new d:u(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new l("rmd160",t):"md5"===e?new s(o,t):new l(e,t)}},"./node_modules/create-hmac/legacy.js":
/*!********************************************!*\
  !*** ./node_modules/create-hmac/legacy.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,i=n(/*! cipher-base */"./node_modules/cipher-base/index.js"),a=s.alloc(128),o=64;function d(e,t){i.call(this,"digest"),"string"==typeof t&&(t=s.from(t)),this._alg=e,this._key=t,t.length>o?t=e(t):t.length<o&&(t=s.concat([t,a],o));for(var n=this._ipad=s.allocUnsafe(o),r=this._opad=s.allocUnsafe(o),d=0;d<o;d++)n[d]=54^t[d],r[d]=92^t[d];this._hash=[n]}r(d,i),d.prototype._update=function(e){this._hash.push(e)},d.prototype._final=function(){var e=this._alg(s.concat(this._hash));return this._alg(s.concat([this._opad,e]))},e.exports=d},"./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t){var n=function(e){function t(){this.fetch=!1}return t.prototype=e,new t}("undefined"!=typeof self?self:this);(function(e){!function(e){if(!e.fetch){var t={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(t.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(e){return e&&DataView.prototype.isPrototypeOf(e)},s=ArrayBuffer.isView||function(e){return e&&n.indexOf(Object.prototype.toString.call(e))>-1};c.prototype.append=function(e,t){e=o(e),t=d(t);var n=this.map[e];this.map[e]=n?n+","+t:t},c.prototype.delete=function(e){delete this.map[o(e)]},c.prototype.get=function(e){return e=o(e),this.has(e)?this.map[e]:null},c.prototype.has=function(e){return this.map.hasOwnProperty(o(e))},c.prototype.set=function(e,t){this.map[o(e)]=d(t)},c.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},c.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),u(e)},c.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),u(e)},c.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),u(e)},t.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var i=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];p.prototype.clone=function(){return new p(this,{body:this._bodyInit})},_.call(p.prototype),_.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},b.error=function(){var e=new b(null,{status:0,statusText:""});return e.type="error",e};var a=[301,302,303,307,308];b.redirect=function(e,t){if(-1===a.indexOf(t))throw new RangeError("Invalid status code");return new b(null,{status:t,headers:{location:e}})},e.Headers=c,e.Request=p,e.Response=b,e.fetch=function(e,n){return new Promise(function(r,s){var i=new p(e,n),a=new XMLHttpRequest;a.onload=function(){var e={status:a.status,statusText:a.statusText,headers:function(e){var t=new c;return e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(e){var n=e.split(":"),r=n.shift().trim();if(r){var s=n.join(":").trim();t.append(r,s)}}),t}(a.getAllResponseHeaders()||"")};e.url="responseURL"in a?a.responseURL:e.headers.get("X-Request-URL");var t="response"in a?a.response:a.responseText;r(new b(t,e))},a.onerror=function(){s(new TypeError("Network request failed"))},a.ontimeout=function(){s(new TypeError("Network request failed"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&t.blob&&(a.responseType="blob"),i.headers.forEach(function(e,t){a.setRequestHeader(t,e)}),a.send(void 0===i._bodyInit?null:i._bodyInit)})},e.fetch.polyfill=!0}function o(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return"string"!=typeof e&&(e=String(e)),e}function u(e){var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t.iterable&&(n[Symbol.iterator]=function(){return n}),n}function c(e){this.map={},e instanceof c?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function l(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function h(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function f(e){var t=new FileReader,n=h(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function _(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(t.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(t.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(t.arrayBuffer&&t.blob&&r(e))this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!t.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!s(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=m(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},t.blob&&(this.blob=function(){var e=l(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?l(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(f)}),this.text=function(){var e=l(this);if(e)return e;if(this._bodyBlob)return function(e){var t=new FileReader,n=h(t);return t.readAsText(e),n}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},t.formData&&(this.formData=function(){return this.text().then(y)}),this.json=function(){return this.text().then(JSON.parse)},this}function p(e,t){var n=(t=t||{}).body;if(e instanceof p){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new c(e.headers)),this.method=e.method,this.mode=e.mode,n||null==e._bodyInit||(n=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new c(t.headers)),this.method=function(e){var t=e.toUpperCase();return i.indexOf(t)>-1?t:e}(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function y(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),s=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(s))}}),t}function b(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new c(t.headers),this.url=t.url||"",this._initBody(e)}}(void 0!==e?e:this)}).call(n,void 0);var r=n.fetch;r.Response=n.Response,r.Request=n.Request,r.Headers=n.Headers;"object"==typeof e&&e.exports&&(e.exports=r)},"./node_modules/crypto-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=n(/*! randombytes */"./node_modules/randombytes/browser.js"),t.createHash=t.Hash=n(/*! create-hash */"./node_modules/create-hash/browser.js"),t.createHmac=t.Hmac=n(/*! create-hmac */"./node_modules/create-hmac/browser.js");var r=n(/*! browserify-sign/algos */"./node_modules/browserify-sign/algos.js"),s=Object.keys(r),i=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(s);t.getHashes=function(){return i};var a=n(/*! pbkdf2 */"./node_modules/pbkdf2/browser.js");t.pbkdf2=a.pbkdf2,t.pbkdf2Sync=a.pbkdf2Sync;var o=n(/*! browserify-cipher */"./node_modules/browserify-cipher/browser.js");t.Cipher=o.Cipher,t.createCipher=o.createCipher,t.Cipheriv=o.Cipheriv,t.createCipheriv=o.createCipheriv,t.Decipher=o.Decipher,t.createDecipher=o.createDecipher,t.Decipheriv=o.Decipheriv,t.createDecipheriv=o.createDecipheriv,t.getCiphers=o.getCiphers,t.listCiphers=o.listCiphers;var d=n(/*! diffie-hellman */"./node_modules/diffie-hellman/browser.js");t.DiffieHellmanGroup=d.DiffieHellmanGroup,t.createDiffieHellmanGroup=d.createDiffieHellmanGroup,t.getDiffieHellman=d.getDiffieHellman,t.createDiffieHellman=d.createDiffieHellman,t.DiffieHellman=d.DiffieHellman;var u=n(/*! browserify-sign */"./node_modules/browserify-sign/browser/index.js");t.createSign=u.createSign,t.Sign=u.Sign,t.createVerify=u.createVerify,t.Verify=u.Verify,t.createECDH=n(/*! create-ecdh */"./node_modules/create-ecdh/browser.js");var c=n(/*! public-encrypt */"./node_modules/public-encrypt/browser.js");t.publicEncrypt=c.publicEncrypt,t.privateEncrypt=c.privateEncrypt,t.publicDecrypt=c.publicDecrypt,t.privateDecrypt=c.privateDecrypt;var l=n(/*! randomfill */"./node_modules/randomfill/browser.js");t.randomFill=l.randomFill,t.randomFillSync=l.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},"./node_modules/deep-equal/index.js":
/*!******************************************!*\
  !*** ./node_modules/deep-equal/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=Array.prototype.slice,s=n(/*! ./lib/keys.js */"./node_modules/deep-equal/lib/keys.js"),i=n(/*! ./lib/is_arguments.js */"./node_modules/deep-equal/lib/is_arguments.js"),a=e.exports=function(e,t,n){return n||(n={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:function(e,t,n){var u,c;if(o(e)||o(t))return!1;if(e.prototype!==t.prototype)return!1;if(i(e))return!!i(t)&&(e=r.call(e),t=r.call(t),a(e,t,n));if(d(e)){if(!d(t))return!1;if(e.length!==t.length)return!1;for(u=0;u<e.length;u++)if(e[u]!==t[u])return!1;return!0}try{var l=s(e),h=s(t)}catch(e){return!1}if(l.length!=h.length)return!1;for(l.sort(),h.sort(),u=l.length-1;u>=0;u--)if(l[u]!=h[u])return!1;for(u=l.length-1;u>=0;u--)if(c=l[u],!a(e[c],t[c],n))return!1;return typeof e==typeof t}(e,t,n))};function o(e){return null===e||void 0===e}function d(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}},"./node_modules/deep-equal/lib/is_arguments.js":
/*!*****************************************************!*\
  !*** ./node_modules/deep-equal/lib/is_arguments.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function s(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}(t=e.exports=n?r:s).supported=r,t.unsupported=s},"./node_modules/deep-equal/lib/keys.js":
/*!*********************************************!*\
  !*** ./node_modules/deep-equal/lib/keys.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){function n(e){var t=[];for(var n in e)t.push(n);return t}(e.exports="function"==typeof Object.keys?Object.keys:n).shim=n},"./node_modules/des.js/lib/des.js":
/*!****************************************!*\
  !*** ./node_modules/des.js/lib/des.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){"use strict";t.utils=n(/*! ./des/utils */"./node_modules/des.js/lib/des/utils.js"),t.Cipher=n(/*! ./des/cipher */"./node_modules/des.js/lib/des/cipher.js"),t.DES=n(/*! ./des/des */"./node_modules/des.js/lib/des/des.js"),t.CBC=n(/*! ./des/cbc */"./node_modules/des.js/lib/des/cbc.js"),t.EDE=n(/*! ./des/ede */"./node_modules/des.js/lib/des/ede.js")},"./node_modules/des.js/lib/des/cbc.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/cbc.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),s=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),i={};t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}s(t,e);for(var n=Object.keys(i),r=0;r<n.length;r++){var a=n[r];t.prototype[a]=i[a]}return t.create=function(e){return new t(e)},t},i._cbcInit=function(){var e=new function(e){r.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}(this.options.iv);this._cbcState=e},i._update=function(e,t,n,r){var s=this._cbcState,i=this.constructor.super_.prototype,a=s.iv;if("encrypt"===this.type){for(var o=0;o<this.blockSize;o++)a[o]^=e[t+o];i._update.call(this,a,0,n,r);for(o=0;o<this.blockSize;o++)a[o]=n[r+o]}else{i._update.call(this,e,t,n,r);for(o=0;o<this.blockSize;o++)n[r+o]^=a[o];for(o=0;o<this.blockSize;o++)a[o]=e[t+o]}}},"./node_modules/des.js/lib/des/cipher.js":
/*!***********************************************!*\
  !*** ./node_modules/des.js/lib/des/cipher.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js");function s(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=s,s.prototype._init=function(){},s.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},s.prototype._buffer=function(e,t){for(var n=Math.min(this.buffer.length-this.bufferOff,e.length-t),r=0;r<n;r++)this.buffer[this.bufferOff+r]=e[t+r];return this.bufferOff+=n,n},s.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},s.prototype._updateEncrypt=function(e){var t=0,n=0,r=(this.bufferOff+e.length)/this.blockSize|0,s=new Array(r*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(n+=this._flushBuffer(s,n)));for(var i=e.length-(e.length-t)%this.blockSize;t<i;t+=this.blockSize)this._update(e,t,s,n),n+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return s},s.prototype._updateDecrypt=function(e){for(var t=0,n=0,r=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,s=new Array(r*this.blockSize);r>0;r--)t+=this._buffer(e,t),n+=this._flushBuffer(s,n);return t+=this._buffer(e,t),s},s.prototype.final=function(e){var t,n;return e&&(t=this.update(e)),n="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(n):n},s.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},s.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},s.prototype._unpad=function(e){return e},s.prototype._finalDecrypt=function(){r.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},"./node_modules/des.js/lib/des/des.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/des.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),s=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),i=n(/*! ../des */"./node_modules/des.js/lib/des.js"),a=i.utils,o=i.Cipher;function d(e){o.call(this,e);var t=new function(){this.tmp=new Array(2),this.keys=null};this._desState=t,this.deriveKeys(t,e.key)}s(d,o),e.exports=d,d.create=function(e){return new d(e)};var u=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];d.prototype.deriveKeys=function(e,t){e.keys=new Array(32),r.equal(t.length,this.blockSize,"Invalid key length");var n=a.readUInt32BE(t,0),s=a.readUInt32BE(t,4);a.pc1(n,s,e.tmp,0),n=e.tmp[0],s=e.tmp[1];for(var i=0;i<e.keys.length;i+=2){var o=u[i>>>1];n=a.r28shl(n,o),s=a.r28shl(s,o),a.pc2(n,s,e.keys,i)}},d.prototype._update=function(e,t,n,r){var s=this._desState,i=a.readUInt32BE(e,t),o=a.readUInt32BE(e,t+4);a.ip(i,o,s.tmp,0),i=s.tmp[0],o=s.tmp[1],"encrypt"===this.type?this._encrypt(s,i,o,s.tmp,0):this._decrypt(s,i,o,s.tmp,0),i=s.tmp[0],o=s.tmp[1],a.writeUInt32BE(n,i,r),a.writeUInt32BE(n,o,r+4)},d.prototype._pad=function(e,t){for(var n=e.length-t,r=t;r<e.length;r++)e[r]=n;return!0},d.prototype._unpad=function(e){for(var t=e[e.length-1],n=e.length-t;n<e.length;n++)r.equal(e[n],t);return e.slice(0,e.length-t)},d.prototype._encrypt=function(e,t,n,r,s){for(var i=t,o=n,d=0;d<e.keys.length;d+=2){var u=e.keys[d],c=e.keys[d+1];a.expand(o,e.tmp,0),u^=e.tmp[0],c^=e.tmp[1];var l=a.substitute(u,c),h=o;o=(i^a.permute(l))>>>0,i=h}a.rip(o,i,r,s)},d.prototype._decrypt=function(e,t,n,r,s){for(var i=n,o=t,d=e.keys.length-2;d>=0;d-=2){var u=e.keys[d],c=e.keys[d+1];a.expand(i,e.tmp,0),u^=e.tmp[0],c^=e.tmp[1];var l=a.substitute(u,c),h=i;i=(o^a.permute(l))>>>0,o=h}a.rip(i,o,r,s)}},"./node_modules/des.js/lib/des/ede.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/ede.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),s=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),i=n(/*! ../des */"./node_modules/des.js/lib/des.js"),a=i.Cipher,o=i.DES;function d(e){a.call(this,e);var t=new function(e,t){r.equal(t.length,24,"Invalid key length");var n=t.slice(0,8),s=t.slice(8,16),i=t.slice(16,24);this.ciphers="encrypt"===e?[o.create({type:"encrypt",key:n}),o.create({type:"decrypt",key:s}),o.create({type:"encrypt",key:i})]:[o.create({type:"decrypt",key:i}),o.create({type:"encrypt",key:s}),o.create({type:"decrypt",key:n})]}(this.type,this.options.key);this._edeState=t}s(d,a),e.exports=d,d.create=function(e){return new d(e)},d.prototype._update=function(e,t,n,r){var s=this._edeState;s.ciphers[0]._update(e,t,n,r),s.ciphers[1]._update(n,r,n,r),s.ciphers[2]._update(n,r,n,r)},d.prototype._pad=o.prototype._pad,d.prototype._unpad=o.prototype._unpad},"./node_modules/des.js/lib/des/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/des.js/lib/des/utils.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,n){e[0+n]=t>>>24,e[1+n]=t>>>16&255,e[2+n]=t>>>8&255,e[3+n]=255&t},t.ip=function(e,t,n,r){for(var s=0,i=0,a=6;a>=0;a-=2){for(var o=0;o<=24;o+=8)s<<=1,s|=t>>>o+a&1;for(o=0;o<=24;o+=8)s<<=1,s|=e>>>o+a&1}for(a=6;a>=0;a-=2){for(o=1;o<=25;o+=8)i<<=1,i|=t>>>o+a&1;for(o=1;o<=25;o+=8)i<<=1,i|=e>>>o+a&1}n[r+0]=s>>>0,n[r+1]=i>>>0},t.rip=function(e,t,n,r){for(var s=0,i=0,a=0;a<4;a++)for(var o=24;o>=0;o-=8)s<<=1,s|=t>>>o+a&1,s<<=1,s|=e>>>o+a&1;for(a=4;a<8;a++)for(o=24;o>=0;o-=8)i<<=1,i|=t>>>o+a&1,i<<=1,i|=e>>>o+a&1;n[r+0]=s>>>0,n[r+1]=i>>>0},t.pc1=function(e,t,n,r){for(var s=0,i=0,a=7;a>=5;a--){for(var o=0;o<=24;o+=8)s<<=1,s|=t>>o+a&1;for(o=0;o<=24;o+=8)s<<=1,s|=e>>o+a&1}for(o=0;o<=24;o+=8)s<<=1,s|=t>>o+a&1;for(a=1;a<=3;a++){for(o=0;o<=24;o+=8)i<<=1,i|=t>>o+a&1;for(o=0;o<=24;o+=8)i<<=1,i|=e>>o+a&1}for(o=0;o<=24;o+=8)i<<=1,i|=e>>o+a&1;n[r+0]=s>>>0,n[r+1]=i>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var r=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,n,s){for(var i=0,a=0,o=r.length>>>1,d=0;d<o;d++)i<<=1,i|=e>>>r[d]&1;for(d=o;d<r.length;d++)a<<=1,a|=t>>>r[d]&1;n[s+0]=i>>>0,n[s+1]=a>>>0},t.expand=function(e,t,n){var r=0,s=0;r=(1&e)<<5|e>>>27;for(var i=23;i>=15;i-=4)r<<=6,r|=e>>>i&63;for(i=11;i>=3;i-=4)s|=e>>>i&63,s<<=6;s|=(31&e)<<1|e>>>31,t[n+0]=r>>>0,t[n+1]=s>>>0};var s=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var n=0,r=0;r<4;r++){n<<=4,n|=s[64*r+(e>>>18-6*r&63)]}for(r=0;r<4;r++){n<<=4,n|=s[256+64*r+(t>>>18-6*r&63)]}return n>>>0};var i=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,n=0;n<i.length;n++)t<<=1,t|=e>>>i[n]&1;return t>>>0},t.padSplit=function(e,t,n){for(var r=e.toString(2);r.length<t;)r="0"+r;for(var s=[],i=0;i<t;i+=n)s.push(r.slice(i,i+n));return s.join(" ")}},"./node_modules/diffie-hellman/browser.js":
/*!************************************************!*\
  !*** ./node_modules/diffie-hellman/browser.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){(function(e){var r=n(/*! ./lib/generatePrime */"./node_modules/diffie-hellman/lib/generatePrime.js"),s=n(/*! ./lib/primes.json */"./node_modules/diffie-hellman/lib/primes.json"),i=n(/*! ./lib/dh */"./node_modules/diffie-hellman/lib/dh.js");var a={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var n=new e(s[t].prime,"hex"),r=new e(s[t].gen,"hex");return new i(n,r)},t.createDiffieHellman=t.DiffieHellman=function t(n,s,o,d){return e.isBuffer(s)||void 0===a[s]?t(n,"binary",s,o):(s=s||"binary",d=d||"binary",o=o||new e([2]),e.isBuffer(o)||(o=new e(o,d)),"number"==typeof n?new i(r(n,o),o,!0):(e.isBuffer(n)||(n=new e(n,s)),new i(n,o,!0)))}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/diffie-hellman/lib/dh.js":
/*!***********************************************!*\
  !*** ./node_modules/diffie-hellman/lib/dh.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=new(n(/*! miller-rabin */"./node_modules/miller-rabin/lib/mr.js")),i=new r(24),a=new r(11),o=new r(10),d=new r(3),u=new r(7),c=n(/*! ./generatePrime */"./node_modules/diffie-hellman/lib/generatePrime.js"),l=n(/*! randombytes */"./node_modules/randombytes/browser.js");function h(e,n){return n=n||"utf8",t.isBuffer(e)||(e=new t(e,n)),this._pub=new r(e),this}function f(e,n){return n=n||"utf8",t.isBuffer(e)||(e=new t(e,n)),this._priv=new r(e),this}e.exports=_;var m={};function _(e,t,n){this.setGenerator(t),this.__prime=new r(e),this._prime=r.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,n?(this.setPublicKey=h,this.setPrivateKey=f):this._primeCode=8}function p(e,n){var r=new t(e.toArray());return n?r.toString(n):r}Object.defineProperty(_.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var n=t.toString("hex"),r=[n,e.toString(16)].join("_");if(r in m)return m[r];var l,h=0;if(e.isEven()||!c.simpleSieve||!c.fermatTest(e)||!s.test(e))return h+=1,h+="02"===n||"05"===n?8:4,m[r]=h,h;switch(s.test(e.shrn(1))||(h+=2),n){case"02":e.mod(i).cmp(a)&&(h+=8);break;case"05":(l=e.mod(o)).cmp(d)&&l.cmp(u)&&(h+=8);break;default:h+=4}return m[r]=h,h}(this.__prime,this.__gen)),this._primeCode}}),_.prototype.generateKeys=function(){return this._priv||(this._priv=new r(l(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},_.prototype.computeSecret=function(e){var n=(e=(e=new r(e)).toRed(this._prime)).redPow(this._priv).fromRed(),s=new t(n.toArray()),i=this.getPrime();if(s.length<i.length){var a=new t(i.length-s.length);a.fill(0),s=t.concat([a,s])}return s},_.prototype.getPublicKey=function(e){return p(this._pub,e)},_.prototype.getPrivateKey=function(e){return p(this._priv,e)},_.prototype.getPrime=function(e){return p(this.__prime,e)},_.prototype.getGenerator=function(e){return p(this._gen,e)},_.prototype.setGenerator=function(e,n){return n=n||"utf8",t.isBuffer(e)||(e=new t(e,n)),this.__gen=e,this._gen=new r(e),this}}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/diffie-hellman/lib/generatePrime.js":
/*!**********************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/generatePrime.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! randombytes */"./node_modules/randombytes/browser.js");e.exports=b,b.simpleSieve=p,b.fermatTest=y;var s=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),i=new s(24),a=new(n(/*! miller-rabin */"./node_modules/miller-rabin/lib/mr.js")),o=new s(1),d=new s(2),u=new s(5),c=(new s(16),new s(8),new s(10)),l=new s(3),h=(new s(7),new s(11)),f=new s(4),m=(new s(12),null);function _(){if(null!==m)return m;var e=[];e[0]=2;for(var t=1,n=3;n<1048576;n+=2){for(var r=Math.ceil(Math.sqrt(n)),s=0;s<t&&e[s]<=r&&n%e[s]!=0;s++);t!==s&&e[s]<=r||(e[t++]=n)}return m=e,e}function p(e){for(var t=_(),n=0;n<t.length;n++)if(0===e.modn(t[n]))return 0===e.cmpn(t[n]);return!0}function y(e){var t=s.mont(e);return 0===d.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function b(e,t){if(e<16)return new s(2===t||5===t?[140,123]:[140,39]);var n,m;for(t=new s(t);;){for(n=new s(r(Math.ceil(e/8)));n.bitLength()>e;)n.ishrn(1);if(n.isEven()&&n.iadd(o),n.testn(1)||n.iadd(d),t.cmp(d)){if(!t.cmp(u))for(;n.mod(c).cmp(l);)n.iadd(f)}else for(;n.mod(i).cmp(h);)n.iadd(f);if(p(m=n.shrn(1))&&p(n)&&y(m)&&y(n)&&a.test(m)&&a.test(n))return n}}},"./node_modules/diffie-hellman/lib/primes.json":
/*!*****************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/primes.json ***!
  \*****************************************************/
/*! exports provided: modp1, modp2, modp5, modp14, modp15, modp16, modp17, modp18, default */function(e){e.exports={modp1:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},modp2:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},modp5:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},modp14:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},modp15:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},modp16:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},modp17:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},modp18:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}},"./node_modules/elliptic/lib/elliptic.js":
/*!***********************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=t;r.version=n(/*! ../package.json */"./node_modules/elliptic/package.json").version,r.utils=n(/*! ./elliptic/utils */"./node_modules/elliptic/lib/elliptic/utils.js"),r.rand=n(/*! brorand */"./node_modules/brorand/index.js"),r.curve=n(/*! ./elliptic/curve */"./node_modules/elliptic/lib/elliptic/curve/index.js"),r.curves=n(/*! ./elliptic/curves */"./node_modules/elliptic/lib/elliptic/curves.js"),r.ec=n(/*! ./elliptic/ec */"./node_modules/elliptic/lib/elliptic/ec/index.js"),r.eddsa=n(/*! ./elliptic/eddsa */"./node_modules/elliptic/lib/elliptic/eddsa/index.js")},"./node_modules/elliptic/lib/elliptic/curve/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js").utils,i=s.getNAF,a=s.getJSF,o=s.assert;function d(e,t){this.type=e,this.p=new r(t.p,16),this.red=t.prime?r.red(t.prime):r.mont(this.p),this.zero=new r(0).toRed(this.red),this.one=new r(1).toRed(this.red),this.two=new r(2).toRed(this.red),this.n=t.n&&new r(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var n=this.n&&this.p.div(this.n);!n||n.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function u(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=d,d.prototype.point=function(){throw new Error("Not implemented")},d.prototype.validate=function(){throw new Error("Not implemented")},d.prototype._fixedNafMul=function(e,t){o(e.precomputed);var n=e._getDoubles(),r=i(t,1),s=(1<<n.step+1)-(n.step%2==0?2:1);s/=3;for(var a=[],d=0;d<r.length;d+=n.step){var u=0;for(t=d+n.step-1;t>=d;t--)u=(u<<1)+r[t];a.push(u)}for(var c=this.jpoint(null,null,null),l=this.jpoint(null,null,null),h=s;h>0;h--){for(d=0;d<a.length;d++){(u=a[d])===h?l=l.mixedAdd(n.points[d]):u===-h&&(l=l.mixedAdd(n.points[d].neg()))}c=c.add(l)}return c.toP()},d.prototype._wnafMul=function(e,t){var n=4,r=e._getNAFPoints(n);n=r.wnd;for(var s=r.points,a=i(t,n),d=this.jpoint(null,null,null),u=a.length-1;u>=0;u--){for(t=0;u>=0&&0===a[u];u--)t++;if(u>=0&&t++,d=d.dblp(t),u<0)break;var c=a[u];o(0!==c),d="affine"===e.type?c>0?d.mixedAdd(s[c-1>>1]):d.mixedAdd(s[-c-1>>1].neg()):c>0?d.add(s[c-1>>1]):d.add(s[-c-1>>1].neg())}return"affine"===e.type?d.toP():d},d.prototype._wnafMulAdd=function(e,t,n,r,s){for(var o=this._wnafT1,d=this._wnafT2,u=this._wnafT3,c=0,l=0;l<r;l++){var h=(k=t[l])._getNAFPoints(e);o[l]=h.wnd,d[l]=h.points}for(l=r-1;l>=1;l-=2){var f=l-1,m=l;if(1===o[f]&&1===o[m]){var _=[t[f],null,null,t[m]];0===t[f].y.cmp(t[m].y)?(_[1]=t[f].add(t[m]),_[2]=t[f].toJ().mixedAdd(t[m].neg())):0===t[f].y.cmp(t[m].y.redNeg())?(_[1]=t[f].toJ().mixedAdd(t[m]),_[2]=t[f].add(t[m].neg())):(_[1]=t[f].toJ().mixedAdd(t[m]),_[2]=t[f].toJ().mixedAdd(t[m].neg()));var p=[-3,-1,-5,-7,0,7,5,1,3],y=a(n[f],n[m]);c=Math.max(y[0].length,c),u[f]=new Array(c),u[m]=new Array(c);for(var b=0;b<c;b++){var g=0|y[0][b],M=0|y[1][b];u[f][b]=p[3*(g+1)+(M+1)],u[m][b]=0,d[f]=_}}else u[f]=i(n[f],o[f]),u[m]=i(n[m],o[m]),c=Math.max(u[f].length,c),c=Math.max(u[m].length,c)}var v=this.jpoint(null,null,null),w=this._wnafT4;for(l=c;l>=0;l--){for(var L=0;l>=0;){var Y=!0;for(b=0;b<r;b++)w[b]=0|u[b][l],0!==w[b]&&(Y=!1);if(!Y)break;L++,l--}if(l>=0&&L++,v=v.dblp(L),l<0)break;for(b=0;b<r;b++){var k,j=w[b];0!==j&&(j>0?k=d[b][j-1>>1]:j<0&&(k=d[b][-j-1>>1].neg()),v="affine"===k.type?v.mixedAdd(k):v.add(k))}}for(l=0;l<r;l++)d[l]=null;return s?v:v.toP()},d.BasePoint=u,u.prototype.eq=function(){throw new Error("Not implemented")},u.prototype.validate=function(){return this.curve.validate(this)},d.prototype.decodePoint=function(e,t){e=s.toArray(e,t);var n=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*n)return 6===e[0]?o(e[e.length-1]%2==0):7===e[0]&&o(e[e.length-1]%2==1),this.point(e.slice(1,1+n),e.slice(1+n,1+2*n));if((2===e[0]||3===e[0])&&e.length-1===n)return this.pointFromX(e.slice(1,1+n),3===e[0]);throw new Error("Unknown point format")},u.prototype.encodeCompressed=function(e){return this.encode(e,!0)},u.prototype._encode=function(e){var t=this.curve.p.byteLength(),n=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(n):[4].concat(n,this.getY().toArray("be",t))},u.prototype.encode=function(e,t){return s.encode(this._encode(t),e)},u.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},u.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},u.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var n=[this],r=this,s=0;s<t;s+=e){for(var i=0;i<e;i++)r=r.dbl();n.push(r)}return{step:e,points:n}},u.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],n=(1<<e)-1,r=1===n?null:this.dbl(),s=1;s<n;s++)t[s]=t[s-1].add(r);return{wnd:e,points:t}},u.prototype._getBeta=function(){return null},u.prototype.dblp=function(e){for(var t=this,n=0;n<e;n++)t=t.dbl();return t}},"./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!*************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \*************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../curve */"./node_modules/elliptic/lib/elliptic/curve/index.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js"),i=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),a=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),o=r.base,d=s.utils.assert;function u(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,o.call(this,"edwards",e),this.a=new i(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new i(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new i(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),d(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function c(e,t,n,r,s){o.BasePoint.call(this,e,"projective"),null===t&&null===n&&null===r?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new i(t,16),this.y=new i(n,16),this.z=r?new i(r,16):this.curve.one,this.t=s&&new i(s,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}a(u,o),e.exports=u,u.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},u.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},u.prototype.jpoint=function(e,t,n,r){return this.point(e,t,n,r)},u.prototype.pointFromX=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var n=e.redSqr(),r=this.c2.redSub(this.a.redMul(n)),s=this.one.redSub(this.c2.redMul(this.d).redMul(n)),a=r.redMul(s.redInvm()),o=a.redSqrt();if(0!==o.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");var d=o.fromRed().isOdd();return(t&&!d||!t&&d)&&(o=o.redNeg()),this.point(e,o)},u.prototype.pointFromY=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var n=e.redSqr(),r=n.redSub(this.one),s=n.redMul(this.d).redAdd(this.one),a=r.redMul(s.redInvm());if(0===a.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var o=a.redSqrt();if(0!==o.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");return o.isOdd()!==t&&(o=o.redNeg()),this.point(o,e)},u.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),n=e.y.redSqr(),r=t.redMul(this.a).redAdd(n),s=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(n)));return 0===r.cmp(s)},a(c,o.BasePoint),u.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},u.prototype.point=function(e,t,n,r){return new c(this,e,t,n,r)},c.fromJSON=function(e,t){return new c(e,t[0],t[1],t[2])},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&0===this.y.cmp(this.z)},c.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),n=this.z.redSqr();n=n.redIAdd(n);var r=this.curve._mulA(e),s=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),i=r.redAdd(t),a=i.redSub(n),o=r.redSub(t),d=s.redMul(a),u=i.redMul(o),c=s.redMul(o),l=a.redMul(i);return this.curve.point(d,u,l,c)},c.prototype._projDbl=function(){var e,t,n,r=this.x.redAdd(this.y).redSqr(),s=this.x.redSqr(),i=this.y.redSqr();if(this.curve.twisted){var a=(u=this.curve._mulA(s)).redAdd(i);if(this.zOne)e=r.redSub(s).redSub(i).redMul(a.redSub(this.curve.two)),t=a.redMul(u.redSub(i)),n=a.redSqr().redSub(a).redSub(a);else{var o=this.z.redSqr(),d=a.redSub(o).redISub(o);e=r.redSub(s).redISub(i).redMul(d),t=a.redMul(u.redSub(i)),n=a.redMul(d)}}else{var u=s.redAdd(i);o=this.curve._mulC(this.c.redMul(this.z)).redSqr(),d=u.redSub(o).redSub(o);e=this.curve._mulC(r.redISub(u)).redMul(d),t=this.curve._mulC(u).redMul(s.redISub(i)),n=u.redMul(d)}return this.curve.point(e,t,n)},c.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},c.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),n=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),r=this.t.redMul(this.curve.dd).redMul(e.t),s=this.z.redMul(e.z.redAdd(e.z)),i=n.redSub(t),a=s.redSub(r),o=s.redAdd(r),d=n.redAdd(t),u=i.redMul(a),c=o.redMul(d),l=i.redMul(d),h=a.redMul(o);return this.curve.point(u,c,h,l)},c.prototype._projAdd=function(e){var t,n,r=this.z.redMul(e.z),s=r.redSqr(),i=this.x.redMul(e.x),a=this.y.redMul(e.y),o=this.curve.d.redMul(i).redMul(a),d=s.redSub(o),u=s.redAdd(o),c=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(i).redISub(a),l=r.redMul(d).redMul(c);return this.curve.twisted?(t=r.redMul(u).redMul(a.redSub(this.curve._mulA(i))),n=d.redMul(u)):(t=r.redMul(u).redMul(a.redSub(i)),n=this.curve._mulC(d).redMul(u)),this.curve.point(l,t,n)},c.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},c.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,n){return this.curve._wnafMulAdd(1,[this,t],[e,n],2,!1)},c.prototype.jmulAdd=function(e,t,n){return this.curve._wnafMulAdd(1,[this,t],[e,n],2,!0)},c.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},c.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()},c.prototype.getY=function(){return this.normalize(),this.y.fromRed()},c.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},c.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var n=e.clone(),r=this.curve.redN.redMul(this.z);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(r),0===this.x.cmp(t))return!0}return!1},c.prototype.toP=c.prototype.normalize,c.prototype.mixedAdd=c.prototype.add},"./node_modules/elliptic/lib/elliptic/curve/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=t;r.base=n(/*! ./base */"./node_modules/elliptic/lib/elliptic/curve/base.js"),r.short=n(/*! ./short */"./node_modules/elliptic/lib/elliptic/curve/short.js"),r.mont=n(/*! ./mont */"./node_modules/elliptic/lib/elliptic/curve/mont.js"),r.edwards=n(/*! ./edwards */"./node_modules/elliptic/lib/elliptic/curve/edwards.js")},"./node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../curve */"./node_modules/elliptic/lib/elliptic/curve/index.js"),s=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),i=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),a=r.base,o=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js").utils;function d(e){a.call(this,"mont",e),this.a=new s(e.a,16).toRed(this.red),this.b=new s(e.b,16).toRed(this.red),this.i4=new s(4).toRed(this.red).redInvm(),this.two=new s(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function u(e,t,n){a.BasePoint.call(this,e,"projective"),null===t&&null===n?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new s(t,16),this.z=new s(n,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}i(d,a),e.exports=d,d.prototype.validate=function(e){var t=e.normalize().x,n=t.redSqr(),r=n.redMul(t).redAdd(n.redMul(this.a)).redAdd(t);return 0===r.redSqrt().redSqr().cmp(r)},i(u,a.BasePoint),d.prototype.decodePoint=function(e,t){return this.point(o.toArray(e,t),1)},d.prototype.point=function(e,t){return new u(this,e,t)},d.prototype.pointFromJSON=function(e){return u.fromJSON(this,e)},u.prototype.precompute=function(){},u.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},u.fromJSON=function(e,t){return new u(e,t[0],t[1]||e.one)},u.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},u.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),n=e.redSub(t),r=e.redMul(t),s=n.redMul(t.redAdd(this.curve.a24.redMul(n)));return this.curve.point(r,s)},u.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},u.prototype.diffAdd=function(e,t){var n=this.x.redAdd(this.z),r=this.x.redSub(this.z),s=e.x.redAdd(e.z),i=e.x.redSub(e.z).redMul(n),a=s.redMul(r),o=t.z.redMul(i.redAdd(a).redSqr()),d=t.x.redMul(i.redISub(a).redSqr());return this.curve.point(o,d)},u.prototype.mul=function(e){for(var t=e.clone(),n=this,r=this.curve.point(null,null),s=[];0!==t.cmpn(0);t.iushrn(1))s.push(t.andln(1));for(var i=s.length-1;i>=0;i--)0===s[i]?(n=n.diffAdd(r,this),r=r.dbl()):(r=n.diffAdd(r,this),n=n.dbl());return r},u.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},u.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},u.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},u.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},u.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},"./node_modules/elliptic/lib/elliptic/curve/short.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../curve */"./node_modules/elliptic/lib/elliptic/curve/index.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js"),i=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),a=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),o=r.base,d=s.utils.assert;function u(e){o.call(this,"short",e),this.a=new i(e.a,16).toRed(this.red),this.b=new i(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function c(e,t,n,r){o.BasePoint.call(this,e,"affine"),null===t&&null===n?(this.x=null,this.y=null,this.inf=!0):(this.x=new i(t,16),this.y=new i(n,16),r&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function l(e,t,n,r){o.BasePoint.call(this,e,"jacobian"),null===t&&null===n&&null===r?(this.x=this.curve.one,this.y=this.curve.one,this.z=new i(0)):(this.x=new i(t,16),this.y=new i(n,16),this.z=new i(r,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}a(u,o),e.exports=u,u.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,n;if(e.beta)t=new i(e.beta,16).toRed(this.red);else{var r=this._getEndoRoots(this.p);t=(t=r[0].cmp(r[1])<0?r[0]:r[1]).toRed(this.red)}if(e.lambda)n=new i(e.lambda,16);else{var s=this._getEndoRoots(this.n);0===this.g.mul(s[0]).x.cmp(this.g.x.redMul(t))?n=s[0]:(n=s[1],d(0===this.g.mul(n).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:n,basis:e.basis?e.basis.map(function(e){return{a:new i(e.a,16),b:new i(e.b,16)}}):this._getEndoBasis(n)}}},u.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:i.mont(e),n=new i(2).toRed(t).redInvm(),r=n.redNeg(),s=new i(3).toRed(t).redNeg().redSqrt().redMul(n);return[r.redAdd(s).fromRed(),r.redSub(s).fromRed()]},u.prototype._getEndoBasis=function(e){for(var t,n,r,s,a,o,d,u,c,l=this.n.ushrn(Math.floor(this.n.bitLength()/2)),h=e,f=this.n.clone(),m=new i(1),_=new i(0),p=new i(0),y=new i(1),b=0;0!==h.cmpn(0);){var g=f.div(h);u=f.sub(g.mul(h)),c=p.sub(g.mul(m));var M=y.sub(g.mul(_));if(!r&&u.cmp(l)<0)t=d.neg(),n=m,r=u.neg(),s=c;else if(r&&2==++b)break;d=u,f=h,h=u,p=m,m=c,y=_,_=M}a=u.neg(),o=c;var v=r.sqr().add(s.sqr());return a.sqr().add(o.sqr()).cmp(v)>=0&&(a=t,o=n),r.negative&&(r=r.neg(),s=s.neg()),a.negative&&(a=a.neg(),o=o.neg()),[{a:r,b:s},{a:a,b:o}]},u.prototype._endoSplit=function(e){var t=this.endo.basis,n=t[0],r=t[1],s=r.b.mul(e).divRound(this.n),i=n.b.neg().mul(e).divRound(this.n),a=s.mul(n.a),o=i.mul(r.a),d=s.mul(n.b),u=i.mul(r.b);return{k1:e.sub(a).sub(o),k2:d.add(u).neg()}},u.prototype.pointFromX=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var n=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),r=n.redSqrt();if(0!==r.redSqr().redSub(n).cmp(this.zero))throw new Error("invalid point");var s=r.fromRed().isOdd();return(t&&!s||!t&&s)&&(r=r.redNeg()),this.point(e,r)},u.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,n=e.y,r=this.a.redMul(t),s=t.redSqr().redMul(t).redIAdd(r).redIAdd(this.b);return 0===n.redSqr().redISub(s).cmpn(0)},u.prototype._endoWnafMulAdd=function(e,t,n){for(var r=this._endoWnafT1,s=this._endoWnafT2,i=0;i<e.length;i++){var a=this._endoSplit(t[i]),o=e[i],d=o._getBeta();a.k1.negative&&(a.k1.ineg(),o=o.neg(!0)),a.k2.negative&&(a.k2.ineg(),d=d.neg(!0)),r[2*i]=o,r[2*i+1]=d,s[2*i]=a.k1,s[2*i+1]=a.k2}for(var u=this._wnafMulAdd(1,r,s,2*i,n),c=0;c<2*i;c++)r[c]=null,s[c]=null;return u},a(c,o.BasePoint),u.prototype.point=function(e,t,n){return new c(this,e,t,n)},u.prototype.pointFromJSON=function(e,t){return c.fromJSON(this,e,t)},c.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var n=this.curve,r=function(e){return n.point(e.x.redMul(n.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(r)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(r)}}}return t}},c.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},c.fromJSON=function(e,t,n){"string"==typeof t&&(t=JSON.parse(t));var r=e.point(t[0],t[1],n);if(!t[2])return r;function s(t){return e.point(t[0],t[1],n)}var i=t[2];return r.precomputed={beta:null,doubles:i.doubles&&{step:i.doubles.step,points:[r].concat(i.doubles.points.map(s))},naf:i.naf&&{wnd:i.naf.wnd,points:[r].concat(i.naf.points.map(s))}},r},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return this.inf},c.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var n=t.redSqr().redISub(this.x).redISub(e.x),r=t.redMul(this.x.redSub(n)).redISub(this.y);return this.curve.point(n,r)},c.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,n=this.x.redSqr(),r=e.redInvm(),s=n.redAdd(n).redIAdd(n).redIAdd(t).redMul(r),i=s.redSqr().redISub(this.x.redAdd(this.x)),a=s.redMul(this.x.redSub(i)).redISub(this.y);return this.curve.point(i,a)},c.prototype.getX=function(){return this.x.fromRed()},c.prototype.getY=function(){return this.y.fromRed()},c.prototype.mul=function(e){return e=new i(e,16),this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,n){var r=[this,t],s=[e,n];return this.curve.endo?this.curve._endoWnafMulAdd(r,s):this.curve._wnafMulAdd(1,r,s,2)},c.prototype.jmulAdd=function(e,t,n){var r=[this,t],s=[e,n];return this.curve.endo?this.curve._endoWnafMulAdd(r,s,!0):this.curve._wnafMulAdd(1,r,s,2,!0)},c.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},c.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var n=this.precomputed,r=function(e){return e.neg()};t.precomputed={naf:n.naf&&{wnd:n.naf.wnd,points:n.naf.points.map(r)},doubles:n.doubles&&{step:n.doubles.step,points:n.doubles.points.map(r)}}}return t},c.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},a(l,o.BasePoint),u.prototype.jpoint=function(e,t,n){return new l(this,e,t,n)},l.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),n=this.x.redMul(t),r=this.y.redMul(t).redMul(e);return this.curve.point(n,r)},l.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},l.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),n=this.z.redSqr(),r=this.x.redMul(t),s=e.x.redMul(n),i=this.y.redMul(t.redMul(e.z)),a=e.y.redMul(n.redMul(this.z)),o=r.redSub(s),d=i.redSub(a);if(0===o.cmpn(0))return 0!==d.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=o.redSqr(),c=u.redMul(o),l=r.redMul(u),h=d.redSqr().redIAdd(c).redISub(l).redISub(l),f=d.redMul(l.redISub(h)).redISub(i.redMul(c)),m=this.z.redMul(e.z).redMul(o);return this.curve.jpoint(h,f,m)},l.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),n=this.x,r=e.x.redMul(t),s=this.y,i=e.y.redMul(t).redMul(this.z),a=n.redSub(r),o=s.redSub(i);if(0===a.cmpn(0))return 0!==o.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var d=a.redSqr(),u=d.redMul(a),c=n.redMul(d),l=o.redSqr().redIAdd(u).redISub(c).redISub(c),h=o.redMul(c.redISub(l)).redISub(s.redMul(u)),f=this.z.redMul(a);return this.curve.jpoint(l,h,f)},l.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,n=0;n<e;n++)t=t.dbl();return t}var r=this.curve.a,s=this.curve.tinv,i=this.x,a=this.y,o=this.z,d=o.redSqr().redSqr(),u=a.redAdd(a);for(n=0;n<e;n++){var c=i.redSqr(),l=u.redSqr(),h=l.redSqr(),f=c.redAdd(c).redIAdd(c).redIAdd(r.redMul(d)),m=i.redMul(l),_=f.redSqr().redISub(m.redAdd(m)),p=m.redISub(_),y=f.redMul(p);y=y.redIAdd(y).redISub(h);var b=u.redMul(o);n+1<e&&(d=d.redMul(h)),i=_,o=b,u=y}return this.curve.jpoint(i,u.redMul(s),o)},l.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},l.prototype._zeroDbl=function(){var e,t,n;if(this.zOne){var r=this.x.redSqr(),s=this.y.redSqr(),i=s.redSqr(),a=this.x.redAdd(s).redSqr().redISub(r).redISub(i);a=a.redIAdd(a);var o=r.redAdd(r).redIAdd(r),d=o.redSqr().redISub(a).redISub(a),u=i.redIAdd(i);u=(u=u.redIAdd(u)).redIAdd(u),e=d,t=o.redMul(a.redISub(d)).redISub(u),n=this.y.redAdd(this.y)}else{var c=this.x.redSqr(),l=this.y.redSqr(),h=l.redSqr(),f=this.x.redAdd(l).redSqr().redISub(c).redISub(h);f=f.redIAdd(f);var m=c.redAdd(c).redIAdd(c),_=m.redSqr(),p=h.redIAdd(h);p=(p=p.redIAdd(p)).redIAdd(p),e=_.redISub(f).redISub(f),t=m.redMul(f.redISub(e)).redISub(p),n=(n=this.y.redMul(this.z)).redIAdd(n)}return this.curve.jpoint(e,t,n)},l.prototype._threeDbl=function(){var e,t,n;if(this.zOne){var r=this.x.redSqr(),s=this.y.redSqr(),i=s.redSqr(),a=this.x.redAdd(s).redSqr().redISub(r).redISub(i);a=a.redIAdd(a);var o=r.redAdd(r).redIAdd(r).redIAdd(this.curve.a),d=o.redSqr().redISub(a).redISub(a);e=d;var u=i.redIAdd(i);u=(u=u.redIAdd(u)).redIAdd(u),t=o.redMul(a.redISub(d)).redISub(u),n=this.y.redAdd(this.y)}else{var c=this.z.redSqr(),l=this.y.redSqr(),h=this.x.redMul(l),f=this.x.redSub(c).redMul(this.x.redAdd(c));f=f.redAdd(f).redIAdd(f);var m=h.redIAdd(h),_=(m=m.redIAdd(m)).redAdd(m);e=f.redSqr().redISub(_),n=this.y.redAdd(this.z).redSqr().redISub(l).redISub(c);var p=l.redSqr();p=(p=(p=p.redIAdd(p)).redIAdd(p)).redIAdd(p),t=f.redMul(m.redISub(e)).redISub(p)}return this.curve.jpoint(e,t,n)},l.prototype._dbl=function(){var e=this.curve.a,t=this.x,n=this.y,r=this.z,s=r.redSqr().redSqr(),i=t.redSqr(),a=n.redSqr(),o=i.redAdd(i).redIAdd(i).redIAdd(e.redMul(s)),d=t.redAdd(t),u=(d=d.redIAdd(d)).redMul(a),c=o.redSqr().redISub(u.redAdd(u)),l=u.redISub(c),h=a.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var f=o.redMul(l).redISub(h),m=n.redAdd(n).redMul(r);return this.curve.jpoint(c,f,m)},l.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),n=this.z.redSqr(),r=t.redSqr(),s=e.redAdd(e).redIAdd(e),i=s.redSqr(),a=this.x.redAdd(t).redSqr().redISub(e).redISub(r),o=(a=(a=(a=a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(i)).redSqr(),d=r.redIAdd(r);d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var u=s.redIAdd(a).redSqr().redISub(i).redISub(o).redISub(d),c=t.redMul(u);c=(c=c.redIAdd(c)).redIAdd(c);var l=this.x.redMul(o).redISub(c);l=(l=l.redIAdd(l)).redIAdd(l);var h=this.y.redMul(u.redMul(d.redISub(u)).redISub(a.redMul(o)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var f=this.z.redAdd(a).redSqr().redISub(n).redISub(o);return this.curve.jpoint(l,h,f)},l.prototype.mul=function(e,t){return e=new i(e,t),this.curve._wnafMul(this,e)},l.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),n=e.z.redSqr();if(0!==this.x.redMul(n).redISub(e.x.redMul(t)).cmpn(0))return!1;var r=t.redMul(this.z),s=n.redMul(e.z);return 0===this.y.redMul(s).redISub(e.y.redMul(r)).cmpn(0)},l.prototype.eqXToP=function(e){var t=this.z.redSqr(),n=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(n))return!0;for(var r=e.clone(),s=this.curve.redN.redMul(t);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(n.redIAdd(s),0===this.x.cmp(n))return!0}return!1},l.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},l.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},"./node_modules/elliptic/lib/elliptic/curves.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curves.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r,s=t,i=n(/*! hash.js */"./node_modules/hash.js/lib/hash.js"),a=n(/*! ../elliptic */"./node_modules/elliptic/lib/elliptic.js"),o=a.utils.assert;function d(e){"short"===e.type?this.curve=new a.curve.short(e):"edwards"===e.type?this.curve=new a.curve.edwards(e):this.curve=new a.curve.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,o(this.g.validate(),"Invalid curve"),o(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function u(e,t){Object.defineProperty(s,e,{configurable:!0,enumerable:!0,get:function(){var n=new d(t);return Object.defineProperty(s,e,{configurable:!0,enumerable:!0,value:n}),n}})}s.PresetCurve=d,u("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:i.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),u("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:i.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),u("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:i.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),u("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:i.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),u("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:i.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),u("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:i.sha256,gRed:!1,g:["9"]}),u("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:i.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=n(/*! ./precomputed/secp256k1 */"./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js")}catch(e){r=void 0}u("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:i.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})},"./node_modules/elliptic/lib/elliptic/ec/index.js":
/*!********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! hmac-drbg */"./node_modules/hmac-drbg/lib/hmac-drbg.js"),i=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js"),a=i.utils.assert,o=n(/*! ./key */"./node_modules/elliptic/lib/elliptic/ec/key.js"),d=n(/*! ./signature */"./node_modules/elliptic/lib/elliptic/ec/signature.js");function u(e){if(!(this instanceof u))return new u(e);"string"==typeof e&&(a(i.curves.hasOwnProperty(e),"Unknown curve "+e),e=i.curves[e]),e instanceof i.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=u,u.prototype.keyPair=function(e){return new o(this,e)},u.prototype.keyFromPrivate=function(e,t){return o.fromPrivate(this,e,t)},u.prototype.keyFromPublic=function(e,t){return o.fromPublic(this,e,t)},u.prototype.genKeyPair=function(e){e||(e={});for(var t=new s({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||i.rand(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),n=this.n.byteLength(),a=this.n.sub(new r(2));;){var o=new r(t.generate(n));if(!(o.cmp(a)>0))return o.iaddn(1),this.keyFromPrivate(o)}},u.prototype._truncateToN=function(e,t){var n=8*e.byteLength()-this.n.bitLength();return n>0&&(e=e.ushrn(n)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},u.prototype.sign=function(e,t,n,i){"object"==typeof n&&(i=n,n=null),i||(i={}),t=this.keyFromPrivate(t,n),e=this._truncateToN(new r(e,16));for(var a=this.n.byteLength(),o=t.getPrivate().toArray("be",a),u=e.toArray("be",a),c=new s({hash:this.hash,entropy:o,nonce:u,pers:i.pers,persEnc:i.persEnc||"utf8"}),l=this.n.sub(new r(1)),h=0;;h++){var f=i.k?i.k(h):new r(c.generate(this.n.byteLength()));if(!((f=this._truncateToN(f,!0)).cmpn(1)<=0||f.cmp(l)>=0)){var m=this.g.mul(f);if(!m.isInfinity()){var _=m.getX(),p=_.umod(this.n);if(0!==p.cmpn(0)){var y=f.invm(this.n).mul(p.mul(t.getPrivate()).iadd(e));if(0!==(y=y.umod(this.n)).cmpn(0)){var b=(m.getY().isOdd()?1:0)|(0!==_.cmp(p)?2:0);return i.canonical&&y.cmp(this.nh)>0&&(y=this.n.sub(y),b^=1),new d({r:p,s:y,recoveryParam:b})}}}}}},u.prototype.verify=function(e,t,n,s){e=this._truncateToN(new r(e,16)),n=this.keyFromPublic(n,s);var i=(t=new d(t,"hex")).r,a=t.s;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;var o,u=a.invm(this.n),c=u.mul(e).umod(this.n),l=u.mul(i).umod(this.n);return this.curve._maxwellTrick?!(o=this.g.jmulAdd(c,n.getPublic(),l)).isInfinity()&&o.eqXToP(i):!(o=this.g.mulAdd(c,n.getPublic(),l)).isInfinity()&&0===o.getX().umod(this.n).cmp(i)},u.prototype.recoverPubKey=function(e,t,n,s){a((3&n)===n,"The recovery param is more than two bits"),t=new d(t,s);var i=this.n,o=new r(e),u=t.r,c=t.s,l=1&n,h=n>>1;if(u.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");u=h?this.curve.pointFromX(u.add(this.curve.n),l):this.curve.pointFromX(u,l);var f=t.r.invm(i),m=i.sub(o).mul(f).umod(i),_=c.mul(f).umod(i);return this.g.mulAdd(m,u,_)},u.prototype.getKeyRecoveryParam=function(e,t,n,r){if(null!==(t=new d(t,r)).recoveryParam)return t.recoveryParam;for(var s=0;s<4;s++){var i;try{i=this.recoverPubKey(e,t,s)}catch(e){continue}if(i.eq(n))return s}throw new Error("Unable to find valid recovery factor")}},"./node_modules/elliptic/lib/elliptic/ec/key.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js").utils.assert;function i(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=i,i.fromPublic=function(e,t,n){return t instanceof i?t:new i(e,{pub:t,pubEnc:n})},i.fromPrivate=function(e,t,n){return t instanceof i?t:new i(e,{priv:t,privEnc:n})},i.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},i.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},i.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},i.prototype._importPrivate=function(e,t){this.priv=new r(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},i.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?s(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||s(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},i.prototype.derive=function(e){return e.mul(this.priv).getX()},i.prototype.sign=function(e,t,n){return this.ec.sign(e,this,t,n)},i.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},i.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},"./node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js").utils,i=s.assert;function a(e,t){if(e instanceof a)return e;this._importDER(e,t)||(i(e.r&&e.s,"Signature without r or s"),this.r=new r(e.r,16),this.s=new r(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function o(e,t){var n=e[t.place++];if(!(128&n))return n;for(var r=15&n,s=0,i=0,a=t.place;i<r;i++,a++)s<<=8,s|=e[a];return t.place=a,s}function d(e){for(var t=0,n=e.length-1;!e[t]&&!(128&e[t+1])&&t<n;)t++;return 0===t?e:e.slice(t)}function u(e,t){if(t<128)e.push(t);else{var n=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|n);--n;)e.push(t>>>(n<<3)&255);e.push(t)}}e.exports=a,a.prototype._importDER=function(e,t){e=s.toArray(e,t);var n=new function(){this.place=0};if(48!==e[n.place++])return!1;if(o(e,n)+n.place!==e.length)return!1;if(2!==e[n.place++])return!1;var i=o(e,n),a=e.slice(n.place,i+n.place);if(n.place+=i,2!==e[n.place++])return!1;var d=o(e,n);if(e.length!==d+n.place)return!1;var u=e.slice(n.place,d+n.place);return 0===a[0]&&128&a[1]&&(a=a.slice(1)),0===u[0]&&128&u[1]&&(u=u.slice(1)),this.r=new r(a),this.s=new r(u),this.recoveryParam=null,!0},a.prototype.toDER=function(e){var t=this.r.toArray(),n=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&n[0]&&(n=[0].concat(n)),t=d(t),n=d(n);!(n[0]||128&n[1]);)n=n.slice(1);var r=[2];u(r,t.length),(r=r.concat(t)).push(2),u(r,n.length);var i=r.concat(n),a=[48];return u(a,i.length),a=a.concat(i),s.encode(a,e)}},"./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! hash.js */"./node_modules/hash.js/lib/hash.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js"),i=s.utils,a=i.assert,o=i.parseBytes,d=n(/*! ./key */"./node_modules/elliptic/lib/elliptic/eddsa/key.js"),u=n(/*! ./signature */"./node_modules/elliptic/lib/elliptic/eddsa/signature.js");function c(e){if(a("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof c))return new c(e);e=s.curves[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=r.sha512}e.exports=c,c.prototype.sign=function(e,t){e=o(e);var n=this.keyFromSecret(t),r=this.hashInt(n.messagePrefix(),e),s=this.g.mul(r),i=this.encodePoint(s),a=this.hashInt(i,n.pubBytes(),e).mul(n.priv()),d=r.add(a).umod(this.curve.n);return this.makeSignature({R:s,S:d,Rencoded:i})},c.prototype.verify=function(e,t,n){e=o(e),t=this.makeSignature(t);var r=this.keyFromPublic(n),s=this.hashInt(t.Rencoded(),r.pubBytes(),e),i=this.g.mul(t.S());return t.R().add(r.pub().mul(s)).eq(i)},c.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return i.intFromLE(e.digest()).umod(this.curve.n)},c.prototype.keyFromPublic=function(e){return d.fromPublic(this,e)},c.prototype.keyFromSecret=function(e){return d.fromSecret(this,e)},c.prototype.makeSignature=function(e){return e instanceof u?e:new u(this,e)},c.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},c.prototype.decodePoint=function(e){var t=(e=i.parseBytes(e)).length-1,n=e.slice(0,t).concat(-129&e[t]),r=0!=(128&e[t]),s=i.intFromLE(n);return this.curve.pointFromY(s,r)},c.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},c.prototype.decodeInt=function(e){return i.intFromLE(e)},c.prototype.isPoint=function(e){return e instanceof this.pointClass}},"./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js").utils,s=r.assert,i=r.parseBytes,a=r.cachedProperty;function o(e,t){this.eddsa=e,this._secret=i(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=i(t.pub)}o.fromPublic=function(e,t){return t instanceof o?t:new o(e,{pub:t})},o.fromSecret=function(e,t){return t instanceof o?t:new o(e,{secret:t})},o.prototype.secret=function(){return this._secret},a(o,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())}),a(o,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),a(o,"privBytes",function(){var e=this.eddsa,t=this.hash(),n=e.encodingLength-1,r=t.slice(0,e.encodingLength);return r[0]&=248,r[n]&=127,r[n]|=64,r}),a(o,"priv",function(){return this.eddsa.decodeInt(this.privBytes())}),a(o,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()}),a(o,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)}),o.prototype.sign=function(e){return s(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},o.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},o.prototype.getSecret=function(e){return s(this._secret,"KeyPair is public only"),r.encode(this.secret(),e)},o.prototype.getPublic=function(e){return r.encode(this.pubBytes(),e)},e.exports=o},"./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!***************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! ../../elliptic */"./node_modules/elliptic/lib/elliptic.js").utils,i=s.assert,a=s.cachedProperty,o=s.parseBytes;function d(e,t){this.eddsa=e,"object"!=typeof t&&(t=o(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),i(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof r&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}a(d,"S",function(){return this.eddsa.decodeInt(this.Sencoded())}),a(d,"R",function(){return this.eddsa.decodePoint(this.Rencoded())}),a(d,"Rencoded",function(){return this.eddsa.encodePoint(this.R())}),a(d,"Sencoded",function(){return this.eddsa.encodeInt(this.S())}),d.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},d.prototype.toHex=function(){return s.encode(this.toBytes(),"hex").toUpperCase()},e.exports=d},"./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*********************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*********************************************************************/
/*! no static exports found */function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},"./node_modules/elliptic/lib/elliptic/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/utils.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=t,s=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),i=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),a=n(/*! minimalistic-crypto-utils */"./node_modules/minimalistic-crypto-utils/lib/utils.js");r.assert=i,r.toArray=a.toArray,r.zero2=a.zero2,r.toHex=a.toHex,r.encode=a.encode,r.getNAF=function(e,t){for(var n=[],r=1<<t+1,s=e.clone();s.cmpn(1)>=0;){var i;if(s.isOdd()){var a=s.andln(r-1);i=a>(r>>1)-1?(r>>1)-a:a,s.isubn(i)}else i=0;n.push(i);for(var o=0!==s.cmpn(0)&&0===s.andln(r-1)?t+1:1,d=1;d<o;d++)n.push(0);s.iushrn(o)}return n},r.getJSF=function(e,t){var n=[[],[]];e=e.clone(),t=t.clone();for(var r=0,s=0;e.cmpn(-r)>0||t.cmpn(-s)>0;){var i,a,o,d=e.andln(3)+r&3,u=t.andln(3)+s&3;3===d&&(d=-1),3===u&&(u=-1),i=0==(1&d)?0:3!=(o=e.andln(7)+r&7)&&5!==o||2!==u?d:-d,n[0].push(i),a=0==(1&u)?0:3!=(o=t.andln(7)+s&7)&&5!==o||2!==d?u:-u,n[1].push(a),2*r===i+1&&(r=1-r),2*s===a+1&&(s=1-s),e.iushrn(1),t.iushrn(1)}return n},r.cachedProperty=function(e,t,n){var r="_"+t;e.prototype[t]=function(){return void 0!==this[r]?this[r]:this[r]=n.call(this)}},r.parseBytes=function(e){return"string"==typeof e?r.toArray(e,"hex"):e},r.intFromLE=function(e){return new s(e,"hex","le")}},"./node_modules/elliptic/package.json":
/*!********************************************!*\
  !*** ./node_modules/elliptic/package.json ***!
  \********************************************/
/*! exports provided: name, version, description, main, files, scripts, repository, keywords, author, license, bugs, homepage, devDependencies, dependencies, default */function(e){e.exports={name:"elliptic",version:"6.4.0",description:"EC cryptography",main:"lib/elliptic.js",files:["lib"],scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",unit:"istanbul test _mocha --reporter=spec test/index.js",test:"npm run lint && npm run unit",version:"grunt dist && git add dist/"},repository:{type:"git",url:"git@github.com:indutny/elliptic"},keywords:["EC","Elliptic","curve","Cryptography"],author:"Fedor Indutny <fedor@indutny.com>",license:"MIT",bugs:{url:"https://github.com/indutny/elliptic/issues"},homepage:"https://github.com/indutny/elliptic",devDependencies:{brfs:"^1.4.3",coveralls:"^2.11.3",grunt:"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2",istanbul:"^0.4.2",jscs:"^2.9.0",jshint:"^2.6.0",mocha:"^2.1.0"},dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"}}},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(e){return"function"==typeof e}function s(e){return"object"==typeof e&&null!==e}function i(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,a,o,d,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||s(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(i(n=this._events[e]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:o=Array.prototype.slice.call(arguments,1),n.apply(this,o)}else if(s(n))for(o=Array.prototype.slice.call(arguments,1),a=(u=n.slice()).length,d=0;d<a;d++)u[d].apply(this,o);return!0},n.prototype.addListener=function(e,t){var a;if(!r(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,r(t.listener)?t.listener:t),this._events[e]?s(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,s(this._events[e])&&!this._events[e].warned&&(a=i(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[e].length>a&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!r(t))throw TypeError("listener must be a function");var n=!1;function s(){this.removeListener(e,s),n||(n=!0,t.apply(this,arguments))}return s.listener=t,this.on(e,s),this},n.prototype.removeListener=function(e,t){var n,i,a,o;if(!r(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(a=(n=this._events[e]).length,i=-1,n===t||r(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(s(n)){for(o=a;o-- >0;)if(n[o]===t||n[o].listener&&n[o].listener===t){i=o;break}if(i<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(i,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?r(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(r(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},"./node_modules/evp_bytestokey/index.js":
/*!**********************************************!*\
  !*** ./node_modules/evp_bytestokey/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=n(/*! md5.js */"./node_modules/md5.js/index.js");e.exports=function(e,t,n,i){if(r.isBuffer(e)||(e=r.from(e,"binary")),t&&(r.isBuffer(t)||(t=r.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var a=n/8,o=r.alloc(a),d=r.alloc(i||0),u=r.alloc(0);a>0||i>0;){var c=new s;c.update(u),c.update(e),t&&c.update(t),u=c.digest();var l=0;if(a>0){var h=o.length-a;l=Math.min(a,u.length),u.copy(o,h,0,l),a-=l}if(l<u.length&&i>0){var f=d.length-i,m=Math.min(i,u.length-l);u.copy(d,f,l,l+m),i-=m}}return u.fill(0),{key:o,iv:d}}},"./node_modules/hash-base/index.js":
/*!*****************************************!*\
  !*** ./node_modules/hash-base/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=n(/*! stream */"./node_modules/stream-browserify/index.js").Transform;function i(e){s.call(this),this._block=r.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}n(/*! inherits */"./node_modules/inherits/inherits_browser.js")(i,s),i.prototype._transform=function(e,t,n){var r=null;try{this.update(e,t)}catch(e){r=e}n(r)},i.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},i.prototype.update=function(e,t){if(function(e,t){if(!r.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(e)||(e=r.from(e,t));for(var n=this._block,s=0;this._blockOffset+e.length-s>=this._blockSize;){for(var i=this._blockOffset;i<this._blockSize;)n[i++]=e[s++];this._update(),this._blockOffset=0}for(;s<e.length;)n[this._blockOffset++]=e[s++];for(var a=0,o=8*e.length;o>0;++a)this._length[a]+=o,(o=this._length[a]/4294967296|0)>0&&(this._length[a]-=4294967296*o);return this},i.prototype._update=function(){throw new Error("_update is not implemented")},i.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var n=0;n<4;++n)this._length[n]=0;return t},i.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=i},"./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=t;r.utils=n(/*! ./hash/utils */"./node_modules/hash.js/lib/hash/utils.js"),r.common=n(/*! ./hash/common */"./node_modules/hash.js/lib/hash/common.js"),r.sha=n(/*! ./hash/sha */"./node_modules/hash.js/lib/hash/sha.js"),r.ripemd=n(/*! ./hash/ripemd */"./node_modules/hash.js/lib/hash/ripemd.js"),r.hmac=n(/*! ./hash/hmac */"./node_modules/hash.js/lib/hash/hmac.js"),r.sha1=r.sha.sha1,r.sha256=r.sha.sha256,r.sha224=r.sha.sha224,r.sha384=r.sha.sha384,r.sha512=r.sha.sha512,r.ripemd160=r.ripemd.ripemd160},"./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js");function i(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=i,i.prototype.update=function(e,t){if(e=r.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var n=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-n,e.length),0===this.pending.length&&(this.pending=null),e=r.join32(e,0,e.length-n,this.endian);for(var s=0;s<e.length;s+=this._delta32)this._update(e,s,s+this._delta32)}return this},i.prototype.digest=function(e){return this.update(this._pad()),s(null===this.pending),this._digest(e)},i.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,n=t-(e+this.padLength)%t,r=new Array(n+this.padLength);r[0]=128;for(var s=1;s<n;s++)r[s]=0;if(e<<=3,"big"===this.endian){for(var i=8;i<this.padLength;i++)r[s++]=0;r[s++]=0,r[s++]=0,r[s++]=0,r[s++]=0,r[s++]=e>>>24&255,r[s++]=e>>>16&255,r[s++]=e>>>8&255,r[s++]=255&e}else for(r[s++]=255&e,r[s++]=e>>>8&255,r[s++]=e>>>16&255,r[s++]=e>>>24&255,r[s++]=0,r[s++]=0,r[s++]=0,r[s++]=0,i=8;i<this.padLength;i++)r[s++]=0;return r}},"./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js");function i(e,t,n){if(!(this instanceof i))return new i(e,t,n);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(t,n))}e.exports=i,i.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),s(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},i.prototype.update=function(e,t){return this.inner.update(e,t),this},i.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},"./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! ./common */"./node_modules/hash.js/lib/hash/common.js"),i=r.rotl32,a=r.sum32,o=r.sum32_3,d=r.sum32_4,u=s.BlockHash;function c(){if(!(this instanceof c))return new c;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function l(e,t,n,r){return e<=15?t^n^r:e<=31?t&n|~t&r:e<=47?(t|~n)^r:e<=63?t&r|n&~r:t^(n|~r)}function h(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function f(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}r.inherits(c,u),t.ripemd160=c,c.blockSize=512,c.outSize=160,c.hmacStrength=192,c.padLength=64,c.prototype._update=function(e,t){for(var n=this.h[0],r=this.h[1],s=this.h[2],u=this.h[3],c=this.h[4],b=n,g=r,M=s,v=u,w=c,L=0;L<80;L++){var Y=a(i(d(n,l(L,r,s,u),e[m[L]+t],h(L)),p[L]),c);n=c,c=u,u=i(s,10),s=r,r=Y,Y=a(i(d(b,l(79-L,g,M,v),e[_[L]+t],f(L)),y[L]),w),b=w,w=v,v=i(M,10),M=g,g=Y}Y=o(this.h[1],s,v),this.h[1]=o(this.h[2],u,w),this.h[2]=o(this.h[3],c,b),this.h[3]=o(this.h[4],n,g),this.h[4]=o(this.h[0],r,M),this.h[0]=Y},c.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"little"):r.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],_=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],p=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],y=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},"./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){"use strict";t.sha1=n(/*! ./sha/1 */"./node_modules/hash.js/lib/hash/sha/1.js"),t.sha224=n(/*! ./sha/224 */"./node_modules/hash.js/lib/hash/sha/224.js"),t.sha256=n(/*! ./sha/256 */"./node_modules/hash.js/lib/hash/sha/256.js"),t.sha384=n(/*! ./sha/384 */"./node_modules/hash.js/lib/hash/sha/384.js"),t.sha512=n(/*! ./sha/512 */"./node_modules/hash.js/lib/hash/sha/512.js")},"./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! ../common */"./node_modules/hash.js/lib/hash/common.js"),i=n(/*! ./common */"./node_modules/hash.js/lib/hash/sha/common.js"),a=r.rotl32,o=r.sum32,d=r.sum32_5,u=i.ft_1,c=s.BlockHash,l=[1518500249,1859775393,2400959708,3395469782];function h(){if(!(this instanceof h))return new h;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(h,c),e.exports=h,h.blockSize=512,h.outSize=160,h.hmacStrength=80,h.padLength=64,h.prototype._update=function(e,t){for(var n=this.W,r=0;r<16;r++)n[r]=e[t+r];for(;r<n.length;r++)n[r]=a(n[r-3]^n[r-8]^n[r-14]^n[r-16],1);var s=this.h[0],i=this.h[1],c=this.h[2],h=this.h[3],f=this.h[4];for(r=0;r<n.length;r++){var m=~~(r/20),_=d(a(s,5),u(m,i,c,h),f,n[r],l[m]);f=h,h=c,c=a(i,30),i=s,s=_}this.h[0]=o(this.h[0],s),this.h[1]=o(this.h[1],i),this.h[2]=o(this.h[2],c),this.h[3]=o(this.h[3],h),this.h[4]=o(this.h[4],f)},h.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},"./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! ./256 */"./node_modules/hash.js/lib/hash/sha/256.js");function i(){if(!(this instanceof i))return new i;s.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(i,s),e.exports=i,i.blockSize=512,i.outSize=224,i.hmacStrength=192,i.padLength=64,i.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}},"./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! ../common */"./node_modules/hash.js/lib/hash/common.js"),i=n(/*! ./common */"./node_modules/hash.js/lib/hash/sha/common.js"),a=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),o=r.sum32,d=r.sum32_4,u=r.sum32_5,c=i.ch32,l=i.maj32,h=i.s0_256,f=i.s1_256,m=i.g0_256,_=i.g1_256,p=s.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function b(){if(!(this instanceof b))return new b;p.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}r.inherits(b,p),e.exports=b,b.blockSize=512,b.outSize=256,b.hmacStrength=192,b.padLength=64,b.prototype._update=function(e,t){for(var n=this.W,r=0;r<16;r++)n[r]=e[t+r];for(;r<n.length;r++)n[r]=d(_(n[r-2]),n[r-7],m(n[r-15]),n[r-16]);var s=this.h[0],i=this.h[1],p=this.h[2],y=this.h[3],b=this.h[4],g=this.h[5],M=this.h[6],v=this.h[7];for(a(this.k.length===n.length),r=0;r<n.length;r++){var w=u(v,f(b),c(b,g,M),this.k[r],n[r]),L=o(h(s),l(s,i,p));v=M,M=g,g=b,b=o(y,w),y=p,p=i,i=s,s=o(w,L)}this.h[0]=o(this.h[0],s),this.h[1]=o(this.h[1],i),this.h[2]=o(this.h[2],p),this.h[3]=o(this.h[3],y),this.h[4]=o(this.h[4],b),this.h[5]=o(this.h[5],g),this.h[6]=o(this.h[6],M),this.h[7]=o(this.h[7],v)},b.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},"./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! ./512 */"./node_modules/hash.js/lib/hash/sha/512.js");function i(){if(!(this instanceof i))return new i;s.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(i,s),e.exports=i,i.blockSize=1024,i.outSize=384,i.hmacStrength=192,i.padLength=128,i.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}},"./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../utils */"./node_modules/hash.js/lib/hash/utils.js"),s=n(/*! ../common */"./node_modules/hash.js/lib/hash/common.js"),i=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),a=r.rotr64_hi,o=r.rotr64_lo,d=r.shr64_hi,u=r.shr64_lo,c=r.sum64,l=r.sum64_hi,h=r.sum64_lo,f=r.sum64_4_hi,m=r.sum64_4_lo,_=r.sum64_5_hi,p=r.sum64_5_lo,y=s.BlockHash,b=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function g(){if(!(this instanceof g))return new g;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=b,this.W=new Array(160)}function M(e,t,n,r,s){var i=e&n^~e&s;return i<0&&(i+=4294967296),i}function v(e,t,n,r,s,i){var a=t&r^~t&i;return a<0&&(a+=4294967296),a}function w(e,t,n,r,s){var i=e&n^e&s^n&s;return i<0&&(i+=4294967296),i}function L(e,t,n,r,s,i){var a=t&r^t&i^r&i;return a<0&&(a+=4294967296),a}function Y(e,t){var n=a(e,t,28)^a(t,e,2)^a(t,e,7);return n<0&&(n+=4294967296),n}function k(e,t){var n=o(e,t,28)^o(t,e,2)^o(t,e,7);return n<0&&(n+=4294967296),n}function j(e,t){var n=a(e,t,14)^a(e,t,18)^a(t,e,9);return n<0&&(n+=4294967296),n}function S(e,t){var n=o(e,t,14)^o(e,t,18)^o(t,e,9);return n<0&&(n+=4294967296),n}function D(e,t){var n=a(e,t,1)^a(e,t,8)^d(e,t,7);return n<0&&(n+=4294967296),n}function T(e,t){var n=o(e,t,1)^o(e,t,8)^u(e,t,7);return n<0&&(n+=4294967296),n}function x(e,t){var n=a(e,t,19)^a(t,e,29)^d(e,t,6);return n<0&&(n+=4294967296),n}function A(e,t){var n=o(e,t,19)^o(t,e,29)^u(e,t,6);return n<0&&(n+=4294967296),n}r.inherits(g,y),e.exports=g,g.blockSize=1024,g.outSize=512,g.hmacStrength=192,g.padLength=128,g.prototype._prepareBlock=function(e,t){for(var n=this.W,r=0;r<32;r++)n[r]=e[t+r];for(;r<n.length;r+=2){var s=x(n[r-4],n[r-3]),i=A(n[r-4],n[r-3]),a=n[r-14],o=n[r-13],d=D(n[r-30],n[r-29]),u=T(n[r-30],n[r-29]),c=n[r-32],l=n[r-31];n[r]=f(s,i,a,o,d,u,c,l),n[r+1]=m(s,i,a,o,d,u,c,l)}},g.prototype._update=function(e,t){this._prepareBlock(e,t);var n=this.W,r=this.h[0],s=this.h[1],a=this.h[2],o=this.h[3],d=this.h[4],u=this.h[5],f=this.h[6],m=this.h[7],y=this.h[8],b=this.h[9],g=this.h[10],D=this.h[11],T=this.h[12],x=this.h[13],A=this.h[14],E=this.h[15];i(this.k.length===n.length);for(var H=0;H<n.length;H+=2){var C=A,P=E,O=j(y,b),I=S(y,b),z=M(y,b,g,D,T),B=v(y,b,g,D,T,x),R=this.k[H],F=this.k[H+1],q=n[H],W=n[H+1],U=_(C,P,O,I,z,B,R,F,q,W),N=p(C,P,O,I,z,B,R,F,q,W);C=Y(r,s),P=k(r,s),O=w(r,s,a,o,d),I=L(r,s,a,o,d,u);var J=l(C,P,O,I),G=h(C,P,O,I);A=T,E=x,T=g,x=D,g=y,D=b,y=l(f,m,U,N),b=h(m,m,U,N),f=d,m=u,d=a,u=o,a=r,o=s,r=l(U,N,J,G),s=h(U,N,J,G)}c(this.h,0,r,s),c(this.h,2,a,o),c(this.h,4,d,u),c(this.h,6,f,m),c(this.h,8,y,b),c(this.h,10,g,D),c(this.h,12,T,x),c(this.h,14,A,E)},g.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},"./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../utils */"./node_modules/hash.js/lib/hash/utils.js").rotr32;function s(e,t,n){return e&t^~e&n}function i(e,t,n){return e&t^e&n^t&n}function a(e,t,n){return e^t^n}t.ft_1=function(e,t,n,r){return 0===e?s(t,n,r):1===e||3===e?a(t,n,r):2===e?i(t,n,r):void 0},t.ch32=s,t.maj32=i,t.p32=a,t.s0_256=function(e){return r(e,2)^r(e,13)^r(e,22)},t.s1_256=function(e){return r(e,6)^r(e,11)^r(e,25)},t.g0_256=function(e){return r(e,7)^r(e,18)^e>>>3},t.g1_256=function(e){return r(e,17)^r(e,19)^e>>>10}},"./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js"),s=n(/*! inherits */"./node_modules/inherits/inherits_browser.js");function i(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function a(e){return 1===e.length?"0"+e:e}function o(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=s,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var n=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),r=0;r<e.length;r+=2)n.push(parseInt(e[r]+e[r+1],16))}else for(var r=0;r<e.length;r++){var s=e.charCodeAt(r),i=s>>8,a=255&s;i?n.push(i,a):n.push(a)}else for(r=0;r<e.length;r++)n[r]=0|e[r];return n},t.toHex=function(e){for(var t="",n=0;n<e.length;n++)t+=a(e[n].toString(16));return t},t.htonl=i,t.toHex32=function(e,t){for(var n="",r=0;r<e.length;r++){var s=e[r];"little"===t&&(s=i(s)),n+=o(s.toString(16))}return n},t.zero2=a,t.zero8=o,t.join32=function(e,t,n,s){var i=n-t;r(i%4==0);for(var a=new Array(i/4),o=0,d=t;o<a.length;o++,d+=4){var u;u="big"===s?e[d]<<24|e[d+1]<<16|e[d+2]<<8|e[d+3]:e[d+3]<<24|e[d+2]<<16|e[d+1]<<8|e[d],a[o]=u>>>0}return a},t.split32=function(e,t){for(var n=new Array(4*e.length),r=0,s=0;r<e.length;r++,s+=4){var i=e[r];"big"===t?(n[s]=i>>>24,n[s+1]=i>>>16&255,n[s+2]=i>>>8&255,n[s+3]=255&i):(n[s+3]=i>>>24,n[s+2]=i>>>16&255,n[s+1]=i>>>8&255,n[s]=255&i)}return n},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,n){return e+t+n>>>0},t.sum32_4=function(e,t,n,r){return e+t+n+r>>>0},t.sum32_5=function(e,t,n,r,s){return e+t+n+r+s>>>0},t.sum64=function(e,t,n,r){var s=e[t],i=r+e[t+1]>>>0,a=(i<r?1:0)+n+s;e[t]=a>>>0,e[t+1]=i},t.sum64_hi=function(e,t,n,r){return(t+r>>>0<t?1:0)+e+n>>>0},t.sum64_lo=function(e,t,n,r){return t+r>>>0},t.sum64_4_hi=function(e,t,n,r,s,i,a,o){var d=0,u=t;return d+=(u=u+r>>>0)<t?1:0,d+=(u=u+i>>>0)<i?1:0,e+n+s+a+(d+=(u=u+o>>>0)<o?1:0)>>>0},t.sum64_4_lo=function(e,t,n,r,s,i,a,o){return t+r+i+o>>>0},t.sum64_5_hi=function(e,t,n,r,s,i,a,o,d,u){var c=0,l=t;return c+=(l=l+r>>>0)<t?1:0,c+=(l=l+i>>>0)<i?1:0,c+=(l=l+o>>>0)<o?1:0,e+n+s+a+d+(c+=(l=l+u>>>0)<u?1:0)>>>0},t.sum64_5_lo=function(e,t,n,r,s,i,a,o,d,u){return t+r+i+o+u>>>0},t.rotr64_hi=function(e,t,n){return(t<<32-n|e>>>n)>>>0},t.rotr64_lo=function(e,t,n){return(e<<32-n|t>>>n)>>>0},t.shr64_hi=function(e,t,n){return e>>>n},t.shr64_lo=function(e,t,n){return(e<<32-n|t>>>n)>>>0}},"./node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!*************************************************!*\
  !*** ./node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! hash.js */"./node_modules/hash.js/lib/hash.js"),s=n(/*! minimalistic-crypto-utils */"./node_modules/minimalistic-crypto-utils/lib/utils.js"),i=n(/*! minimalistic-assert */"./node_modules/minimalistic-assert/index.js");function a(e){if(!(this instanceof a))return new a(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=s.toArray(e.entropy,e.entropyEnc||"hex"),n=s.toArray(e.nonce,e.nonceEnc||"hex"),r=s.toArray(e.pers,e.persEnc||"hex");i(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,n,r)}e.exports=a,a.prototype._init=function(e,t,n){var r=e.concat(t).concat(n);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var s=0;s<this.V.length;s++)this.K[s]=0,this.V[s]=1;this._update(r),this._reseed=1,this.reseedInterval=281474976710656},a.prototype._hmac=function(){return new r.hmac(this.hash,this.K)},a.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},a.prototype.reseed=function(e,t,n,r){"string"!=typeof t&&(r=n,n=t,t=null),e=s.toArray(e,t),n=s.toArray(n,r),i(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(n||[])),this._reseed=1},a.prototype.generate=function(e,t,n,r){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(r=n,n=t,t=null),n&&(n=s.toArray(n,r||"hex"),this._update(n));for(var i=[];i.length<e;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var a=i.slice(0,e);return this._update(n),this._reseed++,s.encode(a,t)}},"./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t){t.read=function(e,t,n,r,s){var i,a,o=8*s-r-1,d=(1<<o)-1,u=d>>1,c=-7,l=n?s-1:0,h=n?-1:1,f=e[t+l];for(l+=h,i=f&(1<<-c)-1,f>>=-c,c+=o;c>0;i=256*i+e[t+l],l+=h,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+e[t+l],l+=h,c-=8);if(0===i)i=1-u;else{if(i===d)return a?NaN:1/0*(f?-1:1);a+=Math.pow(2,r),i-=u}return(f?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,s,i){var a,o,d,u=8*i-s-1,c=(1<<u)-1,l=c>>1,h=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:i-1,m=r?1:-1,_=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(d=Math.pow(2,-a))<1&&(a--,d*=2),(t+=a+l>=1?h/d:h*Math.pow(2,1-l))*d>=2&&(a++,d/=2),a+l>=c?(o=0,a=c):a+l>=1?(o=(t*d-1)*Math.pow(2,s),a+=l):(o=t*Math.pow(2,l-1)*Math.pow(2,s),a=0));s>=8;e[n+f]=255&o,f+=m,o/=256,s-=8);for(a=a<<s|o,u+=s;u>0;e[n+f]=255&a,f+=m,a/=256,u-=8);e[n+f-m]|=128*_}},"./node_modules/indexof/index.js":
/*!***************************************!*\
  !*** ./node_modules/indexof/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},"./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},"./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},"./node_modules/jwt-simple/index.js":
/*!******************************************!*\
  !*** ./node_modules/jwt-simple/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./lib/jwt */"./node_modules/jwt-simple/lib/jwt.js")},"./node_modules/jwt-simple/lib/jwt.js":
/*!********************************************!*\
  !*** ./node_modules/jwt-simple/lib/jwt.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! crypto */"./node_modules/crypto-browserify/index.js"),s={HS256:"sha256",HS384:"sha384",HS512:"sha512",RS256:"RSA-SHA256"},i={HS256:"hmac",HS384:"hmac",HS512:"hmac",RS256:"sign"},a=e.exports;function o(e,t,n,s){var i;if("hmac"===s)i=r.createHmac(n,t).update(e).digest("base64");else{if("sign"!=s)throw new Error("Algorithm type not recognized");i=r.createSign(n).update(e).sign(t,"base64")}return l(i)}function d(e){return new t(u(e),"base64").toString()}function u(e){return(e+=new Array(5-e.length%4).join("=")).replace(/\-/g,"+").replace(/_/g,"/")}function c(e){return l(new t(e).toString("base64"))}function l(e){return e.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}a.version="0.5.1",a.decode=function(e,t,n,a){if(!e)throw new Error("No token supplied");var c=e.split(".");if(3!==c.length)throw new Error("Not enough or too many segments");var l=c[0],h=c[1],f=c[2],m=JSON.parse(d(l)),_=JSON.parse(d(h));if(!n){var p=s[a||m.alg],y=i[a||m.alg];if(!p||!y)throw new Error("Algorithm not supported");if(!function(e,t,n,s,i){if("hmac"===s)return i===o(e,t,n,s);if("sign"==s)return r.createVerify(n).update(e).verify(t,u(i),"base64");throw new Error("Algorithm type not recognized")}([l,h].join("."),t,p,y,f))throw new Error("Signature verification failed");if(_.nbf&&Date.now()<1e3*_.nbf)throw new Error("Token not yet active");if(_.exp&&Date.now()>1e3*_.exp)throw new Error("Token expired")}return _},a.encode=function(e,t,n,r){if(!t)throw new Error("Require key");n||(n="HS256");var a=s[n],d=i[n];if(!a||!d)throw new Error("Algorithm not supported");var u={typ:"JWT",alg:n};r&&r.header&&function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}(u,r.header);var l=[];return l.push(c(JSON.stringify(u))),l.push(c(JSON.stringify(e))),l.push(o(l.join("."),t,a,d)),l.join(".")}}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/md5.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/md5.js/index.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! hash-base */"./node_modules/hash-base/index.js"),i=new Array(16);function a(){s.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function o(e,t){return e<<t|e>>>32-t}function d(e,t,n,r,s,i,a){return o(e+(t&n|~t&r)+s+i|0,a)+t|0}function u(e,t,n,r,s,i,a){return o(e+(t&r|n&~r)+s+i|0,a)+t|0}function c(e,t,n,r,s,i,a){return o(e+(t^n^r)+s+i|0,a)+t|0}function l(e,t,n,r,s,i,a){return o(e+(n^(t|~r))+s+i|0,a)+t|0}r(a,s),a.prototype._update=function(){for(var e=i,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var n=this._a,r=this._b,s=this._c,a=this._d;r=l(r=l(r=l(r=l(r=c(r=c(r=c(r=c(r=u(r=u(r=u(r=u(r=d(r=d(r=d(r=d(r,s=d(s,a=d(a,n=d(n,r,s,a,e[0],3614090360,7),r,s,e[1],3905402710,12),n,r,e[2],606105819,17),a,n,e[3],3250441966,22),s=d(s,a=d(a,n=d(n,r,s,a,e[4],4118548399,7),r,s,e[5],1200080426,12),n,r,e[6],2821735955,17),a,n,e[7],4249261313,22),s=d(s,a=d(a,n=d(n,r,s,a,e[8],1770035416,7),r,s,e[9],2336552879,12),n,r,e[10],4294925233,17),a,n,e[11],2304563134,22),s=d(s,a=d(a,n=d(n,r,s,a,e[12],1804603682,7),r,s,e[13],4254626195,12),n,r,e[14],2792965006,17),a,n,e[15],1236535329,22),s=u(s,a=u(a,n=u(n,r,s,a,e[1],4129170786,5),r,s,e[6],3225465664,9),n,r,e[11],643717713,14),a,n,e[0],3921069994,20),s=u(s,a=u(a,n=u(n,r,s,a,e[5],3593408605,5),r,s,e[10],38016083,9),n,r,e[15],3634488961,14),a,n,e[4],3889429448,20),s=u(s,a=u(a,n=u(n,r,s,a,e[9],568446438,5),r,s,e[14],3275163606,9),n,r,e[3],4107603335,14),a,n,e[8],1163531501,20),s=u(s,a=u(a,n=u(n,r,s,a,e[13],2850285829,5),r,s,e[2],4243563512,9),n,r,e[7],1735328473,14),a,n,e[12],2368359562,20),s=c(s,a=c(a,n=c(n,r,s,a,e[5],4294588738,4),r,s,e[8],2272392833,11),n,r,e[11],1839030562,16),a,n,e[14],4259657740,23),s=c(s,a=c(a,n=c(n,r,s,a,e[1],2763975236,4),r,s,e[4],1272893353,11),n,r,e[7],4139469664,16),a,n,e[10],3200236656,23),s=c(s,a=c(a,n=c(n,r,s,a,e[13],681279174,4),r,s,e[0],3936430074,11),n,r,e[3],3572445317,16),a,n,e[6],76029189,23),s=c(s,a=c(a,n=c(n,r,s,a,e[9],3654602809,4),r,s,e[12],3873151461,11),n,r,e[15],530742520,16),a,n,e[2],3299628645,23),s=l(s,a=l(a,n=l(n,r,s,a,e[0],4096336452,6),r,s,e[7],1126891415,10),n,r,e[14],2878612391,15),a,n,e[5],4237533241,21),s=l(s,a=l(a,n=l(n,r,s,a,e[12],1700485571,6),r,s,e[3],2399980690,10),n,r,e[10],4293915773,15),a,n,e[1],2240044497,21),s=l(s,a=l(a,n=l(n,r,s,a,e[8],1873313359,6),r,s,e[15],4264355552,10),n,r,e[6],2734768916,15),a,n,e[13],1309151649,21),s=l(s,a=l(a,n=l(n,r,s,a,e[4],4149444226,6),r,s,e[11],3174756917,10),n,r,e[2],718787259,15),a,n,e[9],3951481745,21),this._a=this._a+n|0,this._b=this._b+r|0,this._c=this._c+s|0,this._d=this._d+a|0},a.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=new t(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=a}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/miller-rabin/lib/mr.js":
/*!*********************************************!*\
  !*** ./node_modules/miller-rabin/lib/mr.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),s=n(/*! brorand */"./node_modules/brorand/index.js");function i(e){this.rand=e||new s.Rand}e.exports=i,i.create=function(e){return new i(e)},i.prototype._randbelow=function(e){var t=e.bitLength(),n=Math.ceil(t/8);do{var s=new r(this.rand.generate(n))}while(s.cmp(e)>=0);return s},i.prototype._randrange=function(e,t){var n=t.sub(e);return e.add(this._randbelow(n))},i.prototype.test=function(e,t,n){var s=e.bitLength(),i=r.mont(e),a=new r(1).toRed(i);t||(t=Math.max(1,s/48|0));for(var o=e.subn(1),d=0;!o.testn(d);d++);for(var u=e.shrn(d),c=o.toRed(i);t>0;t--){var l=this._randrange(new r(2),o);n&&n(l);var h=l.toRed(i).redPow(u);if(0!==h.cmp(a)&&0!==h.cmp(c)){for(var f=1;f<d;f++){if(0===(h=h.redSqr()).cmp(a))return!1;if(0===h.cmp(c))break}if(f===d)return!1}}return!0},i.prototype.getDivisor=function(e,t){var n=e.bitLength(),s=r.mont(e),i=new r(1).toRed(s);t||(t=Math.max(1,n/48|0));for(var a=e.subn(1),o=0;!a.testn(o);o++);for(var d=e.shrn(o),u=a.toRed(s);t>0;t--){var c=this._randrange(new r(2),a),l=e.gcd(c);if(0!==l.cmpn(1))return l;var h=c.toRed(s).redPow(d);if(0!==h.cmp(i)&&0!==h.cmp(u)){for(var f=1;f<o;f++){if(0===(h=h.redSqr()).cmp(i))return h.fromRed().subn(1).gcd(e);if(0===h.cmp(u))break}if(f===o)return(h=h.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},"./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/*! no static exports found */function(e,t){function n(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=n,n.equal=function(e,t,n){if(e!=t)throw new Error(n||"Assertion failed: "+e+" != "+t)}},"./node_modules/minimalistic-crypto-utils/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/minimalistic-crypto-utils/lib/utils.js ***!
  \*************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=t;function s(e){return 1===e.length?"0"+e:e}function i(e){for(var t="",n=0;n<e.length;n++)t+=s(e[n].toString(16));return t}r.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var n=[];if("string"!=typeof e){for(var r=0;r<e.length;r++)n[r]=0|e[r];return n}if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),r=0;r<e.length;r+=2)n.push(parseInt(e[r]+e[r+1],16));else for(r=0;r<e.length;r++){var s=e.charCodeAt(r),i=s>>8,a=255&s;i?n.push(i,a):n.push(a)}return n},r.zero2=s,r.toHex=i,r.encode=function(e,t){return"hex"===t?i(e):e}},"./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r={"./af":"./node_modules/moment/locale/af.js","./af.js":"./node_modules/moment/locale/af.js","./ar":"./node_modules/moment/locale/ar.js","./ar-dz":"./node_modules/moment/locale/ar-dz.js","./ar-dz.js":"./node_modules/moment/locale/ar-dz.js","./ar-kw":"./node_modules/moment/locale/ar-kw.js","./ar-kw.js":"./node_modules/moment/locale/ar-kw.js","./ar-ly":"./node_modules/moment/locale/ar-ly.js","./ar-ly.js":"./node_modules/moment/locale/ar-ly.js","./ar-ma":"./node_modules/moment/locale/ar-ma.js","./ar-ma.js":"./node_modules/moment/locale/ar-ma.js","./ar-sa":"./node_modules/moment/locale/ar-sa.js","./ar-sa.js":"./node_modules/moment/locale/ar-sa.js","./ar-tn":"./node_modules/moment/locale/ar-tn.js","./ar-tn.js":"./node_modules/moment/locale/ar-tn.js","./ar.js":"./node_modules/moment/locale/ar.js","./az":"./node_modules/moment/locale/az.js","./az.js":"./node_modules/moment/locale/az.js","./be":"./node_modules/moment/locale/be.js","./be.js":"./node_modules/moment/locale/be.js","./bg":"./node_modules/moment/locale/bg.js","./bg.js":"./node_modules/moment/locale/bg.js","./bm":"./node_modules/moment/locale/bm.js","./bm.js":"./node_modules/moment/locale/bm.js","./bn":"./node_modules/moment/locale/bn.js","./bn.js":"./node_modules/moment/locale/bn.js","./bo":"./node_modules/moment/locale/bo.js","./bo.js":"./node_modules/moment/locale/bo.js","./br":"./node_modules/moment/locale/br.js","./br.js":"./node_modules/moment/locale/br.js","./bs":"./node_modules/moment/locale/bs.js","./bs.js":"./node_modules/moment/locale/bs.js","./ca":"./node_modules/moment/locale/ca.js","./ca.js":"./node_modules/moment/locale/ca.js","./cs":"./node_modules/moment/locale/cs.js","./cs.js":"./node_modules/moment/locale/cs.js","./cv":"./node_modules/moment/locale/cv.js","./cv.js":"./node_modules/moment/locale/cv.js","./cy":"./node_modules/moment/locale/cy.js","./cy.js":"./node_modules/moment/locale/cy.js","./da":"./node_modules/moment/locale/da.js","./da.js":"./node_modules/moment/locale/da.js","./de":"./node_modules/moment/locale/de.js","./de-at":"./node_modules/moment/locale/de-at.js","./de-at.js":"./node_modules/moment/locale/de-at.js","./de-ch":"./node_modules/moment/locale/de-ch.js","./de-ch.js":"./node_modules/moment/locale/de-ch.js","./de.js":"./node_modules/moment/locale/de.js","./dv":"./node_modules/moment/locale/dv.js","./dv.js":"./node_modules/moment/locale/dv.js","./el":"./node_modules/moment/locale/el.js","./el.js":"./node_modules/moment/locale/el.js","./en-au":"./node_modules/moment/locale/en-au.js","./en-au.js":"./node_modules/moment/locale/en-au.js","./en-ca":"./node_modules/moment/locale/en-ca.js","./en-ca.js":"./node_modules/moment/locale/en-ca.js","./en-gb":"./node_modules/moment/locale/en-gb.js","./en-gb.js":"./node_modules/moment/locale/en-gb.js","./en-ie":"./node_modules/moment/locale/en-ie.js","./en-ie.js":"./node_modules/moment/locale/en-ie.js","./en-il":"./node_modules/moment/locale/en-il.js","./en-il.js":"./node_modules/moment/locale/en-il.js","./en-nz":"./node_modules/moment/locale/en-nz.js","./en-nz.js":"./node_modules/moment/locale/en-nz.js","./eo":"./node_modules/moment/locale/eo.js","./eo.js":"./node_modules/moment/locale/eo.js","./es":"./node_modules/moment/locale/es.js","./es-do":"./node_modules/moment/locale/es-do.js","./es-do.js":"./node_modules/moment/locale/es-do.js","./es-us":"./node_modules/moment/locale/es-us.js","./es-us.js":"./node_modules/moment/locale/es-us.js","./es.js":"./node_modules/moment/locale/es.js","./et":"./node_modules/moment/locale/et.js","./et.js":"./node_modules/moment/locale/et.js","./eu":"./node_modules/moment/locale/eu.js","./eu.js":"./node_modules/moment/locale/eu.js","./fa":"./node_modules/moment/locale/fa.js","./fa.js":"./node_modules/moment/locale/fa.js","./fi":"./node_modules/moment/locale/fi.js","./fi.js":"./node_modules/moment/locale/fi.js","./fo":"./node_modules/moment/locale/fo.js","./fo.js":"./node_modules/moment/locale/fo.js","./fr":"./node_modules/moment/locale/fr.js","./fr-ca":"./node_modules/moment/locale/fr-ca.js","./fr-ca.js":"./node_modules/moment/locale/fr-ca.js","./fr-ch":"./node_modules/moment/locale/fr-ch.js","./fr-ch.js":"./node_modules/moment/locale/fr-ch.js","./fr.js":"./node_modules/moment/locale/fr.js","./fy":"./node_modules/moment/locale/fy.js","./fy.js":"./node_modules/moment/locale/fy.js","./gd":"./node_modules/moment/locale/gd.js","./gd.js":"./node_modules/moment/locale/gd.js","./gl":"./node_modules/moment/locale/gl.js","./gl.js":"./node_modules/moment/locale/gl.js","./gom-latn":"./node_modules/moment/locale/gom-latn.js","./gom-latn.js":"./node_modules/moment/locale/gom-latn.js","./gu":"./node_modules/moment/locale/gu.js","./gu.js":"./node_modules/moment/locale/gu.js","./he":"./node_modules/moment/locale/he.js","./he.js":"./node_modules/moment/locale/he.js","./hi":"./node_modules/moment/locale/hi.js","./hi.js":"./node_modules/moment/locale/hi.js","./hr":"./node_modules/moment/locale/hr.js","./hr.js":"./node_modules/moment/locale/hr.js","./hu":"./node_modules/moment/locale/hu.js","./hu.js":"./node_modules/moment/locale/hu.js","./hy-am":"./node_modules/moment/locale/hy-am.js","./hy-am.js":"./node_modules/moment/locale/hy-am.js","./id":"./node_modules/moment/locale/id.js","./id.js":"./node_modules/moment/locale/id.js","./is":"./node_modules/moment/locale/is.js","./is.js":"./node_modules/moment/locale/is.js","./it":"./node_modules/moment/locale/it.js","./it.js":"./node_modules/moment/locale/it.js","./ja":"./node_modules/moment/locale/ja.js","./ja.js":"./node_modules/moment/locale/ja.js","./jv":"./node_modules/moment/locale/jv.js","./jv.js":"./node_modules/moment/locale/jv.js","./ka":"./node_modules/moment/locale/ka.js","./ka.js":"./node_modules/moment/locale/ka.js","./kk":"./node_modules/moment/locale/kk.js","./kk.js":"./node_modules/moment/locale/kk.js","./km":"./node_modules/moment/locale/km.js","./km.js":"./node_modules/moment/locale/km.js","./kn":"./node_modules/moment/locale/kn.js","./kn.js":"./node_modules/moment/locale/kn.js","./ko":"./node_modules/moment/locale/ko.js","./ko.js":"./node_modules/moment/locale/ko.js","./ky":"./node_modules/moment/locale/ky.js","./ky.js":"./node_modules/moment/locale/ky.js","./lb":"./node_modules/moment/locale/lb.js","./lb.js":"./node_modules/moment/locale/lb.js","./lo":"./node_modules/moment/locale/lo.js","./lo.js":"./node_modules/moment/locale/lo.js","./lt":"./node_modules/moment/locale/lt.js","./lt.js":"./node_modules/moment/locale/lt.js","./lv":"./node_modules/moment/locale/lv.js","./lv.js":"./node_modules/moment/locale/lv.js","./me":"./node_modules/moment/locale/me.js","./me.js":"./node_modules/moment/locale/me.js","./mi":"./node_modules/moment/locale/mi.js","./mi.js":"./node_modules/moment/locale/mi.js","./mk":"./node_modules/moment/locale/mk.js","./mk.js":"./node_modules/moment/locale/mk.js","./ml":"./node_modules/moment/locale/ml.js","./ml.js":"./node_modules/moment/locale/ml.js","./mn":"./node_modules/moment/locale/mn.js","./mn.js":"./node_modules/moment/locale/mn.js","./mr":"./node_modules/moment/locale/mr.js","./mr.js":"./node_modules/moment/locale/mr.js","./ms":"./node_modules/moment/locale/ms.js","./ms-my":"./node_modules/moment/locale/ms-my.js","./ms-my.js":"./node_modules/moment/locale/ms-my.js","./ms.js":"./node_modules/moment/locale/ms.js","./mt":"./node_modules/moment/locale/mt.js","./mt.js":"./node_modules/moment/locale/mt.js","./my":"./node_modules/moment/locale/my.js","./my.js":"./node_modules/moment/locale/my.js","./nb":"./node_modules/moment/locale/nb.js","./nb.js":"./node_modules/moment/locale/nb.js","./ne":"./node_modules/moment/locale/ne.js","./ne.js":"./node_modules/moment/locale/ne.js","./nl":"./node_modules/moment/locale/nl.js","./nl-be":"./node_modules/moment/locale/nl-be.js","./nl-be.js":"./node_modules/moment/locale/nl-be.js","./nl.js":"./node_modules/moment/locale/nl.js","./nn":"./node_modules/moment/locale/nn.js","./nn.js":"./node_modules/moment/locale/nn.js","./pa-in":"./node_modules/moment/locale/pa-in.js","./pa-in.js":"./node_modules/moment/locale/pa-in.js","./pl":"./node_modules/moment/locale/pl.js","./pl.js":"./node_modules/moment/locale/pl.js","./pt":"./node_modules/moment/locale/pt.js","./pt-br":"./node_modules/moment/locale/pt-br.js","./pt-br.js":"./node_modules/moment/locale/pt-br.js","./pt.js":"./node_modules/moment/locale/pt.js","./ro":"./node_modules/moment/locale/ro.js","./ro.js":"./node_modules/moment/locale/ro.js","./ru":"./node_modules/moment/locale/ru.js","./ru.js":"./node_modules/moment/locale/ru.js","./sd":"./node_modules/moment/locale/sd.js","./sd.js":"./node_modules/moment/locale/sd.js","./se":"./node_modules/moment/locale/se.js","./se.js":"./node_modules/moment/locale/se.js","./si":"./node_modules/moment/locale/si.js","./si.js":"./node_modules/moment/locale/si.js","./sk":"./node_modules/moment/locale/sk.js","./sk.js":"./node_modules/moment/locale/sk.js","./sl":"./node_modules/moment/locale/sl.js","./sl.js":"./node_modules/moment/locale/sl.js","./sq":"./node_modules/moment/locale/sq.js","./sq.js":"./node_modules/moment/locale/sq.js","./sr":"./node_modules/moment/locale/sr.js","./sr-cyrl":"./node_modules/moment/locale/sr-cyrl.js","./sr-cyrl.js":"./node_modules/moment/locale/sr-cyrl.js","./sr.js":"./node_modules/moment/locale/sr.js","./ss":"./node_modules/moment/locale/ss.js","./ss.js":"./node_modules/moment/locale/ss.js","./sv":"./node_modules/moment/locale/sv.js","./sv.js":"./node_modules/moment/locale/sv.js","./sw":"./node_modules/moment/locale/sw.js","./sw.js":"./node_modules/moment/locale/sw.js","./ta":"./node_modules/moment/locale/ta.js","./ta.js":"./node_modules/moment/locale/ta.js","./te":"./node_modules/moment/locale/te.js","./te.js":"./node_modules/moment/locale/te.js","./tet":"./node_modules/moment/locale/tet.js","./tet.js":"./node_modules/moment/locale/tet.js","./tg":"./node_modules/moment/locale/tg.js","./tg.js":"./node_modules/moment/locale/tg.js","./th":"./node_modules/moment/locale/th.js","./th.js":"./node_modules/moment/locale/th.js","./tl-ph":"./node_modules/moment/locale/tl-ph.js","./tl-ph.js":"./node_modules/moment/locale/tl-ph.js","./tlh":"./node_modules/moment/locale/tlh.js","./tlh.js":"./node_modules/moment/locale/tlh.js","./tr":"./node_modules/moment/locale/tr.js","./tr.js":"./node_modules/moment/locale/tr.js","./tzl":"./node_modules/moment/locale/tzl.js","./tzl.js":"./node_modules/moment/locale/tzl.js","./tzm":"./node_modules/moment/locale/tzm.js","./tzm-latn":"./node_modules/moment/locale/tzm-latn.js","./tzm-latn.js":"./node_modules/moment/locale/tzm-latn.js","./tzm.js":"./node_modules/moment/locale/tzm.js","./ug-cn":"./node_modules/moment/locale/ug-cn.js","./ug-cn.js":"./node_modules/moment/locale/ug-cn.js","./uk":"./node_modules/moment/locale/uk.js","./uk.js":"./node_modules/moment/locale/uk.js","./ur":"./node_modules/moment/locale/ur.js","./ur.js":"./node_modules/moment/locale/ur.js","./uz":"./node_modules/moment/locale/uz.js","./uz-latn":"./node_modules/moment/locale/uz-latn.js","./uz-latn.js":"./node_modules/moment/locale/uz-latn.js","./uz.js":"./node_modules/moment/locale/uz.js","./vi":"./node_modules/moment/locale/vi.js","./vi.js":"./node_modules/moment/locale/vi.js","./x-pseudo":"./node_modules/moment/locale/x-pseudo.js","./x-pseudo.js":"./node_modules/moment/locale/x-pseudo.js","./yo":"./node_modules/moment/locale/yo.js","./yo.js":"./node_modules/moment/locale/yo.js","./zh-cn":"./node_modules/moment/locale/zh-cn.js","./zh-cn.js":"./node_modules/moment/locale/zh-cn.js","./zh-hk":"./node_modules/moment/locale/zh-hk.js","./zh-hk.js":"./node_modules/moment/locale/zh-hk.js","./zh-tw":"./node_modules/moment/locale/zh-tw.js","./zh-tw.js":"./node_modules/moment/locale/zh-tw.js"};function s(e){var t=i(e);return n(t)}function i(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}s.keys=function(){return Object.keys(r)},s.resolve=i,e.exports=s,s.id="./node_modules/moment/locale sync recursive ^\\.\\/.*$"},"./node_modules/moment/locale/af.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/af.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-dz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-dz.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-kw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-kw.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-ly.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ly.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},s=function(e){return function(t,s,i,a){var o=n(t),d=r[e][n(t)];return 2===o&&(d=d[s?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:s("s"),ss:s("s"),m:s("m"),mm:s("m"),h:s("h"),hh:s("h"),d:s("d"),dd:s("d"),M:s("M"),MM:s("M"),y:s("y"),yy:s("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-ma.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ma.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-sa.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-sa.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-tn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-tn.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ar.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},s={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,a){var o=r(t),d=s[e][r(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},a=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/az.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/az.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10,r=e%100-n,s=e>=100?100:null;return e+(t[n]||t[r]||t[s])},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/be.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/be.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){var r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+function(e,t){var n=e.split("_");return t%10==1&&t%100!=11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}(r[n],+e)}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bg.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bm.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bm.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bn.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bo.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/br.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/br.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bs.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ca.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ca.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/cs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cs.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");function r(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,s){var i=e+" ";switch(n){case"s":return t||s?"pár sekund":"pár sekundami";case"ss":return t||s?i+(r(e)?"sekundy":"sekund"):i+"sekundami";case"m":return t?"minuta":s?"minutu":"minutou";case"mm":return t||s?i+(r(e)?"minuty":"minut"):i+"minutami";case"h":return t?"hodina":s?"hodinu":"hodinou";case"hh":return t||s?i+(r(e)?"hodiny":"hodin"):i+"hodinami";case"d":return t||s?"den":"dnem";case"dd":return t||s?i+(r(e)?"dny":"dní"):i+"dny";case"M":return t||s?"měsíc":"měsícem";case"MM":return t||s?i+(r(e)?"měsíce":"měsíců"):i+"měsíci";case"y":return t||s?"rok":"rokem";case"yy":return t||s?i+(r(e)?"roky":"let"):i+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsParse:function(e,t){var n,r=[];for(n=0;n<12;n++)r[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return r}(t,n),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(n),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(t),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/cv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cv.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/cy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cy.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="";return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/da.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/da.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/de-at.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-at.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?s[n][0]:s[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/de-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-ch.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?s[n][0]:s[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/de.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/de.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?s[n][0]:s[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/dv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/dv.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/el.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/el.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n=this._calendarEl[e],r=t&&t.hours();return function(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}(n)&&(n=n.apply(t)),n.replace("{}",r%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-au.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-au.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ca.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-gb.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-gb.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-ie.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ie.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-il.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-il.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-nz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-nz.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/eo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eo.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/es-do.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-do.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],s=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/es-us.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-us.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"MMMM [de] D [de] YYYY",LLL:"MMMM [de] D [de] YYYY h:mm A",LLLL:"dddd, MMMM [de] D [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/es.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/es.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],s=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/et.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/et.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?s[n][2]?s[n][2]:s[n][1]:r?s[n][0]:s[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/eu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eu.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fa.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fa.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fi.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,s,i){var a="";switch(s){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":a=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":a=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":a=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":a=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":a=i?"vuoden":"vuotta"}return a=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+a}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fo.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fr-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ca.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fr-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ch.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fr.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fy.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gd.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10==2?"na":"mh";return e+t},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gl.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gom-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-latn.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka horan","ek hor"],hh:[e+" horanim",e+" horam"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?s[n][0]:s[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gu.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/he.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/he.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hi.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hr.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hu.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var s=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return s+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return s+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return s+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return s+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return s+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return s+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hy-am.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/hy-am.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/id.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/id.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/is.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/is.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,s){var i=e+" ";switch(r){case"s":return n||s?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||s?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||s?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||s?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":s?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(s?"daga":"dögum"):n?i+"dagur":i+(s?"dag":"degi");case"M":return n?"mánuður":s?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(s?"mánuði":"mánuðum"):n?i+"mánuður":i+(s?"mánuð":"mánuði");case"y":return n||s?"ár":"ári";case"yy":return t(e)?i+(n||s?"ár":"árum"):i+(n||s?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/it.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/it.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ja.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ja.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/jv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/jv.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ka.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ka.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/kk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kk.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/km.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/km.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/kn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kn.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ko.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ky.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ky.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lb.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?s[n][0]:s[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10,r=e/10;return n(0===t?r:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lo.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lt.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?s(n)[0]:r?s(n)[1]:s(n)[2]}function r(e){return e%10==0||e>10&&e<20}function s(e){return t[e].split("_")}function i(e,t,i,a){var o=e+" ";return 1===e?o+n(0,t,i[0],a):t?o+(r(e)?s(i)[1]:s(i)[0]):a?o+s(i)[1]:o+(r(e)?s(i)[1]:s(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lv.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,s){return e+" "+n(t[s],e,r)}function s(e,r,s){return n(t[s],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:s,mm:r,h:s,hh:r,d:s,dd:r,M:s,MM:r,y:s,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/me.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/me.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var s=t.words[r];return 1===r.length?n?s[0]:s[1]:e+" "+t.correctGrammaticalCase(e,s)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mi.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mk.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ml.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ml.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mn.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mr.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var s="";if(t)switch(n){case"s":s="काही सेकंद";break;case"ss":s="%d सेकंद";break;case"m":s="एक मिनिट";break;case"mm":s="%d मिनिटे";break;case"h":s="एक तास";break;case"hh":s="%d तास";break;case"d":s="एक दिवस";break;case"dd":s="%d दिवस";break;case"M":s="एक महिना";break;case"MM":s="%d महिने";break;case"y":s="एक वर्ष";break;case"yy":s="%d वर्षे"}else switch(n){case"s":s="काही सेकंदां";break;case"ss":s="%d सेकंदां";break;case"m":s="एका मिनिटा";break;case"mm":s="%d मिनिटां";break;case"h":s="एका तासा";break;case"hh":s="%d तासां";break;case"d":s="एका दिवसा";break;case"dd":s="%d दिवसां";break;case"M":s="एका महिन्या";break;case"MM":s="%d महिन्यां";break;case"y":s="एका वर्षा";break;case"yy":s="%d वर्षां"}return s.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ms-my.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ms-my.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ms.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ms.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mt.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/my.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/my.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nb.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ne.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ne.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nl-be.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/nl-be.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],s=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nl.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],s=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:s,monthsShortRegex:s,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nn.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pa-in.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pa-in.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pl.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function s(e,t,n){var s=e+" ";switch(n){case"ss":return s+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return s+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return s+(r(e)?"godziny":"godzin");case"MM":return s+(r(e)?"miesiące":"miesięcy");case"yy":return s+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:s,m:s,mm:s,h:s,hh:s,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:s,y:"rok",yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pt-br.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pt-br.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pt.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ro.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ro.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ru.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ru.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){var r={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+function(e,t){var n=e.split("_");return t%10==1&&t%100!=11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}(r[n],+e)}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sd.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/se.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/se.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/si.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/si.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sk.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function s(e,t,n,s){var i=e+" ";switch(n){case"s":return t||s?"pár sekúnd":"pár sekundami";case"ss":return t||s?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":s?"minútu":"minútou";case"mm":return t||s?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":s?"hodinu":"hodinou";case"hh":return t||s?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||s?"deň":"dňom";case"dd":return t||s?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||s?"mesiac":"mesiacom";case"MM":return t||s?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||s?"rok":"rokom";case"yy":return t||s?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sl.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return s+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return s+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return s+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return s+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return s+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return s+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sq.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sq.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sr-cyrl.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/sr-cyrl.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var s=t.words[r];return 1===r.length?n?s[0]:s[1]:e+" "+t.correctGrammaticalCase(e,s)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sr.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var s=t.words[r];return 1===r.length?n?s[0]:s[1]:e+" "+t.correctGrammaticalCase(e,s)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ss.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ss.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sv.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sw.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sw.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ta.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ta.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/te.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/te.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tet.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tet.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tg.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/th.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/th.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tl-ph.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/tl-ph.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tlh.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tlh.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,s){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),s=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),s>0&&(i+=(""!==i?" ":"")+t[s]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10,s=e%100-r,i=e>=100?100:null;return e+(t[r]||t[s]||t[i])}},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tzl.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzl.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var s={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?s[n][0]:t?s[n][0]:s[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tzm-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/tzm-latn.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tzm.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzm.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ug-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ug-cn.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/uk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uk.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";function t(e,t,n){var r={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+function(e,t){var n=e.split("_");return t%10==1&&t%100!=11?n[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?n[1]:n[2]}(r[n],+e)}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};if(!e)return n.nominative;var r=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[r][e.day()]},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ur.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ur.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/uz-latn.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/uz-latn.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/uz.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uz.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/vi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/vi.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/x-pseudo.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/x-pseudo.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/yo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/yo.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/zh-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-cn.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/zh-hk.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-hk.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/locale/zh-tw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-tw.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(/*! ../moment */"./node_modules/moment/moment.js"))},"./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function s(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function a(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function d(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function u(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function h(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function f(e,t,n,r){return xt(e,t,n,r,!0).utc()}function m(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function _(e){if(null==e._isValid){var t=m(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),s=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(s=s&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return s;e._isValid=s}return e._isValid}function p(e){var t=f(NaN);return null!=e?h(m(t),e):m(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=s.momentProperties=[];function b(e,t){var n,r,s;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=m(t)),o(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)r=y[n],o(s=t[r])||(e[r]=s);return e}var g=!1;function M(e){b(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,s.updateOffset(this),g=!1)}function v(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function w(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function L(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=w(t)),n}function Y(e,t,n){var r,s=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),a=0;for(r=0;r<s;r++)(n&&e[r]!==t[r]||!n&&L(e[r])!==L(t[r]))&&a++;return a+i}function k(e){!1===s.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function j(e,t){var n=!0;return h(function(){if(null!=s.deprecationHandler&&s.deprecationHandler(null,e),n){for(var r,i=[],a=0;a<arguments.length;a++){if(r="","object"==typeof arguments[a]){for(var o in r+="\n["+a+"] ",arguments[0])r+=o+": "+arguments[0][o]+", ";r=r.slice(0,-2)}else r=arguments[a];i.push(r)}k(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var S,D={};function T(e,t){null!=s.deprecationHandler&&s.deprecationHandler(e,t),D[e]||(k(t),D[e]=!0)}function x(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function A(e,t){var n,r=h({},e);for(n in t)l(t,n)&&(a(e[n])&&a(t[n])?(r[n]={},h(r[n],e[n]),h(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)l(e,n)&&!l(t,n)&&a(e[n])&&(r[n]=h({},r[n]));return r}function E(e){null!=e&&this.set(e)}s.suppressDeprecationWarnings=!1,s.deprecationHandler=null,S=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n};var H={};function C(e,t){var n=e.toLowerCase();H[n]=H[n+"s"]=H[t]=e}function P(e){return"string"==typeof e?H[e]||H[e.toLowerCase()]:void 0}function O(e){var t,n,r={};for(n in e)l(e,n)&&(t=P(n))&&(r[t]=e[n]);return r}var I={};function z(e,t){I[e]=t}function B(e,t,n){var r=""+Math.abs(e),s=t-r.length,i=e>=0;return(i?n?"+":"":"-")+Math.pow(10,Math.max(0,s)).toString().substr(1)+r}var R=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,q={},W={};function U(e,t,n,r){var s=r;"string"==typeof r&&(s=function(){return this[r]()}),e&&(W[e]=s),t&&(W[t[0]]=function(){return B(s.apply(this,arguments),t[1],t[2])}),n&&(W[n]=function(){return this.localeData().ordinal(s.apply(this,arguments),e)})}function N(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function J(e,t){return e.isValid()?(t=G(t,e.localeData()),q[t]=q[t]||function(e){var t,n,r=e.match(R);for(t=0,n=r.length;t<n;t++)W[r[t]]?r[t]=W[r[t]]:r[t]=N(r[t]);return function(t){var s,i="";for(s=0;s<n;s++)i+=x(r[s])?r[s].call(t,e):r[s];return i}}(t),q[t](e)):e.localeData().invalidDate()}function G(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,r),F.lastIndex=0,n-=1;return e}var K=/\d/,V=/\d\d/,Q=/\d{3}/,Z=/\d{4}/,$=/[+-]?\d{6}/,X=/\d\d?/,ee=/\d\d\d\d?/,te=/\d\d\d\d\d\d?/,ne=/\d{1,3}/,re=/\d{1,4}/,se=/[+-]?\d{1,6}/,ie=/\d+/,ae=/[+-]?\d+/,oe=/Z|[+-]\d\d:?\d\d/gi,de=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ce={};function le(e,t,n){ce[e]=x(t)?t:function(e,r){return e&&n?n:t}}function he(e,t){return l(ce,e)?ce[e](t._strict,t._locale):new RegExp(function(e){return fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,s){return t||n||r||s}))}(e))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var me={};function _e(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),d(t)&&(r=function(e,n){n[t]=L(e)}),n=0;n<e.length;n++)me[e[n]]=r}function pe(e,t){_e(e,function(e,n,r,s){r._w=r._w||{},t(e,r._w,r,s)})}function ye(e,t,n){null!=t&&l(me,e)&&me[e](t,n._a,n,e)}var be=0,ge=1,Me=2,ve=3,we=4,Le=5,Ye=6,ke=7,je=8;function Se(e){return De(e)?366:365}function De(e){return e%4==0&&e%100!=0||e%400==0}U("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),C("year","y"),z("year",1),le("Y",ae),le("YY",X,V),le("YYYY",re,Z),le("YYYYY",se,$),le("YYYYYY",se,$),_e(["YYYYY","YYYYYY"],be),_e("YYYY",function(e,t){t[be]=2===e.length?s.parseTwoDigitYear(e):L(e)}),_e("YY",function(e,t){t[be]=s.parseTwoDigitYear(e)}),_e("Y",function(e,t){t[be]=parseInt(e,10)}),s.parseTwoDigitYear=function(e){return L(e)+(L(e)>68?1900:2e3)};var Te,xe=Ae("FullYear",!0);function Ae(e,t){return function(n){return null!=n?(He(this,e,n),s.updateOffset(this,t),this):Ee(this,e)}}function Ee(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function He(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&De(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ce(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Ce(e,t){if(isNaN(e)||isNaN(t))return NaN;var n=function(e,t){return(e%t+t)%t}(t,12);return e+=(t-n)/12,1===n?De(e)?29:28:31-n%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),U("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),z("month",8),le("M",X),le("MM",X,V),le("MMM",function(e,t){return t.monthsShortRegex(e)}),le("MMMM",function(e,t){return t.monthsRegex(e)}),_e(["M","MM"],function(e,t){t[ge]=L(e)-1}),_e(["MMM","MMMM"],function(e,t,n,r){var s=n._locale.monthsParse(e,r,n._strict);null!=s?t[ge]=s:m(n).invalidMonth=e});var Pe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Oe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ie="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function ze(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=L(t);else if(!d(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ce(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Be(e){return null!=e?(ze(this,e),s.updateOffset(this,!0),this):Ee(this,"Month")}var Re=ue,Fe=ue;function qe(){function e(e,t){return t.length-e.length}var t,n,r=[],s=[],i=[];for(t=0;t<12;t++)n=f([2e3,t]),r.push(this.monthsShort(n,"")),s.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),s.sort(e),i.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),s[t]=fe(s[t]);for(t=0;t<24;t++)i[t]=fe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function We(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Ue(e,t,n){var r=7+t-n,s=(7+We(e,0,r).getUTCDay()-t)%7;return-s+r-1}function Ne(e,t,n,r,s){var i,a,o=(7+n-r)%7,d=Ue(e,r,s),u=1+7*(t-1)+o+d;return u<=0?a=Se(i=e-1)+u:u>Se(e)?(i=e+1,a=u-Se(e)):(i=e,a=u),{year:i,dayOfYear:a}}function Je(e,t,n){var r,s,i=Ue(e.year(),t,n),a=Math.floor((e.dayOfYear()-i-1)/7)+1;return a<1?(s=e.year()-1,r=a+Ge(s,t,n)):a>Ge(e.year(),t,n)?(r=a-Ge(e.year(),t,n),s=e.year()+1):(s=e.year(),r=a),{week:r,year:s}}function Ge(e,t,n){var r=Ue(e,t,n),s=Ue(e+1,t,n);return(Se(e)-r+s)/7}U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),z("week",5),z("isoWeek",5),le("w",X),le("ww",X,V),le("W",X),le("WW",X,V),pe(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=L(e)}),U("d",0,"do","day"),U("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),U("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),U("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),z("day",11),z("weekday",11),z("isoWeekday",11),le("d",X),le("e",X),le("E",X),le("dd",function(e,t){return t.weekdaysMinRegex(e)}),le("ddd",function(e,t){return t.weekdaysShortRegex(e)}),le("dddd",function(e,t){return t.weekdaysRegex(e)}),pe(["dd","ddd","dddd"],function(e,t,n,r){var s=n._locale.weekdaysParse(e,r,n._strict);null!=s?t.d=s:m(n).invalidWeekday=e}),pe(["d","e","E"],function(e,t,n,r){t[r]=L(e)});var Ke="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ve="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Qe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ze=ue,$e=ue,Xe=ue;function et(){function e(e,t){return t.length-e.length}var t,n,r,s,i,a=[],o=[],d=[],u=[];for(t=0;t<7;t++)n=f([2e3,1]).day(t),r=this.weekdaysMin(n,""),s=this.weekdaysShort(n,""),i=this.weekdays(n,""),a.push(r),o.push(s),d.push(i),u.push(r),u.push(s),u.push(i);for(a.sort(e),o.sort(e),d.sort(e),u.sort(e),t=0;t<7;t++)o[t]=fe(o[t]),d[t]=fe(d[t]),u[t]=fe(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function tt(){return this.hours()%12||12}function nt(e,t){U(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function rt(e,t){return t._meridiemParse}U("H",["HH",2],0,"hour"),U("h",["hh",2],0,tt),U("k",["kk",2],0,function(){return this.hours()||24}),U("hmm",0,0,function(){return""+tt.apply(this)+B(this.minutes(),2)}),U("hmmss",0,0,function(){return""+tt.apply(this)+B(this.minutes(),2)+B(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+B(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+B(this.minutes(),2)+B(this.seconds(),2)}),nt("a",!0),nt("A",!1),C("hour","h"),z("hour",13),le("a",rt),le("A",rt),le("H",X),le("h",X),le("k",X),le("HH",X,V),le("hh",X,V),le("kk",X,V),le("hmm",ee),le("hmmss",te),le("Hmm",ee),le("Hmmss",te),_e(["H","HH"],ve),_e(["k","kk"],function(e,t,n){var r=L(e);t[ve]=24===r?0:r}),_e(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),_e(["h","hh"],function(e,t,n){t[ve]=L(e),m(n).bigHour=!0}),_e("hmm",function(e,t,n){var r=e.length-2;t[ve]=L(e.substr(0,r)),t[we]=L(e.substr(r)),m(n).bigHour=!0}),_e("hmmss",function(e,t,n){var r=e.length-4,s=e.length-2;t[ve]=L(e.substr(0,r)),t[we]=L(e.substr(r,2)),t[Le]=L(e.substr(s)),m(n).bigHour=!0}),_e("Hmm",function(e,t,n){var r=e.length-2;t[ve]=L(e.substr(0,r)),t[we]=L(e.substr(r))}),_e("Hmmss",function(e,t,n){var r=e.length-4,s=e.length-2;t[ve]=L(e.substr(0,r)),t[we]=L(e.substr(r,2)),t[Le]=L(e.substr(s))});var st,it=Ae("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Oe,monthsShort:Ie,week:{dow:0,doy:6},weekdays:Ke,weekdaysMin:Qe,weekdaysShort:Ve,meridiemParse:/[ap]\.?m?\.?/i},ot={},dt={};function ut(e){return e?e.toLowerCase().replace("_","-"):e}function ct(t){var r=null;if(!ot[t]&&void 0!==e&&e&&e.exports)try{r=st._abbr,n("./node_modules/moment/locale sync recursive ^\\.\\/.*$")("./"+t),lt(r)}catch(e){}return ot[t]}function lt(e,t){var n;return e&&((n=o(t)?ft(e):ht(e,t))?st=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),st._abbr}function ht(e,t){if(null!==t){var n,r=at;if(t.abbr=e,null!=ot[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])r=ot[t.parentLocale]._config;else{if(null==(n=ct(t.parentLocale)))return dt[t.parentLocale]||(dt[t.parentLocale]=[]),dt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return ot[e]=new E(A(r,t)),dt[e]&&dt[e].forEach(function(e){ht(e.name,e.config)}),lt(e),ot[e]}return delete ot[e],null}function ft(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return st;if(!i(e)){if(t=ct(e))return t;e=[e]}return function(e){for(var t,n,r,s,i=0;i<e.length;){for(s=ut(e[i]).split("-"),t=s.length,n=(n=ut(e[i+1]))?n.split("-"):null;t>0;){if(r=ct(s.slice(0,t).join("-")))return r;if(n&&n.length>=t&&Y(s,n,!0)>=t-1)break;t--}i++}return st}(e)}function mt(e){var t,n=e._a;return n&&-2===m(e).overflow&&(t=n[ge]<0||n[ge]>11?ge:n[Me]<1||n[Me]>Ce(n[be],n[ge])?Me:n[ve]<0||n[ve]>24||24===n[ve]&&(0!==n[we]||0!==n[Le]||0!==n[Ye])?ve:n[we]<0||n[we]>59?we:n[Le]<0||n[Le]>59?Le:n[Ye]<0||n[Ye]>999?Ye:-1,m(e)._overflowDayOfYear&&(t<be||t>Me)&&(t=Me),m(e)._overflowWeeks&&-1===t&&(t=ke),m(e)._overflowWeekday&&-1===t&&(t=je),m(e).overflow=t),e}function _t(e,t,n){return null!=e?e:null!=t?t:n}function pt(e){var t,n,r,i,a,o=[];if(!e._d){for(r=function(e){var t=new Date(s.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[Me]&&null==e._a[ge]&&function(e){var t,n,r,s,i,a,o,d;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,a=4,n=_t(t.GG,e._a[be],Je(At(),1,4).year),r=_t(t.W,1),((s=_t(t.E,1))<1||s>7)&&(d=!0);else{i=e._locale._week.dow,a=e._locale._week.doy;var u=Je(At(),i,a);n=_t(t.gg,e._a[be],u.year),r=_t(t.w,u.week),null!=t.d?((s=t.d)<0||s>6)&&(d=!0):null!=t.e?(s=t.e+i,(t.e<0||t.e>6)&&(d=!0)):s=i}r<1||r>Ge(n,i,a)?m(e)._overflowWeeks=!0:null!=d?m(e)._overflowWeekday=!0:(o=Ne(n,r,s,i,a),e._a[be]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(a=_t(e._a[be],r[be]),(e._dayOfYear>Se(a)||0===e._dayOfYear)&&(m(e)._overflowDayOfYear=!0),n=We(a,0,e._dayOfYear),e._a[ge]=n.getUTCMonth(),e._a[Me]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ve]&&0===e._a[we]&&0===e._a[Le]&&0===e._a[Ye]&&(e._nextDay=!0,e._a[ve]=0),e._d=(e._useUTC?We:function(e,t,n,r,s,i,a){var o=new Date(e,t,n,r,s,i,a);return e<100&&e>=0&&isFinite(o.getFullYear())&&o.setFullYear(e),o}).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ve]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(m(e).weekdayMismatch=!0)}}var yt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/Z|[+-]\d\d(?::?\d\d)?/,Mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],vt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((\-?\d+)/i;function Lt(e){var t,n,r,s,i,a,o=e._i,d=yt.exec(o)||bt.exec(o);if(d){for(m(e).iso=!0,t=0,n=Mt.length;t<n;t++)if(Mt[t][1].exec(d[1])){s=Mt[t][0],r=!1!==Mt[t][2];break}if(null==s)return void(e._isValid=!1);if(d[3]){for(t=0,n=vt.length;t<n;t++)if(vt[t][1].exec(d[3])){i=(d[2]||" ")+vt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(d[4]){if(!gt.exec(d[4]))return void(e._isValid=!1);a="Z"}e._f=s+(i||"")+(a||""),Dt(e)}else e._isValid=!1}var Yt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,n,r,s,i){var a=[function(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}(e),Ie.indexOf(t),parseInt(n,10),parseInt(r,10),parseInt(s,10)];return i&&a.push(parseInt(i,10)),a}var jt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function St(e){var t=Yt.exec(function(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}(e._i));if(t){var n=kt(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,n){if(e){var r=Ve.indexOf(e),s=new Date(t[0],t[1],t[2]).getDay();if(r!==s)return m(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(t[1],n,e))return;e._a=n,e._tzm=function(e,t,n){if(e)return jt[e];if(t)return 0;var r=parseInt(n,10),s=r%100,i=(r-s)/100;return 60*i+s}(t[8],t[9],t[10]),e._d=We.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),m(e).rfc2822=!0}else e._isValid=!1}function Dt(e){if(e._f!==s.ISO_8601)if(e._f!==s.RFC_2822){e._a=[],m(e).empty=!0;var t,n,r,i,a,o=""+e._i,d=o.length,u=0;for(r=G(e._f,e._locale).match(R)||[],t=0;t<r.length;t++)i=r[t],(n=(o.match(he(i,e))||[])[0])&&((a=o.substr(0,o.indexOf(n))).length>0&&m(e).unusedInput.push(a),o=o.slice(o.indexOf(n)+n.length),u+=n.length),W[i]?(n?m(e).empty=!1:m(e).unusedTokens.push(i),ye(i,n,e)):e._strict&&!n&&m(e).unusedTokens.push(i);m(e).charsLeftOver=d-u,o.length>0&&m(e).unusedInput.push(o),e._a[ve]<=12&&!0===m(e).bigHour&&e._a[ve]>0&&(m(e).bigHour=void 0),m(e).parsedDateParts=e._a.slice(0),m(e).meridiem=e._meridiem,e._a[ve]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[ve],e._meridiem),pt(e),mt(e)}else St(e);else Lt(e)}function Tt(e){var t=e._i,n=e._f;return e._locale=e._locale||ft(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),v(t)?new M(mt(t)):(u(t)?e._d=t:i(n)?function(e){var t,n,r,s,i;if(0===e._f.length)return m(e).invalidFormat=!0,void(e._d=new Date(NaN));for(s=0;s<e._f.length;s++)i=0,t=b({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[s],Dt(t),_(t)&&(i+=m(t).charsLeftOver,i+=10*m(t).unusedTokens.length,m(t).score=i,(null==r||i<r)&&(r=i,n=t));h(e,n||t)}(e):n?Dt(e):function(e){var t=e._i;o(t)?e._d=new Date(s.now()):u(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(Lt(e),!1===e._isValid&&(delete e._isValid,St(e),!1===e._isValid&&(delete e._isValid,s.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=c(t.slice(0),function(e){return parseInt(e,10)}),pt(e)):a(t)?function(e){if(!e._d){var t=O(e._i);e._a=c([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),pt(e)}}(e):d(t)?e._d=new Date(t):s.createFromInputFallback(e)}(e),_(e)||(e._d=null),e))}function xt(e,t,n,r,s){var o={};return!0!==n&&!1!==n||(r=n,n=void 0),(a(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=s,o._l=n,o._i=e,o._f=t,o._strict=r,function(e){var t=new M(mt(Tt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}(o)}function At(e,t,n,r){return xt(e,t,n,r,!1)}s.createFromInputFallback=j("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),s.ISO_8601=function(){},s.RFC_2822=function(){};var Et=j("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=At.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Ht=j("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=At.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()});function Ct(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return At();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Pt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ot(e){var t=O(e),n=t.year||0,r=t.quarter||0,s=t.month||0,i=t.week||0,a=t.day||0,o=t.hour||0,d=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Pt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Pt.length;++r)if(e[Pt[r]]){if(n)return!1;parseFloat(e[Pt[r]])!==L(e[Pt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*d+1e3*o*60*60,this._days=+a+7*i,this._months=+s+3*r+12*n,this._data={},this._locale=ft(),this._bubble()}function It(e){return e instanceof Ot}function zt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Bt(e,t){U(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+B(~~(e/60),2)+t+B(~~e%60,2)})}Bt("Z",":"),Bt("ZZ",""),le("Z",de),le("ZZ",de),_e(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Ft(de,e)});var Rt=/([\+\-]|\d\d)/gi;function Ft(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],s=(r+"").match(Rt)||["-",0,0],i=60*s[1]+L(s[2]);return 0===i?0:"+"===s[0]?i:-i}function qt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(v(e)||u(e)?e.valueOf():At(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),s.updateOffset(n,!1),n):At(e).local()}function Wt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Ut(){return!!this.isValid()&&this._isUTC&&0===this._offset}s.updateOffset=function(){};var Nt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Jt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Gt(e,t){var n,r,s,i=e,a=null;return It(e)?i={ms:e._milliseconds,d:e._days,M:e._months}:d(e)?(i={},t?i[t]=e:i.milliseconds=e):(a=Nt.exec(e))?(n="-"===a[1]?-1:1,i={y:0,d:L(a[Me])*n,h:L(a[ve])*n,m:L(a[we])*n,s:L(a[Le])*n,ms:L(zt(1e3*a[Ye]))*n}):(a=Jt.exec(e))?(n="-"===a[1]?-1:(a[1],1),i={y:Kt(a[2],n),M:Kt(a[3],n),w:Kt(a[4],n),d:Kt(a[5],n),h:Kt(a[6],n),m:Kt(a[7],n),s:Kt(a[8],n)}):null==i?i={}:"object"==typeof i&&("from"in i||"to"in i)&&(s=function(e,t){var n;return e.isValid()&&t.isValid()?(t=qt(t,e),e.isBefore(t)?n=Vt(e,t):((n=Vt(t,e)).milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}(At(i.from),At(i.to)),(i={}).ms=s.milliseconds,i.M=s.months),r=new Ot(i),It(e)&&l(e,"_locale")&&(r._locale=e._locale),r}function Kt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Vt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Qt(e,t){return function(n,r){var s;return null===r||isNaN(+r)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),s=n,n=r,r=s),Zt(this,Gt(n="string"==typeof n?+n:n,r),e),this}}function Zt(e,t,n,r){var i=t._milliseconds,a=zt(t._days),o=zt(t._months);e.isValid()&&(r=null==r||r,o&&ze(e,Ee(e,"Month")+o*n),a&&He(e,"Date",Ee(e,"Date")+a*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&s.updateOffset(e,a||o))}Gt.fn=Ot.prototype,Gt.invalid=function(){return Gt(NaN)};var $t=Qt(1,"add"),Xt=Qt(-1,"subtract");function en(e,t){var n,r,s=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(s,"months");return t-i<0?(n=e.clone().add(s-1,"months"),r=(t-i)/(i-n)):(n=e.clone().add(s+1,"months"),r=(t-i)/(n-i)),-(s+r)||0}function tn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ft(e))&&(this._locale=t),this)}s.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",s.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=j("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rn(){return this._locale}function sn(e,t){U(0,[e,e.length],0,t)}function an(e,t,n,r,s){var i;return null==e?Je(this,r,s).year:(i=Ge(e,r,s),t>i&&(t=i),function(e,t,n,r,s){var i=Ne(e,t,n,r,s),a=We(i.year,0,i.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}.call(this,e,t,n,r,s))}U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),sn("gggg","weekYear"),sn("ggggg","weekYear"),sn("GGGG","isoWeekYear"),sn("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),z("weekYear",1),z("isoWeekYear",1),le("G",ae),le("g",ae),le("GG",X,V),le("gg",X,V),le("GGGG",re,Z),le("gggg",re,Z),le("GGGGG",se,$),le("ggggg",se,$),pe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=L(e)}),pe(["gg","GG"],function(e,t,n,r){t[r]=s.parseTwoDigitYear(e)}),U("Q",0,"Qo","quarter"),C("quarter","Q"),z("quarter",7),le("Q",K),_e("Q",function(e,t){t[ge]=3*(L(e)-1)}),U("D",["DD",2],"Do","date"),C("date","D"),z("date",9),le("D",X),le("DD",X,V),le("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),_e(["D","DD"],Me),_e("Do",function(e,t){t[Me]=L(e.match(X)[0])});var on=Ae("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),z("dayOfYear",4),le("DDD",ne),le("DDDD",Q),_e(["DDD","DDDD"],function(e,t,n){n._dayOfYear=L(e)}),U("m",["mm",2],0,"minute"),C("minute","m"),z("minute",14),le("m",X),le("mm",X,V),_e(["m","mm"],we);var dn=Ae("Minutes",!1);U("s",["ss",2],0,"second"),C("second","s"),z("second",15),le("s",X),le("ss",X,V),_e(["s","ss"],Le);var un,cn=Ae("Seconds",!1);for(U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),z("millisecond",16),le("S",ne,K),le("SS",ne,V),le("SSS",ne,Q),un="SSSS";un.length<=9;un+="S")le(un,ie);function ln(e,t){t[Ye]=L(1e3*("0."+e))}for(un="S";un.length<=9;un+="S")_e(un,ln);var hn=Ae("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var fn=M.prototype;function mn(e){return e}fn.add=$t,fn.calendar=function(e,t){var n=e||At(),r=qt(n,this).startOf("day"),i=s.calendarFormat(this,r)||"sameElse",a=t&&(x(t[i])?t[i].call(this,n):t[i]);return this.format(a||this.localeData().calendar(i,this,At(n)))},fn.clone=function(){return new M(this)},fn.diff=function(e,t,n){var r,s,i;if(!this.isValid())return NaN;if(!(r=qt(e,this)).isValid())return NaN;switch(s=6e4*(r.utcOffset()-this.utcOffset()),t=P(t)){case"year":i=en(this,r)/12;break;case"month":i=en(this,r);break;case"quarter":i=en(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-s)/864e5;break;case"week":i=(this-r-s)/6048e5;break;default:i=this-r}return n?i:w(i)},fn.endOf=function(e){return void 0===(e=P(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},fn.format=function(e){e||(e=this.isUtc()?s.defaultFormatUtc:s.defaultFormat);var t=J(this,e);return this.localeData().postformat(t)},fn.from=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||At(e).isValid())?Gt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},fn.fromNow=function(e){return this.from(At(),e)},fn.to=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||At(e).isValid())?Gt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},fn.toNow=function(e){return this.to(At(),e)},fn.get=function(e){return x(this[e=P(e)])?this[e]():this},fn.invalidAt=function(){return m(this).overflow},fn.isAfter=function(e,t){var n=v(e)?e:At(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=P(o(t)?"millisecond":t))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},fn.isBefore=function(e,t){var n=v(e)?e:At(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=P(o(t)?"millisecond":t))?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},fn.isBetween=function(e,t,n,r){return("("===(r=r||"()")[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===r[1]?this.isBefore(t,n):!this.isAfter(t,n))},fn.isSame=function(e,t){var n,r=v(e)?e:At(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=P(t||"millisecond"))?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},fn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},fn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},fn.isValid=function(){return _(this)},fn.lang=nn,fn.locale=tn,fn.localeData=rn,fn.max=Ht,fn.min=Et,fn.parsingFlags=function(){return h({},m(this))},fn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:I[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=O(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(x(this[e=P(e)]))return this[e](t);return this},fn.startOf=function(e){switch(e=P(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},fn.subtract=Xt,fn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},fn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},fn.toDate=function(){return new Date(this.valueOf())},fn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?J(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):x(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",J(n,"Z")):J(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},fn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",s=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+s)},fn.toJSON=function(){return this.isValid()?this.toISOString():null},fn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},fn.unix=function(){return Math.floor(this.valueOf()/1e3)},fn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},fn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},fn.year=xe,fn.isLeapYear=function(){return De(this.year())},fn.weekYear=function(e){return an.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},fn.isoWeekYear=function(e){return an.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},fn.quarter=fn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},fn.month=Be,fn.daysInMonth=function(){return Ce(this.year(),this.month())},fn.week=fn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},fn.isoWeek=fn.isoWeeks=function(e){var t=Je(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},fn.weeksInYear=function(){var e=this.localeData()._week;return Ge(this.year(),e.dow,e.doy)},fn.isoWeeksInYear=function(){return Ge(this.year(),1,4)},fn.date=on,fn.day=fn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},fn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},fn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},fn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},fn.hour=fn.hours=it,fn.minute=fn.minutes=dn,fn.second=fn.seconds=cn,fn.millisecond=fn.milliseconds=hn,fn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ft(de,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Wt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?Zt(this,Gt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,s.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Wt(this)},fn.utc=function(e){return this.utcOffset(0,e)},fn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Wt(this),"m")),this},fn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ft(oe,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},fn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?At(e).utcOffset():0,(this.utcOffset()-e)%60==0)},fn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},fn.isLocal=function(){return!!this.isValid()&&!this._isUTC},fn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},fn.isUtc=Ut,fn.isUTC=Ut,fn.zoneAbbr=function(){return this._isUTC?"UTC":""},fn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},fn.dates=j("dates accessor is deprecated. Use date instead.",on),fn.months=j("months accessor is deprecated. Use month instead",Be),fn.years=j("years accessor is deprecated. Use year instead",xe),fn.zone=j("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),fn.isDSTShifted=j("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(b(e,this),(e=Tt(e))._a){var t=e._isUTC?f(e._a):At(e._a);this._isDSTShifted=this.isValid()&&Y(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var _n=E.prototype;function pn(e,t,n,r){var s=ft(),i=f().set(r,t);return s[n](i,e)}function yn(e,t,n){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return pn(e,t,n,"month");var r,s=[];for(r=0;r<12;r++)s[r]=pn(e,r,n,"month");return s}function bn(e,t,n,r){"boolean"==typeof e?(d(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,d(t)&&(n=t,t=void 0),t=t||"");var s,i=ft(),a=e?i._week.dow:0;if(null!=n)return pn(t,(n+a)%7,r,"day");var o=[];for(s=0;s<7;s++)o[s]=pn(t,(s+a)%7,r,"day");return o}_n.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return x(r)?r.call(t,n):r},_n.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},_n.invalidDate=function(){return this._invalidDate},_n.ordinal=function(e){return this._ordinal.replace("%d",e)},_n.preparse=mn,_n.postformat=mn,_n.relativeTime=function(e,t,n,r){var s=this._relativeTime[n];return x(s)?s(e,t,n,r):s.replace(/%d/i,e)},_n.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return x(n)?n(t):n.replace(/%s/i,t)},_n.set=function(e){var t,n;for(n in e)x(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},_n.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Pe).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},_n.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Pe.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},_n.monthsParse=function(e,t,n){var r,s,i;if(this._monthsParseExact)return function(e,t,n){var r,s,i,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=f([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(s=Te.call(this._shortMonthsParse,a))?s:null:-1!==(s=Te.call(this._longMonthsParse,a))?s:null:"MMM"===t?-1!==(s=Te.call(this._shortMonthsParse,a))?s:-1!==(s=Te.call(this._longMonthsParse,a))?s:null:-1!==(s=Te.call(this._longMonthsParse,a))?s:-1!==(s=Te.call(this._shortMonthsParse,a))?s:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(s=f([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},_n.monthsRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||qe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=Fe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},_n.monthsShortRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||qe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=Re),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},_n.week=function(e){return Je(e,this._week.dow,this._week.doy).week},_n.firstDayOfYear=function(){return this._week.doy},_n.firstDayOfWeek=function(){return this._week.dow},_n.weekdays=function(e,t){return e?i(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:i(this._weekdays)?this._weekdays:this._weekdays.standalone},_n.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},_n.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},_n.weekdaysParse=function(e,t,n){var r,s,i;if(this._weekdaysParseExact)return function(e,t,n){var r,s,i,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=f([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(s=Te.call(this._weekdaysParse,a))?s:null:"ddd"===t?-1!==(s=Te.call(this._shortWeekdaysParse,a))?s:null:-1!==(s=Te.call(this._minWeekdaysParse,a))?s:null:"dddd"===t?-1!==(s=Te.call(this._weekdaysParse,a))?s:-1!==(s=Te.call(this._shortWeekdaysParse,a))?s:-1!==(s=Te.call(this._minWeekdaysParse,a))?s:null:"ddd"===t?-1!==(s=Te.call(this._shortWeekdaysParse,a))?s:-1!==(s=Te.call(this._weekdaysParse,a))?s:-1!==(s=Te.call(this._minWeekdaysParse,a))?s:null:-1!==(s=Te.call(this._minWeekdaysParse,a))?s:-1!==(s=Te.call(this._weekdaysParse,a))?s:-1!==(s=Te.call(this._shortWeekdaysParse,a))?s:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(s=f([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(s,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(s,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(s,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(s,"")+"|^"+this.weekdaysShort(s,"")+"|^"+this.weekdaysMin(s,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},_n.weekdaysRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=Ze),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},_n.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=$e),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},_n.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Xe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},_n.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},_n.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},lt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===L(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),s.lang=j("moment.lang is deprecated. Use moment.locale instead.",lt),s.langData=j("moment.langData is deprecated. Use moment.localeData instead.",ft);var gn=Math.abs;function Mn(e,t,n,r){var s=Gt(t,n);return e._milliseconds+=r*s._milliseconds,e._days+=r*s._days,e._months+=r*s._months,e._bubble()}function vn(e){return e<0?Math.floor(e):Math.ceil(e)}function wn(e){return 4800*e/146097}function Ln(e){return 146097*e/4800}function Yn(e){return function(){return this.as(e)}}var kn=Yn("ms"),jn=Yn("s"),Sn=Yn("m"),Dn=Yn("h"),Tn=Yn("d"),xn=Yn("w"),An=Yn("M"),En=Yn("y");function Hn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Cn=Hn("milliseconds"),Pn=Hn("seconds"),On=Hn("minutes"),In=Hn("hours"),zn=Hn("days"),Bn=Hn("months"),Rn=Hn("years"),Fn=Math.round,qn={ss:44,s:45,m:45,h:22,d:26,M:11},Wn=Math.abs;function Un(e){return(e>0)-(e<0)||+e}function Nn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Wn(this._milliseconds)/1e3,r=Wn(this._days),s=Wn(this._months);e=w(n/60),t=w(e/60),n%=60,e%=60;var i=w(s/12),a=s%=12,o=r,d=t,u=e,c=n?n.toFixed(3).replace(/\.?0+$/,""):"",l=this.asSeconds();if(!l)return"P0D";var h=l<0?"-":"",f=Un(this._months)!==Un(l)?"-":"",m=Un(this._days)!==Un(l)?"-":"",_=Un(this._milliseconds)!==Un(l)?"-":"";return h+"P"+(i?f+i+"Y":"")+(a?f+a+"M":"")+(o?m+o+"D":"")+(d||u||c?"T":"")+(d?_+d+"H":"")+(u?_+u+"M":"")+(c?_+c+"S":"")}var Jn=Ot.prototype;return Jn.isValid=function(){return this._isValid},Jn.abs=function(){var e=this._data;return this._milliseconds=gn(this._milliseconds),this._days=gn(this._days),this._months=gn(this._months),e.milliseconds=gn(e.milliseconds),e.seconds=gn(e.seconds),e.minutes=gn(e.minutes),e.hours=gn(e.hours),e.months=gn(e.months),e.years=gn(e.years),this},Jn.add=function(e,t){return Mn(this,e,t,1)},Jn.subtract=function(e,t){return Mn(this,e,t,-1)},Jn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=P(e))||"year"===e)return t=this._days+r/864e5,n=this._months+wn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(Ln(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Jn.asMilliseconds=kn,Jn.asSeconds=jn,Jn.asMinutes=Sn,Jn.asHours=Dn,Jn.asDays=Tn,Jn.asWeeks=xn,Jn.asMonths=An,Jn.asYears=En,Jn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*L(this._months/12):NaN},Jn._bubble=function(){var e,t,n,r,s,i=this._milliseconds,a=this._days,o=this._months,d=this._data;return i>=0&&a>=0&&o>=0||i<=0&&a<=0&&o<=0||(i+=864e5*vn(Ln(o)+a),a=0,o=0),d.milliseconds=i%1e3,e=w(i/1e3),d.seconds=e%60,t=w(e/60),d.minutes=t%60,n=w(t/60),d.hours=n%24,a+=w(n/24),s=w(wn(a)),o+=s,a-=vn(Ln(s)),r=w(o/12),o%=12,d.days=a,d.months=o,d.years=r,this},Jn.clone=function(){return Gt(this)},Jn.get=function(e){return e=P(e),this.isValid()?this[e+"s"]():NaN},Jn.milliseconds=Cn,Jn.seconds=Pn,Jn.minutes=On,Jn.hours=In,Jn.days=zn,Jn.weeks=function(){return w(this.days()/7)},Jn.months=Bn,Jn.years=Rn,Jn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Gt(e).abs(),s=Fn(r.as("s")),i=Fn(r.as("m")),a=Fn(r.as("h")),o=Fn(r.as("d")),d=Fn(r.as("M")),u=Fn(r.as("y")),c=s<=qn.ss&&["s",s]||s<qn.s&&["ss",s]||i<=1&&["m"]||i<qn.m&&["mm",i]||a<=1&&["h"]||a<qn.h&&["hh",a]||o<=1&&["d"]||o<qn.d&&["dd",o]||d<=1&&["M"]||d<qn.M&&["MM",d]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=n,function(e,t,n,r,s){return s.relativeTime(t||1,!!n,e,r)}.apply(null,c)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Jn.toISOString=Nn,Jn.toString=Nn,Jn.toJSON=Nn,Jn.locale=tn,Jn.localeData=rn,Jn.toIsoString=j("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Nn),Jn.lang=nn,U("X",0,0,"unix"),U("x",0,0,"valueOf"),le("x",ae),le("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),_e("x",function(e,t,n){n._d=new Date(L(e))}),s.version="2.22.2",function(e){t=e}(At),s.fn=fn,s.min=function(){return Ct("isBefore",[].slice.call(arguments,0))},s.max=function(){return Ct("isAfter",[].slice.call(arguments,0))},s.now=function(){return Date.now?Date.now():+new Date},s.utc=f,s.unix=function(e){return At(1e3*e)},s.months=function(e,t){return yn(e,t,"months")},s.isDate=u,s.locale=lt,s.invalid=p,s.duration=Gt,s.isMoment=v,s.weekdays=function(e,t,n){return bn(e,t,n,"weekdays")},s.parseZone=function(){return At.apply(null,arguments).parseZone()},s.localeData=ft,s.isDuration=It,s.monthsShort=function(e,t){return yn(e,t,"monthsShort")},s.weekdaysMin=function(e,t,n){return bn(e,t,n,"weekdaysMin")},s.defineLocale=ht,s.updateLocale=function(e,t){if(null!=t){var n,r,s=at;null!=(r=ct(e))&&(s=r._config),t=A(s,t),(n=new E(t)).parentLocale=ot[e],ot[e]=n,lt(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},s.locales=function(){return S(ot)},s.weekdaysShort=function(e,t,n){return bn(e,t,n,"weekdaysShort")},s.normalizeUnits=P,s.relativeTimeRounding=function(e){return void 0===e?Fn:"function"==typeof e&&(Fn=e,!0)},s.relativeTimeThreshold=function(e,t){return void 0!==qn[e]&&(void 0===t?qn[e]:(qn[e]=t,"s"===e&&(qn.ss=t-1),!0))},s.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},s.prototype=fn,s.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},s}()}).call(this,n(/*! ./../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/parse-asn1/aesid.json":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/aesid.json ***!
  \********************************************/
/*! exports provided: 2.16.840.1.101.3.4.1.1, 2.16.840.1.101.3.4.1.2, 2.16.840.1.101.3.4.1.3, 2.16.840.1.101.3.4.1.4, 2.16.840.1.101.3.4.1.21, 2.16.840.1.101.3.4.1.22, 2.16.840.1.101.3.4.1.23, 2.16.840.1.101.3.4.1.24, 2.16.840.1.101.3.4.1.41, 2.16.840.1.101.3.4.1.42, 2.16.840.1.101.3.4.1.43, 2.16.840.1.101.3.4.1.44, default */function(e){e.exports={"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}},"./node_modules/parse-asn1/asn1.js":
/*!*****************************************!*\
  !*** ./node_modules/parse-asn1/asn1.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! asn1.js */"./node_modules/asn1.js/lib/asn1.js");t.certificate=n(/*! ./certificate */"./node_modules/parse-asn1/certificate.js");var s=r.define("RSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())});t.RSAPrivateKey=s;var i=r.define("RSAPublicKey",function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())});t.RSAPublicKey=i;var a=r.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(o),this.key("subjectPublicKey").bitstr())});t.PublicKey=a;var o=r.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())}),d=r.define("PrivateKeyInfo",function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(o),this.key("subjectPrivateKey").octstr())});t.PrivateKey=d;var u=r.define("EncryptedPrivateKeyInfo",function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())});t.EncryptedPrivateKey=u;var c=r.define("DSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())});t.DSAPrivateKey=c,t.DSAparam=r.define("DSAparam",function(){this.int()});var l=r.define("ECPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(h),this.key("publicKey").optional().explicit(1).bitstr())});t.ECPrivateKey=l;var h=r.define("ECParameters",function(){this.choice({namedCurve:this.objid()})});t.signature=r.define("signature",function(){this.seq().obj(this.key("r").int(),this.key("s").int())})},"./node_modules/parse-asn1/certificate.js":
/*!************************************************!*\
  !*** ./node_modules/parse-asn1/certificate.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! asn1.js */"./node_modules/asn1.js/lib/asn1.js"),s=r.define("Time",function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})}),i=r.define("AttributeTypeValue",function(){this.seq().obj(this.key("type").objid(),this.key("value").any())}),a=r.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional())}),o=r.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(a),this.key("subjectPublicKey").bitstr())}),d=r.define("RelativeDistinguishedName",function(){this.setof(i)}),u=r.define("RDNSequence",function(){this.seqof(d)}),c=r.define("Name",function(){this.choice({rdnSequence:this.use(u)})}),l=r.define("Validity",function(){this.seq().obj(this.key("notBefore").use(s),this.key("notAfter").use(s))}),h=r.define("Extension",function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())}),f=r.define("TBSCertificate",function(){this.seq().obj(this.key("version").explicit(0).int(),this.key("serialNumber").int(),this.key("signature").use(a),this.key("issuer").use(c),this.key("validity").use(l),this.key("subject").use(c),this.key("subjectPublicKeyInfo").use(o),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(h).optional())}),m=r.define("X509Certificate",function(){this.seq().obj(this.key("tbsCertificate").use(f),this.key("signatureAlgorithm").use(a),this.key("signatureValue").bitstr())});e.exports=m},"./node_modules/parse-asn1/fixProc.js":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/fixProc.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,s=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,i=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,a=n(/*! evp_bytestokey */"./node_modules/evp_bytestokey/index.js"),o=n(/*! browserify-aes */"./node_modules/browserify-aes/browser.js");e.exports=function(e,n){var d,u=e.toString(),c=u.match(r);if(c){var l="aes"+c[1],h=new t(c[2],"hex"),f=new t(c[3].replace(/[\r\n]/g,""),"base64"),m=a(n,h.slice(0,8),parseInt(c[1],10)).key,_=[],p=o.createDecipheriv(l,m,h);_.push(p.update(f)),_.push(p.final()),d=t.concat(_)}else{var y=u.match(i);d=new t(y[2].replace(/[\r\n]/g,""),"base64")}return{tag:u.match(s)[1],data:d}}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/parse-asn1/index.js":
/*!******************************************!*\
  !*** ./node_modules/parse-asn1/index.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! ./asn1 */"./node_modules/parse-asn1/asn1.js"),s=n(/*! ./aesid.json */"./node_modules/parse-asn1/aesid.json"),i=n(/*! ./fixProc */"./node_modules/parse-asn1/fixProc.js"),a=n(/*! browserify-aes */"./node_modules/browserify-aes/browser.js"),o=n(/*! pbkdf2 */"./node_modules/pbkdf2/browser.js");function d(e){var n;"object"!=typeof e||t.isBuffer(e)||(n=e.passphrase,e=e.key),"string"==typeof e&&(e=new t(e));var d,u,c=i(e,n),l=c.tag,h=c.data;switch(l){case"CERTIFICATE":u=r.certificate.decode(h,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(u||(u=r.PublicKey.decode(h,"der")),d=u.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return r.RSAPublicKey.decode(u.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return u.subjectPrivateKey=u.subjectPublicKey,{type:"ec",data:u};case"1.2.840.10040.4.1":return u.algorithm.params.pub_key=r.DSAparam.decode(u.subjectPublicKey.data,"der"),{type:"dsa",data:u.algorithm.params};default:throw new Error("unknown key id "+d)}throw new Error("unknown key type "+l);case"ENCRYPTED PRIVATE KEY":h=function(e,n){var r=e.algorithm.decrypt.kde.kdeparams.salt,i=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),d=s[e.algorithm.decrypt.cipher.algo.join(".")],u=e.algorithm.decrypt.cipher.iv,c=e.subjectPrivateKey,l=parseInt(d.split("-")[1],10)/8,h=o.pbkdf2Sync(n,r,i,l),f=a.createDecipheriv(d,h,u),m=[];return m.push(f.update(c)),m.push(f.final()),t.concat(m)}(h=r.EncryptedPrivateKey.decode(h,"der"),n);case"PRIVATE KEY":switch(d=(u=r.PrivateKey.decode(h,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return r.RSAPrivateKey.decode(u.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:u.algorithm.curve,privateKey:r.ECPrivateKey.decode(u.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return u.algorithm.params.priv_key=r.DSAparam.decode(u.subjectPrivateKey,"der"),{type:"dsa",params:u.algorithm.params};default:throw new Error("unknown key id "+d)}throw new Error("unknown key type "+l);case"RSA PUBLIC KEY":return r.RSAPublicKey.decode(h,"der");case"RSA PRIVATE KEY":return r.RSAPrivateKey.decode(h,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:r.DSAPrivateKey.decode(h,"der")};case"EC PRIVATE KEY":return{curve:(h=r.ECPrivateKey.decode(h,"der")).parameters.value,privateKey:h.privateKey};default:throw new Error("unknown key type "+l)}}e.exports=d,d.signature=r.signature}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/pbkdf2/browser.js":
/*!****************************************!*\
  !*** ./node_modules/pbkdf2/browser.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){t.pbkdf2=n(/*! ./lib/async */"./node_modules/pbkdf2/lib/async.js"),t.pbkdf2Sync=n(/*! ./lib/sync */"./node_modules/pbkdf2/lib/sync-browser.js")},"./node_modules/pbkdf2/lib/async.js":
/*!******************************************!*\
  !*** ./node_modules/pbkdf2/lib/async.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){(function(t,r){var s,i=n(/*! ./precondition */"./node_modules/pbkdf2/lib/precondition.js"),a=n(/*! ./default-encoding */"./node_modules/pbkdf2/lib/default-encoding.js"),o=n(/*! ./sync */"./node_modules/pbkdf2/lib/sync-browser.js"),d=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,u=t.crypto&&t.crypto.subtle,c={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},l=[];function h(e,t,n,r,s){return u.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then(function(e){return u.deriveBits({name:"PBKDF2",salt:t,iterations:n,hash:{name:s}},e,r<<3)}).then(function(e){return d.from(e)})}e.exports=function(e,n,f,m,_,p){"function"==typeof _&&(p=_,_=void 0);var y=c[(_=_||"sha1").toLowerCase()];if(!y||"function"!=typeof t.Promise)return r.nextTick(function(){var t;try{t=o(e,n,f,m,_)}catch(e){return p(e)}p(null,t)});if(i(e,n,f,m),"function"!=typeof p)throw new Error("No callback provided to pbkdf2");d.isBuffer(e)||(e=d.from(e,a)),d.isBuffer(n)||(n=d.from(n,a)),function(e,t){e.then(function(e){r.nextTick(function(){t(null,e)})},function(e){r.nextTick(function(){t(e)})})}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!u||!u.importKey||!u.deriveBits)return Promise.resolve(!1);if(void 0!==l[e])return l[e];var n=h(s=s||d.alloc(8),s,10,128,e).then(function(){return!0}).catch(function(){return!1});return l[e]=n,n}(y).then(function(t){return t?h(e,n,f,m,y):o(e,n,f,m,_)}),p)}}).call(this,n(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/pbkdf2/lib/default-encoding.js":
/*!*****************************************************!*\
  !*** ./node_modules/pbkdf2/lib/default-encoding.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){(function(t){var n;t.browser?n="utf-8":n=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=n}).call(this,n(/*! ./../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/pbkdf2/lib/precondition.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/precondition.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){(function(t){var n=Math.pow(2,30)-1;function r(e,n){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(n+" must be a buffer or string")}e.exports=function(e,t,s,i){if(r(e,"Password"),r(t,"Salt"),"number"!=typeof s)throw new TypeError("Iterations not a number");if(s<0)throw new TypeError("Bad iterations");if("number"!=typeof i)throw new TypeError("Key length not a number");if(i<0||i>n||i!=i)throw new TypeError("Bad key length")}}).call(this,n(/*! ./../../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/pbkdf2/lib/sync-browser.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/sync-browser.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! create-hash/md5 */"./node_modules/create-hash/md5.js"),s=n(/*! ripemd160 */"./node_modules/ripemd160/index.js"),i=n(/*! sha.js */"./node_modules/sha.js/index.js"),a=n(/*! ./precondition */"./node_modules/pbkdf2/lib/precondition.js"),o=n(/*! ./default-encoding */"./node_modules/pbkdf2/lib/default-encoding.js"),d=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,u=d.alloc(128),c={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function l(e,t,n){var a=function(e){return"rmd160"===e||"ripemd160"===e?s:"md5"===e?r:function(t){return i(e).update(t).digest()}}(e),o="sha512"===e||"sha384"===e?128:64;t.length>o?t=a(t):t.length<o&&(t=d.concat([t,u],o));for(var l=d.allocUnsafe(o+c[e]),h=d.allocUnsafe(o+c[e]),f=0;f<o;f++)l[f]=54^t[f],h[f]=92^t[f];var m=d.allocUnsafe(o+n+4);l.copy(m,0,0,o),this.ipad1=m,this.ipad2=l,this.opad=h,this.alg=e,this.blocksize=o,this.hash=a,this.size=c[e]}l.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,n,r,s){a(e,t,n,r),d.isBuffer(e)||(e=d.from(e,o)),d.isBuffer(t)||(t=d.from(t,o));var i=new l(s=s||"sha1",e,t.length),u=d.allocUnsafe(r),h=d.allocUnsafe(t.length+4);t.copy(h,0,0,t.length);for(var f=0,m=c[s],_=Math.ceil(r/m),p=1;p<=_;p++){h.writeUInt32BE(p,t.length);for(var y=i.run(h,i.ipad1),b=y,g=1;g<n;g++){b=i.run(b,i.ipad2);for(var M=0;M<m;M++)y[M]^=b[M]}y.copy(u,f),f+=m}return u}},"./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,r,s){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var i,a,o=arguments.length;switch(o){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,r)});case 4:return t.nextTick(function(){e.call(null,n,r,s)});default:for(i=new Array(o-1),a=0;a<i.length;)i[a++]=arguments[a];return t.nextTick(function(){e.apply(null,i)})}}}:e.exports=t}).call(this,n(/*! ./../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n,r,s=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var d,u=[],c=!1,l=-1;function h(){c&&d&&(c=!1,d.length?u=d.concat(u):l=-1,u.length&&f())}function f(){if(!c){var e=o(h);c=!0;for(var t=u.length;t;){for(d=u,u=[];++l<t;)d&&d[l].run();l=-1,t=u.length}d=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function _(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new m(e,t)),1!==u.length||c||o(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=_,s.addListener=_,s.once=_,s.off=_,s.removeListener=_,s.removeAllListeners=_,s.emit=_,s.prependListener=_,s.prependOnceListener=_,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},"./node_modules/public-encrypt/browser.js":
/*!************************************************!*\
  !*** ./node_modules/public-encrypt/browser.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){t.publicEncrypt=n(/*! ./publicEncrypt */"./node_modules/public-encrypt/publicEncrypt.js"),t.privateDecrypt=n(/*! ./privateDecrypt */"./node_modules/public-encrypt/privateDecrypt.js"),t.privateEncrypt=function(e,n){return t.publicEncrypt(e,n,!0)},t.publicDecrypt=function(e,n){return t.privateDecrypt(e,n,!0)}},"./node_modules/public-encrypt/mgf.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/mgf.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! create-hash */"./node_modules/create-hash/browser.js");function s(e){var n=new t(4);return n.writeUInt32BE(e,0),n}e.exports=function(e,n){for(var i,a=new t(""),o=0;a.length<n;)i=s(o++),a=t.concat([a,r("sha1").update(e).update(i).digest()]);return a.slice(0,n)}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/public-encrypt/privateDecrypt.js":
/*!*******************************************************!*\
  !*** ./node_modules/public-encrypt/privateDecrypt.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! parse-asn1 */"./node_modules/parse-asn1/index.js"),s=n(/*! ./mgf */"./node_modules/public-encrypt/mgf.js"),i=n(/*! ./xor */"./node_modules/public-encrypt/xor.js"),a=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),o=n(/*! browserify-rsa */"./node_modules/browserify-rsa/index.js"),d=n(/*! create-hash */"./node_modules/create-hash/browser.js"),u=n(/*! ./withPublic */"./node_modules/public-encrypt/withPublic.js");e.exports=function(e,n,c){var l;l=e.padding?e.padding:c?1:4;var h,f=r(e),m=f.modulus.byteLength();if(n.length>m||new a(n).cmp(f.modulus)>=0)throw new Error("decryption error");h=c?u(new a(n),f):o(n,f);var _=new t(m-h.length);if(_.fill(0),h=t.concat([_,h],m),4===l)return function(e,n){e.modulus;var r=e.modulus.byteLength(),a=(n.length,d("sha1").update(new t("")).digest()),o=a.length;if(0!==n[0])throw new Error("decryption error");var u=n.slice(1,o+1),c=n.slice(o+1),l=i(u,s(c,o)),h=i(c,s(l,r-o-1));if(function(e,n){e=new t(e),n=new t(n);var r=0,s=e.length;e.length!==n.length&&(r++,s=Math.min(e.length,n.length));var i=-1;for(;++i<s;)r+=e[i]^n[i];return r}(a,h.slice(0,o)))throw new Error("decryption error");var f=o;for(;0===h[f];)f++;if(1!==h[f++])throw new Error("decryption error");return h.slice(f)}(f,h);if(1===l)return function(e,t,n){var r=t.slice(0,2),s=2,i=0;for(;0!==t[s++];)if(s>=t.length){i++;break}var a=t.slice(2,s-1);t.slice(s-1,s);("0002"!==r.toString("hex")&&!n||"0001"!==r.toString("hex")&&n)&&i++;a.length<8&&i++;if(i)throw new Error("decryption error");return t.slice(s)}(0,h,c);if(3===l)return h;throw new Error("unknown padding")}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/public-encrypt/publicEncrypt.js":
/*!******************************************************!*\
  !*** ./node_modules/public-encrypt/publicEncrypt.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! parse-asn1 */"./node_modules/parse-asn1/index.js"),s=n(/*! randombytes */"./node_modules/randombytes/browser.js"),i=n(/*! create-hash */"./node_modules/create-hash/browser.js"),a=n(/*! ./mgf */"./node_modules/public-encrypt/mgf.js"),o=n(/*! ./xor */"./node_modules/public-encrypt/xor.js"),d=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js"),u=n(/*! ./withPublic */"./node_modules/public-encrypt/withPublic.js"),c=n(/*! browserify-rsa */"./node_modules/browserify-rsa/index.js");e.exports=function(e,n,l){var h;h=e.padding?e.padding:l?1:4;var f,m=r(e);if(4===h)f=function(e,n){var r=e.modulus.byteLength(),u=n.length,c=i("sha1").update(new t("")).digest(),l=c.length,h=2*l;if(u>r-h-2)throw new Error("message too long");var f=new t(r-u-h-2);f.fill(0);var m=r-l-1,_=s(l),p=o(t.concat([c,f,new t([1]),n],m),a(_,m)),y=o(_,a(p,l));return new d(t.concat([new t([0]),y,p],r))}(m,n);else if(1===h)f=function(e,n,r){var i,a=n.length,o=e.modulus.byteLength();if(a>o-11)throw new Error("message too long");r?(i=new t(o-a-3)).fill(255):i=function(e,n){var r,i=new t(e),a=0,o=s(2*e),d=0;for(;a<e;)d===o.length&&(o=s(2*e),d=0),(r=o[d++])&&(i[a++]=r);return i}(o-a-3);return new d(t.concat([new t([0,r?1:2]),i,new t([0]),n],o))}(m,n,l);else{if(3!==h)throw new Error("unknown padding");if((f=new d(n)).cmp(m.modulus)>=0)throw new Error("data too long for modulus")}return l?c(f,m):u(f,m)}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/public-encrypt/withPublic.js":
/*!***************************************************!*\
  !*** ./node_modules/public-encrypt/withPublic.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){(function(t){var r=n(/*! bn.js */"./node_modules/bn.js/lib/bn.js");e.exports=function(e,n){return new t(e.toRed(r.mont(n.modulus)).redPow(new r(n.publicExponent)).fromRed().toArray())}}).call(this,n(/*! ./../buffer/index.js */"./node_modules/buffer/index.js").Buffer)},"./node_modules/public-encrypt/xor.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/xor.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=e.length,r=-1;++r<n;)e[r]^=t[r];return e}},"./node_modules/randombytes/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/randombytes/browser.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t,r){var s=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,i=t.crypto||t.msCrypto;i&&i.getRandomValues?e.exports=function(e,n){if(e>65536)throw new Error("requested too many random bytes");var a=new t.Uint8Array(e);e>0&&i.getRandomValues(a);var o=s.from(a.buffer);if("function"==typeof n)return r.nextTick(function(){n(null,o)});return o}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/randomfill/browser.js":
/*!********************************************!*\
  !*** ./node_modules/randomfill/browser.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(e,r){function s(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var i=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js"),a=n(/*! randombytes */"./node_modules/randombytes/browser.js"),o=i.Buffer,d=i.kMaxLength,u=e.crypto||e.msCrypto,c=Math.pow(2,32)-1;function l(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>c||e<0)throw new TypeError("offset must be a uint32");if(e>d||e>t)throw new RangeError("offset out of range")}function h(e,t,n){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>c||e<0)throw new TypeError("size must be a uint32");if(e+t>n||e>d)throw new RangeError("buffer too small")}function f(e,t,n,s){if(r.browser){var i=e.buffer,o=new Uint8Array(i,t,n);return u.getRandomValues(o),s?void r.nextTick(function(){s(null,e)}):e}if(!s)return a(n).copy(e,t),e;a(n,function(n,r){if(n)return s(n);r.copy(e,t),s(null,e)})}u&&u.getRandomValues||!r.browser?(t.randomFill=function(t,n,r,s){if(!(o.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof n)s=n,n=0,r=t.length;else if("function"==typeof r)s=r,r=t.length-n;else if("function"!=typeof s)throw new TypeError('"cb" argument must be a function');return l(n,t.length),h(r,n,t.length),f(t,n,r,s)},t.randomFillSync=function(t,n,r){void 0===n&&(n=0);if(!(o.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');l(n,t.length),void 0===r&&(r=t.length-n);return h(r,n,t.length),f(t,n,r)}):(t.randomFill=s,t.randomFillSync=s)}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./lib/_stream_duplex.js */"./node_modules/readable-stream/lib/_stream_duplex.js")},"./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! process-nextick-args */"./node_modules/process-nextick-args/index.js"),s=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=l;var i=n(/*! core-util-is */"./node_modules/core-util-is/lib/util.js");i.inherits=n(/*! inherits */"./node_modules/inherits/inherits_browser.js");var a=n(/*! ./_stream_readable */"./node_modules/readable-stream/lib/_stream_readable.js"),o=n(/*! ./_stream_writable */"./node_modules/readable-stream/lib/_stream_writable.js");i.inherits(l,a);for(var d=s(o.prototype),u=0;u<d.length;u++){var c=d[u];l.prototype[c]||(l.prototype[c]=o.prototype[c])}function l(e){if(!(this instanceof l))return new l(e);a.call(this,e),o.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),l.prototype._destroy=function(e,t){this.push(null),this.end(),r.nextTick(t,e)}},"./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=i;var r=n(/*! ./_stream_transform */"./node_modules/readable-stream/lib/_stream_transform.js"),s=n(/*! core-util-is */"./node_modules/core-util-is/lib/util.js");function i(e){if(!(this instanceof i))return new i(e);r.call(this,e)}s.inherits=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s.inherits(i,r),i.prototype._transform=function(e,t,n){n(null,e)}},"./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t,r){var s=n(/*! process-nextick-args */"./node_modules/process-nextick-args/index.js");e.exports=g;var i,a=n(/*! isarray */"./node_modules/isarray/index.js");g.ReadableState=b;n(/*! events */"./node_modules/events/events.js").EventEmitter;var o=function(e,t){return e.listeners(t).length},d=n(/*! ./internal/streams/stream */"./node_modules/readable-stream/lib/internal/streams/stream-browser.js"),u=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,c=t.Uint8Array||function(){};var l=n(/*! core-util-is */"./node_modules/core-util-is/lib/util.js");l.inherits=n(/*! inherits */"./node_modules/inherits/inherits_browser.js");var h=n(/*! util */0),f=void 0;f=h&&h.debuglog?h.debuglog("stream"):function(){};var m,_=n(/*! ./internal/streams/BufferList */"./node_modules/readable-stream/lib/internal/streams/BufferList.js"),p=n(/*! ./internal/streams/destroy */"./node_modules/readable-stream/lib/internal/streams/destroy.js");l.inherits(g,d);var y=["error","close","destroy","pause","resume"];function b(e,t){i=i||n(/*! ./_stream_duplex */"./node_modules/readable-stream/lib/_stream_duplex.js"),e=e||{};var r=t instanceof i;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var s=e.highWaterMark,a=e.readableHighWaterMark,o=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:r&&(a||0===a)?a:o,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new _,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(m||(m=n(/*! string_decoder/ */"./node_modules/string_decoder/lib/string_decoder.js").StringDecoder),this.decoder=new m(e.encoding),this.encoding=e.encoding)}function g(e){if(i=i||n(/*! ./_stream_duplex */"./node_modules/readable-stream/lib/_stream_duplex.js"),!(this instanceof g))return new g(e);this._readableState=new b(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),d.call(this)}function M(e,t,n,r,s){var i,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,Y(e)}(e,a)):(s||(i=function(e,t){var n;(function(e){return u.isBuffer(e)||e instanceof c})(t)||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(a,t)),i?e.emit("error",i):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),r?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):v(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?v(e,a,t,!1):j(e,a)):v(e,a,t,!1))):r||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function v(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&Y(e)),j(e,t)}Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),g.prototype.destroy=p.destroy,g.prototype._undestroy=p.undestroy,g.prototype._destroy=function(e,t){this.push(null),t(e)},g.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=u.from(e,t),t=""),n=!0),M(this,e,t,!1,n)},g.prototype.unshift=function(e){return M(this,e,null,!0,!1)},g.prototype.isPaused=function(){return!1===this._readableState.flowing},g.prototype.setEncoding=function(e){return m||(m=n(/*! string_decoder/ */"./node_modules/string_decoder/lib/string_decoder.js").StringDecoder),this._readableState.decoder=new m(e),this._readableState.encoding=e,this};var w=8388608;function L(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=w?e=w:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function Y(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(f("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?s.nextTick(k,e):k(e))}function k(e){f("emit readable"),e.emit("readable"),x(e)}function j(e,t){t.readingMore||(t.readingMore=!0,s.nextTick(S,e,t))}function S(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(f("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function D(e){f("readable nexttick read 0"),e.read(0)}function T(e,t){t.reading||(f("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),x(e),t.flowing&&!t.reading&&e.read(0)}function x(e){var t=e._readableState;for(f("flow",t.flowing);t.flowing&&null!==e.read(););}function A(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var r;e<t.head.data.length?(r=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):r=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,r=1,s=n.data;e-=s.length;for(;n=n.next;){var i=n.data,a=e>i.length?i.length:e;if(a===i.length?s+=i:s+=i.slice(0,e),0===(e-=a)){a===i.length?(++r,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=i.slice(a));break}++r}return t.length-=r,s}(e,t):function(e,t){var n=u.allocUnsafe(e),r=t.head,s=1;r.data.copy(n),e-=r.data.length;for(;r=r.next;){var i=r.data,a=e>i.length?i.length:e;if(i.copy(n,n.length-e,0,a),0===(e-=a)){a===i.length?(++s,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=i.slice(a));break}++s}return t.length-=s,n}(e,t);return r}(e,t.buffer,t.decoder),n);var n}function E(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,s.nextTick(H,t,e))}function H(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function C(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}g.prototype.read=function(e){f("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return f("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?E(this):Y(this),null;if(0===(e=L(e,t))&&t.ended)return 0===t.length&&E(this),null;var r,s=t.needReadable;return f("need readable",s),(0===t.length||t.length-e<t.highWaterMark)&&f("length less than watermark",s=!0),t.ended||t.reading?f("reading or ended",s=!1):s&&(f("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=L(n,t))),null===(r=e>0?A(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&E(this)),null!==r&&this.emit("data",r),r},g.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},g.prototype.pipe=function(e,t){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,f("pipe count=%d opts=%j",i.pipesCount,t);var d=(!t||!1!==t.end)&&e!==r.stdout&&e!==r.stderr?c:g;function u(t,r){f("onunpipe"),t===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,f("cleanup"),e.removeListener("close",y),e.removeListener("finish",b),e.removeListener("drain",l),e.removeListener("error",p),e.removeListener("unpipe",u),n.removeListener("end",c),n.removeListener("end",g),n.removeListener("data",_),h=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}function c(){f("onend"),e.end()}i.endEmitted?s.nextTick(d):n.once("end",d),e.on("unpipe",u);var l=function(e){return function(){var t=e._readableState;f("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&o(e,"data")&&(t.flowing=!0,x(e))}}(n);e.on("drain",l);var h=!1;var m=!1;function _(t){f("ondata"),m=!1,!1!==e.write(t)||m||((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==C(i.pipes,e))&&!h&&(f("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,m=!0),n.pause())}function p(t){f("onerror",t),g(),e.removeListener("error",p),0===o(e,"error")&&e.emit("error",t)}function y(){e.removeListener("finish",b),g()}function b(){f("onfinish"),e.removeListener("close",y),g()}function g(){f("unpipe"),n.unpipe(e)}return n.on("data",_),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",p),e.once("close",y),e.once("finish",b),e.emit("pipe",n),i.flowing||(f("pipe resume"),n.resume()),e},g.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var r=t.pipes,s=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<s;i++)r[i].emit("unpipe",this,n);return this}var a=C(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},g.prototype.on=function(e,t){var n=d.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&Y(this):s.nextTick(D,this))}return n},g.prototype.addListener=g.prototype.on,g.prototype.resume=function(){var e=this._readableState;return e.flowing||(f("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,s.nextTick(T,e,t))}(this,e)),this},g.prototype.pause=function(){return f("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(f("pause"),this._readableState.flowing=!1,this.emit("pause")),this},g.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var s in e.on("end",function(){if(f("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(s){(f("wrapped data"),n.decoder&&(s=n.decoder.write(s)),!n.objectMode||null!==s&&void 0!==s)&&((n.objectMode||s&&s.length)&&(t.push(s)||(r=!0,e.pause())))}),e)void 0===this[s]&&"function"==typeof e[s]&&(this[s]=function(t){return function(){return e[t].apply(e,arguments)}}(s));for(var i=0;i<y.length;i++)e.on(y[i],this.emit.bind(this,y[i]));return this._read=function(t){f("wrapped _read",t),r&&(r=!1,e.resume())},this},Object.defineProperty(g.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),g._fromList=A}).call(this,n(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t,n){"use strict";e.exports=i;var r=n(/*! ./_stream_duplex */"./node_modules/readable-stream/lib/_stream_duplex.js"),s=n(/*! core-util-is */"./node_modules/core-util-is/lib/util.js");function i(e){if(!(this instanceof i))return new i(e);r.call(this,e),this._transformState={afterTransform:function(e,t){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),r(e);var s=this._readableState;s.reading=!1,(s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){o(e,t,n)}):o(this,null,null)}function o(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}s.inherits=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s.inherits(i,r),i.prototype.push=function(e,t){return this._transformState.needTransform=!1,r.prototype.push.call(this,e,t)},i.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},i.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var s=this._readableState;(r.needTransform||s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark)}},i.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},i.prototype._destroy=function(e,t){var n=this;r.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},"./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,n){"use strict";(function(t,r,s){var i=n(/*! process-nextick-args */"./node_modules/process-nextick-args/index.js");function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var s=r.callback;t.pendingcb--,s(n),r=r.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=b;var o,d=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?r:i.nextTick;b.WritableState=y;var u=n(/*! core-util-is */"./node_modules/core-util-is/lib/util.js");u.inherits=n(/*! inherits */"./node_modules/inherits/inherits_browser.js");var c={deprecate:n(/*! util-deprecate */"./node_modules/util-deprecate/browser.js")},l=n(/*! ./internal/streams/stream */"./node_modules/readable-stream/lib/internal/streams/stream-browser.js"),h=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,f=s.Uint8Array||function(){};var m,_=n(/*! ./internal/streams/destroy */"./node_modules/readable-stream/lib/internal/streams/destroy.js");function p(){}function y(e,t){o=o||n(/*! ./_stream_duplex */"./node_modules/readable-stream/lib/_stream_duplex.js"),e=e||{};var r=t instanceof o;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var s=e.highWaterMark,u=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:r&&(u||0===u)?u:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===e.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,r=n.sync,s=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,r,s){--t.pendingcb,n?(i.nextTick(s,r),i.nextTick(Y,e,t),e._writableState.errorEmitted=!0,e.emit("error",r)):(s(r),e._writableState.errorEmitted=!0,e.emit("error",r),Y(e,t))}(e,n,r,t,s);else{var a=w(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||v(e,n),r?d(M,e,n,a,s):M(e,n,a,s)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function b(e){if(o=o||n(/*! ./_stream_duplex */"./node_modules/readable-stream/lib/_stream_duplex.js"),!(m.call(b,this)||this instanceof o))return new b(e);this._writableState=new y(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),l.call(this)}function g(e,t,n,r,s,i,a){t.writelen=r,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(s,t.onwrite):e._write(s,i,t.onwrite),t.sync=!1}function M(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,r(),Y(e,t)}function v(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var r=t.bufferedRequestCount,s=new Array(r),i=t.corkedRequestsFree;i.entry=n;for(var o=0,d=!0;n;)s[o]=n,n.isBuf||(d=!1),n=n.next,o+=1;s.allBuffers=d,g(e,t,!0,t.length,s,"",i.finish),t.pendingcb++,t.lastBufferedRequest=null,i.next?(t.corkedRequestsFree=i.next,i.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var u=n.chunk,c=n.encoding,l=n.callback;if(g(e,t,!1,t.objectMode?1:u.length,u,c,l),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function w(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function L(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),Y(e,t)})}function Y(e,t){var n=w(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,i.nextTick(L,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}u.inherits(b,l),y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(y.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(m=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(e){return!!m.call(this,e)||this===b&&(e&&e._writableState instanceof y)}})):m=function(e){return e instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(e,t,n){var r=this._writableState,s=!1,a=!r.objectMode&&function(e){return h.isBuffer(e)||e instanceof f}(e);return a&&!h.isBuffer(e)&&(e=function(e){return h.from(e)}(e)),"function"==typeof t&&(n=t,t=null),a?t="buffer":t||(t=r.defaultEncoding),"function"!=typeof n&&(n=p),r.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),i.nextTick(t,n)}(this,n):(a||function(e,t,n,r){var s=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),i.nextTick(r,a),s=!1),s}(this,r,e,n))&&(r.pendingcb++,s=function(e,t,n,r,s,i){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=h.from(t,n));return t}(t,r,s);r!==a&&(n=!0,s="buffer",r=a)}var o=t.objectMode?1:r.length;t.length+=o;var d=t.length<t.highWaterMark;d||(t.needDrain=!0);if(t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:s,isBuf:n,callback:i,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else g(e,t,!1,o,r,s,i);return d}(this,r,a,e,t,n)),s},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||v(this,e))},b.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(b.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),b.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(e,t,n){var r=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!==e&&void 0!==e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(e,t,n){t.ending=!0,Y(e,t),n&&(t.finished?i.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,r,n)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),b.prototype.destroy=_.destroy,b.prototype._undestroy=_.undestroy,b.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(/*! ./../../process/browser.js */"./node_modules/process/browser.js"),n(/*! ./../../timers-browserify/main.js */"./node_modules/timers-browserify/main.js").setImmediate,n(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=n(/*! util */1);function i(e,t,n){e.copy(t,n)}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var t=r.allocUnsafe(e>>>0),n=this.head,s=0;n;)i(n.data,t,s),s+=n.data.length,n=n.next;return t},e}(),s&&s.inspect&&s.inspect.custom&&(e.exports.prototype[s.inspect.custom]=function(){var e=s.inspect({length:this.length});return this.constructor.name+" "+e})},"./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! process-nextick-args */"./node_modules/process-nextick-args/index.js");function s(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,i=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return i||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||r.nextTick(s,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(r.nextTick(s,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},"./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! events */"./node_modules/events/events.js").EventEmitter},"./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./readable */"./node_modules/readable-stream/readable-browser.js").PassThrough},"./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){(t=e.exports=n(/*! ./lib/_stream_readable.js */"./node_modules/readable-stream/lib/_stream_readable.js")).Stream=t,t.Readable=t,t.Writable=n(/*! ./lib/_stream_writable.js */"./node_modules/readable-stream/lib/_stream_writable.js"),t.Duplex=n(/*! ./lib/_stream_duplex.js */"./node_modules/readable-stream/lib/_stream_duplex.js"),t.Transform=n(/*! ./lib/_stream_transform.js */"./node_modules/readable-stream/lib/_stream_transform.js"),t.PassThrough=n(/*! ./lib/_stream_passthrough.js */"./node_modules/readable-stream/lib/_stream_passthrough.js")},"./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./readable */"./node_modules/readable-stream/readable-browser.js").Transform},"./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./lib/_stream_writable.js */"./node_modules/readable-stream/lib/_stream_writable.js")},"./node_modules/ripemd160/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ripemd160/index.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! buffer */"./node_modules/buffer/index.js").Buffer,s=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),i=n(/*! hash-base */"./node_modules/hash-base/index.js"),a=new Array(16),o=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],d=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],u=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],c=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],l=[0,1518500249,1859775393,2400959708,2840853838],h=[1352829926,1548603684,1836072691,2053994217,0];function f(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function m(e,t){return e<<t|e>>>32-t}function _(e,t,n,r,s,i,a,o){return m(e+(t^n^r)+i+a|0,o)+s|0}function p(e,t,n,r,s,i,a,o){return m(e+(t&n|~t&r)+i+a|0,o)+s|0}function y(e,t,n,r,s,i,a,o){return m(e+((t|~n)^r)+i+a|0,o)+s|0}function b(e,t,n,r,s,i,a,o){return m(e+(t&r|n&~r)+i+a|0,o)+s|0}function g(e,t,n,r,s,i,a,o){return m(e+(t^(n|~r))+i+a|0,o)+s|0}s(f,i),f.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var n=0|this._a,r=0|this._b,s=0|this._c,i=0|this._d,f=0|this._e,M=0|this._a,v=0|this._b,w=0|this._c,L=0|this._d,Y=0|this._e,k=0;k<80;k+=1){var j,S;k<16?(j=_(n,r,s,i,f,e[o[k]],l[0],u[k]),S=g(M,v,w,L,Y,e[d[k]],h[0],c[k])):k<32?(j=p(n,r,s,i,f,e[o[k]],l[1],u[k]),S=b(M,v,w,L,Y,e[d[k]],h[1],c[k])):k<48?(j=y(n,r,s,i,f,e[o[k]],l[2],u[k]),S=y(M,v,w,L,Y,e[d[k]],h[2],c[k])):k<64?(j=b(n,r,s,i,f,e[o[k]],l[3],u[k]),S=p(M,v,w,L,Y,e[d[k]],h[3],c[k])):(j=g(n,r,s,i,f,e[o[k]],l[4],u[k]),S=_(M,v,w,L,Y,e[d[k]],h[4],c[k])),n=f,f=i,i=m(s,10),s=r,r=j,M=Y,Y=L,L=m(w,10),w=v,v=S}var D=this._b+s+L|0;this._b=this._c+i+Y|0,this._c=this._d+f+M|0,this._d=this._e+n+v|0,this._e=this._a+r+w|0,this._a=D},f.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=r.alloc?r.alloc(20):new r(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=f},"./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! buffer */"./node_modules/buffer/index.js"),s=r.Buffer;function i(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return s(e,t,n)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?e.exports=r:(i(r,t),t.Buffer=a),i(s,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return s(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=s(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return s(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},"./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,s=1,i={},a=!1,o=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){c(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&c(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),r=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){c(e.data)},r=function(t){e.port2.postMessage(t)}}():o&&"onreadystatechange"in o.createElement("script")?function(){var e=o.documentElement;r=function(t){var n=o.createElement("script");n.onreadystatechange=function(){c(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():r=function(e){setTimeout(c,0,e)},d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var a={callback:e,args:t};return i[s]=a,r(s),s++},d.clearImmediate=u}function u(e){delete i[e]}function c(e){if(a)setTimeout(c,0,e);else{var t=i[e];if(t){a=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{u(e),a=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer;function s(e,t){this._block=r.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}s.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=r.from(e,t));for(var n=this._block,s=this._blockSize,i=e.length,a=this._len,o=0;o<i;){for(var d=a%s,u=Math.min(i-o,s-d),c=0;c<u;c++)n[d+c]=e[o+c];o+=u,(a+=u)%s==0&&this._update(n)}return this._len+=i,this},s.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var n=8*this._len;if(n<=4294967295)this._block.writeUInt32BE(n,this._blockSize-4);else{var r=(4294967295&n)>>>0,s=(n-r)/4294967296;this._block.writeUInt32BE(s,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var i=this._hash();return e?i.toString(e):i},s.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=s},"./node_modules/sha.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/sha.js/index.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){(t=e.exports=function(e){e=e.toLowerCase();var n=t[e];if(!n)throw new Error(e+" is not supported (we accept pull requests)");return new n}).sha=n(/*! ./sha */"./node_modules/sha.js/sha.js"),t.sha1=n(/*! ./sha1 */"./node_modules/sha.js/sha1.js"),t.sha224=n(/*! ./sha224 */"./node_modules/sha.js/sha224.js"),t.sha256=n(/*! ./sha256 */"./node_modules/sha.js/sha256.js"),t.sha384=n(/*! ./sha384 */"./node_modules/sha.js/sha384.js"),t.sha512=n(/*! ./sha512 */"./node_modules/sha.js/sha512.js")},"./node_modules/sha.js/sha.js":
/*!************************************!*\
  !*** ./node_modules/sha.js/sha.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./hash */"./node_modules/sha.js/hash.js"),i=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,a=[1518500249,1859775393,-1894007588,-899497514],o=new Array(80);function d(){this.init(),this._w=o,s.call(this,64,56)}function u(e){return e<<5|e>>>27}function c(e){return e<<30|e>>>2}function l(e,t,n,r){return 0===e?t&n|~t&r:2===e?t&n|t&r|n&r:t^n^r}r(d,s),d.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},d.prototype._update=function(e){for(var t=this._w,n=0|this._a,r=0|this._b,s=0|this._c,i=0|this._d,o=0|this._e,d=0;d<16;++d)t[d]=e.readInt32BE(4*d);for(;d<80;++d)t[d]=t[d-3]^t[d-8]^t[d-14]^t[d-16];for(var h=0;h<80;++h){var f=~~(h/20),m=u(n)+l(f,r,s,i)+o+t[h]+a[f]|0;o=i,i=s,s=c(r),r=n,n=m}this._a=n+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=i+this._d|0,this._e=o+this._e|0},d.prototype._hash=function(){var e=i.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=d},"./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./hash */"./node_modules/sha.js/hash.js"),i=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,a=[1518500249,1859775393,-1894007588,-899497514],o=new Array(80);function d(){this.init(),this._w=o,s.call(this,64,56)}function u(e){return e<<1|e>>>31}function c(e){return e<<5|e>>>27}function l(e){return e<<30|e>>>2}function h(e,t,n,r){return 0===e?t&n|~t&r:2===e?t&n|t&r|n&r:t^n^r}r(d,s),d.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},d.prototype._update=function(e){for(var t=this._w,n=0|this._a,r=0|this._b,s=0|this._c,i=0|this._d,o=0|this._e,d=0;d<16;++d)t[d]=e.readInt32BE(4*d);for(;d<80;++d)t[d]=u(t[d-3]^t[d-8]^t[d-14]^t[d-16]);for(var f=0;f<80;++f){var m=~~(f/20),_=c(n)+h(m,r,s,i)+o+t[f]+a[m]|0;o=i,i=s,s=l(r),r=n,n=_}this._a=n+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=i+this._d|0,this._e=o+this._e|0},d.prototype._hash=function(){var e=i.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=d},"./node_modules/sha.js/sha224.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha224.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./sha256 */"./node_modules/sha.js/sha256.js"),i=n(/*! ./hash */"./node_modules/sha.js/hash.js"),a=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,o=new Array(64);function d(){this.init(),this._w=o,i.call(this,64,56)}r(d,s),d.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},d.prototype._hash=function(){var e=a.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=d},"./node_modules/sha.js/sha256.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha256.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./hash */"./node_modules/sha.js/hash.js"),i=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],o=new Array(64);function d(){this.init(),this._w=o,s.call(this,64,56)}function u(e,t,n){return n^e&(t^n)}function c(e,t,n){return e&t|n&(e|t)}function l(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function h(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function f(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}function m(e){return(e>>>17|e<<15)^(e>>>19|e<<13)^e>>>10}r(d,s),d.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},d.prototype._update=function(e){for(var t=this._w,n=0|this._a,r=0|this._b,s=0|this._c,i=0|this._d,o=0|this._e,d=0|this._f,_=0|this._g,p=0|this._h,y=0;y<16;++y)t[y]=e.readInt32BE(4*y);for(;y<64;++y)t[y]=m(t[y-2])+t[y-7]+f(t[y-15])+t[y-16]|0;for(var b=0;b<64;++b){var g=p+h(o)+u(o,d,_)+a[b]+t[b]|0,M=l(n)+c(n,r,s)|0;p=_,_=d,d=o,o=i+g|0,i=s,s=r,r=n,n=g+M|0}this._a=n+this._a|0,this._b=r+this._b|0,this._c=s+this._c|0,this._d=i+this._d|0,this._e=o+this._e|0,this._f=d+this._f|0,this._g=_+this._g|0,this._h=p+this._h|0},d.prototype._hash=function(){var e=i.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=d},"./node_modules/sha.js/sha384.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha384.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./sha512 */"./node_modules/sha.js/sha512.js"),i=n(/*! ./hash */"./node_modules/sha.js/hash.js"),a=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,o=new Array(160);function d(){this.init(),this._w=o,i.call(this,128,112)}r(d,s),d.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},d.prototype._hash=function(){var e=a.allocUnsafe(48);function t(t,n,r){e.writeInt32BE(t,r),e.writeInt32BE(n,r+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=d},"./node_modules/sha.js/sha512.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha512.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! inherits */"./node_modules/inherits/inherits_browser.js"),s=n(/*! ./hash */"./node_modules/sha.js/hash.js"),i=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,a=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],o=new Array(160);function d(){this.init(),this._w=o,s.call(this,128,112)}function u(e,t,n){return n^e&(t^n)}function c(e,t,n){return e&t|n&(e|t)}function l(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function h(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function f(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function m(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function _(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function p(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function y(e,t){return e>>>0<t>>>0?1:0}r(d,s),d.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},d.prototype._update=function(e){for(var t=this._w,n=0|this._ah,r=0|this._bh,s=0|this._ch,i=0|this._dh,o=0|this._eh,d=0|this._fh,b=0|this._gh,g=0|this._hh,M=0|this._al,v=0|this._bl,w=0|this._cl,L=0|this._dl,Y=0|this._el,k=0|this._fl,j=0|this._gl,S=0|this._hl,D=0;D<32;D+=2)t[D]=e.readInt32BE(4*D),t[D+1]=e.readInt32BE(4*D+4);for(;D<160;D+=2){var T=t[D-30],x=t[D-30+1],A=f(T,x),E=m(x,T),H=_(T=t[D-4],x=t[D-4+1]),C=p(x,T),P=t[D-14],O=t[D-14+1],I=t[D-32],z=t[D-32+1],B=E+O|0,R=A+P+y(B,E)|0;R=(R=R+H+y(B=B+C|0,C)|0)+I+y(B=B+z|0,z)|0,t[D]=R,t[D+1]=B}for(var F=0;F<160;F+=2){R=t[F],B=t[F+1];var q=c(n,r,s),W=c(M,v,w),U=l(n,M),N=l(M,n),J=h(o,Y),G=h(Y,o),K=a[F],V=a[F+1],Q=u(o,d,b),Z=u(Y,k,j),$=S+G|0,X=g+J+y($,S)|0;X=(X=(X=X+Q+y($=$+Z|0,Z)|0)+K+y($=$+V|0,V)|0)+R+y($=$+B|0,B)|0;var ee=N+W|0,te=U+q+y(ee,N)|0;g=b,S=j,b=d,j=k,d=o,k=Y,o=i+X+y(Y=L+$|0,L)|0,i=s,L=w,s=r,w=v,r=n,v=M,n=X+te+y(M=$+ee|0,$)|0}this._al=this._al+M|0,this._bl=this._bl+v|0,this._cl=this._cl+w|0,this._dl=this._dl+L|0,this._el=this._el+Y|0,this._fl=this._fl+k|0,this._gl=this._gl+j|0,this._hl=this._hl+S|0,this._ah=this._ah+n+y(this._al,M)|0,this._bh=this._bh+r+y(this._bl,v)|0,this._ch=this._ch+s+y(this._cl,w)|0,this._dh=this._dh+i+y(this._dl,L)|0,this._eh=this._eh+o+y(this._el,Y)|0,this._fh=this._fh+d+y(this._fl,k)|0,this._gh=this._gh+b+y(this._gl,j)|0,this._hh=this._hh+g+y(this._hl,S)|0},d.prototype._hash=function(){var e=i.allocUnsafe(64);function t(t,n,r){e.writeInt32BE(t,r),e.writeInt32BE(n,r+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=d},"./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){e.exports=s;var r=n(/*! events */"./node_modules/events/events.js").EventEmitter;function s(){r.call(this)}n(/*! inherits */"./node_modules/inherits/inherits_browser.js")(s,r),s.Readable=n(/*! readable-stream/readable.js */"./node_modules/readable-stream/readable-browser.js"),s.Writable=n(/*! readable-stream/writable.js */"./node_modules/readable-stream/writable-browser.js"),s.Duplex=n(/*! readable-stream/duplex.js */"./node_modules/readable-stream/duplex-browser.js"),s.Transform=n(/*! readable-stream/transform.js */"./node_modules/readable-stream/transform.js"),s.PassThrough=n(/*! readable-stream/passthrough.js */"./node_modules/readable-stream/passthrough.js"),s.Stream=s,s.prototype.pipe=function(e,t){var n=this;function s(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function i(){n.readable&&n.resume&&n.resume()}n.on("data",s),e.on("drain",i),e._isStdio||t&&!1===t.end||(n.on("end",o),n.on("close",d));var a=!1;function o(){a||(a=!0,e.end())}function d(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function u(e){if(c(),0===r.listenerCount(this,"error"))throw e}function c(){n.removeListener("data",s),e.removeListener("drain",i),n.removeListener("end",o),n.removeListener("close",d),n.removeListener("error",u),e.removeListener("error",u),n.removeListener("end",c),n.removeListener("close",c),e.removeListener("close",c)}return n.on("error",u),e.on("error",u),n.on("end",c),n.on("close",c),e.on("close",c),e.emit("pipe",n),e}},"./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! safe-buffer */"./node_modules/safe-buffer/index.js").Buffer,s=r.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function i(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(r.isEncoding===s||!s(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=d,this.end=u,t=4;break;case"utf8":this.fillLast=o,t=4;break;case"base64":this.text=c,this.end=l,t=3;break;default:return this.write=h,void(this.end=f)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function o(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function d(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function c(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function l(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function h(e){return e.toString(this.encoding)}function f(e){return e&&e.length?this.write(e):""}t.StringDecoder=i,i.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},i.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},i.prototype.text=function(e,t){var n=function(e,t,n){var r=t.length-1;if(r<n)return 0;var s=a(t[r]);if(s>=0)return s>0&&(e.lastNeed=s-1),s;if(--r<n||-2===s)return 0;if((s=a(t[r]))>=0)return s>0&&(e.lastNeed=s-2),s;if(--r<n||-2===s)return 0;if((s=a(t[r]))>=0)return s>0&&(2===s?s=0:e.lastNeed=s-3),s;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var r=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,r),e.toString("utf8",t,r)},i.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},"./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,s=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(s.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(s.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(/*! setimmediate */"./node_modules/setimmediate/setImmediate.js"),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",function(){return s}),n.d(t,"__assign",function(){return i}),n.d(t,"__rest",function(){return a}),n.d(t,"__decorate",function(){return o}),n.d(t,"__param",function(){return d}),n.d(t,"__metadata",function(){return u}),n.d(t,"__awaiter",function(){return c}),n.d(t,"__generator",function(){return l}),n.d(t,"__exportStar",function(){return h}),n.d(t,"__values",function(){return f}),n.d(t,"__read",function(){return m}),n.d(t,"__spread",function(){return _}),n.d(t,"__await",function(){return p}),n.d(t,"__asyncGenerator",function(){return y}),n.d(t,"__asyncDelegator",function(){return b}),n.d(t,"__asyncValues",function(){return g}),n.d(t,"__makeTemplateObject",function(){return M}),n.d(t,"__importStar",function(){return v}),n.d(t,"__importDefault",function(){return w});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function s(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&(n[r[s]]=e[r[s]])}return n}function o(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function d(e,t){return function(n,r){t(n,r,e)}}function u(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))(function(s,i){function a(e){try{d(r.next(e))}catch(e){i(e)}}function o(e){try{d(r.throw(e))}catch(e){i(e)}}function d(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(a,o)}d((r=r.apply(e,t||[])).next())})}function l(e,t){var n,r,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(s=(s=a.trys).length>0&&s[s.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){a.label=i[1];break}if(6===i[0]&&a.label<s[1]){a.label=s[1],s=i;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(i);break}s[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}}function h(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function f(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,s,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(s)throw s.error}}return a}function _(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function p(e){return this instanceof p?(this.v=e,this):new p(e)}function y(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,s=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){s[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||o(e,t)})})}function o(e,t){try{!function(e){e.value instanceof p?Promise.resolve(e.value.v).then(d,u):c(i[0][2],e)}(s[e](t))}catch(e){c(i[0][3],e)}}function d(e){o("next",e)}function u(e){o("throw",e)}function c(e,t){e(t),i.shift(),i.length&&o(i[0][0],i[0][1])}}function b(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,s){t[r]=e[r]?function(t){return(n=!n)?{value:p(e[r](t)),done:"return"===r}:s?s(t):t}:s}}function g(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=f(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise(function(r,s){(function(e,t,n,r){Promise.resolve(r).then(function(t){e({value:t,done:n})},t)})(r,s,(t=e[n](t)).done,t.value)})}}}function M(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function v(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function w(e){return e&&e.__esModule?e:{default:e}}},"./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),r=!0}return e.apply(this,arguments)}}}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/vm-browserify/index.js":
/*!*********************************************!*\
  !*** ./node_modules/vm-browserify/index.js ***!
  \*********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){var indexOf=__webpack_require__(/*! indexof */"./node_modules/indexof/index.js"),Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var n=0;n<e.length;n++)t(e[n],n,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,n){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:n})}}catch(e){return function(e,t,n){e[t]=n}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var n=t.contentWindow,r=n.eval,s=n.execScript;!r&&s&&(s.call(n,"null"),r=n.eval),forEach(Object_keys(e),function(t){n[t]=e[t]}),forEach(globals,function(t){e[t]&&(n[t]=e[t])});var i=Object_keys(n),a=r.call(n,this.code);return forEach(Object_keys(n),function(t){(t in e||-1===indexOf(i,t))&&(e[t]=n[t])}),forEach(globals,function(t){t in e||defineProp(e,t,n[t])}),document.body.removeChild(t),a},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),n=this.runInContext(t);return forEach(Object_keys(t),function(n){e[n]=t[n]}),n},forEach(Object_keys(Script.prototype),function(e){exports[e]=Script[e]=function(t){var n=Script(t);return n[e].apply(n,[].slice.call(arguments,1))}}),exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),function(n){t[n]=e[n]}),t}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./src/Authentication/AuthToken.ts":
/*!*****************************************!*\
  !*** ./src/Authentication/AuthToken.ts ***!
  \*****************************************/
/*! exports provided: AuthToken */function(e,t,n){"use strict";n.r(t),n.d(t,"AuthToken",function(){return r});var r=function(){return function(){this.authenticationToken=void 0}}()},"./src/Authentication/Authentication.ts":
/*!**********************************************!*\
  !*** ./src/Authentication/Authentication.ts ***!
  \**********************************************/
/*! exports provided: Authentication */function(e,t,n){"use strict";n.r(t),n.d(t,"Authentication",function(){return d});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! jwt-simple */"./node_modules/jwt-simple/index.js"),i=n(/*! ../Common */"./src/Common/index.ts"),a=n(/*! ./AuthenticationSettings */"./src/Authentication/AuthenticationSettings.ts"),o=n(/*! ./AuthToken */"./src/Authentication/AuthToken.ts"),d=function(e){function t(t,n,r){var s=e.call(this)||this;return t=new a.AuthenticationSettings(t),n=n||new o.AuthToken,e.prototype.init.call(s,t,n,r),t.token?(s.auth.authenticationToken=t.token,t.token=void 0,s.setupRefresh()):t.enabled&&s.update(null),s}return r.__extends(t,e),t.prototype.fetch=function(e,t){var n=this;void 0===e&&(e=new i.Query),void 0===t&&(t=!1);var r=this.requestObject(!1);return this.cbRequest(t,this.settings.url,r)?this.fetchMethod(this.settings.url,r).then(function(e){if(!e.ok)throw Error(e.status+" "+e.statusText+" for request url '"+n.settings.url+"'");return e.json()}).then(function(e){for(var s=0,i=n.settings.tokenPath;s<i.length;s++){e=e[i[s]]}return n.auth.authenticationToken=e,n.setupRefresh(),n.cbSuccess(t,n.auth.authenticationToken,n.settings.url,r),n.auth.authenticationToken}).catch(function(e){throw n.cbError(t,e,n.settings.url,r),e}):Promise.resolve(null)},t.prototype.update=function(e,t){var n=this;if(this.deferUpdate)this.deferredQuery=e;else if(clearTimeout(this.delay),t>0)this.delay=setTimeout(function(){var t=n.fetch(e);t&&t.catch(function(e){return Promise.resolve(null)})},t);else{var r=this.fetch(e);r&&r.catch(function(e){return Promise.resolve(null)})}},t.prototype.setupRefresh=function(){var e=this;try{if(this.auth&&this.auth.authenticationToken){var t=s.decode(this.auth.authenticationToken,null,!0),n=t.exp?new Date(1e3*t.exp):void 0;if(n){var r=(n.valueOf()-(new Date).valueOf())/1e3;r=Math.max(r-this.settings.triggers.expiryOverlap,0),setTimeout(function(){e.update(null)},1e3*r)}}}catch(e){console.error("Unable to parse the provided token '"+this.auth.authenticationToken+"': "+e)}},t}(i.BaseCall)},"./src/Authentication/AuthenticationSettings.ts":
/*!******************************************************!*\
  !*** ./src/Authentication/AuthenticationSettings.ts ***!
  \******************************************************/
/*! exports provided: AuthenticationSettings */function(e,t,n){"use strict";n.r(t),n.d(t,"AuthenticationSettings",function(){return a});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Common/BaseSettings */"./src/Common/BaseSettings.ts"),i=n(/*! ./AuthenticationTriggers */"./src/Authentication/AuthenticationTriggers.ts"),a=function(e){function t(t){var n=e.call(this)||this;return"string"==typeof t&&(t={baseUrl:t}),t.enabled=void 0!==t.enabled&&t.enabled,t.basePath=void 0!==t.basePath?t.basePath:"",t.servicePath=void 0!==t.servicePath?t.servicePath:"auth/login",e.prototype.init.call(n,t),n.token=void 0!==t.token?t.token:void 0,n.tokenPath=void 0!==t.tokenPath?t.tokenPath:["jwtToken"],n.triggers=new i.AuthenticationTriggers(t.triggers),n}return r.__extends(t,e),t}(s.BaseSettings)},"./src/Authentication/AuthenticationTriggers.ts":
/*!******************************************************!*\
  !*** ./src/Authentication/AuthenticationTriggers.ts ***!
  \******************************************************/
/*! exports provided: AuthenticationTriggers */function(e,t,n){"use strict";n.r(t),n.d(t,"AuthenticationTriggers",function(){return r});var r=function(){return function(e){void 0===e&&(e={}),this.expiryOverlap=void 0!==e.expiryOverlap?e.expiryOverlap:60}}()},"./src/Authentication/index.ts":
/*!*************************************!*\
  !*** ./src/Authentication/index.ts ***!
  \*************************************/
/*! exports provided: Authentication, AuthenticationSettings, AuthenticationTriggers, AuthToken */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./Authentication */"./src/Authentication/Authentication.ts");n.d(t,"Authentication",function(){return r.Authentication});var s=n(/*! ./AuthenticationSettings */"./src/Authentication/AuthenticationSettings.ts");n.d(t,"AuthenticationSettings",function(){return s.AuthenticationSettings});var i=n(/*! ./AuthenticationTriggers */"./src/Authentication/AuthenticationTriggers.ts");n.d(t,"AuthenticationTriggers",function(){return i.AuthenticationTriggers});var a=n(/*! ./AuthToken */"./src/Authentication/AuthToken.ts");n.d(t,"AuthToken",function(){return a.AuthToken})},"./src/Autocomplete/Autocomplete.ts":
/*!******************************************!*\
  !*** ./src/Autocomplete/Autocomplete.ts ***!
  \******************************************/
/*! exports provided: Autocomplete */function(e,t,n){"use strict";n.r(t),n.d(t,"Autocomplete",function(){return d});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Authentication */"./src/Authentication/index.ts"),i=n(/*! ../Common */"./src/Common/index.ts"),a=n(/*! ./AutocompleteQueryConverter */"./src/Autocomplete/AutocompleteQueryConverter.ts"),o=n(/*! ./AutocompleteSettings */"./src/Autocomplete/AutocompleteSettings.ts"),d=function(e){function t(t,n,r){var i=e.call(this)||this;return t=new o.AutocompleteSettings(t),n=n||new s.AuthToken,e.prototype.init.call(i,t,n,r),i.queryConverter=new a.AutocompleteQueryConverter,i}return r.__extends(t,e),t.prototype.fetch=function(e,t){var n=this;void 0===e&&(e=new i.Query),void 0===t&&(t=!1);var r=this.queryConverter.getUrl(this.settings.url,new i.Query(e)),s=this.requestObject();return this.cbRequest(t,r,s)?this.fetchMethod(r,s).then(function(e){if(!e.ok)throw Error(e.status+" "+e.statusText+" for request url '"+r+"'");return e.json()}).then(function(e){return n.cbSuccess(t,e,r,s),e}).catch(function(e){throw n.cbError(t,e,r,s),e}):Promise.resolve(null)},t.prototype.maxSuggestionsChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.maxSuggestionsChanged&&this.update(t)},t.prototype.queryTextChanged=function(e,t){if(this.shouldUpdate()&&this.settings.triggers.queryChange&&t.queryText.length>this.settings.triggers.queryChangeMinLength){if(this.settings.triggers.queryChangeInstantRegex&&this.settings.triggers.queryChangeInstantRegex.test(t.queryText))return void this.update(t);if(this.settings.triggers.queryChangeDelay>-1)return void this.update(t,this.settings.triggers.queryChangeDelay)}clearTimeout(this.delay)},t}(i.BaseCall)},"./src/Autocomplete/AutocompleteQueryConverter.ts":
/*!********************************************************!*\
  !*** ./src/Autocomplete/AutocompleteQueryConverter.ts ***!
  \********************************************************/
/*! exports provided: AutocompleteQueryConverter */function(e,t,n){"use strict";n.r(t),n.d(t,"AutocompleteQueryConverter",function(){return s});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.getUrlParams=function(e){var t=[];return this.addParamIfSet(t,"l",1),this.addParamIfSet(t,"q",e.queryText),this.addParamIfSet(t,"s",e.maxSuggestions),t},t}(n(/*! ../Common */"./src/Common/index.ts").BaseQueryConverter)},"./src/Autocomplete/AutocompleteSettings.ts":
/*!**************************************************!*\
  !*** ./src/Autocomplete/AutocompleteSettings.ts ***!
  \**************************************************/
/*! exports provided: AutocompleteSettings */function(e,t,n){"use strict";n.r(t),n.d(t,"AutocompleteSettings",function(){return a});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Common */"./src/Common/index.ts"),i=n(/*! ./AutocompleteTriggers */"./src/Autocomplete/AutocompleteTriggers.ts"),a=function(e){function t(t){var n=e.call(this)||this;return"string"==typeof t&&(t={baseUrl:t}),t.servicePath=void 0!==t.servicePath?t.servicePath:"autocomplete",e.prototype.init.call(n,t),n.triggers=new i.AutocompleteTriggers(t.triggers),n}return r.__extends(t,e),t}(s.BaseSettings)},"./src/Autocomplete/AutocompleteTriggers.ts":
/*!**************************************************!*\
  !*** ./src/Autocomplete/AutocompleteTriggers.ts ***!
  \**************************************************/
/*! exports provided: AutocompleteTriggers */function(e,t,n){"use strict";n.r(t),n.d(t,"AutocompleteTriggers",function(){return r});var r=function(){return function(e){void 0===e&&(e={}),this.maxSuggestionsChanged=void 0===e.maxSuggestionsChanged||e.maxSuggestionsChanged,this.queryChange=void 0===e.queryChange||e.queryChange,this.queryChangeDelay=void 0!==e.queryChangeDelay?e.queryChangeDelay:200,this.queryChangeInstantRegex=void 0!==e.queryChangeInstantRegex?e.queryChangeInstantRegex:/\S\s$/,this.queryChangeMinLength=void 0!==e.queryChangeMinLength?e.queryChangeMinLength:3}}()},"./src/Autocomplete/index.ts":
/*!***********************************!*\
  !*** ./src/Autocomplete/index.ts ***!
  \***********************************/
/*! exports provided: Autocomplete, AutocompleteQueryConverter, AutocompleteSettings, AutocompleteTriggers */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./Autocomplete */"./src/Autocomplete/Autocomplete.ts");n.d(t,"Autocomplete",function(){return r.Autocomplete});var s=n(/*! ./AutocompleteQueryConverter */"./src/Autocomplete/AutocompleteQueryConverter.ts");n.d(t,"AutocompleteQueryConverter",function(){return s.AutocompleteQueryConverter});var i=n(/*! ./AutocompleteSettings */"./src/Autocomplete/AutocompleteSettings.ts");n.d(t,"AutocompleteSettings",function(){return i.AutocompleteSettings});var a=n(/*! ./AutocompleteTriggers */"./src/Autocomplete/AutocompleteTriggers.ts");n.d(t,"AutocompleteTriggers",function(){return a.AutocompleteTriggers})},"./src/Categorize/Categorize.ts":
/*!**************************************!*\
  !*** ./src/Categorize/Categorize.ts ***!
  \**************************************/
/*! exports provided: Categorize */function(e,t,n){"use strict";n.r(t),n.d(t,"Categorize",function(){return d});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Authentication */"./src/Authentication/index.ts"),i=n(/*! ../Common */"./src/Common/index.ts"),a=n(/*! ./CategorizeQueryConverter */"./src/Categorize/CategorizeQueryConverter.ts"),o=n(/*! ./CategorizeSettings */"./src/Categorize/CategorizeSettings.ts"),d=function(e){function t(t,n,r){var i=e.call(this)||this;return t=new o.CategorizeSettings(t),n=n||new s.AuthToken,e.prototype.init.call(i,t,n,r),i.queryConverter=new a.CategorizeQueryConverter,i}return r.__extends(t,e),t.prototype.fetch=function(e,t){var n=this;void 0===e&&(e=new i.Query),void 0===t&&(t=!1);var r=this.queryConverter.getUrl(this.settings.url,e),s=this.requestObject();return this.cbRequest(t,r,s)?this.fetchMethod(r,s).then(function(e){if(!e.ok)throw Error(e.status+" "+e.statusText+" for request url '"+r+"'");return e.json()}).then(function(i){return n.categories=i,i=n.filterCategories(i,e),n.cbSuccess(t,i,r,s),i}).catch(function(e){throw n.cbError(t,e,r,s),e}):Promise.resolve(null)},t.prototype.clientCategoriesUpdate=function(e){this.shouldUpdate()&&this.cbSuccess(!1,this.filterCategories(this.categories,e),null,null)},t.prototype.clientIdChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.clientIdChanged&&this.update(t)},t.prototype.dateFromChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.dateFromChanged&&this.update(t)},t.prototype.dateToChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.dateToChanged&&this.update(t)},t.prototype.filtersChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.filterChanged&&this.update(t)},t.prototype.queryTextChanged=function(e,t){if(this.shouldUpdate()&&this.settings.triggers.queryChange&&t.queryText.length>this.settings.triggers.queryChangeMinLength){if(this.settings.triggers.queryChangeInstantRegex&&this.settings.triggers.queryChangeInstantRegex.test(t.queryText))return void this.update(t);if(this.settings.triggers.queryChangeDelay>-1)return void this.update(t,this.settings.triggers.queryChangeDelay)}clearTimeout(this.delay)},t.prototype.searchTypeChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.searchTypeChanged&&this.update(t)},t.prototype.uiLanguageCodeChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.uiLanguageCodeChanged&&this.update(t)},t.prototype.createCategoryFilter=function(e){var t=[],n=(Array.isArray(e)?e:e.categoryName).slice(0),r=n.splice(0,1)[0].toLowerCase();if(!this.categories||!this.categories.groups||0===this.categories.groups.length)return null;var s=this.categories.groups.find(function(e){return e.name.toLowerCase()===r});if(!s)return null;if(t.push(s.displayName),s.categories.length>0){var a=this.getCategoryPathDisplayNameFromCategories(n,s.categories),o=a.displayName,d=a.ref;if(o&&o.length>0)return t=t.concat(o),new i.Filter(t,d)}return null},t.prototype.findCategory=function(e,t){if(!(t=t||this.categories))return null;var n=t.groups.findIndex(function(t){return t.name===e[0]});if(n<0)return null;var r=t.groups[n];if(1===e.length)return r;var s=this.getCategoryPathDisplayNameFromCategories(e.slice(1),r.categories);return s?s.ref:null},t.prototype.addFiltersIfMissing=function(e,t){var n=this;e.forEach(function(e){for(var s=e.displayName.length,i=0;i<s;i++){var a=e.category.categoryName.slice(0,i+1);if(!n.findCategory(a,t)){var o=e.displayName[i],d=a.slice(0,-1);if(0===i){var u={displayName:o,categories:[],expanded:!1,name:a[0]};t.groups.push(u)}else{var c=n.findCategory(d,t);if(!c)throw Error("Since we are iterating from groups and outwards this should not happen.");var l=i===s-1?r.__assign({},e.category,{count:0,expanded:!1}):{categoryName:a,children:[],count:0,expanded:!1,displayName:o,name:a[i]};c.expanded=!0,1===i?c.categories.push(l):c.children.push(l)}}}})},t.prototype.filterCategories=function(e,t){var n=this;void 0===t&&(t=new i.Query);var s=r.__assign({},e),a=this.settings.presentations.__ROOT__;a&&(a.group&&a.group.enabled&&s.groups.length>=a.group.minCount&&(s.groups=this.grouping(a,s.groups)),a.filter&&a.filter.enabled&&(s.groups=this.filtering(a,s.groups)),a.sort&&a.sort.enabled&&(s.groups=this.sorting(a,s.groups)),a.limit&&a.limit.enabled&&(s.groups=this.limiting(s.groups,a.limit)));var o=s.groups.map(function(e){var t=r.__assign({},e),s=n.settings.presentations[t.name];return s&&(s.group&&s.group.enabled&&t.categories.length>=s.group.minCount&&(t.categories=n.grouping(s,t.categories)),s.filter&&s.filter.enabled&&(t.categories=n.filtering(s,t.categories)),s.sort&&s.sort.enabled&&(t.categories=n.sorting(s,t.categories)),s.limit&&s.limit.enabled&&(t.categories=n.limiting(t.categories,s.limit)),null!==s.expanded&&(t.expanded=s.expanded)),t.categories&&t.categories.length>0&&(t.categories=n.mapCategories(t.categories)),t});return s.groups=o.filter(function(e){return void 0!==e}),this.addFiltersIfMissing(t.filters,s),s},t.prototype.mapCategories=function(e){var t=this,n=e.slice();return n=(n=n.map(function(e){var n=r.__assign({},e),s=t.settings.presentations[n.categoryName.join("|")];return s&&(s.group&&s.group.enabled&&n.children.length>=s.group.minCount&&(n.children=t.grouping(s,n.children)),s.filter&&s.filter.enabled&&(n.children=t.filtering(s,n.children)),s.sort&&s.sort.enabled&&(n.children=t.sorting(s,n.children)),s.limit&&s.limit.enabled&&(n.children=t.limiting(n.children,s.limit)),null!==s.expanded&&(n.expanded=s.expanded)),n.children&&n.children.length>0&&(n.children=t.mapCategories(n.children)),n})).filter(function(e){return void 0!==e})},t.prototype.grouping=function(e,t){for(var n,r=new Map,s=new Map,i=0,a=t;i<a.length;i++){var o=a[i],d=e.group.getMatch(o.displayName);if(d){var u=(n=o.hasOwnProperty("count"))?o:{categoryName:[o.name],children:o.categories,count:-1,displayName:o.displayName,expanded:o.expanded,name:o.name};if(r.has(d)){var c=r.get(d);c.push(u),r.set(d,c)}else r.set(d,[u]);s.set(o.displayName,d)}}return t.map(function(t){var i=s.get(t.displayName);if(i){var a=r.get(i);if(!a)return t;if(a.length>=e.group.minCountPerGroup){var o={name:"__"+i+"__",children:a,displayName:i,expanded:!0,categoryName:["__"+i+"__"]};return n&&(o.count=-1),a.forEach(function(e){s.delete(e.displayName)}),o}return t}}).filter(function(e){return void 0!==e})},t.prototype.filtering=function(e,t){return t.filter(function(t){if(e.filter.match){var n=e.filter.matchMode===i.MatchMode.DisplayName?t.displayName:t.name;return e.filter.match.test(n)}})},t.prototype.sorting=function(e,t){for(var n=new Map,r=0,s=e.sort.parts;r<s.length;r++){var a=s[r];n.set(a,[])}for(var o=new Array,d=e.sort.parts.filter(function(e){return"string"==typeof e.match}),u=e.sort.parts.filter(function(e){return"object"==typeof e.match}),c=0,l=t;c<l.length;c++){for(var h=l[c],f=!1,m=0,_=d;m<_.length;m++){var p=_[m];if(p.match===(p.matchMode===i.MatchMode.DisplayName?h.displayName:h.name)){(M=n.get(p)).push(h),n.set(p,M),f=!0;break}}if(!f){for(var y=0,b=u;y<b.length;y++){var g=b[y];if(g.match.test(g.matchMode===i.MatchMode.DisplayName?h.displayName:h.name)){var M;(M=n.get(g)).push(h),n.set(g,M),f=!0;break}}f||o.push(h)}}var v=new Array;return n.forEach(function(e,t){if(1!==e.length){var n=new Array;switch(t.sortMethod){case i.SortMethod.AlphaAsc:n=e.sort(function(e,n){var r=t.matchMode===i.MatchMode.DisplayName?e.displayName:e.name,s=t.matchMode===i.MatchMode.DisplayName?n.displayName:n.name;return r<s?-1:r>s?1:0});break;case i.SortMethod.AlphaDesc:n=e.sort(function(e,n){var r=t.matchMode===i.MatchMode.DisplayName?e.displayName:e.name,s=t.matchMode===i.MatchMode.DisplayName?n.displayName:n.name;return r>s?-1:r<s?1:0});break;case i.SortMethod.CountAsc:n=e[0].hasOwnProperty("count")?e.sort(function(e,t){return e.count<t.count?-1:e.count>t.count?1:0}):e;break;case i.SortMethod.CountDesc:n=e[0].hasOwnProperty("count")?e.sort(function(e,t){return e.count>t.count?-1:e.count<t.count?1:0}):e;break;case i.SortMethod.Original:default:n=e}v=v.concat(n)}else v=v.concat(e)}),v.concat(o)},t.prototype.limiting=function(e,t){var n=(t.page-1)*t.pageSize,r=n+t.pageSize;return e.slice(n,r)},t.prototype.getCategoryPathDisplayNameFromCategories=function(e,t){var n,r=[],s=e.slice(0),i=s.splice(0,1)[0].toLowerCase(),a=t.find(function(e){return e.name.toLowerCase()===i});return a?(r.push(a.displayName),s.length>0&&0===a.children.length?null:(a.children.length>0&&s.length>0&&(n=this.getCategoryPathDisplayNameFromCategories(s,a.children)).displayName&&n.displayName.length>0&&(r=r.concat(n.displayName)),{displayName:r,ref:n?n.ref:a})):null},t}(i.BaseCall)},"./src/Categorize/CategorizeQueryConverter.ts":
/*!****************************************************!*\
  !*** ./src/Categorize/CategorizeQueryConverter.ts ***!
  \****************************************************/
/*! exports provided: CategorizeQueryConverter */function(e,t,n){"use strict";n.r(t),n.d(t,"CategorizeQueryConverter",function(){return i});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Common */"./src/Common/index.ts"),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.getUrlParams=function(e){var t=[];this.addParamIfSet(t,"c",e.clientId),this.addParamIfSet(t,"df",this.createDate(e.dateFrom)),this.addParamIfSet(t,"dt",this.createDate(e.dateTo));var n=e.filters.map(function(e){return e.category.categoryName.join("|")});return this.addParamIfSet(t,"f",n.join(";")),this.addParamIfSet(t,"q",e.queryText),this.addParamIfSet(t,"t",e.searchType),this.addParamIfSet(t,"l",e.uiLanguageCode),this.addParamIfSet(t,"ct",s.CategorizationType[e.categorizationType]),t},t}(s.BaseQueryConverter)},"./src/Categorize/CategorizeSettings.ts":
/*!**********************************************!*\
  !*** ./src/Categorize/CategorizeSettings.ts ***!
  \**********************************************/
/*! exports provided: CategorizeSettings */function(e,t,n){"use strict";n.r(t),n.d(t,"CategorizeSettings",function(){return o});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Common */"./src/Common/index.ts"),i=n(/*! ./CategorizeTriggers */"./src/Categorize/CategorizeTriggers.ts"),a=n(/*! ../Common/CategoryPresentation */"./src/Common/CategoryPresentation.ts"),o=function(e){function t(t){var n=e.call(this)||this;if("string"==typeof t&&(t={baseUrl:t}),t.servicePath=void 0!==t.servicePath?t.servicePath:"search/categorize",e.prototype.init.call(n,t),n.clientCategoryFilterSepChar=void 0!==t.clientCategoryFilterSepChar?t.clientCategoryFilterSepChar:"_",n.triggers=new i.CategorizeTriggers(t.triggers),n.presentations={},void 0!==t.presentations)for(var r in t.presentations)t.presentations.hasOwnProperty(r)&&(n.presentations[r]=new a.CategoryPresentation(t.presentations[r]));return n}return r.__extends(t,e),t}(s.BaseSettings)},"./src/Categorize/CategorizeTriggers.ts":
/*!**********************************************!*\
  !*** ./src/Categorize/CategorizeTriggers.ts ***!
  \**********************************************/
/*! exports provided: CategorizeTriggers */function(e,t,n){"use strict";n.r(t),n.d(t,"CategorizeTriggers",function(){return r});var r=function(){return function(e){void 0===e&&(e={}),this.clientCategoryExpansionChanged=void 0===e.clientCategoryExpansionChanged||e.clientCategoryExpansionChanged,this.clientCategoryFilterChanged=void 0===e.clientCategoryFilterChanged||e.clientCategoryFilterChanged,this.clientIdChanged=void 0===e.clientIdChanged||e.clientIdChanged,this.dateFromChanged=void 0===e.dateFromChanged||e.dateFromChanged,this.dateToChanged=void 0===e.dateToChanged||e.dateToChanged,this.filterChanged=void 0===e.filterChanged||e.filterChanged,this.queryChange=void 0===e.queryChange||e.queryChange,this.queryChangeDelay=void 0!==e.queryChangeDelay?e.queryChangeDelay:2e3,this.queryChangeInstantRegex=void 0!==e.queryChangeInstantRegex?e.queryChangeInstantRegex:/\S\s$/u,this.queryChangeMinLength=void 0!==e.queryChangeMinLength?e.queryChangeMinLength:2,this.searchTypeChanged=void 0===e.searchTypeChanged||e.searchTypeChanged,this.uiLanguageCodeChanged=void 0===e.uiLanguageCodeChanged||e.uiLanguageCodeChanged}}()},"./src/Categorize/index.ts":
/*!*********************************!*\
  !*** ./src/Categorize/index.ts ***!
  \*********************************/
/*! exports provided: Categorize, CategorizeSettings, CategorizeTriggers, CategorizeQueryConverter */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./Categorize */"./src/Categorize/Categorize.ts");n.d(t,"Categorize",function(){return r.Categorize});var s=n(/*! ./CategorizeSettings */"./src/Categorize/CategorizeSettings.ts");n.d(t,"CategorizeSettings",function(){return s.CategorizeSettings});var i=n(/*! ./CategorizeTriggers */"./src/Categorize/CategorizeTriggers.ts");n.d(t,"CategorizeTriggers",function(){return i.CategorizeTriggers});var a=n(/*! ./CategorizeQueryConverter */"./src/Categorize/CategorizeQueryConverter.ts");n.d(t,"CategorizeQueryConverter",function(){return a.CategorizeQueryConverter})},"./src/Common/BaseCall.ts":
/*!********************************!*\
  !*** ./src/Common/BaseCall.ts ***!
  \********************************/
/*! exports provided: BaseCall */function(e,t,n){"use strict";n.r(t),n.d(t,"BaseCall",function(){return i});var r=n(/*! cross-fetch */"./node_modules/cross-fetch/dist/browser-ponyfill.js"),s=n.n(r),i=function(){function e(){}return e.prototype.deferUpdates=function(e,t){if(void 0===t&&(t=!1),this.deferUpdate=e,!e&&this.deferredQuery){var n=this.deferredQuery,r=this.deferredUseMatchPage;this.deferredQuery=null,this.deferredUseMatchPage=null,!t&&this.shouldUpdate()&&this.update(n,null,r)}},Object.defineProperty(e.prototype,"deferUpdateState",{get:function(){return this.deferUpdate},enumerable:!0,configurable:!0}),e.prototype.requestObject=function(e){void 0===e&&(e=!0);var t={"Content-Type":"application/json"};return e&&this.auth&&this.auth.authenticationToken&&(t.Authorization="Bearer "+this.auth.authenticationToken),{cache:"default",credentials:"include",headers:t,method:"GET",mode:"cors"}},e.prototype.update=function(e,t,n){var r=this;if(n||(e.matchPage=1),this.deferUpdate)this.deferredQuery=e,this.deferredUseMatchPage=n;else if(clearTimeout(this.delay),t>0)this.delay=setTimeout(function(){var t=r.fetch(e);t&&t.catch(function(e){return Promise.resolve(null)})},t);else{var s=this.fetch(e);s&&s.catch(function(e){return Promise.resolve(null)})}},e.prototype.shouldUpdate=function(){return this.settings.cbSuccess&&this.settings.enabled},e.prototype.clientIdChanged=function(e,t){},e.prototype.categorizationTypeChanged=function(e,t){},e.prototype.dateFromChanged=function(e,t){},e.prototype.dateToChanged=function(e,t){},e.prototype.filtersChanged=function(e,t){},e.prototype.matchGenerateContentChanged=function(e,t){},e.prototype.matchGenerateContentHighlightsChanged=function(e,t){},e.prototype.matchGroupingChanged=function(e,t){},e.prototype.matchOrderByChanged=function(e,t){},e.prototype.matchPageChanged=function(e,t){},e.prototype.matchPageSizeChanged=function(e,t){},e.prototype.maxSuggestionsChanged=function(e,t){},e.prototype.queryTextChanged=function(e,t){},e.prototype.searchTypeChanged=function(e,t){},e.prototype.uiLanguageCodeChanged=function(e,t){},e.prototype.init=function(e,t,n){this.settings=e,this.auth=t,this.fetchMethod=n||s.a},e.prototype.cbRequest=function(e,t,n){if(!this.settings)throw new Error("Settings cannot be empty.");return!(this.settings.cbRequest&&!e)||!1!==this.settings.cbRequest(t,n)},e.prototype.cbError=function(e,t,n,r){if(!this.settings)throw new Error("Settings cannot be empty.");this.settings.cbSuccess&&!e&&this.settings.cbError(t)},e.prototype.cbSuccess=function(e,t,n,r){if(!this.settings)throw new Error("Settings cannot be empty.");this.settings.cbSuccess&&!e&&this.settings.cbSuccess(t)},e}()},"./src/Common/BaseQueryConverter.ts":
/*!******************************************!*\
  !*** ./src/Common/BaseQueryConverter.ts ***!
  \******************************************/
/*! exports provided: BaseQueryConverter */function(e,t,n){"use strict";n.r(t),n.d(t,"BaseQueryConverter",function(){return i});var r=n(/*! moment */"./node_modules/moment/moment.js"),s=n.n(r),i=function(){function e(){}return e.prototype.getUrl=function(e,t){return e+"?"+this.getUrlParams(t).sort().join("&")},e.prototype.addParamIfSet=function(e,t,n){var r=n.toString();r&&e.push(t+"="+encodeURIComponent(r))},e.prototype.createDate=function(e){return e?"object"!=typeof e||e instanceof String||e instanceof Date?s()(e).toISOString():s()().add(e).toISOString():""},e}()},"./src/Common/BaseSettings.ts":
/*!************************************!*\
  !*** ./src/Common/BaseSettings.ts ***!
  \************************************/
/*! exports provided: BaseSettings */function(e,t,n){"use strict";n.r(t),n.d(t,"BaseSettings",function(){return r});var r=function(){function e(){}return Object.defineProperty(e.prototype,"url",{get:function(){var e=[];return e.push(this.baseUrl),this.basePath&&e.push(this.basePath),this.servicePath&&e.push(this.servicePath),new URL(e.join("/")).toString()},enumerable:!0,configurable:!0}),e.prototype.init=function(e){if(void 0===e.baseUrl||void 0===e.servicePath)throw Error("Must have settings, with baseUrl, basePath and servicePath.");this.enabled=void 0===e.enabled||e.enabled,this.baseUrl=e.baseUrl.replace(/\/+$/,""),this.basePath=void 0!==e.basePath?e.basePath.replace(/(^\/+)|(\/+$)/g,""):"RestService/v4",this.servicePath=e.servicePath.replace(/(^\/+)|(\/+$)/g,""),this.cbError=e.cbError,this.cbRequest=e.cbRequest,this.cbSuccess=e.cbSuccess},e}()},"./src/Common/CategorizationType.ts":
/*!******************************************!*\
  !*** ./src/Common/CategorizationType.ts ***!
  \******************************************/
/*! exports provided: CategorizationType */function(e,t,n){"use strict";var r;n.r(t),n.d(t,"CategorizationType",function(){return r}),function(e){e.All="All",e.DocumentHitsOnly="DocumentHitsOnly"}(r||(r={}))},"./src/Common/CategoryPresentation.ts":
/*!********************************************!*\
  !*** ./src/Common/CategoryPresentation.ts ***!
  \********************************************/
/*! exports provided: CategoryPresentation, GroupConfiguration, GroupingMode, Casing, FilterConfiguration, MatchMode, SortConfiguration, SortPartConfiguration, SortMethod, LimitPageConfiguration */function(e,t,n){"use strict";n.r(t),n.d(t,"CategoryPresentation",function(){return i}),n.d(t,"GroupConfiguration",function(){return a}),n.d(t,"GroupingMode",function(){return r}),n.d(t,"Casing",function(){return s}),n.d(t,"FilterConfiguration",function(){return d}),n.d(t,"MatchMode",function(){return o}),n.d(t,"SortConfiguration",function(){return c}),n.d(t,"SortPartConfiguration",function(){return l}),n.d(t,"SortMethod",function(){return u}),n.d(t,"LimitPageConfiguration",function(){return h});var r,s,i=function(){return function(e){e=e||{},this.expanded=void 0!==e.expanded?e.expanded:null,this.group=new a(e.group),this.filter=new d(e.filter),this.sort=new c(e.sort),this.limit=new h(e.limit)}}(),a=function(){function e(e){e=e||{},this.enabled=void 0!==e.enabled&&e.enabled,this.minCount=void 0!==e.minCount?e.minCount:20,this.mode=void 0!==e.mode?e.mode:r.DisplayName,this.match=void 0!==e.match?"string"==typeof e.match?new RegExp(e.match):e.match:/^./,this.matchCase=void 0!==e.matchCase?e.matchCase:s.Title,this.minCountPerGroup=void 0!==e.minCountPerGroup?e.minCountPerGroup:5}return e.prototype.getMatch=function(e){var t=this.match.exec(e);if(null===t)return null;switch(this.matchCase){case s.Lower:return t[0].toLowerCase();case s.Upper:return t[0].toUpperCase();case s.Title:return t[0][0].toUpperCase()+t[0].substring(1).toLowerCase();case s.Unchanged:default:return t[0]}},e}();!function(e){e.DisplayName="DisplayName",e.MatchCount="MatchCount"}(r||(r={})),function(e){e.Unchanged="Unchanged",e.Upper="Upper",e.Lower="Lower",e.Title="Title"}(s||(s={}));var o,d=function(){return function(e){e=e||{},this.enabled=void 0!==e.enabled&&e.enabled,this.match=void 0!==e.match?"string"==typeof e.match?new RegExp(e.match):e.match:new RegExp(""),this.matchMode=void 0!==e.matchMode?e.matchMode:o.DisplayName,this.maxMatchCount=void 0!==e.maxMatchCount?e.maxMatchCount:-1,this.uiHintShowFilterInputThreshold=void 0!==e.uiHintShowFilterInputThreshold?e.uiHintShowFilterInputThreshold:20}}();!function(e){e.Name="Name",e.DisplayName="DisplayName"}(o||(o={}));var u,c=function(){function e(e){e=e||{},this.enabled=void 0!==e.enabled&&e.enabled,this.parts=void 0!==e.parts?this.setupParts(e.parts):[]}return e.prototype.setupParts=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(new l(s))}return t},e}(),l=function(){return function(e){e=e||{},this.match=void 0!==e.match?e.match:/.*/,this.matchMode=void 0!==e.matchMode?e.matchMode:o.DisplayName,this.sortMethod=void 0!==e.sortMethod?e.sortMethod:u.Original}}();!function(e){e.Original="Original",e.AlphaAsc="AlphaAsc",e.AlphaDesc="AlphaDesc",e.CountAsc="CountAsc",e.CountDesc="CountDesc"}(u||(u={}));var h=function(){return function(e){e=e||{},this.enabled=void 0!==e.enabled&&e.enabled,this.page=void 0!==e.page?e.page:1,this.pageSize=void 0!==e.pageSize?function(){if(e.pageSize<0)throw new Error("limit pageSize cannot be negative");return e.pageSize}():5,this.uiHintShowPager=void 0===e.uiHintShowPager||e.uiHintShowPager}}()},"./src/Common/Filter.ts":
/*!******************************!*\
  !*** ./src/Common/Filter.ts ***!
  \******************************/
/*! exports provided: Filter */function(e,t,n){"use strict";n.r(t),n.d(t,"Filter",function(){return r});var r=function(){return function(e,t){this.displayName=e,this.category=t}}()},"./src/Common/OrderBy.ts":
/*!*******************************!*\
  !*** ./src/Common/OrderBy.ts ***!
  \*******************************/
/*! exports provided: OrderBy */function(e,t,n){"use strict";var r;n.r(t),n.d(t,"OrderBy",function(){return r}),function(e){e.Relevance="Relevance",e.Date="Date"}(r||(r={}))},"./src/Common/Query.ts":
/*!*****************************!*\
  !*** ./src/Common/Query.ts ***!
  \*****************************/
/*! exports provided: Query */function(e,t,n){"use strict";n.r(t),n.d(t,"Query",function(){return a});var r=n(/*! ./CategorizationType */"./src/Common/CategorizationType.ts"),s=n(/*! ./OrderBy */"./src/Common/OrderBy.ts"),i=n(/*! ./SearchType */"./src/Common/SearchType.ts"),a=function(){return function(e){if(void 0===e&&(e={}),this.clientId="",this.categorizationType=r.CategorizationType.All,this.dateFrom=null,this.dateTo=null,this.filters=[],this.matchGenerateContent=!1,this.matchGenerateContentHighlights=!0,this.matchGrouping=!1,this.matchOrderBy=s.OrderBy.Relevance,this.matchPage=1,this.matchPageSize=10,this.maxSuggestions=10,this.queryText="",this.searchType=i.SearchType.Keywords,this.uiLanguageCode="",e.categorizationType&&void 0===r.CategorizationType[e.categorizationType])throw new Error("Illegal CategorizationType value: "+e.categorizationType);if(e.matchOrderBy&&void 0===s.OrderBy[e.matchOrderBy])throw new Error("Illegal OrderBy value: "+e.matchOrderBy);if(e.searchType&&void 0===i.SearchType[e.searchType])throw new Error("Illegal SearchType value: "+e.searchType);Object.assign(this,e)}}()},"./src/Common/SearchType.ts":
/*!**********************************!*\
  !*** ./src/Common/SearchType.ts ***!
  \**********************************/
/*! exports provided: SearchType */function(e,t,n){"use strict";var r;n.r(t),n.d(t,"SearchType",function(){return r}),function(e){e.Keywords="Keywords",e.Relevance="Relevance"}(r||(r={}))},"./src/Common/index.ts":
/*!*****************************!*\
  !*** ./src/Common/index.ts ***!
  \*****************************/
/*! exports provided: BaseCall, BaseSettings, BaseQueryConverter, CategorizationType, CategoryPresentation, GroupConfiguration, GroupingMode, Casing, FilterConfiguration, MatchMode, SortConfiguration, SortPartConfiguration, SortMethod, LimitPageConfiguration, Filter, OrderBy, Query, SearchType */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./BaseCall */"./src/Common/BaseCall.ts");n.d(t,"BaseCall",function(){return r.BaseCall});var s=n(/*! ./BaseSettings */"./src/Common/BaseSettings.ts");n.d(t,"BaseSettings",function(){return s.BaseSettings});var i=n(/*! ./BaseQueryConverter */"./src/Common/BaseQueryConverter.ts");n.d(t,"BaseQueryConverter",function(){return i.BaseQueryConverter});var a=n(/*! ./CategorizationType */"./src/Common/CategorizationType.ts");n.d(t,"CategorizationType",function(){return a.CategorizationType});var o=n(/*! ./CategoryPresentation */"./src/Common/CategoryPresentation.ts");n.d(t,"CategoryPresentation",function(){return o.CategoryPresentation}),n.d(t,"GroupConfiguration",function(){return o.GroupConfiguration}),n.d(t,"GroupingMode",function(){return o.GroupingMode}),n.d(t,"Casing",function(){return o.Casing}),n.d(t,"FilterConfiguration",function(){return o.FilterConfiguration}),n.d(t,"MatchMode",function(){return o.MatchMode}),n.d(t,"SortConfiguration",function(){return o.SortConfiguration}),n.d(t,"SortPartConfiguration",function(){return o.SortPartConfiguration}),n.d(t,"SortMethod",function(){return o.SortMethod}),n.d(t,"LimitPageConfiguration",function(){return o.LimitPageConfiguration});var d=n(/*! ./Filter */"./src/Common/Filter.ts");n.d(t,"Filter",function(){return d.Filter});var u=n(/*! ./OrderBy */"./src/Common/OrderBy.ts");n.d(t,"OrderBy",function(){return u.OrderBy});var c=n(/*! ./Query */"./src/Common/Query.ts");n.d(t,"Query",function(){return c.Query});var l=n(/*! ./SearchType */"./src/Common/SearchType.ts");n.d(t,"SearchType",function(){return l.SearchType})},"./src/Find/Find.ts":
/*!**************************!*\
  !*** ./src/Find/Find.ts ***!
  \**************************/
/*! exports provided: Find */function(e,t,n){"use strict";n.r(t),n.d(t,"Find",function(){return d});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Authentication */"./src/Authentication/index.ts"),i=n(/*! ../Common */"./src/Common/index.ts"),a=n(/*! ./FindQueryConverter */"./src/Find/FindQueryConverter.ts"),o=n(/*! ./FindSettings */"./src/Find/FindSettings.ts"),d=function(e){function t(t,n,r){var i=e.call(this)||this;return t=new o.FindSettings(t),n=n||new s.AuthToken,e.prototype.init.call(i,t,n,r),i.queryConverter=new a.FindQueryConverter,i}return r.__extends(t,e),t.prototype.fetch=function(e,t){var n=this;void 0===e&&(e=new i.Query),void 0===t&&(t=!1);var r=this.queryConverter.getUrl(this.settings.url,new i.Query(e)),s=this.requestObject();return this.cbRequest(t,r,s)?this.fetchMethod(r,s).then(function(e){if(!e.ok)throw Error(e.status+" "+e.statusText+" for request url '"+r+"'");return e.json()}).then(function(e){return n.cbSuccess(t,e,r,s),e}).catch(function(e){throw n.cbError(t,e,r,s),e}):Promise.resolve(null)},t.prototype.clientIdChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.clientIdChanged&&this.update(t)},t.prototype.dateFromChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.dateFromChanged&&this.update(t)},t.prototype.dateToChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.dateToChanged&&this.update(t)},t.prototype.filtersChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.filterChanged&&this.update(t)},t.prototype.matchGenerateContentChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.matchGenerateContentChanged&&this.update(t)},t.prototype.matchGenerateContentHighlightsChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.matchGenerateContentChanged&&this.settings.triggers.matchGenerateContentHighlightsChanged&&this.update(t)},t.prototype.matchGroupingChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.matchGroupingChanged&&this.update(t)},t.prototype.matchOrderByChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.matchOrderByChanged&&this.update(t)},t.prototype.matchPageChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.matchPageChanged&&this.update(t,null,!0)},t.prototype.matchPageSizeChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.matchPageSizeChanged&&this.update(t)},t.prototype.queryTextChanged=function(e,t){if(this.shouldUpdate()&&this.settings.triggers.queryChange&&t.queryText.length>this.settings.triggers.queryChangeMinLength){if(this.settings.triggers.queryChangeInstantRegex&&this.settings.triggers.queryChangeInstantRegex.test(t.queryText))return void this.update(t);if(this.settings.triggers.queryChangeDelay>-1)return void this.update(t,this.settings.triggers.queryChangeDelay)}clearTimeout(this.delay)},t.prototype.searchTypeChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.searchTypeChanged&&this.update(t)},t.prototype.uiLanguageCodeChanged=function(e,t){this.shouldUpdate()&&this.settings.triggers.uiLanguageCodeChanged&&this.update(t)},t}(i.BaseCall)},"./src/Find/FindQueryConverter.ts":
/*!****************************************!*\
  !*** ./src/Find/FindQueryConverter.ts ***!
  \****************************************/
/*! exports provided: FindQueryConverter */function(e,t,n){"use strict";n.r(t),n.d(t,"FindQueryConverter",function(){return s});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.getUrlParams=function(e){var t=[];this.addParamIfSet(t,"c",e.clientId),this.addParamIfSet(t,"df",this.createDate(e.dateFrom)),this.addParamIfSet(t,"dt",this.createDate(e.dateTo));var n=e.filters.map(function(e){return e.category.categoryName.join("|")});return this.addParamIfSet(t,"f",n.join(";")),this.addParamIfSet(t,"q",e.queryText),this.addParamIfSet(t,"t",e.searchType),this.addParamIfSet(t,"l",e.uiLanguageCode),this.addParamIfSet(t,"g",e.matchGrouping),this.addParamIfSet(t,"o",e.matchOrderBy),this.addParamIfSet(t,"p",e.matchPage),this.addParamIfSet(t,"s",e.matchPageSize),this.addParamIfSet(t,"gc",e.matchGenerateContent),this.addParamIfSet(t,"gch",e.matchGenerateContentHighlights),t},t}(n(/*! ../Common */"./src/Common/index.ts").BaseQueryConverter)},"./src/Find/FindSettings.ts":
/*!**********************************!*\
  !*** ./src/Find/FindSettings.ts ***!
  \**********************************/
/*! exports provided: FindSettings */function(e,t,n){"use strict";n.r(t),n.d(t,"FindSettings",function(){return a});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ../Common */"./src/Common/index.ts"),i=n(/*! ./FindTriggers */"./src/Find/FindTriggers.ts"),a=function(e){function t(t){var n=e.call(this)||this;return"string"==typeof t&&(t={baseUrl:t}),t.servicePath=void 0!==t.servicePath?t.servicePath:"search/find",e.prototype.init.call(n,t),n.triggers=new i.FindTriggers(t.triggers),n}return r.__extends(t,e),t}(s.BaseSettings)},"./src/Find/FindTriggers.ts":
/*!**********************************!*\
  !*** ./src/Find/FindTriggers.ts ***!
  \**********************************/
/*! exports provided: FindTriggers */function(e,t,n){"use strict";n.r(t),n.d(t,"FindTriggers",function(){return r});var r=function(){return function(e){void 0===e&&(e={}),this.clientCategoryFilterChanged=void 0===e.clientCategoryFilterChanged||e.clientCategoryFilterChanged,this.clientIdChanged=void 0===e.clientIdChanged||e.clientIdChanged,this.dateFromChanged=void 0===e.dateFromChanged||e.dateFromChanged,this.dateToChanged=void 0===e.dateToChanged||e.dateToChanged,this.filterChanged=void 0===e.filterChanged||e.filterChanged,this.matchGenerateContentChanged=void 0===e.matchGenerateContentChanged||e.matchGenerateContentChanged,this.matchGenerateContentHighlightsChanged=void 0===e.matchGenerateContentHighlightsChanged||e.matchGenerateContentHighlightsChanged,this.matchGroupingChanged=void 0===e.matchGroupingChanged||e.matchGroupingChanged,this.matchOrderByChanged=void 0===e.matchOrderByChanged||e.matchOrderByChanged,this.matchPageChanged=void 0===e.matchPageChanged||e.matchPageChanged,this.matchPageSizeChanged=void 0===e.matchPageSizeChanged||e.matchPageSizeChanged,this.queryChange=void 0===e.queryChange||e.queryChange,this.queryChangeDelay=void 0!==e.queryChangeDelay?e.queryChangeDelay:2e3,this.queryChangeInstantRegex=void 0!==e.queryChangeInstantRegex?e.queryChangeInstantRegex:/\S\s$/u,this.queryChangeMinLength=void 0!==e.queryChangeMinLength?e.queryChangeMinLength:2,this.searchTypeChanged=void 0===e.searchTypeChanged||e.searchTypeChanged,this.uiLanguageCodeChanged=void 0!==e.uiLanguageCodeChanged&&e.uiLanguageCodeChanged}}()},"./src/Find/index.ts":
/*!***************************!*\
  !*** ./src/Find/index.ts ***!
  \***************************/
/*! exports provided: Find, FindQueryConverter, FindSettings, FindTriggers */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./Find */"./src/Find/Find.ts");n.d(t,"Find",function(){return r.Find});var s=n(/*! ./FindQueryConverter */"./src/Find/FindQueryConverter.ts");n.d(t,"FindQueryConverter",function(){return s.FindQueryConverter});var i=n(/*! ./FindSettings */"./src/Find/FindSettings.ts");n.d(t,"FindSettings",function(){return i.FindSettings});var a=n(/*! ./FindTriggers */"./src/Find/FindTriggers.ts");n.d(t,"FindTriggers",function(){return a.FindTriggers})},"./src/SearchClient.ts":
/*!*****************************!*\
  !*** ./src/SearchClient.ts ***!
  \*****************************/
/*! exports provided: SearchClient, Settings, Authentication, AuthenticationSettings, AuthenticationTriggers, AuthToken, Autocomplete, AutocompleteQueryConverter, AutocompleteSettings, AutocompleteTriggers, Categorize, CategorizeSettings, CategorizeTriggers, CategorizeQueryConverter, BaseCall, BaseSettings, BaseQueryConverter, CategorizationType, CategoryPresentation, GroupConfiguration, GroupingMode, Casing, FilterConfiguration, MatchMode, SortConfiguration, SortPartConfiguration, SortMethod, LimitPageConfiguration, Filter, OrderBy, Query, SearchType, Find, FindQueryConverter, FindSettings, FindTriggers */function(e,t,n){"use strict";n.r(t),n.d(t,"SearchClient",function(){return l});var r=n(/*! deep-equal */"./node_modules/deep-equal/index.js"),s=n.n(r),i=n(/*! ./Authentication */"./src/Authentication/index.ts");n.d(t,"Authentication",function(){return i.Authentication}),n.d(t,"AuthenticationSettings",function(){return i.AuthenticationSettings}),n.d(t,"AuthenticationTriggers",function(){return i.AuthenticationTriggers}),n.d(t,"AuthToken",function(){return i.AuthToken});var a=n(/*! ./Autocomplete */"./src/Autocomplete/index.ts");n.d(t,"Autocomplete",function(){return a.Autocomplete}),n.d(t,"AutocompleteQueryConverter",function(){return a.AutocompleteQueryConverter}),n.d(t,"AutocompleteSettings",function(){return a.AutocompleteSettings}),n.d(t,"AutocompleteTriggers",function(){return a.AutocompleteTriggers});var o=n(/*! ./Categorize */"./src/Categorize/index.ts");n.d(t,"Categorize",function(){return o.Categorize}),n.d(t,"CategorizeSettings",function(){return o.CategorizeSettings}),n.d(t,"CategorizeTriggers",function(){return o.CategorizeTriggers}),n.d(t,"CategorizeQueryConverter",function(){return o.CategorizeQueryConverter});var d=n(/*! ./Common */"./src/Common/index.ts");n.d(t,"BaseCall",function(){return d.BaseCall}),n.d(t,"BaseSettings",function(){return d.BaseSettings}),n.d(t,"BaseQueryConverter",function(){return d.BaseQueryConverter}),n.d(t,"CategorizationType",function(){return d.CategorizationType}),n.d(t,"CategoryPresentation",function(){return d.CategoryPresentation}),n.d(t,"GroupConfiguration",function(){return d.GroupConfiguration}),n.d(t,"GroupingMode",function(){return d.GroupingMode}),n.d(t,"Casing",function(){return d.Casing}),n.d(t,"FilterConfiguration",function(){return d.FilterConfiguration}),n.d(t,"MatchMode",function(){return d.MatchMode}),n.d(t,"SortConfiguration",function(){return d.SortConfiguration}),n.d(t,"SortPartConfiguration",function(){return d.SortPartConfiguration}),n.d(t,"SortMethod",function(){return d.SortMethod}),n.d(t,"LimitPageConfiguration",function(){return d.LimitPageConfiguration}),n.d(t,"Filter",function(){return d.Filter}),n.d(t,"OrderBy",function(){return d.OrderBy}),n.d(t,"Query",function(){return d.Query}),n.d(t,"SearchType",function(){return d.SearchType});var u=n(/*! ./Find */"./src/Find/index.ts");n.d(t,"Find",function(){return u.Find}),n.d(t,"FindQueryConverter",function(){return u.FindQueryConverter}),n.d(t,"FindSettings",function(){return u.FindSettings}),n.d(t,"FindTriggers",function(){return u.FindTriggers});var c=n(/*! ./Settings */"./src/Settings.ts");n.d(t,"Settings",function(){return c.Settings});var l=function(){function e(e,t){this.authentication=void 0,this.authenticationToken=void 0,this.autocomplete=void 0,this.categorize=void 0,this.find=void 0,this._origSettings=e,this._origFetchMethod=t,this.setup(e,t)}return e.prototype.update=function(e,t,n,r){if(void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=!0),null!=e)return this.deferUpdates(!0),this.query=e,void this.deferUpdates(!1);t&&this.autocomplete.shouldUpdate()&&this.autocomplete.update(this.query),n&&this.categorize.shouldUpdate()&&this.categorize.update(this.query),r&&this.find.shouldUpdate()&&this.find.update(this.query)},e.prototype.forceUpdate=function(e,t,n,r){void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=!0),null!=e&&(this.deferUpdates(!0),this.query=e,this.deferUpdates(!1,!0)),this.update(null,t,n,r)},e.prototype.reset=function(){this.deferUpdates(!0),this.setup(this._origSettings,this._origFetchMethod),this.deferUpdates(!1,!0)},e.prototype.isFilter=function(e){var t=this.filterId(e);return!!t&&-1!==this.filterIndex(t)},e.prototype.hasChildFilter=function(e){var t=this.filterId(e);if(!t||-1!==this.filterIndex(t))return!1;for(var n=t.join("|"),r=0;r<this.filters.length;r++){if(0===this.filters[r].category.categoryName.join("|").indexOf(n))return!0}return!1},e.prototype.filterAdd=function(e,t){void 0===t&&(t=!1);var n=this.filterId(e);return-1===this.filterIndex(n)&&(this.doFilterAdd(n,t),!0)},e.prototype.filterRemove=function(e){var t=this.filterId(e),n=this.filterIndex(t);return n>-1&&(this.doFilterRemove(n),!0)},e.prototype.filterToggle=function(e,t){void 0===t&&(t=!1);var n=this.filterId(e),r=this.filterIndex(n);return r>-1?(this.doFilterRemove(r),!1):(this.doFilterAdd(n,t),!0)},e.prototype.toggleCategoryExpansion=function(e,t){Array.isArray(e)&&(e=this.findCategory(e));var n=e.hasOwnProperty("categoryName")?e.categoryName.join("|"):e.name;return this.settings.categorize.presentations[n]?this.settings.categorize.presentations[n].expanded=!this.settings.categorize.presentations[n].expanded:this.settings.categorize.presentations[n]=new d.CategoryPresentation({expanded:!e.expanded}),this.categorize.clientCategoriesUpdate(this.query),this.settings.categorize.presentations[n].expanded},e.prototype.deferUpdates=function(e,t){void 0===t&&(t=!1),this.autocomplete.deferUpdates(e,t),this.categorize.deferUpdates(e,t),this.find.deferUpdates(e,t)},e.prototype.findCategory=function(e){return this.categorize.findCategory(e)},e.prototype.matchPagePrev=function(){return this._query.matchPage>1&&(this.matchPage--,!0)},e.prototype.matchPageNext=function(){return this.matchPage++,!0},Object.defineProperty(e.prototype,"clientId",{get:function(){return this._query.clientId},set:function(e){if(e!=this._query.clientId){var t=this._query.clientId;this._query.clientId=e,this.autocomplete.clientIdChanged(t,this._query),this.categorize.clientIdChanged(t,this._query),this.find.clientIdChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dateFrom",{get:function(){return this._query.dateFrom},set:function(e){if(!s()(e,this._query.dateFrom)){var t=Object.assign({},this._query.dateFrom);this._query.dateFrom=e,this.autocomplete.dateFromChanged(t,this._query),this.categorize.dateFromChanged(t,this._query),this.find.dateFromChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dateTo",{get:function(){return this._query.dateTo},set:function(e){if(!s()(e,this._query.dateTo)){var t=Object.assign({},this._query.dateTo);this._query.dateTo=e,this.autocomplete.dateToChanged(t,this._query),this.categorize.dateToChanged(t,this._query),this.find.dateToChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"filters",{get:function(){return this._query.filters},set:function(e){var t=(e=e||[]).sort();if(t.join("")!=this._query.filters.join("")){var n=this._query.filters.slice(0);this._query.filters=t,this.autocomplete.filtersChanged(n,this._query),this.categorize.filtersChanged(n,this._query),this.find.filtersChanged(n,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matchGenerateContent",{get:function(){return this._query.matchGenerateContent},set:function(e){if(e!=this._query.matchGenerateContent){var t=this._query.matchGenerateContent;this._query.matchGenerateContent=e,this.autocomplete.matchGenerateContentChanged(t,this._query),this.categorize.matchGenerateContentChanged(t,this._query),this.find.matchGenerateContentChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matchGenerateContentHighlights",{get:function(){return this._query.matchGenerateContent},set:function(e){if(e!=this._query.matchGenerateContentHighlights){var t=this._query.matchGenerateContentHighlights;this._query.matchGenerateContentHighlights=e,this.autocomplete.matchGenerateContentHighlightsChanged(t,this._query),this.categorize.matchGenerateContentHighlightsChanged(t,this._query),this.find.matchGenerateContentHighlightsChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matchGrouping",{get:function(){return this._query.matchGrouping},set:function(e){if(e!=this._query.matchGrouping){var t=this._query.matchGrouping;this._query.matchGrouping=e,this.autocomplete.matchGroupingChanged(t,this._query),this.categorize.matchGroupingChanged(t,this._query),this.find.matchGroupingChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matchPage",{get:function(){return this._query.matchPage},set:function(e){if(e<1)throw new Error('"matchPage" cannot be set to a value smaller than 1.');if(e!=this._query.matchPage){var t=this._query.matchPage;this._query.matchPage=e,this.autocomplete.matchPageChanged(t,this._query),this.categorize.matchPageChanged(t,this._query),this.find.matchPageChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matchPageSize",{get:function(){return this._query.matchPageSize},set:function(e){if(e<1)throw new Error('"matchPageSize" cannot be set to a value smaller than 1.');if(e!=this._query.matchPageSize){var t=this._query.matchPageSize;this._query.matchPageSize=e,this.autocomplete.matchPageSizeChanged(t,this._query),this.categorize.matchPageSizeChanged(t,this._query),this.find.matchPageSizeChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matchOrderBy",{get:function(){return this._query.matchOrderBy},set:function(e){if(e!=this._query.matchOrderBy){var t=this._query.matchOrderBy;this._query.matchOrderBy=e,this.autocomplete.matchOrderByChanged(t,this._query),this.categorize.matchOrderByChanged(t,this._query),this.find.matchOrderByChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxSuggestions",{get:function(){return this._query.maxSuggestions},set:function(e){if(e<0&&(e=0),e!=this._query.maxSuggestions){var t=this._query.maxSuggestions;this._query.maxSuggestions=e,this.autocomplete.maxSuggestionsChanged(t,this._query),this.categorize.maxSuggestionsChanged(t,this._query),this.find.maxSuggestionsChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"query",{get:function(){return this._query},set:function(e){this.clientId=e.clientId,this.dateFrom=e.dateFrom,this.dateTo=e.dateTo,this.filters=e.filters,this.matchGrouping=e.matchGrouping,this.matchOrderBy=e.matchOrderBy,this.matchPage=e.matchPage,this.matchPageSize=e.matchPageSize,this.maxSuggestions=e.maxSuggestions,this.queryText=e.queryText,this.searchType=e.searchType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"queryText",{get:function(){return this._query.queryText},set:function(e){if(e!=this._query.queryText){var t=this._query.queryText;this._query.queryText=e,this.autocomplete.queryTextChanged(t,this._query),this.categorize.queryTextChanged(t,this._query),this.find.queryTextChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"searchType",{get:function(){return this._query.searchType},set:function(e){if(e!=this._query.searchType){var t=this._query.searchType;this._query.searchType=e,this.autocomplete.searchTypeChanged(t,this._query),this.categorize.searchTypeChanged(t,this._query),this.find.searchTypeChanged(t,this._query)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"uiLanguageCode",{get:function(){return this._query.uiLanguageCode},set:function(e){if(e!=this._query.uiLanguageCode){var t=this._query.uiLanguageCode;this._query.uiLanguageCode=e,this.autocomplete.uiLanguageCodeChanged(t,this._query),this.categorize.uiLanguageCodeChanged(t,this._query),this.find.uiLanguageCodeChanged(t,this._query)}},enumerable:!0,configurable:!0}),e.prototype.doFilterAdd=function(e,t){var n=this;void 0===t&&(t=!1);var r=this.categorize.createCategoryFilter(e);if(r){for(var s=this._query.filters.slice(0),i=[],a=r.category.categoryName[0],o=1;o<r.category.categoryName.length-1;o++)a+="|"+r.category.categoryName[o],this._query.filters.forEach(function(e){e.category.categoryName.join("|")===a&&i.push(e)});a+="|"+r.category.categoryName[r.category.categoryName.length-1],this._query.filters.forEach(function(e){e.category.categoryName.join("|").startsWith(a)&&i.push(e)}),i.forEach(function(e){n._query.filters.forEach(function(t,r){t===e&&n._query.filters.splice(r,1)})}),this._query.filters.push(r),this._query.filters.sort(),this.autocomplete.filtersChanged(s,this._query),this.categorize.filtersChanged(s,this._query),this.find.filtersChanged(s,this._query)}},e.prototype.doFilterRemove=function(e){var t=this._query.filters.slice(0);return this._query.filters.splice(e,1),this.autocomplete.filtersChanged(t,this._query),this.categorize.filtersChanged(t,this._query),this.find.filtersChanged(t,this._query),!0},e.prototype.filterId=function(e){return Array.isArray(e)?e:e instanceof d.Filter?e.category.categoryName:e.categoryName},e.prototype.filterIndex=function(e){var t=e.join("|");return this._query.filters.findIndex(function(e){return e.category.categoryName.join("|")===t})},e.prototype.setup=function(e,t){this.settings=new c.Settings(e),this.authentication=new i.Authentication(this.settings.authentication,this,t),this.settings.authentication=this.authentication.settings,this.autocomplete=new a.Autocomplete(this.settings.autocomplete,this,t),this.settings.autocomplete=this.autocomplete.settings,this.categorize=new o.Categorize(this.settings.categorize,this,t),this.settings.categorize=this.categorize.settings,this.find=new u.Find(this.settings.find,this,t),this.settings.find=this.find.settings,this._query=this.settings.query},e}()},"./src/Settings.ts":
/*!*************************!*\
  !*** ./src/Settings.ts ***!
  \*************************/
/*! exports provided: Settings */function(e,t,n){"use strict";n.r(t),n.d(t,"Settings",function(){return u});var r=n(/*! tslib */"./node_modules/tslib/tslib.es6.js"),s=n(/*! ./Authentication */"./src/Authentication/index.ts"),i=n(/*! ./Autocomplete */"./src/Autocomplete/index.ts"),a=n(/*! ./Categorize */"./src/Categorize/index.ts"),o=n(/*! ./Common */"./src/Common/index.ts"),d=n(/*! ./Find */"./src/Find/index.ts"),u=function(){return function(e){"string"==typeof e&&(e={baseUrl:e}),this.baseUrl=e.baseUrl,this.basePath=void 0!==e.basePath?e.basePath:"RestService/v4";var t={basePath:this.basePath,baseUrl:this.baseUrl};this.authentication=new s.AuthenticationSettings(r.__assign({},t,e.authentication)),this.autocomplete=new i.AutocompleteSettings(r.__assign({},t,e.autocomplete)),this.categorize=new a.CategorizeSettings(r.__assign({},t,e.categorize)),this.find=new d.FindSettings(r.__assign({},t,e.find)),this.query=new o.Query(e.query)}}()},0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */function(e,t){},1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */function(e,t){},2:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */function(e,t){},3:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */function(e,t){}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9ub2RlLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL3JlcG9ydGVyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvZGVyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2Rlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvcmFuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZGVjcnlwdGVyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9pbmNyMzIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2VjYi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvc3RyZWFtQ2lwaGVyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvbW9kZXMuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9hbGdvcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvc2lnbi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1lY2RoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWQ1LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhtYWMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2xlZ2FjeS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3QvYnJvd3Nlci1wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZGVlcC1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvbGliL2lzX2FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2RlZXAtZXF1YWwvbGliL2tleXMuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NiYy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2Rlcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2VkZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL3V0aWxzLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9kaC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9nZW5lcmF0ZVByaW1lLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9tb250LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9rZXkuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvc2lnbmF0dXJlLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2tleS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvcHJlY29tcHV0ZWQvc2VjcDI1NmsxLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2V2cF9ieXRlc3Rva2V5L2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvY29tbW9uLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzEuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yNTYuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS81MTIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3V0aWxzLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvaG1hYy1kcmJnL2xpYi9obWFjLWRyYmcuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvand0LXNpbXBsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL2p3dC1zaW1wbGUvbGliL2p3dC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21kNS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWNyeXB0by11dGlscy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlIHN5bmMgXlxcLlxcLy4qJCIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYWYuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWR6LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLW1hLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hei5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JnLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JvLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnMuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NhLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3YuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N5LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kYS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWNoLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZHYuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VsLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tY2EuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWdiLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWwuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLW56LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLXVzLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V1LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZvLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jYS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dsLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tbGF0bi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hlLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oaS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h1LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oeS1hbS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2p2LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rYS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ttLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbG8uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21uLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMtbXkuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tdC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwtYmUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BsLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC1ici5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3JvLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NlLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NsLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3ItY3lybC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3cuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGV0LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90Zy5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsLXBoLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90emwuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS1sYXRuLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VnLWNuLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LWxhdG4uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveC1wc2V1ZG8uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtaGsuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvbW9tZW50L21vbWVudC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYXNuMS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvY2VydGlmaWNhdGUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2ZpeFByb2MuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL2FzeW5jLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9kZWZhdWx0LWVuY29kaW5nLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9wcmVjb25kaXRpb24uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3N5bmMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L21nZi5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHVibGljRW5jcnlwdC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3dpdGhQdWJsaWMuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC94b3IuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9yYW5kb21ieXRlcy9icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmFuZG9tZmlsbC9icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9yaXBlbWQxNjAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGE1MTIuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2xpYi9zdHJpbmdfZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9ub2RlX21vZHVsZXMvdm0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0F1dGhlbnRpY2F0aW9uL0F1dGhUb2tlbi50cyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0F1dGhlbnRpY2F0aW9uL0F1dGhlbnRpY2F0aW9uLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQXV0aGVudGljYXRpb24vQXV0aGVudGljYXRpb25TZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0F1dGhlbnRpY2F0aW9uL0F1dGhlbnRpY2F0aW9uVHJpZ2dlcnMudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9BdXRvY29tcGxldGUvQXV0b2NvbXBsZXRlLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQXV0b2NvbXBsZXRlL0F1dG9jb21wbGV0ZVF1ZXJ5Q29udmVydGVyLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQXV0b2NvbXBsZXRlL0F1dG9jb21wbGV0ZVNldHRpbmdzLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQXV0b2NvbXBsZXRlL0F1dG9jb21wbGV0ZVRyaWdnZXJzLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ2F0ZWdvcml6ZS9DYXRlZ29yaXplLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ2F0ZWdvcml6ZS9DYXRlZ29yaXplUXVlcnlDb252ZXJ0ZXIudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9DYXRlZ29yaXplL0NhdGVnb3JpemVTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0NhdGVnb3JpemUvQ2F0ZWdvcml6ZVRyaWdnZXJzLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ29tbW9uL0Jhc2VDYWxsLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ29tbW9uL0Jhc2VRdWVyeUNvbnZlcnRlci50cyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0NvbW1vbi9CYXNlU2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9Db21tb24vQ2F0ZWdvcml6YXRpb25UeXBlLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ29tbW9uL0NhdGVnb3J5UHJlc2VudGF0aW9uLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ29tbW9uL0ZpbHRlci50cyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0NvbW1vbi9PcmRlckJ5LnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ29tbW9uL1F1ZXJ5LnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvQ29tbW9uL1NlYXJjaFR5cGUudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9GaW5kL0ZpbmQudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9GaW5kL0ZpbmRRdWVyeUNvbnZlcnRlci50cyIsIndlYnBhY2s6Ly9JbnRlbGxpU2VhcmNoLy4vc3JjL0ZpbmQvRmluZFNldHRpbmdzLnRzIiwid2VicGFjazovL0ludGVsbGlTZWFyY2gvLi9zcmMvRmluZC9GaW5kVHJpZ2dlcnMudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9TZWFyY2hDbGllbnQudHMiLCJ3ZWJwYWNrOi8vSW50ZWxsaVNlYXJjaC8uL3NyYy9TZXR0aW5ncy50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXNuMSIsImJpZ251bSIsImJhc2UiLCJjb25zdGFudHMiLCJkZWNvZGVycyIsImVuY29kZXJzIiwiaW5oZXJpdHMiLCJFbnRpdHkiLCJib2R5IiwidGhpcyIsIl9jcmVhdGVOYW1lZCIsIm5hbWVkIiwicnVuSW5UaGlzQ29udGV4dCIsImUiLCJlbnRpdHkiLCJfaW5pdE5hbWVkIiwiX2dldERlY29kZXIiLCJlbmMiLCJkZWNvZGUiLCJkYXRhIiwib3B0aW9ucyIsIl9nZXRFbmNvZGVyIiwiZW5jb2RlIiwicmVwb3J0ZXIiLCJSZXBvcnRlciIsIkJ1ZmZlciIsIkRlY29kZXJCdWZmZXIiLCJpc0J1ZmZlciIsIm9mZnNldCIsImxlbmd0aCIsImVycm9yIiwiRW5jb2RlckJ1ZmZlciIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJieXRlTGVuZ3RoIiwic2F2ZSIsInJlc3RvcmUiLCJyZXMiLCJpc0VtcHR5IiwicmVhZFVJbnQ4IiwiZmFpbCIsInNraXAiLCJieXRlcyIsIl9yZXBvcnRlclN0YXRlIiwicmF3Iiwic2xpY2UiLCJqb2luIiwib3V0IiwiZm9yRWFjaCIsIndyaXRlIiwiY29weSIsIk5vZGUiLCJhc3NlcnQiLCJ0YWdzIiwibWV0aG9kcyIsImNvbmNhdCIsInBhcmVudCIsInN0YXRlIiwiX2Jhc2VTdGF0ZSIsImNoaWxkcmVuIiwidGFnIiwiYXJncyIsInJldmVyc2VBcmdzIiwiY2hvaWNlIiwib3B0aW9uYWwiLCJhbnkiLCJvYmoiLCJ1c2UiLCJ1c2VEZWNvZGVyIiwiZXhwbGljaXQiLCJpbXBsaWNpdCIsImNvbnRhaW5zIiwiX3dyYXAiLCJzdGF0ZVByb3BzIiwiY2xvbmUiLCJjc3RhdGUiLCJwcm9wIiwiY29uc3RydWN0b3IiLCJtZXRob2QiLCJwdXNoIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfaW5pdCIsImZpbHRlciIsImNoaWxkIiwiZXF1YWwiLCJfdXNlQXJncyIsImFyZyIsImtleXMiLCJFcnJvciIsImRlZiIsInZhbCIsIm51bSIsIm5ld0tleSIsIl9kZWNvZGUiLCJpbnB1dCIsIndyYXBSZXN1bHQiLCJwcmV2T2JqIiwicmVzdWx0IiwicHJlc2VudCIsInByZXZLZXkiLCJlbnRlcktleSIsIl9wZWVrVGFnIiwiaXNFcnJvciIsIl9kZWNvZGVHZW5lcmljIiwiX2RlY29kZUNob2ljZSIsImVudGVyT2JqZWN0IiwiX2RlY29kZVRhZyIsInN0YXJ0IiwidHJhY2siLCJwYXRoIiwiX2dldFVzZSIsImxlYXZlT2JqZWN0IiwiZXhpdEtleSIsImxlYXZlS2V5IiwiX2RlY29kZUxpc3QiLCJ0ZXN0IiwiX2RlY29kZVN0ciIsIl9kZWNvZGVPYmppZCIsIl9kZWNvZGVUaW1lIiwiX2RlY29kZU51bGwiLCJfZGVjb2RlQm9vbCIsIl9kZWNvZGVJbnQiLCJfdXNlIiwibWF0Y2giLCJzb21lIiwibm9kZSIsInR5cGUiLCJfY3JlYXRlRW5jb2RlckJ1ZmZlciIsIl9lbmNvZGUiLCJfZW5jb2RlVmFsdWUiLCJ1bmRlZmluZWQiLCJfc2tpcERlZmF1bHQiLCJjb250ZW50IiwicHJpbWl0aXZlIiwiX2VuY29kZUNob2ljZSIsIl9lbmNvZGVQcmltaXRpdmUiLCJjbHMiLCJfZW5jb2RlQ29tcG9zaXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9lbmNvZGVTdHIiLCJfZW5jb2RlT2JqaWQiLCJfZW5jb2RlVGltZSIsIl9lbmNvZGVOdWxsIiwiX2VuY29kZUludCIsIl9lbmNvZGVCb29sIiwiX2lzTnVtc3RyIiwic3RyIiwiX2lzUHJpbnRzdHIiLCJlcnJvcnMiLCJSZXBvcnRlckVycm9yIiwibXNnIiwicmV0aHJvdyIsInBhdGhMZW4iLCJpbmRleCIsInByZXYiLCJub3ciLCJlcnIiLCJpbmhlcml0ZWQiLCJlbGVtIiwibWVzc2FnZSIsInN0YWNrIiwicGFydGlhbCIsImNhcHR1cmVTdGFja1RyYWNlIiwidGFnQ2xhc3MiLCIwIiwiMSIsIjIiLCIzIiwidGFnQ2xhc3NCeU5hbWUiLCJfcmV2ZXJzZSIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjIxIiwiMjIiLCIyMyIsIjI0IiwiMjUiLCIyNiIsIjI3IiwiMjgiLCIyOSIsIjMwIiwidGFnQnlOYW1lIiwiZGVyIiwiREVSRGVjb2RlciIsInRyZWUiLCJERVJOb2RlIiwiZGVyRGVjb2RlVGFnIiwiYnVmIiwib2N0IiwidGFnU3RyIiwiZGVyRGVjb2RlTGVuIiwibGVuIiwiaiIsImJ1ZmZlciIsImRlY29kZWRUYWciLCJfc2tpcFVudGlsRW5kIiwiZGVjb2RlciIsInBvc3NpYmxlRW5kIiwidW51c2VkIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmVhZFVJbnQxNkJFIiwibnVtc3RyIiwidG9TdHJpbmciLCJwcmludHN0ciIsInZhbHVlcyIsInJlbGF0aXZlIiwiaWRlbnRpZmllcnMiLCJpZGVudCIsInN1YmlkZW50IiwiZmlyc3QiLCJzZWNvbmQiLCJ0bXAiLCJ5ZWFyIiwibW9uIiwiZGF5IiwiaG91ciIsIm1pbiIsInNlYyIsIkRhdGUiLCJVVEMiLCJwZW0iLCJQRU1EZWNvZGVyIiwibGluZXMiLCJzcGxpdCIsImxhYmVsIiwidG9VcHBlckNhc2UiLCJyZSIsImVuZCIsImJhc2U2NCIsInJlcGxhY2UiLCJERVJFbmNvZGVyIiwidHdvIiwiaGVhZGVyIiwiZW5jb2RlZFRhZyIsImVuY29kZVRhZyIsImxlbk9jdGV0cyIsIndyaXRlVUludDE2QkUiLCJjaGFyQ29kZUF0IiwiaWQiLCJzcGxpY2UiLCJzaXplIiwib2JqaWQiLCJ0aW1lIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bUFycmF5IiwidG9BcnJheSIsInNpZ24iLCJ1bnNoaWZ0IiwiZGF0YUJ1ZmZlciIsImRlZmF1bHRCdWZmZXIiLCJQRU1FbmNvZGVyIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRvQnl0ZUFycmF5IiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwiZnJvbUJ5dGVBcnJheSIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiVWludDhBcnJheSIsImNvZGUiLCJpbmRleE9mIiwidHJpcGxldFRvQmFzZTY0Iiwib3V0cHV0IiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiQk4iLCJudW1iZXIiLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJ3b3JkcyIsInJlZCIsIndvcmRTaXplIiwicGFyc2VIZXgiLCJNYXRoIiwicGFyc2VCYXNlIiwibXVsIiwibWF4IiwibGVmdCIsInJpZ2h0IiwiY21wIiwiX2luaXROdW1iZXIiLCJfaW5pdEFycmF5IiwiX3BhcnNlSGV4IiwiX3BhcnNlQmFzZSIsInN0cmlwIiwiY2VpbCIsInciLCJvZmYiLCJsaW1iTGVuIiwibGltYlBvdyIsInRvdGFsIiwibW9kIiwid29yZCIsImltdWxuIiwiX2lhZGRuIiwicG93IiwiZGVzdCIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJpbnNwZWN0IiwiemVyb3MiLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInNtYWxsTXVsVG8iLCJzZWxmIiwiYSIsImIiLCJsbyIsImNhcnJ5IiwiayIsIm5jYXJyeSIsInJ3b3JkIiwibWF4SiIsInBhZGRpbmciLCJncm91cFNpemUiLCJncm91cEJhc2UiLCJpc1plcm8iLCJtb2RuIiwiaWRpdm4iLCJ0b051bWJlciIsInJldCIsInRvSlNPTiIsInRvQnVmZmVyIiwidG9BcnJheUxpa2UiLCJBcnJheVR5cGUiLCJyZXFMZW5ndGgiLCJsaXR0bGVFbmRpYW4iLCJxIiwiYW5kbG4iLCJpdXNocm4iLCJjbHozMiIsIl9jb3VudEJpdHMiLCJfemVyb0JpdHMiLCJiaXRMZW5ndGgiLCJoaSIsInplcm9CaXRzIiwidG9Ud29zIiwid2lkdGgiLCJhYnMiLCJpbm90biIsImlhZGRuIiwiZnJvbVR3b3MiLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJuZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlhZGQiLCJpc3ViIiwiYWRkIiwic3ViIiwiY29tYjEwTXVsVG8iLCJtaWQiLCJhMCIsImFsMCIsImFoMCIsImExIiwiYWwxIiwiYWgxIiwiYTIiLCJhbDIiLCJhaDIiLCJhMyIsImFsMyIsImFoMyIsImE0IiwiYWw0IiwiYWg0IiwiYTUiLCJhbDUiLCJhaDUiLCJhNiIsImFsNiIsImFoNiIsImE3IiwiYWw3IiwiYWg3IiwiYTgiLCJhbDgiLCJhaDgiLCJhOSIsImFsOSIsImFoOSIsImIwIiwiYmwwIiwiYmgwIiwiYjEiLCJibDEiLCJiaDEiLCJiMiIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwieCIsInkiLCJtdWxUbyIsImhuY2FycnkiLCJiaWdNdWxUbyIsIm1ha2VSQlQiLCJOIiwicmV2QmluIiwicmIiLCJwZXJtdXRlIiwicmJ0IiwicndzIiwiaXdzIiwicnR3cyIsIml0d3MiLCJ0cmFuc2Zvcm0iLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJpZSIsInJvIiwiaW8iLCJyeCIsImd1ZXNzTGVuMTNiIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJyb3VuZCIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJfIiwicndzdCIsIml3c3QiLCJucndzIiwibnJ3c3QiLCJuaXdzdCIsInJtd3MiLCJtdWxmIiwibXVsbiIsInNxciIsImlzcXIiLCJ0b0JpdEFycmF5IiwiaXVzaGxuIiwiYml0cyIsImNhcnJ5TWFzayIsIm5ld0NhcnJ5IiwiaXNobG4iLCJoaW50IiwiZXh0ZW5kZWQiLCJoIiwibWFzayIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwic2hpZnQiLCJfd29yZERpdiIsImJoaSIsImRpZmYiLCJxaiIsImRpdiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsInVtb2QiLCJkaXZSb3VuZCIsImRtIiwiaGFsZiIsInIyIiwiYWNjIiwiZWdjZCIsIkEiLCJCIiwiQyIsIkQiLCJnIiwiaXNFdmVuIiwieXAiLCJ4cCIsImltIiwiaXNPZGQiLCJqbSIsImdjZCIsIl9pbnZtcCIsIngxIiwieDIiLCJkZWx0YSIsImNtcG4iLCJpbnZtIiwiYmluY24iLCJ1Y21wIiwiZ3RuIiwiZ3QiLCJndGVuIiwiZ3RlIiwibHRuIiwibHQiLCJsdGVuIiwibHRlIiwiZXFuIiwiZXEiLCJSZWQiLCJ0b1JlZCIsImN0eCIsImNvbnZlcnRUbyIsIl9mb3JjZVJlZCIsImZyb21SZWQiLCJjb252ZXJ0RnJvbSIsImZvcmNlUmVkIiwicmVkQWRkIiwicmVkSUFkZCIsInJlZFN1YiIsInJlZElTdWIiLCJyZWRTaGwiLCJzaGwiLCJyZWRNdWwiLCJfdmVyaWZ5MiIsInJlZElNdWwiLCJyZWRTcXIiLCJfdmVyaWZ5MSIsInJlZElTcXIiLCJyZWRTcXJ0Iiwic3FydCIsInJlZEludm0iLCJyZWROZWciLCJyZWRQb3ciLCJwcmltZXMiLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJNUHJpbWUiLCJfdG1wIiwiSzI1NiIsIlAyMjQiLCJQMTkyIiwiUDI1NTE5IiwicHJpbWUiLCJfcHJpbWUiLCJNb250IiwiaW1vZCIsInJpbnYiLCJtaW52IiwiaXJlZHVjZSIsInJsZW4iLCJpbXVsSyIsIm91dExlbiIsIm5leHQiLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJ6IiwiaW52Iiwid25kIiwiY3VycmVudCIsImN1cnJlbnRMZW4iLCJtb250IiwidSIsIlJhbmQiLCJyYW5kIiwiZ2VuZXJhdGUiLCJfcmFuZCIsImdldEJ5dGVzIiwiZ2V0Qnl0ZSIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIm1zQ3J5cHRvIiwicmFuZG9tQnl0ZXMiLCJhc1VJbnQzMkFycmF5IiwiZnJvbSIsInJlYWRVSW50MzJCRSIsInNjcnViVmVjIiwidiIsImNyeXB0QmxvY2siLCJNIiwia2V5U2NoZWR1bGUiLCJTVUJfTUlYIiwiU0JPWCIsIm5Sb3VuZHMiLCJ0MCIsInQxIiwidDIiLCJ0MyIsIlNVQl9NSVgwIiwiU1VCX01JWDEiLCJTVUJfTUlYMiIsIlNVQl9NSVgzIiwiczAiLCJzMSIsInMyIiwiczMiLCJrc1JvdyIsIlJDT04iLCJHIiwiSU5WX1NCT1giLCJJTlZfU1VCX01JWCIsInhpIiwic3giLCJ4NCIsIng4IiwiQUVTIiwiX2tleSIsIl9yZXNldCIsImJsb2NrU2l6ZSIsImtleVNpemUiLCJrZXlXb3JkcyIsImtzUm93cyIsImludktleVNjaGVkdWxlIiwiaWsiLCJrc1IiLCJ0dCIsIl9uUm91bmRzIiwiX2tleVNjaGVkdWxlIiwiX2ludktleVNjaGVkdWxlIiwiZW5jcnlwdEJsb2NrUmF3IiwiZW5jcnlwdEJsb2NrIiwiYWxsb2NVbnNhZmUiLCJ3cml0ZVVJbnQzMkJFIiwiZGVjcnlwdEJsb2NrIiwibTEiLCJzY3J1YiIsImFlcyIsIlRyYW5zZm9ybSIsIkdIQVNIIiwiaW5jcjMyIiwiU3RyZWFtQ2lwaGVyIiwiaXYiLCJkZWNyeXB0IiwiYWxsb2MiLCJfY2lwaGVyIiwiY2siLCJfZ2hhc2giLCJfZmluSUQiLCJnaGFzaCIsInRvUGFkIiwidXBkYXRlIiwiaXZCaXRzIiwidGFpbCIsIndyaXRlVUludEJFIiwiY2FsY0l2IiwiX3ByZXYiLCJfY2FjaGUiLCJfc2VjQ2FjaGUiLCJfZGVjcnlwdCIsIl9hbGVuIiwiX2xlbiIsIl9tb2RlIiwiX2F1dGhUYWciLCJfY2FsbGVkIiwiX3VwZGF0ZSIsImNodW5rIiwicnVtcCIsImVuY3J5cHQiLCJfZmluYWwiLCJmaW5hbCIsInhvclRlc3QiLCJnZXRBdXRoVGFnIiwic2V0QXV0aFRhZyIsInNldEFBRCIsImNpcGhlcnMiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImNyZWF0ZUNpcGhlciIsIkNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQ2lwaGVyaXYiLCJjcmVhdGVEZWNpcGhlciIsIkRlY2lwaGVyIiwiY3JlYXRlRGVjaXBoZXJpdiIsIkRlY2lwaGVyaXYiLCJsaXN0Q2lwaGVycyIsImdldENpcGhlcnMiLCJBdXRoQ2lwaGVyIiwiTU9ERVMiLCJlYnRrIiwiU3BsaXR0ZXIiLCJfbGFzdCIsIl9hdXRvcGFkZGluZyIsImNhY2hlIiwic3VpdGUiLCJwYXNzd29yZCIsImNvbmZpZyIsInRvTG93ZXJDYXNlIiwiVHlwZUVycm9yIiwidGhpbmciLCJmbHVzaCIsImxhc3QiLCJwYWRkZWQiLCJ1bnBhZCIsInNldEF1dG9QYWRkaW5nIiwic2V0VG8iLCJhdXRvUGFkZGluZyIsIlBBRERJTkciLCJlcXVhbHMiLCJwYWRCdWZmIiwid3JpdGVVSW50OCIsIlpFUk9FUyIsImZyb21BcnJheSIsImJsb2NrIiwiX211bHRpcGx5IiwibHNiVmkiLCJWaSIsIlppIiwiYWJsIiwiYmwiLCJwYWQiLCJlbmNyeXB0U3RhcnQiLCJlbmNyeXB0Qnl0ZSIsImJ5dGVQYXJhbSIsInNoaWZ0SW4iLCJnZXRCbG9jayIsImNodW5rTnVtIiwibW9kZU1vZHVsZXMiLCJFQ0IiLCJDQkMiLCJDRkIiLCJDRkI4IiwiQ0ZCMSIsIk9GQiIsIkNUUiIsIkdDTSIsIkRFUyIsImFlc01vZGVzIiwiZGVzTW9kZXMiLCJrZXlMZW4iLCJpdkxlbiIsIkNpcGhlckJhc2UiLCJkZXMiLCJkZXMtZWRlMy1jYmMiLCJpbnN0YW50aWF0ZSIsIkVERSIsImRlcy1lZGUzIiwiZGVzLWVkZS1jYmMiLCJkZXMtZWRlIiwiZGVzLWNiYyIsImRlcy1lY2IiLCJvcHRzIiwibW9kZU5hbWUiLCJfZGVzIiwiZGVzMyIsImJuIiwiY3J0IiwicHJpdiIsImJsaW5kcyIsImdldHIiLCJibGluZGVyIiwibW9kdWx1cyIsInB1YmxpY0V4cG9uZW50IiwidW5ibGluZGVyIiwiYmxpbmQiLCJibGluZGVkIiwiYzEiLCJwcmltZTEiLCJjMiIsInByaW1lMiIsInFpbnYiLCJjb2VmZmljaWVudCIsImV4cG9uZW50MSIsIm0yIiwiZXhwb25lbnQyIiwiY3JlYXRlSGFzaCIsInN0cmVhbSIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJTaWduIiwiYWxnb3JpdGhtIiwiV3JpdGFibGUiLCJfaGFzaFR5cGUiLCJoYXNoIiwiX2hhc2giLCJfdGFnIiwiX3NpZ25UeXBlIiwiVmVyaWZ5IiwiY3JlYXRlU2lnbiIsImNyZWF0ZVZlcmlmeSIsIl93cml0ZSIsImRvbmUiLCJkaWdlc3QiLCJzaWciLCJjcmVhdGVIbWFjIiwiRUMiLCJlYyIsInBhcnNlS2V5cyIsImN1cnZlcyIsImdldEtleSIsImFsZ28iLCJmaWxsIiwiaGxlbiIsImhiaXRzIiwiYml0czJpbnQiLCJiaXRzMm9jdGV0cyIsIm9iaXRzIiwibWFrZUtleSIsImt2IiwibWFrZVIiLCJoYXNoVHlwZSIsInNpZ25UeXBlIiwiY3VydmUiLCJjdXJ2ZUlkIiwia2V5RnJvbVByaXZhdGUiLCJwcml2YXRlS2V5IiwidG9ERVIiLCJlY1NpZ24iLCJwYXJhbXMiLCJwcml2X2tleSIsIkgiLCJkc2FTaWduIiwiY2hlY2tWYWx1ZSIsInB1YiIsInB1YmtleSIsInN1YmplY3RQcml2YXRlS2V5IiwiZWNWZXJpZnkiLCJwdWJfa2V5IiwidW5wYWNrZWQiLCJzaWduYXR1cmUiLCJtb250cCIsImRzYVZlcmlmeSIsInBhZE51bSIsImdsb2JhbCIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiX19wcm90b19fIiwiZW5jb2RpbmdPck9mZnNldCIsIkFycmF5QnVmZmVyIiwiYXJyYXkiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJjaGVja2VkIiwiaXNuYW4iLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwidXRmOFNsaWNlIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImNvbmZpZ3VyYWJsZSIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsIl9hcnIiLCJ0b0hleCIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJyZWFkVUludEJFIiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZUludExFIiwibGltaXQiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsIlN0cmluZ0RlY29kZXIiLCJoYXNoTW9kZSIsIl9maW5hbE9yRGlnZXN0IiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3RvU3RyaW5nIiwiX3RyYW5zZm9ybSIsIl9mbHVzaCIsImZpbiIsIm9iamVjdFRvU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc051bWJlciIsImlzU3RyaW5nIiwiaXNTeW1ib2wiLCJpc1VuZGVmaW5lZCIsImlzUmVnRXhwIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0Z1bmN0aW9uIiwiaXNQcmltaXRpdmUiLCJlbGxpcHRpYyIsIkVDREgiLCJhbGlhc2VzIiwic2VjcDI1NmsxIiwic2VjcDIyNHIxIiwicHJpbWUyNTZ2MSIsInByaW1lMTkydjEiLCJlZDI1NTE5Iiwic2VjcDM4NHIxIiwic2VjcDUyMXIxIiwiY3VydmVUeXBlIiwiZm9ybWF0UmV0dXJuVmFsdWUiLCJwMjU2Iiwic2VjcDI1NnIxIiwic2VjcDE5MnIxIiwicDM4NCIsInA1MjEiLCJnZW5lcmF0ZUtleXMiLCJmb3JtYXQiLCJnZW5LZXlQYWlyIiwiZ2V0UHVibGljS2V5IiwiY29tcHV0ZVNlY3JldCIsIm90aGVyIiwiaW5lbmMiLCJrZXlGcm9tUHVibGljIiwiZ2V0UHVibGljIiwiZ2V0UHJpdmF0ZSIsImdldFgiLCJnZXRQcml2YXRlS2V5Iiwic2V0UHVibGljS2V5IiwiX2ltcG9ydFB1YmxpYyIsInNldFByaXZhdGVLZXkiLCJfcHJpdiIsIl9pbXBvcnRQcml2YXRlIiwiTUQ1IiwiUklQRU1EMTYwIiwic2hhIiwiQmFzZSIsIkhhc2giLCJhbGciLCJMZWdhY3kiLCJtZDUiLCJaRVJPUyIsIkhtYWMiLCJibG9ja3NpemUiLCJfYWxnIiwiaXBhZCIsIl9pcGFkIiwib3BhZCIsIl9vcGFkIiwiX19yb290X18iLCJGIiwiZmV0Y2giLCJzdXBwb3J0Iiwic2VhcmNoUGFyYW1zIiwiaXRlcmFibGUiLCJibG9iIiwiQmxvYiIsImZvcm1EYXRhIiwiYXJyYXlCdWZmZXIiLCJ2aWV3Q2xhc3NlcyIsImlzRGF0YVZpZXciLCJEYXRhVmlldyIsImlzUHJvdG90eXBlT2YiLCJpc0FycmF5QnVmZmVyVmlldyIsIkhlYWRlcnMiLCJhcHBlbmQiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJvbGRWYWx1ZSIsImhhcyIsImNhbGxiYWNrIiwidGhpc0FyZyIsIml0ZW1zIiwiaXRlcmF0b3JGb3IiLCJlbnRyaWVzIiwiaXRlcmF0b3IiLCJSZXF1ZXN0IiwiX2JvZHlJbml0IiwiQm9keSIsIlJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImhlYWRlcnMiLCJ1cmwiLCJyZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsImxvY2F0aW9uIiwiaW5pdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwicmF3SGVhZGVycyIsImxpbmUiLCJwYXJzZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJvcGVuIiwiY3JlZGVudGlhbHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInBvbHlmaWxsIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJ2aWV3IiwiX2luaXRCb2R5IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwidGhlbiIsInRleHQiLCJyZWFkQXNUZXh0IiwicmVhZEJsb2JBc1RleHQiLCJjaGFycyIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImpzb24iLCJwYXJzZSIsInVwY2FzZWQiLCJub3JtYWxpemVNZXRob2QiLCJyZWZlcnJlciIsImZvcm0iLCJkZWNvZGVVUklDb21wb25lbnQiLCJib2R5SW5pdCIsIm9rIiwicm5nIiwicHNldWRvUmFuZG9tQnl0ZXMiLCJwcm5nIiwiYWxnb3MiLCJhbGdvS2V5cyIsImhhc2hlcyIsImdldEhhc2hlcyIsInBia2RmMiIsInBia2RmMlN5bmMiLCJkaCIsIkRpZmZpZUhlbGxtYW5Hcm91cCIsImNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCIsImdldERpZmZpZUhlbGxtYW4iLCJjcmVhdGVEaWZmaWVIZWxsbWFuIiwiRGlmZmllSGVsbG1hbiIsImNyZWF0ZUVDREgiLCJwdWJsaWNFbmNyeXB0IiwicHJpdmF0ZUVuY3J5cHQiLCJwdWJsaWNEZWNyeXB0IiwicHJpdmF0ZURlY3J5cHQiLCJyZiIsInJhbmRvbUZpbGwiLCJyYW5kb21GaWxsU3luYyIsImNyZWF0ZUNyZWRlbnRpYWxzIiwiREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSIsIkRIX0NIRUNLX1BfTk9UX1BSSU1FIiwiREhfVU5BQkxFX1RPX0NIRUNLX0dFTkVSQVRPUiIsIkRIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1IiLCJOUE5fRU5BQkxFRCIsIkFMUE5fRU5BQkxFRCIsIlJTQV9QS0NTMV9QQURESU5HIiwiUlNBX1NTTFYyM19QQURESU5HIiwiUlNBX05PX1BBRERJTkciLCJSU0FfUEtDUzFfT0FFUF9QQURESU5HIiwiUlNBX1g5MzFfUEFERElORyIsIlJTQV9QS0NTMV9QU1NfUEFERElORyIsIlBPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCIsIlBPSU5UX0NPTlZFUlNJT05fVU5DT01QUkVTU0VEIiwiUE9JTlRfQ09OVkVSU0lPTl9IWUJSSUQiLCJwU2xpY2UiLCJvYmplY3RLZXlzIiwiaXNBcmd1bWVudHMiLCJkZWVwRXF1YWwiLCJleHBlY3RlZCIsImdldFRpbWUiLCJzdHJpY3QiLCJpc1VuZGVmaW5lZE9yTnVsbCIsImthIiwia2IiLCJzb3J0Iiwib2JqRXF1aXYiLCJzdXBwb3J0c0FyZ3VtZW50c0NsYXNzIiwic3VwcG9ydGVkIiwidW5zdXBwb3J0ZWQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNoaW0iLCJ1dGlscyIsInByb3RvIiwiX2NiY0luaXQiLCJfY2JjU3RhdGUiLCJpbnAiLCJpbk9mZiIsIm91dE9mZiIsInN1cGVyUHJvdG8iLCJidWZmZXJPZmYiLCJfdXBkYXRlRGVjcnlwdCIsIl91cGRhdGVFbmNyeXB0IiwiX2J1ZmZlciIsIl9mbHVzaEJ1ZmZlciIsImlucHV0T2ZmIiwib3V0cHV0T2ZmIiwiY291bnQiLCJfZmluYWxFbmNyeXB0IiwiX2ZpbmFsRGVjcnlwdCIsIl9wYWQiLCJfdW5wYWQiLCJfZGVzU3RhdGUiLCJkZXJpdmVLZXlzIiwic2hpZnRUYWJsZSIsImtMIiwia1IiLCJwYzEiLCJyMjhzaGwiLCJwYzIiLCJpcCIsIl9lbmNyeXB0IiwibFN0YXJ0IiwiclN0YXJ0Iiwia2V5TCIsImtleVIiLCJleHBhbmQiLCJzdWJzdGl0dXRlIiwicmlwIiwiazEiLCJrMiIsImszIiwiX2VkZVN0YXRlIiwiaW5MIiwiaW5SIiwib3V0TCIsIm91dFIiLCJwYzJ0YWJsZSIsInNUYWJsZSIsInBlcm11dGVUYWJsZSIsInBhZFNwbGl0IiwiZ3JvdXAiLCJnZW5lcmF0ZVByaW1lIiwiREgiLCJFTkNPRElOR1MiLCJiaW5hcnkiLCJoZXgiLCJnZW4iLCJnZW5lcmF0b3IiLCJnZW5jIiwibWlsbGVyUmFiaW4iLCJUV0VOVFlGT1VSIiwiRUxFVkVOIiwiVEVOIiwiVEhSRUUiLCJTRVZFTiIsIl9wdWIiLCJwcmltZUNhY2hlIiwibWFsbGVhYmxlIiwic2V0R2VuZXJhdG9yIiwiX19wcmltZSIsIl9wcmltZUxlbiIsIl9wcmltZUNvZGUiLCJyZW0iLCJzaW1wbGVTaWV2ZSIsImZlcm1hdFRlc3QiLCJjaGVja1ByaW1lIiwiX19nZW4iLCJfZ2VuIiwic2VjcmV0IiwiZ2V0UHJpbWUiLCJmcm9udCIsImdldEdlbmVyYXRvciIsImZpbmRQcmltZSIsIk9ORSIsIlRXTyIsIkZJVkUiLCJGT1VSIiwiX2dldFByaW1lcyIsIm4yIiwidmVyc2lvbiIsImVkZHNhIiwiZ2V0TkFGIiwiZ2V0SlNGIiwiQmFzZUN1cnZlIiwiY29uZiIsInplcm8iLCJwb2ludEZyb21KU09OIiwiZ1JlZCIsIl93bmFmVDEiLCJfd25hZlQyIiwiX3duYWZUMyIsIl93bmFmVDQiLCJhZGp1c3RDb3VudCIsInJlZE4iLCJfbWF4d2VsbFRyaWNrIiwiQmFzZVBvaW50IiwicHJlY29tcHV0ZWQiLCJwb2ludCIsInZhbGlkYXRlIiwiX2ZpeGVkTmFmTXVsIiwiZG91YmxlcyIsIl9nZXREb3VibGVzIiwibmFmIiwiSSIsInN0ZXAiLCJyZXByIiwibmFmVyIsImpwb2ludCIsIm1peGVkQWRkIiwicG9pbnRzIiwidG9QIiwiX3duYWZNdWwiLCJuYWZQb2ludHMiLCJfZ2V0TkFGUG9pbnRzIiwiZGJscCIsIl93bmFmTXVsQWRkIiwiZGVmVyIsImNvZWZmcyIsImphY29iaWFuUmVzdWx0Iiwid25kV2lkdGgiLCJjb21iIiwidG9KIiwianNmIiwiamEiLCJqYiIsImRlY29kZVBvaW50IiwicG9pbnRGcm9tWCIsImVuY29kZUNvbXByZXNzZWQiLCJjb21wYWN0IiwiZ2V0WSIsInByZWNvbXB1dGUiLCJwb3dlciIsImJldGEiLCJfZ2V0QmV0YSIsIl9oYXNEb3VibGVzIiwiZGJsIiwiRWR3YXJkc0N1cnZlIiwidHdpc3RlZCIsIm1PbmVBIiwiZGQiLCJvbmVDIiwiUG9pbnQiLCJ6T25lIiwiX211bEEiLCJfbXVsQyIsInJocyIsImxocyIsInkyIiwicG9pbnRGcm9tWSIsImlzSW5maW5pdHkiLCJub3JtYWxpemUiLCJmcm9tSlNPTiIsIl9leHREYmwiLCJmIiwibngiLCJueSIsIm50IiwibnoiLCJfcHJvakRibCIsIl9leHRBZGQiLCJfcHJvakFkZCIsIm11bEFkZCIsImptdWxBZGQiLCJ6aSIsImVxWFRvUCIsInhjIiwic2hvcnQiLCJlZHdhcmRzIiwiTW9udEN1cnZlIiwiaTQiLCJhMjQiLCJhYSIsImJiIiwiZGlmZkFkZCIsImRhIiwiY2IiLCJqdW1sQWRkIiwiU2hvcnRDdXJ2ZSIsInRpbnYiLCJ6ZXJvQSIsInRocmVlQSIsImVuZG8iLCJfZ2V0RW5kb21vcnBoaXNtIiwiX2VuZG9XbmFmVDEiLCJfZW5kb1duYWZUMiIsImlzUmVkIiwiaW5mIiwiSlBvaW50IiwibGFtYmRhIiwiYmV0YXMiLCJfZ2V0RW5kb1Jvb3RzIiwibGFtYmRhcyIsImJhc2lzIiwidmVjIiwiX2dldEVuZG9CYXNpcyIsIm50aW52IiwicHJldlIiLCJhcHJ4U3FydCIsInkxIiwibGVuMSIsIl9lbmRvU3BsaXQiLCJ2MSIsInYyIiwicDEiLCJwMiIsInExIiwicTIiLCJheCIsIl9lbmRvV25hZk11bEFkZCIsIm5wb2ludHMiLCJuY29lZmZzIiwicHJlIiwiZW5kb011bCIsIm9iajJwb2ludCIsInlzMSIsImR5aW52IiwiX3ByZWNvbXB1dGUiLCJuZWdhdGUiLCJ6aW52IiwiemludjIiLCJheSIsInB6MiIsInoyIiwidTEiLCJ1MiIsImgyIiwiaDMiLCJqeCIsImp5IiwianoiLCJqejQiLCJqeWQiLCJqeDIiLCJqeWQyIiwianlkNCIsImRueSIsIl96ZXJvRGJsIiwiX3RocmVlRGJsIiwiX2RibCIsInh4IiwieXkiLCJ5eXl5IiwieXl5eTgiLCJjOCIsImdhbW1hIiwiYWxwaGEiLCJiZXRhNCIsImJldGE4IiwiZ2dhbW1hOCIsImp5MiIsImp4ZDQiLCJqeWQ4IiwidHJwbCIsInp6IiwibW0iLCJlZSIsInl5dTQiLCJrYmFzZSIsInozIiwicHozIiwienMiLCJQcmVzZXRDdXJ2ZSIsImRlZmluZUN1cnZlIiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIiwiSG1hY0RSQkciLCJLZXlQYWlyIiwiU2lnbmF0dXJlIiwibmgiLCJrZXlQYWlyIiwiZnJvbVByaXZhdGUiLCJmcm9tUHVibGljIiwiZHJiZyIsInBlcnMiLCJwZXJzRW5jIiwiZW50cm9weSIsImhtYWNTdHJlbmd0aCIsImVudHJvcHlFbmMiLCJub25jZSIsIm5zMiIsIl90cnVuY2F0ZVRvTiIsInRydW5jT25seSIsImJrZXkiLCJuczEiLCJpdGVyIiwia3AiLCJrcFgiLCJyZWNvdmVyeVBhcmFtIiwiY2Fub25pY2FsIiwic2ludiIsInJlY292ZXJQdWJLZXkiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsInJJbnYiLCJnZXRLZXlSZWNvdmVyeVBhcmFtIiwiUSIsIlFwcmltZSIsInByaXZFbmMiLCJwdWJFbmMiLCJyZWFzb24iLCJkZXJpdmUiLCJfaW1wb3J0REVSIiwiZ2V0TGVuZ3RoIiwiaW5pdGlhbCIsInBsYWNlIiwib2N0ZXRMZW4iLCJybVBhZGRpbmciLCJjb25zdHJ1Y3RMZW5ndGgiLCJvY3RldHMiLCJsb2ciLCJMTjIiLCJzbGVuIiwiYmFja0hhbGYiLCJwYXJzZUJ5dGVzIiwiRUREU0EiLCJwb2ludENsYXNzIiwiZW5jb2RpbmdMZW5ndGgiLCJrZXlGcm9tU2VjcmV0IiwiaGFzaEludCIsIm1lc3NhZ2VQcmVmaXgiLCJSIiwiUmVuY29kZWQiLCJlbmNvZGVQb2ludCIsInNfIiwicHViQnl0ZXMiLCJTIiwibWFrZVNpZ25hdHVyZSIsIlNHIiwiaW50RnJvbUxFIiwiZnJvbVNlY3JldCIsImxhc3RJeCIsIm5vcm1lZCIsInhJc09kZCIsImVuY29kZUludCIsImRlY29kZUludCIsImlzUG9pbnQiLCJjYWNoZWRQcm9wZXJ0eSIsIl9zZWNyZXQiLCJfcHViQnl0ZXMiLCJwcml2Qnl0ZXMiLCJnZXRTZWNyZXQiLCJfUiIsIl9TIiwiX1JlbmNvZGVkIiwiX1NlbmNvZGVkIiwiU2VuY29kZWQiLCJ0b0J5dGVzIiwibWluQXNzZXJ0IiwibWluVXRpbHMiLCJ6ZXJvMiIsImQxIiwiZDIiLCJtOCIsIm0xNCIsIm0yNCIsImNvbXB1dGVyIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwiZW1pdCIsImVyIiwiaGFuZGxlciIsImxpc3RlbmVycyIsImNvbnRleHQiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJjb25zb2xlIiwidHJhY2UiLCJvbiIsIm9uY2UiLCJmaXJlZCIsInJlbW92ZUxpc3RlbmVyIiwicG9zaXRpb24iLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJsaXN0ZW5lckNvdW50IiwiZXZsaXN0ZW5lciIsImVtaXR0ZXIiLCJzYWx0Iiwia2V5Qml0cyIsInVzZWQiLCJrZXlTdGFydCIsIml2U3RhcnQiLCJIYXNoQmFzZSIsIl9ibG9jayIsIl9ibG9ja1NpemUiLCJfYmxvY2tPZmZzZXQiLCJfbGVuZ3RoIiwiX2ZpbmFsaXplZCIsInByZWZpeCIsInRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciIsIl9kaWdlc3QiLCJjb21tb24iLCJyaXBlbWQiLCJobWFjIiwic2hhMSIsInNoYTIyNCIsInJpcGVtZDE2MCIsIkJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJvdXRTaXplIiwicGFkTGVuZ3RoIiwiX2RlbHRhOCIsIl9kZWx0YTMyIiwiam9pbjMyIiwiaW5uZXIiLCJvdXRlciIsInJvdGwzMiIsInN1bTMyIiwic3VtMzJfMyIsInN1bTMyXzQiLCJLIiwiS2giLCJFIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIlQiLCJyaCIsInNoIiwidG9IZXgzMiIsInNwbGl0MzIiLCJzaGFDb21tb24iLCJzdW0zMl81IiwiZnRfMSIsInNoYTFfSyIsIlNIQTEiLCJXIiwiU0hBMjU2IiwiU0hBMjI0IiwiY2gzMiIsIm1hajMyIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Iiwic2hhMjU2X0siLCJUMSIsIlQyIiwiU0hBNTEyIiwiU0hBMzg0Iiwicm90cjY0X2hpIiwicm90cjY0X2xvIiwic2hyNjRfaGkiLCJzaHI2NF9sbyIsInN1bTY0Iiwic3VtNjRfaGkiLCJzdW02NF9sbyIsInN1bTY0XzRfaGkiLCJzdW02NF80X2xvIiwic3VtNjRfNV9oaSIsInN1bTY0XzVfbG8iLCJzaGE1MTJfSyIsImNoNjRfaGkiLCJ4aCIsInhsIiwieWgiLCJ5bCIsInpoIiwiY2g2NF9sbyIsInpsIiwibWFqNjRfaGkiLCJtYWo2NF9sbyIsInMwXzUxMl9oaSIsInMwXzUxMl9sbyIsInMxXzUxMl9oaSIsInMxXzUxMl9sbyIsImcwXzUxMl9oaSIsImcwXzUxMl9sbyIsImcxXzUxMl9oaSIsImcxXzUxMl9sbyIsIl9wcmVwYXJlQmxvY2siLCJjMF9oaSIsImMwX2xvIiwiYzFfaGkiLCJjMV9sbyIsImMyX2hpIiwiYzJfbG8iLCJjM19oaSIsImMzX2xvIiwiYWgiLCJhbCIsImJoIiwiY2giLCJjbCIsImRsIiwiZWgiLCJlbCIsImZoIiwiZmwiLCJnaCIsImdsIiwiaGgiLCJobCIsImM0X2hpIiwiYzRfbG8iLCJUMV9oaSIsIlQxX2xvIiwiVDJfaGkiLCJUMl9sbyIsInJvdHIzMiIsInAzMiIsImh0b25sIiwiemVybzgiLCJwcmVkUmVzaXN0IiwibWluRW50cm9weSIsIl9yZXNlZWQiLCJyZXNlZWRJbnRlcnZhbCIsIlYiLCJub25jZUVuYyIsInNlZWQiLCJfaG1hYyIsImttYWMiLCJyZXNlZWQiLCJhZGRFbmMiLCJ0ZW1wIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsIndyaXRhYmxlIiwiYWxnb3JpdGhtTWFwIiwiSFMyNTYiLCJIUzM4NCIsIkhTNTEyIiwiUlMyNTYiLCJ0eXBlTWFwIiwiand0IiwiYmFzZTY0c3RyIiwiYmFzZTY0dXJsRXNjYXBlIiwiYmFzZTY0dXJsRGVjb2RlIiwiYmFzZTY0dXJsVW5lc2NhcGUiLCJiYXNlNjR1cmxFbmNvZGUiLCJ0b2tlbiIsIm5vVmVyaWZ5Iiwic2VnbWVudHMiLCJoZWFkZXJTZWciLCJwYXlsb2FkU2VnIiwic2lnbmF0dXJlU2VnIiwicGF5bG9hZCIsInNpZ25pbmdNZXRob2QiLCJzaWduaW5nVHlwZSIsIm5iZiIsImV4cCIsInR5cCIsInNvdXJjZSIsImF0dHIiLCJhc3NpZ25Qcm9wZXJ0aWVzIiwiQVJSQVkxNiIsIl9hIiwiX2IiLCJfYyIsIl9kIiwicm90bCIsImZuRiIsImZuRyIsImZuSCIsImZuSSIsImJyb3JhbmQiLCJNaWxsZXJSYWJpbiIsIl9yYW5kYmVsb3ciLCJtaW5fYnl0ZXMiLCJfcmFuZHJhbmdlIiwic3RvcCIsInJvbmUiLCJuMSIsInJuMSIsImdldERpdmlzb3IiLCIuL2FmIiwiLi9hZi5qcyIsIi4vYXIiLCIuL2FyLWR6IiwiLi9hci1kei5qcyIsIi4vYXIta3ciLCIuL2FyLWt3LmpzIiwiLi9hci1seSIsIi4vYXItbHkuanMiLCIuL2FyLW1hIiwiLi9hci1tYS5qcyIsIi4vYXItc2EiLCIuL2FyLXNhLmpzIiwiLi9hci10biIsIi4vYXItdG4uanMiLCIuL2FyLmpzIiwiLi9heiIsIi4vYXouanMiLCIuL2JlIiwiLi9iZS5qcyIsIi4vYmciLCIuL2JnLmpzIiwiLi9ibSIsIi4vYm0uanMiLCIuL2JuIiwiLi9ibi5qcyIsIi4vYm8iLCIuL2JvLmpzIiwiLi9iciIsIi4vYnIuanMiLCIuL2JzIiwiLi9icy5qcyIsIi4vY2EiLCIuL2NhLmpzIiwiLi9jcyIsIi4vY3MuanMiLCIuL2N2IiwiLi9jdi5qcyIsIi4vY3kiLCIuL2N5LmpzIiwiLi9kYSIsIi4vZGEuanMiLCIuL2RlIiwiLi9kZS1hdCIsIi4vZGUtYXQuanMiLCIuL2RlLWNoIiwiLi9kZS1jaC5qcyIsIi4vZGUuanMiLCIuL2R2IiwiLi9kdi5qcyIsIi4vZWwiLCIuL2VsLmpzIiwiLi9lbi1hdSIsIi4vZW4tYXUuanMiLCIuL2VuLWNhIiwiLi9lbi1jYS5qcyIsIi4vZW4tZ2IiLCIuL2VuLWdiLmpzIiwiLi9lbi1pZSIsIi4vZW4taWUuanMiLCIuL2VuLWlsIiwiLi9lbi1pbC5qcyIsIi4vZW4tbnoiLCIuL2VuLW56LmpzIiwiLi9lbyIsIi4vZW8uanMiLCIuL2VzIiwiLi9lcy1kbyIsIi4vZXMtZG8uanMiLCIuL2VzLXVzIiwiLi9lcy11cy5qcyIsIi4vZXMuanMiLCIuL2V0IiwiLi9ldC5qcyIsIi4vZXUiLCIuL2V1LmpzIiwiLi9mYSIsIi4vZmEuanMiLCIuL2ZpIiwiLi9maS5qcyIsIi4vZm8iLCIuL2ZvLmpzIiwiLi9mciIsIi4vZnItY2EiLCIuL2ZyLWNhLmpzIiwiLi9mci1jaCIsIi4vZnItY2guanMiLCIuL2ZyLmpzIiwiLi9meSIsIi4vZnkuanMiLCIuL2dkIiwiLi9nZC5qcyIsIi4vZ2wiLCIuL2dsLmpzIiwiLi9nb20tbGF0biIsIi4vZ29tLWxhdG4uanMiLCIuL2d1IiwiLi9ndS5qcyIsIi4vaGUiLCIuL2hlLmpzIiwiLi9oaSIsIi4vaGkuanMiLCIuL2hyIiwiLi9oci5qcyIsIi4vaHUiLCIuL2h1LmpzIiwiLi9oeS1hbSIsIi4vaHktYW0uanMiLCIuL2lkIiwiLi9pZC5qcyIsIi4vaXMiLCIuL2lzLmpzIiwiLi9pdCIsIi4vaXQuanMiLCIuL2phIiwiLi9qYS5qcyIsIi4vanYiLCIuL2p2LmpzIiwiLi9rYSIsIi4va2EuanMiLCIuL2trIiwiLi9ray5qcyIsIi4va20iLCIuL2ttLmpzIiwiLi9rbiIsIi4va24uanMiLCIuL2tvIiwiLi9rby5qcyIsIi4va3kiLCIuL2t5LmpzIiwiLi9sYiIsIi4vbGIuanMiLCIuL2xvIiwiLi9sby5qcyIsIi4vbHQiLCIuL2x0LmpzIiwiLi9sdiIsIi4vbHYuanMiLCIuL21lIiwiLi9tZS5qcyIsIi4vbWkiLCIuL21pLmpzIiwiLi9tayIsIi4vbWsuanMiLCIuL21sIiwiLi9tbC5qcyIsIi4vbW4iLCIuL21uLmpzIiwiLi9tciIsIi4vbXIuanMiLCIuL21zIiwiLi9tcy1teSIsIi4vbXMtbXkuanMiLCIuL21zLmpzIiwiLi9tdCIsIi4vbXQuanMiLCIuL215IiwiLi9teS5qcyIsIi4vbmIiLCIuL25iLmpzIiwiLi9uZSIsIi4vbmUuanMiLCIuL25sIiwiLi9ubC1iZSIsIi4vbmwtYmUuanMiLCIuL25sLmpzIiwiLi9ubiIsIi4vbm4uanMiLCIuL3BhLWluIiwiLi9wYS1pbi5qcyIsIi4vcGwiLCIuL3BsLmpzIiwiLi9wdCIsIi4vcHQtYnIiLCIuL3B0LWJyLmpzIiwiLi9wdC5qcyIsIi4vcm8iLCIuL3JvLmpzIiwiLi9ydSIsIi4vcnUuanMiLCIuL3NkIiwiLi9zZC5qcyIsIi4vc2UiLCIuL3NlLmpzIiwiLi9zaSIsIi4vc2kuanMiLCIuL3NrIiwiLi9zay5qcyIsIi4vc2wiLCIuL3NsLmpzIiwiLi9zcSIsIi4vc3EuanMiLCIuL3NyIiwiLi9zci1jeXJsIiwiLi9zci1jeXJsLmpzIiwiLi9zci5qcyIsIi4vc3MiLCIuL3NzLmpzIiwiLi9zdiIsIi4vc3YuanMiLCIuL3N3IiwiLi9zdy5qcyIsIi4vdGEiLCIuL3RhLmpzIiwiLi90ZSIsIi4vdGUuanMiLCIuL3RldCIsIi4vdGV0LmpzIiwiLi90ZyIsIi4vdGcuanMiLCIuL3RoIiwiLi90aC5qcyIsIi4vdGwtcGgiLCIuL3RsLXBoLmpzIiwiLi90bGgiLCIuL3RsaC5qcyIsIi4vdHIiLCIuL3RyLmpzIiwiLi90emwiLCIuL3R6bC5qcyIsIi4vdHptIiwiLi90em0tbGF0biIsIi4vdHptLWxhdG4uanMiLCIuL3R6bS5qcyIsIi4vdWctY24iLCIuL3VnLWNuLmpzIiwiLi91ayIsIi4vdWsuanMiLCIuL3VyIiwiLi91ci5qcyIsIi4vdXoiLCIuL3V6LWxhdG4iLCIuL3V6LWxhdG4uanMiLCIuL3V6LmpzIiwiLi92aSIsIi4vdmkuanMiLCIuL3gtcHNldWRvIiwiLi94LXBzZXVkby5qcyIsIi4veW8iLCIuL3lvLmpzIiwiLi96aC1jbiIsIi4vemgtY24uanMiLCIuL3poLWhrIiwiLi96aC1oay5qcyIsIi4vemgtdHciLCIuL3poLXR3LmpzIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJtb21lbnQiLCJkZWZpbmVMb2NhbGUiLCJtb250aHMiLCJtb250aHNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTWluIiwibWVyaWRpZW1QYXJzZSIsImlzUE0iLCJtZXJpZGllbSIsImhvdXJzIiwibWludXRlcyIsImlzTG93ZXIiLCJsb25nRGF0ZUZvcm1hdCIsIkxUIiwiTFRTIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwicmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInNzIiwiTU0iLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwib3JkaW5hbCIsIndlZWsiLCJkb3ciLCJkb3kiLCJ3ZWVrZGF5c1BhcnNlRXhhY3QiLCJzeW1ib2xNYXAiLCJwbHVyYWxGb3JtIiwicGx1cmFscyIsInBsdXJhbGl6ZSIsIndpdGhvdXRTdWZmaXgiLCJpc0Z1dHVyZSIsIm1pbnV0ZSIsInByZXBhcnNlIiwicG9zdGZvcm1hdCIsIm51bWJlck1hcCIsItmhIiwi2aIiLCLZoyIsItmkIiwi2aUiLCLZpiIsItmnIiwi2agiLCLZqSIsItmgIiwic3VmZml4ZXMiLCI3MCIsIjgwIiwiNTAiLCIxMDAiLCI2MCIsIjkwIiwicmVsYXRpdmVUaW1lV2l0aFBsdXJhbCIsImZvcm1zIiwicGx1cmFsIiwic3RhbmRhbG9uZSIsImlzRm9ybWF0IiwicGVyaW9kIiwibGFzdERpZ2l0IiwibGFzdDJEaWdpdHMiLCLgp6ciLCLgp6giLCLgp6kiLCLgp6oiLCLgp6siLCLgp6wiLCLgp60iLCLgp64iLCLgp68iLCLgp6YiLCJtZXJpZGllbUhvdXIiLCLgvKEiLCLgvKIiLCLgvKMiLCLgvKQiLCLgvKUiLCLgvKYiLCLgvKciLCLgvKgiLCLgvKkiLCLgvKAiLCJyZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24iLCJtdXRhdGlvblRhYmxlIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwic29mdE11dGF0aW9uIiwibXV0YXRpb24iLCJsYXN0TnVtYmVyIiwidHJhbnNsYXRlIiwibW9udGhzUGFyc2VFeGFjdCIsImxsIiwibGxsIiwibGxsbCIsIm1vbnRoc1BhcnNlIiwiX21vbnRoc1BhcnNlIiwiUmVnRXhwIiwic2hvcnRNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwibG9uZ01vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsImFmZml4IiwiZXhlYyIsInByb2Nlc3NSZWxhdGl2ZVRpbWUiLCJtb250aHNOb21pbmF0aXZlRWwiLCJtb250aHNHZW5pdGl2ZUVsIiwibW9tZW50VG9Gb3JtYXQiLCJfbW9udGhzR2VuaXRpdmVFbCIsIm1vbnRoIiwiX21vbnRoc05vbWluYXRpdmVFbCIsImNhbGVuZGFyRWwiLCJtb20iLCJfY2FsZW5kYXJFbCIsIkZ1bmN0aW9uIiwibW9udGhzU2hvcnREb3QiLCJtb250aHNSZWdleCIsIm1vbnRoc1Nob3J0UmVnZXgiLCJtb250aHNTdHJpY3RSZWdleCIsIm1vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCLbsSIsItuyIiwi27MiLCLbtCIsItu1Iiwi27YiLCLbtyIsItu4Iiwi27kiLCLbsCIsIm51bWJlcnNQYXN0IiwibnVtYmVyc0Z1dHVyZSIsInZlcmJhbE51bWJlciIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwi4KunIiwi4KuoIiwi4KupIiwi4KuqIiwi4KurIiwi4KusIiwi4KutIiwi4KuuIiwi4KuvIiwi4KumIiwi4KWnIiwi4KWoIiwi4KWpIiwi4KWqIiwi4KWrIiwi4KWsIiwi4KWtIiwi4KWuIiwi4KWvIiwi4KWmIiwid2Vla0VuZGluZ3MiLCI0MCIsIuGfoSIsIuGfoiIsIuGfoyIsIuGfpCIsIuGfpSIsIuGfpiIsIuGfpyIsIuGfqCIsIuGfqSIsIuGfoCIsIuCzpyIsIuCzqCIsIuCzqSIsIuCzqiIsIuCzqyIsIuCzrCIsIuCzrSIsIuCzriIsIuCzryIsIuCzpiIsImlzVXBwZXIiLCJlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIiLCJmaXJzdERpZ2l0IiwidHJhbnNsYXRlU2luZ3VsYXIiLCJzcGVjaWFsIiwicmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyIiwidHJhbnNsYXRvciIsImNvcnJlY3RHcmFtbWF0aWNhbENhc2UiLCJ3b3JkS2V5IiwicmVsYXRpdmVUaW1lTXIiLCLhgYEiLCLhgYIiLCLhgYMiLCLhgYQiLCLhgYUiLCLhgYYiLCLhgYciLCLhgYgiLCLhgYkiLCLhgYAiLCLgqaciLCLgqagiLCLgqakiLCLgqaoiLCLgqasiLCLgqawiLCLgqa0iLCLgqa4iLCLgqa8iLCLgqaYiLCJtb250aHNOb21pbmF0aXZlIiwibW9udGhzU3ViamVjdGl2ZSIsInNlcGFyYXRvciIsImRheXMiLCLgr6ciLCLgr6giLCLgr6kiLCLgr6oiLCLgr6siLCLgr6wiLCLgr60iLCLgr64iLCLgr68iLCLgr6YiLCJudW1iZXJzTm91bnMiLCJudW1iZXJOb3VuIiwiaHVuZHJlZCIsInRlbiIsIm51bWJlckFzTm91biIsImhtIiwicHJvY2Vzc0hvdXJzRnVuY3Rpb24iLCJub21pbmF0aXZlIiwiYWNjdXNhdGl2ZSIsImdlbml0aXZlIiwibm91bkNhc2UiLCJob29rQ2FsbGJhY2siLCJob29rcyIsImZuIiwiaGFzT3duUHJvcCIsImV4dGVuZCIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJsb2NhbGUiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZ2V0UGFyc2luZ0ZsYWdzIiwiX3BmIiwiZW1wdHkiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJyZmMyODIyIiwid2Vla2RheU1pc21hdGNoIiwiaXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJwYXJzZWRQYXJ0cyIsImlzTm93VmFsaWQiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJjcmVhdGVJbnZhbGlkIiwiZnVuIiwibW9tZW50UHJvcGVydGllcyIsImNvcHlDb25maWciLCJ0byIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJ1cGRhdGVJblByb2dyZXNzIiwiTW9tZW50IiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJhYnNGbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJ3YXJuIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJhZGRVbml0QWxpYXMiLCJ1bml0Iiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJwcmlvcml0aWVzIiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJmdW5jIiwibG9jYWxlRGF0YSIsInJlbW92ZUZvcm1hdHRpbmdUb2tlbnMiLCJmb3JtYXRNb21lbnQiLCJleHBhbmRGb3JtYXQiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJpbnZhbGlkRGF0ZSIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxhc3RJbmRleCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDMiLCJwNCIsInVuZXNjYXBlRm9ybWF0IiwidG9rZW5zIiwiYWRkUGFyc2VUb2tlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsImRheXNJblllYXIiLCJpc0xlYXBZZWFyIiwicGFyc2VUd29EaWdpdFllYXIiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJkYXlzSW5Nb250aCIsIm1vZE1vbnRoIiwiTU9OVEhTX0lOX0ZPUk1BVCIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJnZXRTZXRNb250aCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJfbW9udGhzUmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiY3JlYXRlVVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWtkYXkiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwibG9jYWxXZWVrZGF5Iiwid2Vla09mZnNldCIsImRheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluIiwiZGVmYXVsdFdlZWtkYXlzUmVnZXgiLCJkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzTWluUmVnZXgiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsIm1pblBpZWNlcyIsIl93ZWVrZGF5c1JlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJoRm9ybWF0IiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwic2Vjb25kcyIsImtJbnB1dCIsIl9pc1BtIiwiX21lcmlkaWVtIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsIm5vcm1hbGl6ZUxvY2FsZSIsImxvYWRMb2NhbGUiLCJvbGRMb2NhbGUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsImdldExvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwibmFtZXMiLCJjaG9vc2VMb2NhbGUiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZGVmYXVsdHMiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsIm5vd1ZhbHVlIiwiX3VzZVVUQyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImN1cnJlbnREYXRlQXJyYXkiLCJ3ZWVrWWVhciIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiY3JlYXRlTG9jYWwiLCJfd2VlayIsImN1cldlZWsiLCJnZyIsIl9kYXlPZlllYXIiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfbmV4dERheSIsIm1zIiwic2V0RnVsbFllYXIiLCJnZXREYXkiLCJzZXRVVENNaW51dGVzIiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCIsImV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MiLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwidW50cnVuY2F0ZVllYXIiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjb25maWdGcm9tUkZDMjgyMiIsInByZXByb2Nlc3NSRkMyODIyIiwicGFyc2VkQXJyYXkiLCJ3ZWVrZGF5U3RyIiwicGFyc2VkSW5wdXQiLCJ3ZWVrZGF5UHJvdmlkZWQiLCJ3ZWVrZGF5QWN0dWFsIiwiY2hlY2tXZWVrZGF5Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJjYWxjdWxhdGVPZmZzZXQiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJpc1BtIiwibWVyaWRpZW1GaXhXcmFwIiwicHJlcGFyZUNvbmZpZyIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJzY29yZSIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY29uZmlnRnJvbVN0cmluZyIsIm1pbGxpc2Vjb25kIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwiaXNPYmplY3RFbXB0eSIsImNyZWF0ZUZyb21Db25maWciLCJwcm90b3R5cGVNaW4iLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJEdXJhdGlvbiIsImR1cmF0aW9uIiwieWVhcnMiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJ3ZWVrcyIsIm1pbGxpc2Vjb25kcyIsInVuaXRIYXNEZWNpbWFsIiwicGFyc2VGbG9hdCIsImlzRHVyYXRpb25WYWxpZCIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9tb250aHMiLCJfZGF0YSIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJ1dGNPZmZzZXQiLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImNsb25lV2l0aE9mZnNldCIsIm1vZGVsIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwiY3JlYXRlRHVyYXRpb24iLCJkaWZmUmVzIiwicGFyc2VJc28iLCJpc0JlZm9yZSIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJtb21lbnRzRGlmZmVyZW5jZSIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwic3VidHJhY3QiLCJtb250aERpZmYiLCJhbmNob3IyIiwiYWRqdXN0Iiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJuZXdMb2NhbGVEYXRhIiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJsYW5nIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFySGVscGVyIiwid2Vla3NUYXJnZXQiLCJkYXlPZlllYXJEYXRhIiwiaXNvV2Vla1llYXIiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ6b25lRGVsdGEiLCJlbmRPZiIsImlucHV0U3RyaW5nIiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJpc1NhbWUiLCJpbnB1dE1zIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwicGFyc2luZ0ZsYWdzIiwicHJpb3JpdGl6ZWQiLCJ1bml0c09iaiIsImdldFByaW9yaXRpemVkVW5pdHMiLCJpc29XZWVrZGF5IiwidG9PYmplY3QiLCJ0b0RhdGUiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJ6b25lIiwiaXNMb2NhbCIsInN1ZmZpeCIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrIiwiaXNvV2Vla3MiLCJ3ZWVrSW5mbyIsImlzb1dlZWtzSW5ZZWFyIiwicGFyc2VXZWVrZGF5IiwicGFyc2VJc29XZWVrZGF5Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJfY2hhbmdlSW5Qcm9ncmVzcyIsInBhcnNlWm9uZSIsInRab25lIiwiaGFzQWxpZ25lZEhvdXJPZmZzZXQiLCJpc0RTVCIsImlzVXRjT2Zmc2V0Iiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiaXNEU1RTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsInByb3RvJDEiLCJnZXQkMSIsImZpZWxkIiwic2V0dGVyIiwibGlzdE1vbnRoc0ltcGwiLCJsaXN0V2Vla2RheXNJbXBsIiwibG9jYWxlU29ydGVkIiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJfaW52YWxpZERhdGUiLCJfb3JkaW5hbCIsIl9yZWxhdGl2ZVRpbWUiLCJwYXN0RnV0dXJlIiwiX21vbnRoc1Nob3J0IiwibW9udGhOYW1lIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJpaSIsImxsYyIsInRvTG9jYWxlTG93ZXJDYXNlIiwiZmlyc3REYXlPZlllYXIiLCJmaXJzdERheU9mV2VlayIsIl93ZWVrZGF5cyIsIl93ZWVrZGF5c01pbiIsIl93ZWVrZGF5c1Nob3J0Iiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImRheXNUb01vbnRocyIsIm1vbnRoc1RvRGF5cyIsIm1ha2VBcyIsImFsaWFzIiwiYXMiLCJhc01pbGxpc2Vjb25kcyIsImFzU2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJhYnMkMSIsInRvSVNPU3RyaW5nJDEiLCJZIiwidG9GaXhlZCIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInByb3RvJDIiLCJtb250aHNGcm9tRGF5cyIsIndpdGhTdWZmaXgiLCJwb3NOZWdEdXJhdGlvbiIsInJlbGF0aXZlVGltZSQxIiwidG9Jc29TdHJpbmciLCJzZXRIb29rQ2FsbGJhY2siLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJjZXJ0aWZpY2F0ZSIsIlJTQVByaXZhdGVLZXkiLCJzZXEiLCJpbnQiLCJSU0FQdWJsaWNLZXkiLCJQdWJsaWNLZXkiLCJBbGdvcml0aG1JZGVudGlmaWVyIiwiYml0c3RyIiwibnVsbF8iLCJQcml2YXRlS2V5SW5mbyIsIm9jdHN0ciIsIlByaXZhdGVLZXkiLCJFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyIsIkVuY3J5cHRlZFByaXZhdGVLZXkiLCJEU0FQcml2YXRlS2V5IiwiRFNBcGFyYW0iLCJFQ1ByaXZhdGVLZXkiLCJFQ1BhcmFtZXRlcnMiLCJuYW1lZEN1cnZlIiwiYXNuIiwiVGltZSIsInV0Y1RpbWUiLCJ1dGN0aW1lIiwiZ2VuZXJhbFRpbWUiLCJnZW50aW1lIiwiQXR0cmlidXRlVHlwZVZhbHVlIiwiU3ViamVjdFB1YmxpY0tleUluZm8iLCJSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lIiwic2V0b2YiLCJSRE5TZXF1ZW5jZSIsInNlcW9mIiwiTmFtZSIsInJkblNlcXVlbmNlIiwiVmFsaWRpdHkiLCJFeHRlbnNpb24iLCJib29sIiwiVEJTQ2VydGlmaWNhdGUiLCJYNTA5Q2VydGlmaWNhdGUiLCJmaW5kUHJvYyIsInN0YXJ0UmVnZXgiLCJmdWxsUmVnZXgiLCJldnAiLCJva2V5IiwiZGVjcnlwdGVkIiwiY2lwaGVyVGV4dCIsImNpcGhlcktleSIsImNpcGhlciIsImFlc2lkIiwiZml4UHJvYyIsImNvbXBhdCIsInBhc3NwaHJhc2UiLCJzdWJ0eXBlIiwibmRhdGEiLCJzdHJpcHBlZCIsInRic0NlcnRpZmljYXRlIiwic3ViamVjdFB1YmxpY0tleUluZm8iLCJzdWJqZWN0UHVibGljS2V5Iiwia2RlIiwia2RlcGFyYW1zIiwiaXRlcnMiLCJrZXlsZW4iLCJwYXJhbWV0ZXJzIiwicHJvY2VzcyIsIlpFUk9fQlVGIiwiY2hlY2tQYXJhbWV0ZXJzIiwiZGVmYXVsdEVuY29kaW5nIiwic3luYyIsInN1YnRsZSIsInRvQnJvd3NlciIsInNoYS0xIiwic2hhLTI1NiIsInNoYS0zODQiLCJzaGEtNTEyIiwiY2hlY2tzIiwiYnJvd3NlclBia2RmMiIsIml0ZXJhdGlvbnMiLCJpbXBvcnRLZXkiLCJkZXJpdmVCaXRzIiwibmV4dFRpY2siLCJyZXNvbHZlUHJvbWlzZSIsImJyb3dzZXIiLCJwcm9tIiwiY2F0Y2giLCJjaGVja05hdGl2ZSIsInJlc3AiLCJNQVhfQUxMT0MiLCJjaGVja0J1ZmZlciIsInJtZDE2MCIsInNpemVzIiwic2FsdExlbiIsImdldERpZ2VzdCIsImlwYWQxIiwiaXBhZDIiLCJydW4iLCJESyIsImJsb2NrMSIsImRlc3RQb3MiLCJoTGVuIiwiVSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwidGl0bGUiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJpMm9wcyIsIm1nZiIsIndpdGhQdWJsaWMiLCJwcml2YXRlX2tleSIsInJldmVyc2UiLCJ6QnVmZmVyIiwiaUhhc2giLCJtYXNrZWRTZWVkIiwibWFza2VkRGIiLCJkYiIsImRpZiIsIm9hZXAiLCJwcyIsInBrY3MxIiwicHVibGljX2tleSIsInBhZGRlZE1zZyIsImhMZW4yIiwiZGJsZW4iLCJjdXIiLCJub25aZXJvIiwicmF3Qnl0ZXMiLCJvbGRCcm93c2VyIiwic2FmZUJ1ZmZlciIsInJhbmRvbWJ5dGVzIiwia0J1ZmZlck1heExlbmd0aCIsImtNYXhVaW50MzIiLCJhc3NlcnRPZmZzZXQiLCJhY3R1YWxGaWxsIiwib3VyQnVmIiwidWludCIsInBuYSIsIkR1cGxleCIsInV0aWwiLCJSZWFkYWJsZSIsInJlYWRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm9uRW5kTlQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJfZGVzdHJveSIsIlBhc3NUaHJvdWdoIiwiUmVhZGFibGVTdGF0ZSIsIkVFbGlzdGVuZXJDb3VudCIsIlN0cmVhbSIsIk91clVpbnQ4QXJyYXkiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiQnVmZmVyTGlzdCIsImRlc3Ryb3lJbXBsIiwia1Byb3h5RXZlbnRzIiwiaXNEdXBsZXgiLCJvYmplY3RNb2RlIiwicmVhZGFibGVPYmplY3RNb2RlIiwiaHdtIiwicmVhZGFibGVId20iLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJkZWZhdWx0SHdtIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJfcmVhZCIsImRlc3Ryb3kiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwib25Fb2ZDaHVuayIsIl9pc1VpbnQ4QXJyYXkiLCJjaHVua0ludmFsaWQiLCJnZXRQcm90b3R5cGVPZiIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJuZWVkTW9yZURhdGEiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsIk1BWF9IV00iLCJob3dNdWNoVG9SZWFkIiwiaGVhZCIsImNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrIiwiZW1pdFJlYWRhYmxlXyIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsIm5SZWFkaW5nTmV4dFRpY2siLCJyZXN1bWVfIiwiZnJvbUxpc3QiLCJjbGVhciIsImhhc1N0cmluZ3MiLCJuYiIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZSIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25jbG9zZSIsIm9uZmluaXNoIiwib25kcmFpbiIsIm9uZGF0YSIsImNsZWFuZWRVcCIsIm5lZWREcmFpbiIsInBpcGVPbkRyYWluIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsInBhdXNlIiwiZXZlbnQiLCJyZXN1bWUiLCJkZXN0cyIsImV2Iiwid3JhcCIsIl90aGlzIiwicGF1c2VkIiwiX2Zyb21MaXN0IiwiX3RyYW5zZm9ybVN0YXRlIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJ0cyIsInRyYW5zZm9ybWluZyIsIndyaXRlY2IiLCJ3cml0ZWNodW5rIiwicnMiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsInByZWZpbmlzaCIsIl90aGlzMiIsImVycjIiLCJzZXRJbW1lZGlhdGUiLCJDb3JrZWRSZXF1ZXN0IiwiZW50cnkiLCJmaW5pc2giLCJjb3JrUmVxIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsInJlYWxIYXNJbnN0YW5jZSIsIm5vcCIsIndyaXRhYmxlT2JqZWN0TW9kZSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZmluYWxDYWxsZWQiLCJlbmRpbmciLCJmaW5pc2hlZCIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsIndyaXRpbmciLCJjb3JrZWQiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZG9Xcml0ZSIsIm9ud3JpdGVEcmFpbiIsImhvbGRlciIsImFsbEJ1ZmZlcnMiLCJpc0J1ZiIsImNhbGxGaW5hbCIsIm5lZWQiLCJnZXRCdWZmZXIiLCJoYXNJbnN0YW5jZSIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwid3JpdGVPckJ1ZmZlciIsImNvcmsiLCJ1bmNvcmsiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJlbmRXcml0YWJsZSIsImNvcHlCdWZmZXIiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiY3VzdG9tIiwiZW1pdEVycm9yTlQiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwienIiLCJzbCIsInNyIiwiaHIiLCJfZSIsImZuMSIsImZuMiIsImZuMyIsImZuNCIsImZuNSIsImFyIiwiYnIiLCJjciIsImRyIiwidGwiLCJ0ciIsImNvcHlQcm9wcyIsIlNhZmVCdWZmZXIiLCJyZWdpc3RlckltbWVkaWF0ZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiZG9jdW1lbnQiLCJhdHRhY2hUbyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsInJhbmRvbSIsIm9uR2xvYmFsTWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiY3JlYXRlRWxlbWVudCIsImh0bWwiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbiIsInRhc2siLCJjbGVhckltbWVkaWF0ZSIsImZpbmFsU2l6ZSIsIl9maW5hbFNpemUiLCJhY2N1bSIsImFzc2lnbmVkIiwicmVtYWluZGVyIiwibG93Qml0cyIsImhpZ2hCaXRzIiwiQWxnb3JpdGhtIiwiU2hhIiwicm90bDUiLCJyb3RsMzAiLCJmdCIsIlNoYTEiLCJyb3RsMSIsIlNoYTI1NiIsIlNoYTIyNCIsIl9nIiwiX2giLCJtYWoiLCJzaWdtYTAiLCJzaWdtYTEiLCJnYW1tYTAiLCJnYW1tYTEiLCJTaGEzODQiLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJ3cml0ZUludDY0QkUiLCJTaGE1MTIiLCJHYW1tYTAiLCJHYW1tYTBsIiwiR2FtbWExIiwiR2FtbWExbCIsImdldENhcnJ5IiwiZ2FtbWEwbCIsImdhbW1hMWwiLCJXaTdoIiwiV2k3bCIsIldpMTZoIiwiV2kxNmwiLCJXaWwiLCJXaWgiLCJtYWpoIiwibWFqbCIsInNpZ21hMGgiLCJzaWdtYTBsIiwic2lnbWExaCIsInNpZ21hMWwiLCJLaWgiLCJLaWwiLCJjaGgiLCJjaGwiLCJ0MWwiLCJ0MWgiLCJ0MmwiLCJ0MmgiLCJFRSIsIl9pc1N0ZGlvIiwiZGlkT25FbmQiLCJjbGVhbnVwIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidXRmOENoZWNrSW5jb21wbGV0ZSIsInNjb3BlIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9faW1wb3J0RGVmYXVsdCIsImV4dGVuZFN0YXRpY3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fZXh0ZW5kcyIsIl9fIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJfX3Jlc3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsIl9fbWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJtZXRhZGF0YSIsIl9fYXdhaXRlciIsIl9hcmd1bWVudHMiLCJQIiwiZnVsZmlsbGVkIiwiX19nZW5lcmF0b3IiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0aHJvdyIsInJldHVybiIsIm9wIiwicG9wIiwiX19leHBvcnRTdGFyIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJfX3NwcmVhZCIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsImZ1bGZpbGwiLCJzZXR0bGUiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiY29va2VkIiwiX19pbXBvcnRTdGFyIiwiZGVmYXVsdCIsImxvY2FsU3RvcmFnZSIsIk9iamVjdF9rZXlzIiwiZGVmaW5lUHJvcCIsImdsb2JhbHMiLCJDb250ZXh0IiwiU2NyaXB0IiwicnVuSW5Db250ZXh0IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5Iiwid2luIiwiY29udGVudFdpbmRvdyIsIndFdmFsIiwiZXZhbCIsIndFeGVjU2NyaXB0IiwiZXhlY1NjcmlwdCIsIndpbktleXMiLCJydW5Jbk5ld0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiY3JlYXRlU2NyaXB0Iiwid2VicGFja1BvbHlmaWxsIiwicGF0aHMiLCJBdXRoVG9rZW4iLCJhdXRoZW50aWNhdGlvblRva2VuIiwiQXV0aGVudGljYXRpb24iLCJfc3VwZXIiLCJzZXR0aW5ncyIsImF1dGgiLCJmZXRjaE1ldGhvZCIsIl9BdXRoZW50aWNhdGlvblNldHRpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfQXV0aFRva2VuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJzZXR1cFJlZnJlc2giLCJlbmFibGVkIiwidHNsaWJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInF1ZXJ5Iiwic3VwcHJlc3NDYWxsYmFja3MiLCJfQ29tbW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZXFJbml0IiwicmVxdWVzdE9iamVjdCIsImNiUmVxdWVzdCIsInRva2VuUGF0aCIsImNiU3VjY2VzcyIsImNiRXJyb3IiLCJkZWxheSIsImRlZmVyVXBkYXRlIiwiZGVmZXJyZWRRdWVyeSIsImZldGNoUHJvbWlzZSIsImp3dF9zaW1wbGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImV4cGlyYXRpb24iLCJyZW1haW5pbmdTZWNvbmRzIiwidHJpZ2dlcnMiLCJleHBpcnlPdmVybGFwIiwiQXV0aGVudGljYXRpb25TZXR0aW5ncyIsImJhc2VVcmwiLCJiYXNlUGF0aCIsInNlcnZpY2VQYXRoIiwiX0F1dGhlbnRpY2F0aW9uVHJpZ2dlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9Db21tb25fQmFzZVNldHRpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJBdXRoZW50aWNhdGlvblRyaWdnZXJzIiwiQXV0b2NvbXBsZXRlIiwiX0F1dG9jb21wbGV0ZVNldHRpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfQXV0aGVudGljYXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInF1ZXJ5Q29udmVydGVyIiwiX0F1dG9jb21wbGV0ZVF1ZXJ5Q29udmVydGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJnZXRVcmwiLCJzdWdnZXN0aW9ucyIsIm1heFN1Z2dlc3Rpb25zQ2hhbmdlZCIsInNob3VsZFVwZGF0ZSIsInF1ZXJ5VGV4dENoYW5nZWQiLCJxdWVyeUNoYW5nZSIsInF1ZXJ5VGV4dCIsInF1ZXJ5Q2hhbmdlTWluTGVuZ3RoIiwicXVlcnlDaGFuZ2VJbnN0YW50UmVnZXgiLCJxdWVyeUNoYW5nZURlbGF5IiwiQXV0b2NvbXBsZXRlUXVlcnlDb252ZXJ0ZXIiLCJnZXRVcmxQYXJhbXMiLCJhZGRQYXJhbUlmU2V0IiwibWF4U3VnZ2VzdGlvbnMiLCJBdXRvY29tcGxldGVTZXR0aW5ncyIsIl9BdXRvY29tcGxldGVUcmlnZ2Vyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX0NvbW1vbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiQXV0b2NvbXBsZXRlVHJpZ2dlcnMiLCJDYXRlZ29yaXplIiwiX0NhdGVnb3JpemVTZXR0aW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX0NhdGVnb3JpemVRdWVyeUNvbnZlcnRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiY2F0ZWdvcmllcyIsImZpbHRlckNhdGVnb3JpZXMiLCJjbGllbnRDYXRlZ29yaWVzVXBkYXRlIiwiY2xpZW50SWRDaGFuZ2VkIiwiZGF0ZUZyb21DaGFuZ2VkIiwiZGF0ZVRvQ2hhbmdlZCIsImZpbHRlcnNDaGFuZ2VkIiwiZmlsdGVyQ2hhbmdlZCIsInNlYXJjaFR5cGVDaGFuZ2VkIiwidWlMYW5ndWFnZUNvZGVDaGFuZ2VkIiwiY3JlYXRlQ2F0ZWdvcnlGaWx0ZXIiLCJjYXRlZ29yeU5hbWUiLCJncm91cElkIiwiZ3JvdXBzIiwiZmluZCIsImRpc3BsYXlOYW1lIiwiZ2V0Q2F0ZWdvcnlQYXRoRGlzcGxheU5hbWVGcm9tQ2F0ZWdvcmllcyIsImZpbmRDYXRlZ29yeSIsImdyb3VwSW5kZXgiLCJmaW5kSW5kZXgiLCJjYXRlZ29yeSIsImFkZEZpbHRlcnNJZk1pc3NpbmciLCJmaWx0ZXJzIiwiY2F0cyIsImRlcHRoIiwiY2F0ZWdvcnlOYW1lcyIsInBhcmVudENhdGVnb3J5TmFtZXMiLCJleHBhbmRlZCIsInBhcmVudF8xIiwicm9vdE92ZXJyaWRlIiwicHJlc2VudGF0aW9ucyIsIl9fUk9PVF9fIiwibWluQ291bnQiLCJncm91cGluZyIsImZpbHRlcmluZyIsInNvcnRpbmciLCJsaW1pdGluZyIsImluR3JvdXAiLCJncm91cE92ZXJyaWRlIiwibWFwQ2F0ZWdvcmllcyIsImluQ2F0ZWdvcnkiLCJjYXRlZ29yeU92ZXJyaWRlIiwiaXNDYXRlZ29yeSIsIm1hdGNoQ2F0ZWdvcmllcyIsIk1hcCIsImNhdGVnb3J5Mk1hdGNoQ2F0ZWdvcnkiLCJjYXRlZ29yaWVzXzEiLCJncm91cE5hbWUiLCJnZXRNYXRjaCIsIm5ld05vZGUiLCJjb2xsZWN0aW9uIiwibWF0Y2hDYXRlZ29yeSIsIm1pbkNvdW50UGVyR3JvdXAiLCJuZXdDYXRlZ29yeSIsImRlbGV0ZSIsIm92ZXJyaWRlIiwibWF0Y2hOYW1lIiwibWF0Y2hNb2RlIiwiRGlzcGxheU5hbWUiLCJwYXJ0MmNhdHMiLCJzdHJpbmdNYXRjaGVzIiwicmVnZXhNYXRjaGVzIiwiY2F0ZWdvcmllc18yIiwic3RyaW5nTWF0Y2hlc18xIiwic3RyaW5nUGFydCIsInJlZ2V4TWF0Y2hlc18xIiwicmVnZXhQYXJ0Iiwic29ydGVkQ2F0cyIsImNzIiwic29ydE1ldGhvZCIsIkFscGhhQXNjIiwiYVZhbCIsImJWYWwiLCJBbHBoYURlc2MiLCJDb3VudEFzYyIsIkNvdW50RGVzYyIsIk9yaWdpbmFsIiwicGFnZSIsInBhZ2VTaXplIiwiY2F0SWQiLCJDYXRlZ29yaXplUXVlcnlDb252ZXJ0ZXIiLCJjbGllbnRJZCIsImNyZWF0ZURhdGUiLCJkYXRlRnJvbSIsImRhdGVUbyIsInNlYXJjaFR5cGUiLCJ1aUxhbmd1YWdlQ29kZSIsImNhdGVnb3JpemF0aW9uVHlwZSIsIkNhdGVnb3JpemVTZXR0aW5ncyIsImNsaWVudENhdGVnb3J5RmlsdGVyU2VwQ2hhciIsIl9DYXRlZ29yaXplVHJpZ2dlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9Db21tb25fQ2F0ZWdvcnlQcmVzZW50YXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIkNhdGVnb3JpemVUcmlnZ2VycyIsImNsaWVudENhdGVnb3J5RXhwYW5zaW9uQ2hhbmdlZCIsImNsaWVudENhdGVnb3J5RmlsdGVyQ2hhbmdlZCIsIkJhc2VDYWxsIiwiZGVmZXJVcGRhdGVzIiwic2tpcFBlbmRpbmciLCJ1c2VNYXRjaFBhZ2UiLCJkZWZlcnJlZFVzZU1hdGNoUGFnZSIsImluY2x1ZGVBdXRob3JpemF0aW9uSGVhZGVyIiwiQ29udGVudC1UeXBlIiwiQXV0aG9yaXphdGlvbiIsInVzZVF1ZXJ5TWF0Y2hQYWdlIiwibWF0Y2hQYWdlIiwiY2F0ZWdvcml6YXRpb25UeXBlQ2hhbmdlZCIsIm1hdGNoR2VuZXJhdGVDb250ZW50Q2hhbmdlZCIsIm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0c0NoYW5nZWQiLCJtYXRjaEdyb3VwaW5nQ2hhbmdlZCIsIm1hdGNoT3JkZXJCeUNoYW5nZWQiLCJtYXRjaFBhZ2VDaGFuZ2VkIiwibWF0Y2hQYWdlU2l6ZUNoYW5nZWQiLCJjcm9zc19mZXRjaF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJCYXNlUXVlcnlDb252ZXJ0ZXIiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJCYXNlU2V0dGluZ3MiLCJVUkwiLCJDYXRlZ29yaXphdGlvblR5cGUiLCJMaW1pdFBhZ2VDb25maWd1cmF0aW9uIiwiR3JvdXBpbmdNb2RlIiwiQ2FzaW5nIiwiQ2F0ZWdvcnlQcmVzZW50YXRpb24iLCJHcm91cENvbmZpZ3VyYXRpb24iLCJGaWx0ZXJDb25maWd1cmF0aW9uIiwiU29ydENvbmZpZ3VyYXRpb24iLCJtYXRjaENhc2UiLCJUaXRsZSIsIkxvd2VyIiwiVXBwZXIiLCJVbmNoYW5nZWQiLCJNYXRjaE1vZGUiLCJtYXhNYXRjaENvdW50IiwidWlIaW50U2hvd0ZpbHRlcklucHV0VGhyZXNob2xkIiwiU29ydE1ldGhvZCIsInNldHVwUGFydHMiLCJwYXJ0c18xIiwiU29ydFBhcnRDb25maWd1cmF0aW9uIiwic2V0UGFnZVNpemVUaHJvd09uTmVnYXRpdmUiLCJ1aUhpbnRTaG93UGFnZXIiLCJGaWx0ZXIiLCJPcmRlckJ5IiwiUXVlcnkiLCJfQ2F0ZWdvcml6YXRpb25UeXBlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJBbGwiLCJtYXRjaEdlbmVyYXRlQ29udGVudCIsIm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cyIsIm1hdGNoR3JvdXBpbmciLCJtYXRjaE9yZGVyQnkiLCJfT3JkZXJCeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiUmVsZXZhbmNlIiwibWF0Y2hQYWdlU2l6ZSIsIl9TZWFyY2hUeXBlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJLZXl3b3JkcyIsIlNlYXJjaFR5cGUiLCJGaW5kIiwiX0ZpbmRTZXR0aW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX0ZpbmRRdWVyeUNvbnZlcnRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiRmluZFF1ZXJ5Q29udmVydGVyIiwiRmluZFNldHRpbmdzIiwiX0ZpbmRUcmlnZ2Vyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiRmluZFRyaWdnZXJzIiwiU2VhcmNoQ2xpZW50IiwiYXV0aGVudGljYXRpb24iLCJhdXRvY29tcGxldGUiLCJjYXRlZ29yaXplIiwiX29yaWdTZXR0aW5ncyIsIl9vcmlnRmV0Y2hNZXRob2QiLCJzZXR1cCIsImZvcmNlVXBkYXRlIiwicmVzZXQiLCJpc0ZpbHRlciIsImZpbHRlcklkIiwiZmlsdGVySW5kZXgiLCJoYXNDaGlsZEZpbHRlciIsImNhdGVnb3J5UGF0aCIsImZpbHRlckFkZCIsImhpZGRlbiIsImRvRmlsdGVyQWRkIiwiZmlsdGVyUmVtb3ZlIiwiZG9GaWx0ZXJSZW1vdmUiLCJmaWx0ZXJUb2dnbGUiLCJ0b2dnbGVDYXRlZ29yeUV4cGFuc2lvbiIsIl9Db21tb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm1hdGNoUGFnZVByZXYiLCJfcXVlcnkiLCJtYXRjaFBhZ2VOZXh0IiwiZGVlcF9lcXVhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJzb3J0ZWRGaWx0ZXJzIiwiZ2VuZXJhdGVDb250ZW50IiwiZ2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cyIsInVzZUdyb3VwaW5nIiwib3JkZXJCeSIsIm5ld0ZpbHRlciIsInRvUmVtb3ZlIiwiZmlsdGVyTmFtZSIsInN0YXJ0c1dpdGgiLCJmaWx0ZXJTdHJpbmciLCJfU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl9BdXRvY29tcGxldGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9DYXRlZ29yaXplX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfRmluZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiU2V0dGluZ3MiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLGVBQUFDLElBQ0FELE9BQUEsbUJBQUFILEdBQ0EsaUJBQUFDLFFBQ0FBLFFBQUEsY0FBQUQsSUFFQUQsRUFBQSxjQUFBQyxJQVJBLENBU0NLLE9BQUEsV0FDRCxtQkNUQSxJQUFBQyxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUs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QUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG1FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHNFQUlBUCxLQUNBbHZCLElBQUEsRUFDQXl2QixTQUVBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGlFQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLGtFQUNBLHFFQUdBLG1FQUNBLG9FQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNBLHFFQUdBLG1FQUNB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QSxxQ0FDQUMsVUFBQSxxQ0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSx3Q0FDQUMsYUFBQSx3Q0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsT0FBQSxxQ0FDQUMsVUFBQSxxQ0FDQUMsYUFBQSwyQ0FDQUMsZ0JBQUEsMkNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLFVBQUEsd0NBQ0FDLGFBQUEsd0NBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEsd0NBQ0FDLGFBQUEsd0NBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEsd0NBQ0FDLGFBQUEsd0NBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLFVBQUEsd0NBQ0FDLGFBQUEsd0NBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEsd0NBQ0FDLGFBQUEsd0NBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFlBQUEsMENBQ0FDLGVBQUEsMENBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9BQUEscUNBQ0FDLFVBQUEscUNBQ0FDLE9B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LElBQUkyTyxFQUFBLE1BQU1uUCxFQUFTUSxRQXJFeEMiLCJmaWxlIjoiSW50ZWxsaVNlYXJjaC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkludGVsbGlTZWFyY2hcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiSW50ZWxsaVNlYXJjaFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJJbnRlbGxpU2VhcmNoXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9TZWFyY2hDbGllbnQudHNcIik7XG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGFzbjEgPSByZXF1aXJlKCcuLi9hc24xJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgYXBpID0gZXhwb3J0cztcblxuYXBpLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShuYW1lLCBib2R5KSB7XG4gIHJldHVybiBuZXcgRW50aXR5KG5hbWUsIGJvZHkpO1xufTtcblxuZnVuY3Rpb24gRW50aXR5KG5hbWUsIGJvZHkpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5ib2R5ID0gYm9keTtcblxuICB0aGlzLmRlY29kZXJzID0ge307XG4gIHRoaXMuZW5jb2RlcnMgPSB7fTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2NyZWF0ZU5hbWVkID0gZnVuY3Rpb24gY3JlYXRlTmFtZWQoYmFzZSkge1xuICB2YXIgbmFtZWQ7XG4gIHRyeSB7XG4gICAgbmFtZWQgPSByZXF1aXJlKCd2bScpLnJ1bkluVGhpc0NvbnRleHQoXG4gICAgICAnKGZ1bmN0aW9uICcgKyB0aGlzLm5hbWUgKyAnKGVudGl0eSkge1xcbicgK1xuICAgICAgJyAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XFxuJyArXG4gICAgICAnfSknXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIG5hbWVkID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XG4gICAgfTtcbiAgfVxuICBpbmhlcml0cyhuYW1lZCwgYmFzZSk7XG4gIG5hbWVkLnByb3RvdHlwZS5faW5pdE5hbWVkID0gZnVuY3Rpb24gaW5pdG5hbWVkKGVudGl0eSkge1xuICAgIGJhc2UuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB9O1xuXG4gIHJldHVybiBuZXcgbmFtZWQodGhpcyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXREZWNvZGVyID0gZnVuY3Rpb24gX2dldERlY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVyXG4gIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZGVjb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBlbmNvZGVyXG4gIGlmICghdGhpcy5lbmNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZW5jb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZW5jb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmVuY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBlbmMsIC8qIGludGVybmFsICovIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLl9nZXRFbmNvZGVyKGVuYykuZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlckJ1ZmZlcihiYXNlLCBvcHRpb25zKSB7XG4gIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7XG4gICAgdGhpcy5lcnJvcignSW5wdXQgbm90IEJ1ZmZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFzZSA9IGJhc2U7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbiAgdGhpcy5sZW5ndGggPSBiYXNlLmxlbmd0aDtcbn1cbmluaGVyaXRzKERlY29kZXJCdWZmZXIsIFJlcG9ydGVyKTtcbmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICByZXR1cm4geyBvZmZzZXQ6IHRoaXMub2Zmc2V0LCByZXBvcnRlcjogUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUuY2FsbCh0aGlzKSB9O1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoc2F2ZSkge1xuICAvLyBSZXR1cm4gc2tpcHBlZCBkYXRhXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuICByZXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldDtcblxuICB0aGlzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICBSZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZS5jYWxsKHRoaXMsIHNhdmUucmVwb3J0ZXIpO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0aGlzLmxlbmd0aDtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChmYWlsKSB7XG4gIGlmICh0aGlzLm9mZnNldCArIDEgPD0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAoYnl0ZXMsIGZhaWwpIHtcbiAgaWYgKCEodGhpcy5vZmZzZXQgKyBieXRlcyA8PSB0aGlzLmxlbmd0aCkpXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG5cbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG5cbiAgLy8gU2hhcmUgcmVwb3J0ZXIgc3RhdGVcbiAgcmVzLl9yZXBvcnRlclN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldCArIGJ5dGVzO1xuICB0aGlzLm9mZnNldCArPSBieXRlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gcmF3KHNhdmUpIHtcbiAgcmV0dXJuIHRoaXMuYmFzZS5zbGljZShzYXZlID8gc2F2ZS5vZmZzZXQgOiB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRW5jb2RlckJ1ZmZlcikpXG4gICAgICAgIGl0ZW0gPSBuZXcgRW5jb2RlckJ1ZmZlcihpdGVtLCByZXBvcnRlcik7XG4gICAgICB0aGlzLmxlbmd0aCArPSBpdGVtLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0sIHRoaXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoISgwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDB4ZmYpKVxuICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdub24tYnl0ZSBFbmNvZGVyQnVmZmVyIHZhbHVlJyk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbnN1cHBvcnRlZCB0eXBlOiAnICsgdHlwZW9mIHZhbHVlKTtcbiAgfVxufVxuZXhwb3J0cy5FbmNvZGVyQnVmZmVyID0gRW5jb2RlckJ1ZmZlcjtcblxuRW5jb2RlckJ1ZmZlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ob3V0LCBvZmZzZXQpIHtcbiAgaWYgKCFvdXQpXG4gICAgb3V0ID0gbmV3IEJ1ZmZlcih0aGlzLmxlbmd0aCk7XG4gIGlmICghb2Zmc2V0KVxuICAgIG9mZnNldCA9IDA7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBvdXQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbS5qb2luKG91dCwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBpdGVtLmxlbmd0aDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgb3V0W29mZnNldF0gPSB0aGlzLnZhbHVlO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgIG91dC53cml0ZSh0aGlzLnZhbHVlLCBvZmZzZXQpO1xuICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih0aGlzLnZhbHVlKSlcbiAgICAgIHRoaXMudmFsdWUuY29weShvdXQsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4iLCJ2YXIgYmFzZSA9IGV4cG9ydHM7XG5cbmJhc2UuUmVwb3J0ZXIgPSByZXF1aXJlKCcuL3JlcG9ydGVyJykuUmVwb3J0ZXI7XG5iYXNlLkRlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkRlY29kZXJCdWZmZXI7XG5iYXNlLkVuY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkVuY29kZXJCdWZmZXI7XG5iYXNlLk5vZGUgPSByZXF1aXJlKCcuL25vZGUnKTtcbiIsInZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBFbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZScpLkVuY29kZXJCdWZmZXI7XG52YXIgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5EZWNvZGVyQnVmZmVyO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuLy8gU3VwcG9ydGVkIHRhZ3NcbnZhciB0YWdzID0gW1xuICAnc2VxJywgJ3NlcW9mJywgJ3NldCcsICdzZXRvZicsICdvYmppZCcsICdib29sJyxcbiAgJ2dlbnRpbWUnLCAndXRjdGltZScsICdudWxsXycsICdlbnVtJywgJ2ludCcsICdvYmpEZXNjJyxcbiAgJ2JpdHN0cicsICdibXBzdHInLCAnY2hhcnN0cicsICdnZW5zdHInLCAnZ3JhcGhzdHInLCAnaWE1c3RyJywgJ2lzbzY0NnN0cicsXG4gICdudW1zdHInLCAnb2N0c3RyJywgJ3ByaW50c3RyJywgJ3Q2MXN0cicsICd1bmlzdHInLCAndXRmOHN0cicsICd2aWRlb3N0cidcbl07XG5cbi8vIFB1YmxpYyBtZXRob2RzIGxpc3RcbnZhciBtZXRob2RzID0gW1xuICAna2V5JywgJ29iaicsICd1c2UnLCAnb3B0aW9uYWwnLCAnZXhwbGljaXQnLCAnaW1wbGljaXQnLCAnZGVmJywgJ2Nob2ljZScsXG4gICdhbnknLCAnY29udGFpbnMnXG5dLmNvbmNhdCh0YWdzKTtcblxuLy8gT3ZlcnJpZGVkIG1ldGhvZHMgbGlzdFxudmFyIG92ZXJyaWRlZCA9IFtcbiAgJ19wZWVrVGFnJywgJ19kZWNvZGVUYWcnLCAnX3VzZScsXG4gICdfZGVjb2RlU3RyJywgJ19kZWNvZGVPYmppZCcsICdfZGVjb2RlVGltZScsXG4gICdfZGVjb2RlTnVsbCcsICdfZGVjb2RlSW50JywgJ19kZWNvZGVCb29sJywgJ19kZWNvZGVMaXN0JyxcblxuICAnX2VuY29kZUNvbXBvc2l0ZScsICdfZW5jb2RlU3RyJywgJ19lbmNvZGVPYmppZCcsICdfZW5jb2RlVGltZScsXG4gICdfZW5jb2RlTnVsbCcsICdfZW5jb2RlSW50JywgJ19lbmNvZGVCb29sJ1xuXTtcblxuZnVuY3Rpb24gTm9kZShlbmMsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB7fTtcbiAgdGhpcy5fYmFzZVN0YXRlID0gc3RhdGU7XG5cbiAgc3RhdGUuZW5jID0gZW5jO1xuXG4gIHN0YXRlLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICBzdGF0ZS5jaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gU3RhdGVcbiAgc3RhdGUudGFnID0gbnVsbDtcbiAgc3RhdGUuYXJncyA9IG51bGw7XG4gIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDtcbiAgc3RhdGUuY2hvaWNlID0gbnVsbDtcbiAgc3RhdGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgc3RhdGUuYW55ID0gZmFsc2U7XG4gIHN0YXRlLm9iaiA9IGZhbHNlO1xuICBzdGF0ZS51c2UgPSBudWxsO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDtcbiAgc3RhdGUua2V5ID0gbnVsbDtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IG51bGw7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICBzdGF0ZS5jb250YWlucyA9IG51bGw7XG5cbiAgLy8gU2hvdWxkIGNyZWF0ZSBuZXcgaW5zdGFuY2Ugb24gZWFjaCBtZXRob2RcbiAgaWYgKCFzdGF0ZS5wYXJlbnQpIHtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX3dyYXAoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBOb2RlO1xuXG52YXIgc3RhdGVQcm9wcyA9IFtcbiAgJ2VuYycsICdwYXJlbnQnLCAnY2hpbGRyZW4nLCAndGFnJywgJ2FyZ3MnLCAncmV2ZXJzZUFyZ3MnLCAnY2hvaWNlJyxcbiAgJ29wdGlvbmFsJywgJ2FueScsICdvYmonLCAndXNlJywgJ2FsdGVyZWRVc2UnLCAna2V5JywgJ2RlZmF1bHQnLCAnZXhwbGljaXQnLFxuICAnaW1wbGljaXQnLCAnY29udGFpbnMnXG5dO1xuXG5Ob2RlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBjc3RhdGUgPSB7fTtcbiAgc3RhdGVQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjc3RhdGVbcHJvcF0gPSBzdGF0ZVtwcm9wXTtcbiAgfSk7XG4gIHZhciByZXMgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihjc3RhdGUucGFyZW50KTtcbiAgcmVzLl9iYXNlU3RhdGUgPSBjc3RhdGU7XG4gIHJldHVybiByZXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fd3JhcCA9IGZ1bmN0aW9uIHdyYXAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uIF93cmFwcGVkTWV0aG9kKCkge1xuICAgICAgdmFyIGNsb25lID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5wdXNoKGNsb25lKTtcbiAgICAgIHJldHVybiBjbG9uZVttZXRob2RdLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sIHRoaXMpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGJvZHkpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5wYXJlbnQgPT09IG51bGwpO1xuICBib2R5LmNhbGwodGhpcyk7XG5cbiAgLy8gRmlsdGVyIGNoaWxkcmVuXG4gIHN0YXRlLmNoaWxkcmVuID0gc3RhdGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID09PSB0aGlzO1xuICB9LCB0aGlzKTtcbiAgYXNzZXJ0LmVxdWFsKHN0YXRlLmNoaWxkcmVuLmxlbmd0aCwgMSwgJ1Jvb3Qgbm9kZSBjYW4gaGF2ZSBvbmx5IG9uZSBjaGlsZCcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3VzZUFyZ3MgPSBmdW5jdGlvbiB1c2VBcmdzKGFyZ3MpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlbiBhbmQgYXJnc1xuICB2YXIgY2hpbGRyZW4gPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcjtcbiAgfSwgdGhpcyk7XG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gIShhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5jaGlsZHJlbiA9PT0gbnVsbCk7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgIC8vIFJlcGxhY2UgcGFyZW50IHRvIG1haW50YWluIGJhY2t3YXJkIGxpbmtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9IHRoaXM7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmFyZ3MgPT09IG51bGwpO1xuICAgIHN0YXRlLmFyZ3MgPSBhcmdzO1xuICAgIHN0YXRlLnJldmVyc2VBcmdzID0gYXJncy5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcgfHwgYXJnLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpXG4gICAgICAgIHJldHVybiBhcmc7XG5cbiAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGFyZykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSAoa2V5IHwgMCkpXG4gICAgICAgICAga2V5IHw9IDA7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ1trZXldO1xuICAgICAgICByZXNbdmFsdWVdID0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICB9XG59O1xuXG4vL1xuLy8gT3ZlcnJpZGVkIG1ldGhvZHNcbi8vXG5cbm92ZXJyaWRlZC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBOb2RlLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gX292ZXJyaWRlZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgbm90IGltcGxlbWVudGVkIGZvciBlbmNvZGluZzogJyArIHN0YXRlLmVuYyk7XG4gIH07XG59KTtcblxuLy9cbi8vIFB1YmxpYyBtZXRob2RzXG4vL1xuXG50YWdzLmZvckVhY2goZnVuY3Rpb24odGFnKSB7XG4gIE5vZGUucHJvdG90eXBlW3RhZ10gPSBmdW5jdGlvbiBfdGFnTWV0aG9kKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICBhc3NlcnQoc3RhdGUudGFnID09PSBudWxsKTtcbiAgICBzdGF0ZS50YWcgPSB0YWc7XG5cbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuTm9kZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGl0ZW0pIHtcbiAgYXNzZXJ0KGl0ZW0pO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZSA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZGVmID0gZnVuY3Rpb24gZGVmKHZhbCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpO1xuICBzdGF0ZVsnZGVmYXVsdCddID0gdmFsO1xuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5leHBsaWNpdCA9IGZ1bmN0aW9uIGV4cGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuZXhwbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuaW1wbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vYmogPSBmdW5jdGlvbiBvYmooKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHN0YXRlLm9iaiA9IHRydWU7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKVxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUua2V5ID09PSBudWxsKTtcbiAgc3RhdGUua2V5ID0gbmV3S2V5O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gYW55KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUuYW55ID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmNob2ljZSA9IGZ1bmN0aW9uIGNob2ljZShvYmopIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5jaG9pY2UgPT09IG51bGwpO1xuICBzdGF0ZS5jaG9pY2UgPSBvYmo7XG4gIHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS5jb250YWlucyA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRGVjb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gaW5wdXQud3JhcFJlc3VsdChzdGF0ZS5jaGlsZHJlblswXS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKSk7XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlWydkZWZhdWx0J107XG4gIHZhciBwcmVzZW50ID0gdHJ1ZTtcblxuICB2YXIgcHJldktleSA9IG51bGw7XG4gIGlmIChzdGF0ZS5rZXkgIT09IG51bGwpXG4gICAgcHJldktleSA9IGlucHV0LmVudGVyS2V5KHN0YXRlLmtleSk7XG5cbiAgLy8gQ2hlY2sgaWYgdGFnIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCkge1xuICAgIHZhciB0YWcgPSBudWxsO1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmV4cGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUuaW1wbGljaXQ7XG4gICAgZWxzZSBpZiAoc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUudGFnO1xuXG4gICAgaWYgKHRhZyA9PT0gbnVsbCAmJiAhc3RhdGUuYW55KSB7XG4gICAgICAvLyBUcmlhbCBhbmQgRXJyb3JcbiAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgICAgICB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgcHJlc2VudCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByZXNlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXNlbnQgPSB0aGlzLl9wZWVrVGFnKGlucHV0LCB0YWcsIHN0YXRlLmFueSk7XG5cbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHByZXNlbnQpKVxuICAgICAgICByZXR1cm4gcHJlc2VudDtcbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIG9iamVjdCBvbiBzdGFja1xuICB2YXIgcHJldk9iajtcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHByZXZPYmogPSBpbnB1dC5lbnRlck9iamVjdCgpO1xuXG4gIGlmIChwcmVzZW50KSB7XG4gICAgLy8gVW53cmFwIGV4cGxpY2l0IHZhbHVlc1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGV4cGxpY2l0ID0gdGhpcy5fZGVjb2RlVGFnKGlucHV0LCBzdGF0ZS5leHBsaWNpdCk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihleHBsaWNpdCkpXG4gICAgICAgIHJldHVybiBleHBsaWNpdDtcbiAgICAgIGlucHV0ID0gZXhwbGljaXQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0ID0gaW5wdXQub2Zmc2V0O1xuXG4gICAgLy8gVW53cmFwIGltcGxpY2l0IGFuZCBub3JtYWwgdmFsdWVzXG4gICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbCAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLl9kZWNvZGVUYWcoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbCA/IHN0YXRlLmltcGxpY2l0IDogc3RhdGUudGFnLFxuICAgICAgICBzdGF0ZS5hbnlcbiAgICAgICk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihib2R5KSlcbiAgICAgICAgcmV0dXJuIGJvZHk7XG5cbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHJlc3VsdCA9IGlucHV0LnJhdyhzYXZlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgaW5wdXQgPSBib2R5O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIHN0YXJ0LCBpbnB1dC5sZW5ndGgsICd0YWdnZWQnKTtcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIGlucHV0Lm9mZnNldCwgaW5wdXQubGVuZ3RoLCAnY29udGVudCcpO1xuXG4gICAgLy8gU2VsZWN0IHByb3BlciBtZXRob2QgZm9yIHRhZ1xuICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICByZXN1bHQgPSByZXN1bHQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICBlbHNlXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGlucHV0LmlzRXJyb3IocmVzdWx0KSlcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBEZWNvZGUgY2hpbGRyZW5cbiAgICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwgJiYgc3RhdGUuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgIHN0YXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gZGVjb2RlQ2hpbGRyZW4oY2hpbGQpIHtcbiAgICAgICAgLy8gTk9URTogV2UgYXJlIGlnbm9yaW5nIGVycm9ycyBoZXJlLCB0byBsZXQgcGFyc2VyIGNvbnRpbnVlIHdpdGggb3RoZXJcbiAgICAgICAgLy8gcGFydHMgb2YgZW5jb2RlZCBkYXRhXG4gICAgICAgIGNoaWxkLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIGNvbnRhaW5lZC9lbmNvZGVkIGJ5IHNjaGVtYSwgb25seSBpbiBiaXQgb3Igb2N0ZXQgc3RyaW5nc1xuICAgIGlmIChzdGF0ZS5jb250YWlucyAmJiAoc3RhdGUudGFnID09PSAnb2N0c3RyJyB8fCBzdGF0ZS50YWcgPT09ICdiaXRzdHInKSkge1xuICAgICAgdmFyIGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBpbnB1dC5fcmVwb3J0ZXJTdGF0ZS5vYmopXG4gICAgICAgICAgLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUG9wIG9iamVjdFxuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcmVzdWx0ID0gaW5wdXQubGVhdmVPYmplY3QocHJldk9iaik7XG5cbiAgLy8gU2V0IGtleVxuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsICYmIChyZXN1bHQgIT09IG51bGwgfHwgcHJlc2VudCA9PT0gdHJ1ZSkpXG4gICAgaW5wdXQubGVhdmVLZXkocHJldktleSwgc3RhdGUua2V5LCByZXN1bHQpO1xuICBlbHNlIGlmIChwcmV2S2V5ICE9PSBudWxsKVxuICAgIGlucHV0LmV4aXRLZXkocHJldktleSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVHZW5lcmljID0gZnVuY3Rpb24gZGVjb2RlR2VuZXJpYyh0YWcsIGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAodGFnID09PSAnc2VxJyB8fCB0YWcgPT09ICdzZXQnKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodGFnID09PSAnc2Vxb2YnIHx8IHRhZyA9PT0gJ3NldG9mJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTGlzdChpbnB1dCwgdGFnLCBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIHN0YXRlLmFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0sIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBudWxsLCBudWxsLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVRpbWUoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTnVsbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVCb29sKGlucHV0LCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlSW50KGlucHV0LCBzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3NbMF0sIG9wdGlvbnMpO1xuXG4gIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCd1bmtub3duIHRhZzogJyArIHRhZyk7XG4gIH1cbn07XG5cbk5vZGUucHJvdG90eXBlLl9nZXRVc2UgPSBmdW5jdGlvbiBfZ2V0VXNlKGVudGl0eSwgb2JqKSB7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXRcbiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7XG4gIGFzc2VydChzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5jaGlsZHJlblswXTtcbiAgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQpIHtcbiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpO1xuICAgIHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IHN0YXRlLmltcGxpY2l0O1xuICB9XG4gIHJldHVybiBzdGF0ZS51c2VEZWNvZGVyO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUNob2ljZSA9IGZ1bmN0aW9uIGRlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgbWF0Y2ggPSBmYWxzZTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbHVlID0gbm9kZS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXN1bHQgPSB7IHR5cGU6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICBtYXRjaCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRoaXMpO1xuXG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCdDaG9pY2Ugbm90IG1hdGNoZWQnKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy9cbi8vIEVuY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fY3JlYXRlRW5jb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YSkge1xuICByZXR1cm4gbmV3IEVuY29kZXJCdWZmZXIoZGF0YSwgdGhpcy5yZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCAmJiBzdGF0ZVsnZGVmYXVsdCddID09PSBkYXRhKVxuICAgIHJldHVybjtcblxuICB2YXIgcmVzdWx0ID0gdGhpcy5fZW5jb2RlVmFsdWUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCk7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm47XG5cbiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpXG4gICAgcmV0dXJuO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBzdGF0ZS5jaGlsZHJlblswXS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyIHx8IG5ldyBSZXBvcnRlcigpKTtcblxuICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAvLyBTZXQgcmVwb3J0ZXIgdG8gc2hhcmUgaXQgd2l0aCBhIGNoaWxkIGNsYXNzXG4gIHRoaXMucmVwb3J0ZXIgPSByZXBvcnRlcjtcblxuICAvLyBDaGVjayBpZiBkYXRhIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbClcbiAgICAgIGRhdGEgPSBzdGF0ZVsnZGVmYXVsdCddXG4gICAgZWxzZVxuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5jb2RlIGNoaWxkcmVuIGZpcnN0XG4gIHZhciBjb250ZW50ID0gbnVsbDtcbiAgdmFyIHByaW1pdGl2ZSA9IGZhbHNlO1xuICBpZiAoc3RhdGUuYW55KSB7XG4gICAgLy8gQW55dGhpbmcgdGhhdCB3YXMgZ2l2ZW4gaXMgdHJhbnNsYXRlZCB0byBidWZmZXJcbiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSkge1xuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcik7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY29udGFpbnMpIHtcbiAgICBjb250ZW50ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHtcbiAgICBjb250ZW50ID0gc3RhdGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS50YWcgPT09ICdudWxsXycpXG4gICAgICAgIHJldHVybiBjaGlsZC5fZW5jb2RlKG51bGwsIHJlcG9ydGVyLCBkYXRhKTtcblxuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUua2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIHNob3VsZCBoYXZlIGEga2V5Jyk7XG4gICAgICB2YXIgcHJldktleSA9IHJlcG9ydGVyLmVudGVyS2V5KGNoaWxkLl9iYXNlU3RhdGUua2V5KTtcblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3QnKTtcblxuICAgICAgdmFyIHJlcyA9IGNoaWxkLl9lbmNvZGUoZGF0YVtjaGlsZC5fYmFzZVN0YXRlLmtleV0sIHJlcG9ydGVyLCBkYXRhKTtcbiAgICAgIHJlcG9ydGVyLmxlYXZlS2V5KHByZXZLZXkpO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0pO1xuICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0ZS50YWcgPT09ICdzZXFvZicgfHwgc3RhdGUudGFnID09PSAnc2V0b2YnKSB7XG4gICAgICAvLyBUT0RPKGluZHV0bnkpOiB0aGlzIHNob3VsZCBiZSB0aHJvd24gb24gRFNMIGxldmVsXG4gICAgICBpZiAoIShzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3MubGVuZ3RoID09PSAxKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdUb28gbWFueSBhcmdzIGZvciA6ICcgKyBzdGF0ZS50YWcpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignc2Vxb2Yvc2V0b2YsIGJ1dCBkYXRhIGlzIG5vdCBBcnJheScpO1xuXG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRVc2Uoc3RhdGUuYXJnc1swXSwgZGF0YSkuX2VuY29kZShpdGVtLCByZXBvcnRlcik7XG4gICAgICB9LCBjaGlsZCkpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUudXNlLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5fZW5jb2RlUHJpbWl0aXZlKHN0YXRlLnRhZywgZGF0YSk7XG4gICAgICBwcmltaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuY29kZSBkYXRhIGl0c2VsZlxuICB2YXIgcmVzdWx0O1xuICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICB2YXIgdGFnID0gc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZztcbiAgICB2YXIgY2xzID0gc3RhdGUuaW1wbGljaXQgPT09IG51bGwgPyAndW5pdmVyc2FsJyA6ICdjb250ZXh0JztcblxuICAgIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlcG9ydGVyLmVycm9yKCdUYWcgY291bGQgYmUgb21pdHRlZCBvbmx5IGZvciAudXNlKCknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdyYXAgaW4gZXhwbGljaXRcbiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZShzdGF0ZS5leHBsaWNpdCwgZmFsc2UsICdjb250ZXh0JywgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZUNob2ljZSA9IGZ1bmN0aW9uIGVuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2VbZGF0YS50eXBlXTtcbiAgaWYgKCFub2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZGF0YS50eXBlICsgJyBub3QgZm91bmQgaW4gJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUuX2VuY29kZShkYXRhLnZhbHVlLCByZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlKHRhZywgZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgc3RhdGUucmV2ZXJzZUFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIG51bGwsIG51bGwpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlVGltZShkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU51bGwoKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlSW50KGRhdGEsIHN0YXRlLmFyZ3MgJiYgc3RhdGUucmV2ZXJzZUFyZ3NbMF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlQm9vbChkYXRhKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0YWc6ICcgKyB0YWcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzTnVtc3RyID0gZnVuY3Rpb24gaXNOdW1zdHIoc3RyKSB7XG4gIHJldHVybiAvXlswLTkgXSokLy50ZXN0KHN0cik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faXNQcmludHN0ciA9IGZ1bmN0aW9uIGlzUHJpbnRzdHIoc3RyKSB7XG4gIHJldHVybiAvXltBLVphLXowLTkgJ1xcKFxcKVxcKyxcXC1cXC5cXC86PVxcP10qJC8udGVzdChzdHIpO1xufTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmZ1bmN0aW9uIFJlcG9ydGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5fcmVwb3J0ZXJTdGF0ZSA9IHtcbiAgICBvYmo6IG51bGwsXG4gICAgcGF0aDogW10sXG4gICAgb3B0aW9uczogb3B0aW9ucyB8fCB7fSxcbiAgICBlcnJvcnM6IFtdXG4gIH07XG59XG5leHBvcnRzLlJlcG9ydGVyID0gUmVwb3J0ZXI7XG5cblJlcG9ydGVyLnByb3RvdHlwZS5pc0Vycm9yID0gZnVuY3Rpb24gaXNFcnJvcihvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmV0dXJuIHsgb2JqOiBzdGF0ZS5vYmosIHBhdGhMZW46IHN0YXRlLnBhdGgubGVuZ3RoIH07XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLm9iaiA9IGRhdGEub2JqO1xuICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBkYXRhLnBhdGhMZW4pO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyS2V5ID0gZnVuY3Rpb24gZW50ZXJLZXkoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGgucHVzaChrZXkpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmV4aXRLZXkgPSBmdW5jdGlvbiBleGl0S2V5KGluZGV4KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgaW5kZXggLSAxKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZUtleSA9IGZ1bmN0aW9uIGxlYXZlS2V5KGluZGV4LCBrZXksIHZhbHVlKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdGhpcy5leGl0S2V5KGluZGV4KTtcbiAgaWYgKHN0YXRlLm9iaiAhPT0gbnVsbClcbiAgICBzdGF0ZS5vYmpba2V5XSA9IHZhbHVlO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLmpvaW4oJy8nKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlck9iamVjdCA9IGZ1bmN0aW9uIGVudGVyT2JqZWN0KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBwcmV2ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSB7fTtcbiAgcmV0dXJuIHByZXY7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVPYmplY3QgPSBmdW5jdGlvbiBsZWF2ZU9iamVjdChwcmV2KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIG5vdyA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0gcHJldjtcbiAgcmV0dXJuIG5vdztcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICB2YXIgZXJyO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBpbmhlcml0ZWQgPSBtc2cgaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xuICBpZiAoaW5oZXJpdGVkKSB7XG4gICAgZXJyID0gbXNnO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBSZXBvcnRlckVycm9yKHN0YXRlLnBhdGgubWFwKGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgIHJldHVybiAnWycgKyBKU09OLnN0cmluZ2lmeShlbGVtKSArICddJztcbiAgICB9KS5qb2luKCcnKSwgbXNnLm1lc3NhZ2UgfHwgbXNnLCBtc2cuc3RhY2spO1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgdGhyb3cgZXJyO1xuXG4gIGlmICghaW5oZXJpdGVkKVxuICAgIHN0YXRlLmVycm9ycy5wdXNoKGVycik7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS53cmFwUmVzdWx0ID0gZnVuY3Rpb24gd3JhcFJlc3VsdChyZXN1bHQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgcmV0dXJuIHJlc3VsdDtcblxuICByZXR1cm4ge1xuICAgIHJlc3VsdDogdGhpcy5pc0Vycm9yKHJlc3VsdCkgPyBudWxsIDogcmVzdWx0LFxuICAgIGVycm9yczogc3RhdGUuZXJyb3JzXG4gIH07XG59O1xuXG5mdW5jdGlvbiBSZXBvcnRlckVycm9yKHBhdGgsIG1zZykge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnJldGhyb3cobXNnKTtcbn07XG5pbmhlcml0cyhSZXBvcnRlckVycm9yLCBFcnJvcik7XG5cblJlcG9ydGVyRXJyb3IucHJvdG90eXBlLnJldGhyb3cgPSBmdW5jdGlvbiByZXRocm93KG1zZykge1xuICB0aGlzLm1lc3NhZ2UgPSBtc2cgKyAnIGF0OiAnICsgKHRoaXMucGF0aCB8fCAnKHNoYWxsb3cpJyk7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBSZXBvcnRlckVycm9yKTtcblxuICBpZiAoIXRoaXMuc3RhY2spIHtcbiAgICB0cnkge1xuICAgICAgLy8gSUUgb25seSBhZGRzIHN0YWNrIHdoZW4gdGhyb3duXG4gICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLnN0YWNrID0gZS5zdGFjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwidmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuXG5leHBvcnRzLnRhZ0NsYXNzID0ge1xuICAwOiAndW5pdmVyc2FsJyxcbiAgMTogJ2FwcGxpY2F0aW9uJyxcbiAgMjogJ2NvbnRleHQnLFxuICAzOiAncHJpdmF0ZSdcbn07XG5leHBvcnRzLnRhZ0NsYXNzQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnQ2xhc3MpO1xuXG5leHBvcnRzLnRhZyA9IHtcbiAgMHgwMDogJ2VuZCcsXG4gIDB4MDE6ICdib29sJyxcbiAgMHgwMjogJ2ludCcsXG4gIDB4MDM6ICdiaXRzdHInLFxuICAweDA0OiAnb2N0c3RyJyxcbiAgMHgwNTogJ251bGxfJyxcbiAgMHgwNjogJ29iamlkJyxcbiAgMHgwNzogJ29iakRlc2MnLFxuICAweDA4OiAnZXh0ZXJuYWwnLFxuICAweDA5OiAncmVhbCcsXG4gIDB4MGE6ICdlbnVtJyxcbiAgMHgwYjogJ2VtYmVkJyxcbiAgMHgwYzogJ3V0ZjhzdHInLFxuICAweDBkOiAncmVsYXRpdmVPaWQnLFxuICAweDEwOiAnc2VxJyxcbiAgMHgxMTogJ3NldCcsXG4gIDB4MTI6ICdudW1zdHInLFxuICAweDEzOiAncHJpbnRzdHInLFxuICAweDE0OiAndDYxc3RyJyxcbiAgMHgxNTogJ3ZpZGVvc3RyJyxcbiAgMHgxNjogJ2lhNXN0cicsXG4gIDB4MTc6ICd1dGN0aW1lJyxcbiAgMHgxODogJ2dlbnRpbWUnLFxuICAweDE5OiAnZ3JhcGhzdHInLFxuICAweDFhOiAnaXNvNjQ2c3RyJyxcbiAgMHgxYjogJ2dlbnN0cicsXG4gIDB4MWM6ICd1bmlzdHInLFxuICAweDFkOiAnY2hhcnN0cicsXG4gIDB4MWU6ICdibXBzdHInXG59O1xuZXhwb3J0cy50YWdCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWcpO1xuIiwidmFyIGNvbnN0YW50cyA9IGV4cG9ydHM7XG5cbi8vIEhlbHBlclxuY29uc3RhbnRzLl9yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAvLyBDb252ZXJ0IGtleSB0byBpbnRlZ2VyIGlmIGl0IGlzIHN0cmluZ2lmaWVkXG4gICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpXG4gICAgICBrZXkgPSBrZXkgfCAwO1xuXG4gICAgdmFyIHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJEZWNvZGVyO1xuXG5ERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYmFzZS5EZWNvZGVyQnVmZmVyKSlcbiAgICBkYXRhID0gbmV3IGJhc2UuRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy50cmVlLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fcGVla1RhZyA9IGZ1bmN0aW9uIHBlZWtUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBpZiAoYnVmZmVyLmlzRW1wdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcblxuICByZXR1cm4gZGVjb2RlZFRhZy50YWcgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciA9PT0gdGFnIHx8XG4gICAgKGRlY29kZWRUYWcudGFnU3RyICsgJ29mJykgPT09IHRhZyB8fCBhbnk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKFxuICAgICAgYnVmZmVyLFxuICAgICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgdGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpXG4gICAgICByZXR1cm4gdGFnO1xuICAgIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbilcbiAgICBlbHNlXG4gICAgICByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKTtcblxuICAgIC8vIEZhaWx1cmVcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICAgIHJldHVybiByZXM7XG5cbiAgICBpZiAodGFnLnRhZ1N0ciA9PT0gJ2VuZCcpXG4gICAgICBicmVhaztcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUxpc3QgPSBmdW5jdGlvbiBkZWNvZGVMaXN0KGJ1ZmZlciwgdGFnLCBkZWNvZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJywgb3B0aW9ucyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykgJiYgcG9zc2libGVFbmQpXG4gICAgICBicmVhaztcbiAgICByZXN1bHQucHVzaChyZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlU3RyID0gZnVuY3Rpb24gZGVjb2RlU3RyKGJ1ZmZlciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodW51c2VkKSlcbiAgICAgIHJldHVybiB1bnVzZWQ7XG4gICAgcmV0dXJuIHsgdW51c2VkOiB1bnVzZWQsIGRhdGE6IGJ1ZmZlci5yYXcoKSB9O1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICAgIGlmIChyYXcubGVuZ3RoICUgMiA9PT0gMSlcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVuZ3RoIG1pc21hdGNoJyk7XG5cbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyYXcucmVhZFVJbnQxNkJFKGkgKiAyKSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIHZhciBudW1zdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihudW1zdHIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdudW1zdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29jdHN0cicpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICB2YXIgcHJpbnRzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHByaW50c3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAncHJpbnRzdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnRzdHI7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU9iamlkID0gZnVuY3Rpb24gZGVjb2RlT2JqaWQoYnVmZmVyLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICB2YXIgaWRlbnQgPSAwO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgc3ViaWRlbnQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWRlbnQgPDw9IDc7XG4gICAgaWRlbnQgfD0gc3ViaWRlbnQgJiAweDdmO1xuICAgIGlmICgoc3ViaWRlbnQgJiAweDgwKSA9PT0gMCkge1xuICAgICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG4gICAgICBpZGVudCA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChzdWJpZGVudCAmIDB4ODApXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG5cbiAgdmFyIGZpcnN0ID0gKGlkZW50aWZpZXJzWzBdIC8gNDApIHwgMDtcbiAgdmFyIHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7XG5cbiAgaWYgKHJlbGF0aXZlKVxuICAgIHJlc3VsdCA9IGlkZW50aWZpZXJzO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gW2ZpcnN0LCBzZWNvbmRdLmNvbmNhdChpZGVudGlmaWVycy5zbGljZSgxKSk7XG5cbiAgaWYgKHZhbHVlcykge1xuICAgIHZhciB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJyAnKV07XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcuJyldO1xuICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZClcbiAgICAgIHJlc3VsdCA9IHRtcDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgdmFyIHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCA0KSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCAyKSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSgyLCA0KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiBEYXRlLlVUQyh5ZWFyLCBtb24gLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVOdWxsID0gZnVuY3Rpb24gZGVjb2RlTnVsbChidWZmZXIpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7XG4gIHZhciByZXMgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVzICE9PSAwO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChidWZmZXIsIHZhbHVlcykge1xuICAvLyBCaWdpbnQsIHJldHVybiBhcyBpdCBpcyAoYXNzdW1lIGJpZyBlbmRpYW4pXG4gIHZhciByYXcgPSBidWZmZXIucmF3KCk7XG4gIHZhciByZXMgPSBuZXcgYmlnbnVtKHJhdyk7XG5cbiAgaWYgKHZhbHVlcylcbiAgICByZXMgPSB2YWx1ZXNbcmVzLnRvU3RyaW5nKDEwKV0gfHwgcmVzO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXREZWNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGRlckRlY29kZVRhZyhidWYsIGZhaWwpIHtcbiAgdmFyIHRhZyA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcih0YWcpKVxuICAgIHJldHVybiB0YWc7XG5cbiAgdmFyIGNscyA9IGRlci50YWdDbGFzc1t0YWcgPj4gNl07XG4gIHZhciBwcmltaXRpdmUgPSAodGFnICYgMHgyMCkgPT09IDA7XG5cbiAgLy8gTXVsdGktb2N0ZXQgdGFnIC0gbG9hZFxuICBpZiAoKHRhZyAmIDB4MWYpID09PSAweDFmKSB7XG4gICAgdmFyIG9jdCA9IHRhZztcbiAgICB0YWcgPSAwO1xuICAgIHdoaWxlICgob2N0ICYgMHg4MCkgPT09IDB4ODApIHtcbiAgICAgIG9jdCA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgICBpZiAoYnVmLmlzRXJyb3Iob2N0KSlcbiAgICAgICAgcmV0dXJuIG9jdDtcblxuICAgICAgdGFnIDw8PSA3O1xuICAgICAgdGFnIHw9IG9jdCAmIDB4N2Y7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZyAmPSAweDFmO1xuICB9XG4gIHZhciB0YWdTdHIgPSBkZXIudGFnW3RhZ107XG5cbiAgcmV0dXJuIHtcbiAgICBjbHM6IGNscyxcbiAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSxcbiAgICB0YWc6IHRhZyxcbiAgICB0YWdTdHI6IHRhZ1N0clxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXJEZWNvZGVMZW4oYnVmLCBwcmltaXRpdmUsIGZhaWwpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgLy8gSW5kZWZpbml0ZSBmb3JtXG4gIGlmICghcHJpbWl0aXZlICYmIGxlbiA9PT0gMHg4MClcbiAgICByZXR1cm4gbnVsbDtcblxuICAvLyBEZWZpbml0ZSBmb3JtXG4gIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAvLyBTaG9ydCBmb3JtXG4gICAgcmV0dXJuIGxlbjtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICB2YXIgbnVtID0gbGVuICYgMHg3ZjtcbiAgaWYgKG51bSA+IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgdmFyIGogPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgIGlmIChidWYuaXNFcnJvcihqKSlcbiAgICAgIHJldHVybiBqO1xuICAgIGxlbiB8PSBqO1xuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsInZhciBkZWNvZGVycyA9IGV4cG9ydHM7XG5cbmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5kZWNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBERVJEZWNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHtcbiAgREVSRGVjb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRGVjb2RlciwgREVSRGVjb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTURlY29kZXI7XG5cblBFTURlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBsaW5lcyA9IGRhdGEudG9TdHJpbmcoKS5zcGxpdCgvW1xcclxcbl0rL2cpO1xuXG4gIHZhciBsYWJlbCA9IG9wdGlvbnMubGFiZWwudG9VcHBlckNhc2UoKTtcblxuICB2YXIgcmUgPSAvXi0tLS0tKEJFR0lOfEVORCkgKFteLV0rKS0tLS0tJC87XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWF0Y2ggPSBsaW5lc1tpXS5tYXRjaChyZSk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAobWF0Y2hbMl0gIT09IGxhYmVsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdCRUdJTicpXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3RhcnQgPSBpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdFTkQnKVxuICAgICAgICBicmVhaztcbiAgICAgIGVuZCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKVxuICAgIHRocm93IG5ldyBFcnJvcignUEVNIHNlY3Rpb24gbm90IGZvdW5kIGZvcjogJyArIGxhYmVsKTtcblxuICB2YXIgYmFzZTY0ID0gbGluZXMuc2xpY2Uoc3RhcnQgKyAxLCBlbmQpLmpvaW4oJycpO1xuICAvLyBSZW1vdmUgZXhjZXNzaXZlIHN5bWJvbHNcbiAgYmFzZTY0LnJlcGxhY2UoL1teYS16MC05XFwrXFwvPV0rL2dpLCAnJyk7XG5cbiAgdmFyIGlucHV0ID0gbmV3IEJ1ZmZlcihiYXNlNjQsICdiYXNlNjQnKTtcbiAgcmV0dXJuIERFUkRlY29kZXIucHJvdG90eXBlLmRlY29kZS5jYWxsKHRoaXMsIGlucHV0LCBvcHRpb25zKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkVuY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJFbmNvZGVyO1xuXG5ERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKS5qb2luKCk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQ29tcG9zaXRlID0gZnVuY3Rpb24gZW5jb2RlQ29tcG9zaXRlKHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQpIHtcbiAgdmFyIGVuY29kZWRUYWcgPSBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgdGhpcy5yZXBvcnRlcik7XG5cbiAgLy8gU2hvcnQgZm9ybVxuICBpZiAoY29udGVudC5sZW5ndGggPCAweDgwKSB7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMik7XG4gICAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgICBoZWFkZXJbMV0gPSBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICAvLyBDb3VudCBvY3RldHMgcmVxdWlyZWQgdG8gc3RvcmUgbGVuZ3RoXG4gIHZhciBsZW5PY3RldHMgPSAxO1xuICBmb3IgKHZhciBpID0gY29udGVudC5sZW5ndGg7IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgbGVuT2N0ZXRzKys7XG5cbiAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMSArIDEgKyBsZW5PY3RldHMpO1xuICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICBoZWFkZXJbMV0gPSAweDgwIHwgbGVuT2N0ZXRzO1xuXG4gIGZvciAodmFyIGkgPSAxICsgbGVuT2N0ZXRzLCBqID0gY29udGVudC5sZW5ndGg7IGogPiAwOyBpLS0sIGogPj49IDgpXG4gICAgaGVhZGVyW2ldID0gaiAmIDB4ZmY7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlU3RyID0gZnVuY3Rpb24gZW5jb2RlU3RyKHN0ciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBzdHIudW51c2VkIHwgMCwgc3RyLmRhdGEgXSk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYm1wc3RyJykge1xuICAgIHZhciBidWYgPSBuZXcgQnVmZmVyKHN0ci5sZW5ndGggKiAyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoc3RyLmNoYXJDb2RlQXQoaSksIGkgKiAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoYnVmKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdudW1zdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IG51bXN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGRpZ2l0cyBhbmQgc3BhY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzUHJpbnRzdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBwcmludHN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGxhdGluIHVwcGVyIGFuZCBsb3dlciBjYXNlIGxldHRlcnMsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpZ2l0cywgc3BhY2UsIGFwb3N0cm9waGUsIGxlZnQgYW5kIHJpZ3RoICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudGhlc2lzLCBwbHVzIHNpZ24sIGNvbW1hLCBoeXBoZW4sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvdCwgc2xhc2gsIGNvbG9uLCBlcXVhbCBzaWduLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxdWVzdGlvbiBtYXJrJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1bnN1cHBvcnRlZCcpO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlT2JqaWQgPSBmdW5jdGlvbiBlbmNvZGVPYmppZChpZCwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ3N0cmluZyBvYmppZCBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAgZm91bmQnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpZCkpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQgbm90IGZvdW5kIGluIHZhbHVlcyBtYXAnKTtcbiAgICBpZCA9IHZhbHVlc1tpZF0uc3BsaXQoL1tcXHNcXC5dKy9nKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIGlkID0gaWQuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQoKSBzaG91bGQgYmUgZWl0aGVyIGFycmF5IG9yIHN0cmluZywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dvdDogJyArIEpTT04uc3RyaW5naWZ5KGlkKSk7XG4gIH1cblxuICBpZiAoIXJlbGF0aXZlKSB7XG4gICAgaWYgKGlkWzFdID49IDQwKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1NlY29uZCBvYmppZCBpZGVudGlmaWVyIE9PQicpO1xuICAgIGlkLnNwbGljZSgwLCAyLCBpZFswXSAqIDQwICsgaWRbMV0pO1xuICB9XG5cbiAgLy8gQ291bnQgbnVtYmVyIG9mIG9jdGV0c1xuICB2YXIgc2l6ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBmb3IgKHNpemUrKzsgaWRlbnQgPj0gMHg4MDsgaWRlbnQgPj49IDcpXG4gICAgICBzaXplKys7XG4gIH1cblxuICB2YXIgb2JqaWQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICB2YXIgb2Zmc2V0ID0gb2JqaWQubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgaSA9IGlkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgb2JqaWRbb2Zmc2V0LS1dID0gaWRlbnQgJiAweDdmO1xuICAgIHdoaWxlICgoaWRlbnQgPj49IDcpID4gMClcbiAgICAgIG9iamlkW29mZnNldC0tXSA9IDB4ODAgfCAoaWRlbnQgJiAweDdmKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG9iamlkKTtcbn07XG5cbmZ1bmN0aW9uIHR3byhudW0pIHtcbiAgaWYgKG51bSA8IDEwKVxuICAgIHJldHVybiAnMCcgKyBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gbnVtO1xufVxuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlVGltZSA9IGZ1bmN0aW9uIGVuY29kZVRpbWUodGltZSwgdGFnKSB7XG4gIHZhciBzdHI7XG4gIHZhciBkYXRlID0gbmV3IERhdGUodGltZSk7XG5cbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpICUgMTAwKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKHN0ciwgJ29jdHN0cicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU51bGwgPSBmdW5jdGlvbiBlbmNvZGVOdWxsKCkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcignJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1N0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShudW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignVmFsdWVzIG1hcCBkb2VzblxcJ3QgY29udGFpbjogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShudW0pKTtcbiAgICB9XG4gICAgbnVtID0gdmFsdWVzW251bV07XG4gIH1cblxuICAvLyBCaWdudW0sIGFzc3VtZSBiaWcgZW5kaWFuXG4gIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgbnVtQXJyYXkgPSBudW0udG9BcnJheSgpO1xuICAgIGlmICghbnVtLnNpZ24gJiYgbnVtQXJyYXlbMF0gJiAweDgwKSB7XG4gICAgICBudW1BcnJheS51bnNoaWZ0KDApO1xuICAgIH1cbiAgICBudW0gPSBuZXcgQnVmZmVyKG51bUFycmF5KTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBzaXplID0gbnVtLmxlbmd0aDtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIHNpemUrKztcblxuICAgIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICAgIG51bS5jb3B5KG91dCk7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBvdXRbMF0gPSAwXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob3V0KTtcbiAgfVxuXG4gIGlmIChudW0gPCAweDgwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG51bSk7XG5cbiAgaWYgKG51bSA8IDB4MTAwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFswLCBudW1dKTtcblxuICB2YXIgc2l6ZSA9IDE7XG4gIGZvciAodmFyIGkgPSBudW07IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgc2l6ZSsrO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIGZvciAodmFyIGkgPSBvdXQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBvdXRbaV0gPSBudW0gJiAweGZmO1xuICAgIG51bSA+Pj0gODtcbiAgfVxuICBpZihvdXRbMF0gJiAweDgwKSB7XG4gICAgb3V0LnVuc2hpZnQoMCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihuZXcgQnVmZmVyKG91dCkpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUJvb2wgPSBmdW5jdGlvbiBlbmNvZGVCb29sKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHZhbHVlID8gMHhmZiA6IDApO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RW5jb2RlcignZGVyJykudHJlZTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwRGVmYXVsdCA9IGZ1bmN0aW9uIHNraXBEZWZhdWx0KGRhdGFCdWZmZXIsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgaTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkYXRhID0gZGF0YUJ1ZmZlci5qb2luKCk7XG4gIGlmIChzdGF0ZS5kZWZhdWx0QnVmZmVyID09PSB1bmRlZmluZWQpXG4gICAgc3RhdGUuZGVmYXVsdEJ1ZmZlciA9IHRoaXMuX2VuY29kZVZhbHVlKHN0YXRlWydkZWZhdWx0J10sIHJlcG9ydGVyLCBwYXJlbnQpLmpvaW4oKTtcblxuICBpZiAoZGF0YS5sZW5ndGggIT09IHN0YXRlLmRlZmF1bHRCdWZmZXIubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspXG4gICAgaWYgKGRhdGFbaV0gIT09IHN0YXRlLmRlZmF1bHRCdWZmZXJbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHJlcG9ydGVyKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJylcbiAgICB0YWcgPSAnc2VxJztcbiAgZWxzZSBpZiAodGFnID09PSAnc2V0b2YnKVxuICAgIHRhZyA9ICdzZXQnO1xuXG4gIGlmIChkZXIudGFnQnlOYW1lLmhhc093blByb3BlcnR5KHRhZykpXG4gICAgcmVzID0gZGVyLnRhZ0J5TmFtZVt0YWddO1xuICBlbHNlIGlmICh0eXBlb2YgdGFnID09PSAnbnVtYmVyJyAmJiAodGFnIHwgMCkgPT09IHRhZylcbiAgICByZXMgPSB0YWc7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vua25vd24gdGFnOiAnICsgdGFnKTtcblxuICBpZiAocmVzID49IDB4MWYpXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdNdWx0aS1vY3RldCB0YWcgZW5jb2RpbmcgdW5zdXBwb3J0ZWQnKTtcblxuICBpZiAoIXByaW1pdGl2ZSlcbiAgICByZXMgfD0gMHgyMDtcblxuICByZXMgfD0gKGRlci50YWdDbGFzc0J5TmFtZVtjbHMgfHwgJ3VuaXZlcnNhbCddIDw8IDYpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCJ2YXIgZW5jb2RlcnMgPSBleHBvcnRzO1xuXG5lbmNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZW5jb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBERVJFbmNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRW5jb2RlcihlbnRpdHkpIHtcbiAgREVSRW5jb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRW5jb2RlciwgREVSRW5jb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTUVuY29kZXI7XG5cblBFTUVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBidWYgPSBERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCBkYXRhKTtcblxuICB2YXIgcCA9IGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG4gIHZhciBvdXQgPSBbICctLS0tLUJFR0lOICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyBdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpICs9IDY0KVxuICAgIG91dC5wdXNoKHAuc2xpY2UoaSwgaSArIDY0KSk7XG4gIG91dC5wdXNoKCctLS0tLUVORCAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScpO1xuICByZXR1cm4gb3V0LmpvaW4oJ1xcbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi9pbmNyMzInKVxuXG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIG91dCsrXG5cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGNhbGNJdiAoc2VsZiwgaXYsIGNrKSB7XG4gIGlmIChpdi5sZW5ndGggPT09IDEyKSB7XG4gICAgc2VsZi5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDFdKV0pXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMl0pXSlcbiAgfVxuICB2YXIgZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIHRvUGFkID0gbGVuICUgMTZcbiAgZ2hhc2gudXBkYXRlKGl2KVxuICBpZiAodG9QYWQpIHtcbiAgICB0b1BhZCA9IDE2IC0gdG9QYWRcbiAgICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKHRvUGFkLCAwKSlcbiAgfVxuICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKDgsIDApKVxuICB2YXIgaXZCaXRzID0gbGVuICogOFxuICB2YXIgdGFpbCA9IEJ1ZmZlci5hbGxvYyg4KVxuICB0YWlsLndyaXRlVUludEJFKGl2Qml0cywgMCwgOClcbiAgZ2hhc2gudXBkYXRlKHRhaWwpXG4gIHNlbGYuX2ZpbklEID0gZ2hhc2guc3RhdGVcbiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKHNlbGYuX2ZpbklEKVxuICBpbmNyMzIob3V0KVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB2YXIgaCA9IEJ1ZmZlci5hbGxvYyg0LCAwKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdmFyIGNrID0gdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSChjaylcbiAgaXYgPSBjYWxjSXYodGhpcywgaXYsIGNrKVxuXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICB0aGlzLl9tb2RlID0gbW9kZVxuXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBCdWZmZXIuYWxsb2MocnVtcCwgMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCAmJiB4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCB8fCAhQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0KSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKHRoaXMuX2NhbGxlZCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG52YXIgZGVjaXBoZXJzID0gcmVxdWlyZSgnLi9kZWNyeXB0ZXInKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2Rlcy9saXN0Lmpzb24nKVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHJldHVyblxuXG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH1cblxuICByZXR1cm4gbmV3IERlY2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIiwidmFyIE1PREVTID0gcmVxdWlyZSgnLi9tb2RlcycpXG52YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXIgKG1vZGUsIGtleSwgaXYpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jYWNoZSA9IG5ldyBTcGxpdHRlcigpXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NhY2hlLmFkZChkYXRhKVxuICB2YXIgY2h1bmtcbiAgdmFyIHRoaW5nXG4gIHZhciBvdXQgPSBbXVxuXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQoKSkpIHtcbiAgICB0aGluZyA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICBvdXQucHVzaCh0aGluZylcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxudmFyIFBBRERJTkcgPSBCdWZmZXIuYWxsb2MoMTYsIDB4MTApXG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIGNodW5rID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgcmV0dXJuIGNodW5rXG4gIH1cblxuICBpZiAoIWNodW5rLmVxdWFscyhQQURESU5HKSkge1xuICAgIHRoaXMuX2NpcGhlci5zY3J1YigpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNSkge1xuICAgIHZhciBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHJldHVybiBvdXRcbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW4gPSAxNiAtIHRoaXMuY2FjaGUubGVuZ3RoXG4gIHZhciBwYWRCdWZmID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcblxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWRCdWZmLndyaXRlVUludDgobGVuLCBpKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIHBhZEJ1ZmZdKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIHBhc3N3b3JkLCBpdikge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gJ3N0cmluZycpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQpXG4gIGlmIChwYXNzd29yZC5sZW5ndGggIT09IGNvbmZpZy5rZXkgLyA4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGtleSBsZW5ndGggJyArIHBhc3N3b3JkLmxlbmd0aClcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAoY29uZmlnLnR5cGUgPT09ICdzdHJlYW0nKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJlYW1DaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxuICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSAnYXV0aCcpIHtcbiAgICByZXR1cm4gbmV3IEF1dGhDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxuICB9XG5cbiAgcmV0dXJuIG5ldyBDaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5IChvdXQpIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdID4+PiAwLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0gPj4+IDAsIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSA+Pj4gMCwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdID4+PiAwLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSAoaSAlIDgpKSkpICE9PSAwXG4gICAgaWYgKHhpKSB7XG4gICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaVxuICAgICAgWmlbMF0gXj0gVmlbMF1cbiAgICAgIFppWzFdIF49IFZpWzFdXG4gICAgICBaaVsyXSBePSBWaVsyXVxuICAgICAgWmlbM10gXj0gVmlbM11cbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JWaSA9IChWaVszXSAmIDEpICE9PSAwXG5cbiAgICAvLyBWX2krMSA9IFZfaSA+PiAxXG4gICAgZm9yIChqID0gMzsgaiA+IDA7IGotLSkge1xuICAgICAgVmlbal0gPSAoVmlbal0gPj4+IDEpIHwgKChWaVtqIC0gMV0gJiAxKSA8PCAzMSlcbiAgICB9XG4gICAgVmlbMF0gPSBWaVswXSA+Pj4gMVxuXG4gICAgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUlxuICAgIGlmIChsc2JWaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuXG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5cbkdIQVNILnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIChhYmwsIGJsKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuZ2hhc2goQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgWkVST0VTXSwgMTYpKVxuICB9XG5cbiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSlcbiAgcmV0dXJuIHRoaXMuc3RhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuIiwiZnVuY3Rpb24gaW5jcjMyIChpdikge1xuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciBpdGVtXG4gIHdoaWxlIChsZW4tLSkge1xuICAgIGl0ZW0gPSBpdi5yZWFkVUludDgobGVuKVxuICAgIGlmIChpdGVtID09PSAyNTUpIHtcbiAgICAgIGl2LndyaXRlVUludDgoMCwgbGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtKytcbiAgICAgIGl2LndyaXRlVUludDgoaXRlbSwgbGVuKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gaW5jcjMyXG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgZGF0YSA9IHhvcihibG9jaywgc2VsZi5fcHJldilcblxuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhkYXRhKVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIHBhZCA9IHNlbGYuX3ByZXZcblxuICBzZWxmLl9wcmV2ID0gYmxvY2tcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG5cbiAgcmV0dXJuIHhvcihvdXQsIHBhZClcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnVmZmVyLmxlbmd0aClcbiAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCBCdWZmZXIuZnJvbShbdmFsdWVdKV0pXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGJ1ZmZlcltpXSA8PCAxIHwgYnVmZmVyW2kgKyAxXSA+PiAoNylcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICB2YXIgb3V0ID0gcGFkWzBdIF4gYnl0ZVBhcmFtXG5cbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIHNlbGYuX3ByZXYuc2xpY2UoMSksXG4gICAgQnVmZmVyLmZyb20oW2RlY3J5cHQgPyBieXRlUGFyYW0gOiBvdXRdKVxuICBdKVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuLi9pbmNyMzInKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgYmxvY2tTaXplID0gMTZcbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB2YXIgY2h1bmtOdW0gPSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKVxuICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9jYWNoZSxcbiAgICBCdWZmZXIuYWxsb2NVbnNhZmUoY2h1bmtOdW0gKiBibG9ja1NpemUpXG4gIF0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOdW07IGkrKykge1xuICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKVxuICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemVcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFswXSwgb2Zmc2V0ICsgMClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsxXSwgb2Zmc2V0ICsgNClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFszXSwgb2Zmc2V0ICsgMTIpXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsImV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhibG9jaylcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwidmFyIG1vZGVNb2R1bGVzID0ge1xuICBFQ0I6IHJlcXVpcmUoJy4vZWNiJyksXG4gIENCQzogcmVxdWlyZSgnLi9jYmMnKSxcbiAgQ0ZCOiByZXF1aXJlKCcuL2NmYicpLFxuICBDRkI4OiByZXF1aXJlKCcuL2NmYjgnKSxcbiAgQ0ZCMTogcmVxdWlyZSgnLi9jZmIxJyksXG4gIE9GQjogcmVxdWlyZSgnLi9vZmInKSxcbiAgQ1RSOiByZXF1aXJlKCcuL2N0cicpLFxuICBHQ006IHJlcXVpcmUoJy4vY3RyJylcbn1cblxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9saXN0Lmpzb24nKVxuXG5mb3IgKHZhciBrZXkgaW4gbW9kZXMpIHtcbiAgbW9kZXNba2V5XS5tb2R1bGUgPSBtb2RlTW9kdWxlc1ttb2Rlc1trZXldLm1vZGVdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kZXNcbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgREVTID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1kZXMnKVxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL2Jyb3dzZXInKVxudmFyIGFlc01vZGVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMvbW9kZXMnKVxudmFyIGRlc01vZGVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1kZXMvbW9kZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuXG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBhZXMuY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBuZXcgREVTKHsga2V5OiBrZXksIGl2OiBpdiwgbW9kZTogc3VpdGUgfSlcblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7IGtleToga2V5LCBpdjogaXYsIG1vZGU6IHN1aXRlLCBkZWNyeXB0OiB0cnVlIH0pXG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbn1cblxuZnVuY3Rpb24gZ2V0Q2lwaGVycyAoKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkZXNNb2RlcykuY29uY2F0KGFlcy5nZXRDaXBoZXJzKCkpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iLCJleHBvcnRzWydkZXMtZWNiJ10gPSB7XG4gIGtleTogOCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1jYmMnXSA9IGV4cG9ydHMuZGVzID0ge1xuICBrZXk6IDgsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMy1jYmMnXSA9IGV4cG9ydHMuZGVzMyA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzJ10gPSB7XG4gIGtleTogMjQsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtZWRlLWNiYyddID0ge1xuICBrZXk6IDE2LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZSddID0ge1xuICBrZXk6IDE2LFxuICBpdjogMFxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS51bW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoZmFsc2UsIGxlbikpO1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIudW1vZChwcml2LnByaW1lMSkgfHwgIXIudW1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIvYWxnb3JpdGhtcy5qc29uJylcbiIsInZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vc2lnbicpXG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKVxuXG52YXIgYWxnb3JpdGhtcyA9IHJlcXVpcmUoJy4vYWxnb3JpdGhtcy5qc29uJylcbk9iamVjdC5rZXlzKGFsZ29yaXRobXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBhbGdvcml0aG1zW2tleV0uaWQgPSBuZXcgQnVmZmVyKGFsZ29yaXRobXNba2V5XS5pZCwgJ2hleCcpXG4gIGFsZ29yaXRobXNba2V5LnRvTG93ZXJDYXNlKCldID0gYWxnb3JpdGhtc1trZXldXG59KVxuXG5mdW5jdGlvbiBTaWduIChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaFR5cGUgPSBkYXRhLmhhc2hcbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhTaWduLCBzdHJlYW0uV3JpdGFibGUpXG5cblNpZ24ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuU2lnbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblNpZ24ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduTWV0aG9kIChrZXksIGVuYykge1xuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgc2lnID0gc2lnbihoYXNoLCBrZXksIHRoaXMuX2hhc2hUeXBlLCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxuXG4gIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZ1xufVxuXG5mdW5jdGlvbiBWZXJpZnkgKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3JpdGhtc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFZlcmlmeSwgc3RyZWFtLldyaXRhYmxlKVxuXG5WZXJpZnkucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2QgKGtleSwgc2lnLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnKSBzaWcgPSBuZXcgQnVmZmVyKHNpZywgZW5jKVxuXG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHJldHVybiB2ZXJpZnkoc2lnLCBoYXNoLCBrZXksIHRoaXMuX3NpZ25UeXBlLCB0aGlzLl90YWcpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpZ24gKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFNpZ24oYWxnb3JpdGhtKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVWZXJpZnkgKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFZlcmlmeShhbGdvcml0aG0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTaWduOiBjcmVhdGVTaWduLFxuICBWZXJpZnk6IGNyZWF0ZVZlcmlmeSxcbiAgY3JlYXRlU2lnbjogY3JlYXRlU2lnbixcbiAgY3JlYXRlVmVyaWZ5OiBjcmVhdGVWZXJpZnlcbn1cbiIsIi8vIG11Y2ggb2YgdGhpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9yc2EuanNcbnZhciBjcmVhdGVIbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWNcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJylcblxuZnVuY3Rpb24gc2lnbiAoaGFzaCwga2V5LCBoYXNoVHlwZSwgc2lnblR5cGUsIHRhZykge1xuICB2YXIgcHJpdiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwcml2LmN1cnZlKSB7XG4gICAgLy8gcnNhIGtleXMgY2FuIGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbFxuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjU2lnbihoYXNoLCBwcml2KVxuICB9IGVsc2UgaWYgKHByaXYudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBkc2FTaWduKGhhc2gsIHByaXYsIGhhc2hUeXBlKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAwLCAxIF1cbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDEgPCBsZW4pIHBhZC5wdXNoKDB4ZmYpXG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSBwYWQucHVzaChoYXNoW2ldKVxuXG4gIHZhciBvdXQgPSBjcnQocGFkLCBwcml2KVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGVjU2lnbiAoaGFzaCwgcHJpdikge1xuICB2YXIgY3VydmVJZCA9IGN1cnZlc1twcml2LmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHByaXYuY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIga2V5ID0gY3VydmUua2V5RnJvbVByaXZhdGUocHJpdi5wcml2YXRlS2V5KVxuICB2YXIgb3V0ID0ga2V5LnNpZ24oaGFzaClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcihvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmIChzLmNtcG4oMCkgPT09IDApIHtcbiAgICAgIHMgPSBmYWxzZVxuICAgICAgciA9IG5ldyBCTigwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9ERVIociwgcylcbn1cblxuZnVuY3Rpb24gdG9ERVIgKHIsIHMpIHtcbiAgciA9IHIudG9BcnJheSgpXG4gIHMgPSBzLnRvQXJyYXkoKVxuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKSByID0gWyAwIF0uY29uY2F0KHIpXG4gIGlmIChzWzBdICYgMHg4MCkgcyA9IFsgMCBdLmNvbmNhdChzKVxuXG4gIHZhciB0b3RhbCA9IHIubGVuZ3RoICsgcy5sZW5ndGggKyA0XG4gIHZhciByZXMgPSBbIDB4MzAsIHRvdGFsLCAweDAyLCByLmxlbmd0aCBdXG4gIHJlcyA9IHJlcy5jb25jYXQociwgWyAweDAyLCBzLmxlbmd0aCBdLCBzKVxuICByZXR1cm4gbmV3IEJ1ZmZlcihyZXMpXG59XG5cbmZ1bmN0aW9uIGdldEtleSAoeCwgcSwgaGFzaCwgYWxnbykge1xuICB4ID0gbmV3IEJ1ZmZlcih4LnRvQXJyYXkoKSlcbiAgaWYgKHgubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0geC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIHggPSBCdWZmZXIuY29uY2F0KFsgemVyb3MsIHggXSlcbiAgfVxuICB2YXIgaGxlbiA9IGhhc2gubGVuZ3RoXG4gIHZhciBoYml0cyA9IGJpdHMyb2N0ZXRzKGhhc2gsIHEpXG4gIHZhciB2ID0gbmV3IEJ1ZmZlcihobGVuKVxuICB2LmZpbGwoMSlcbiAgdmFyIGsgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIGsuZmlsbCgwKVxuICBrID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikudXBkYXRlKG5ldyBCdWZmZXIoWyAwIF0pKS51cGRhdGUoeCkudXBkYXRlKGhiaXRzKS5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikuZGlnZXN0KClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMSBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIHJldHVybiB7IGs6IGssIHY6IHYgfVxufVxuXG5mdW5jdGlvbiBiaXRzMmludCAob2JpdHMsIHEpIHtcbiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpXG4gIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpXG4gIGlmIChzaGlmdCA+IDApIGJpdHMuaXNocm4oc2hpZnQpXG4gIHJldHVybiBiaXRzXG59XG5cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzIChiaXRzLCBxKSB7XG4gIGJpdHMgPSBiaXRzMmludChiaXRzLCBxKVxuICBiaXRzID0gYml0cy5tb2QocSlcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoYml0cy50b0FycmF5KCkpXG4gIGlmIChvdXQubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0gb3V0Lmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCBvdXQgXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0XG4gIHZhciBrXG5cbiAgZG8ge1xuICAgIHQgPSBuZXcgQnVmZmVyKDApXG5cbiAgICB3aGlsZSAodC5sZW5ndGggKiA4IDwgcS5iaXRMZW5ndGgoKSkge1xuICAgICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLmRpZ2VzdCgpXG4gICAgICB0ID0gQnVmZmVyLmNvbmNhdChbIHQsIGt2LnYgXSlcbiAgICB9XG5cbiAgICBrID0gYml0czJpbnQodCwgcSlcbiAgICBrdi5rID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikudXBkYXRlKG5ldyBCdWZmZXIoWyAwIF0pKS5kaWdlc3QoKVxuICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICB9IHdoaWxlIChrLmNtcChxKSAhPT0gLTEpXG5cbiAgcmV0dXJuIGtcbn1cblxuZnVuY3Rpb24gbWFrZVIgKGcsIGssIHAsIHEpIHtcbiAgcmV0dXJuIGcudG9SZWQoQk4ubW9udChwKSkucmVkUG93KGspLmZyb21SZWQoKS5tb2QocSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaWduXG5tb2R1bGUuZXhwb3J0cy5nZXRLZXkgPSBnZXRLZXlcbm1vZHVsZS5leHBvcnRzLm1ha2VLZXkgPSBtYWtlS2V5XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHZlcmlmeSAoc2lnLCBoYXNoLCBrZXksIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2UgaWYgKHB1Yi50eXBlID09PSAnZHNhJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gIH1cbiAgaGFzaCA9IEJ1ZmZlci5jb25jYXQoW3RhZywgaGFzaF0pXG4gIHZhciBsZW4gPSBwdWIubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMSBdXG4gIHZhciBwYWROdW0gPSAwXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAyIDwgbGVuKSB7XG4gICAgcGFkLnB1c2goMHhmZilcbiAgICBwYWROdW0rK1xuICB9XG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSB7XG4gICAgcGFkLnB1c2goaGFzaFtpXSlcbiAgfVxuICBwYWQgPSBuZXcgQnVmZmVyKHBhZClcbiAgdmFyIHJlZCA9IEJOLm1vbnQocHViLm1vZHVsdXMpXG4gIHNpZyA9IG5ldyBCTihzaWcpLnRvUmVkKHJlZClcblxuICBzaWcgPSBzaWcucmVkUG93KG5ldyBCTihwdWIucHVibGljRXhwb25lbnQpKVxuICBzaWcgPSBuZXcgQnVmZmVyKHNpZy5mcm9tUmVkKCkudG9BcnJheSgpKVxuICB2YXIgb3V0ID0gcGFkTnVtIDwgOCA/IDEgOiAwXG4gIGxlbiA9IE1hdGgubWluKHNpZy5sZW5ndGgsIHBhZC5sZW5ndGgpXG4gIGlmIChzaWcubGVuZ3RoICE9PSBwYWQubGVuZ3RoKSBvdXQgPSAxXG5cbiAgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIG91dCB8PSBzaWdbaV0gXiBwYWRbaV1cbiAgcmV0dXJuIG91dCA9PT0gMFxufVxuXG5mdW5jdGlvbiBlY1ZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHB1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBwdWJrZXkgPSBwdWIuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleS5kYXRhXG5cbiAgcmV0dXJuIGN1cnZlLnZlcmlmeShoYXNoLCBzaWcsIHB1YmtleSlcbn1cblxuZnVuY3Rpb24gZHNhVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgcCA9IHB1Yi5kYXRhLnBcbiAgdmFyIHEgPSBwdWIuZGF0YS5xXG4gIHZhciBnID0gcHViLmRhdGEuZ1xuICB2YXIgeSA9IHB1Yi5kYXRhLnB1Yl9rZXlcbiAgdmFyIHVucGFja2VkID0gcGFyc2VLZXlzLnNpZ25hdHVyZS5kZWNvZGUoc2lnLCAnZGVyJylcbiAgdmFyIHMgPSB1bnBhY2tlZC5zXG4gIHZhciByID0gdW5wYWNrZWQuclxuICBjaGVja1ZhbHVlKHMsIHEpXG4gIGNoZWNrVmFsdWUociwgcSlcbiAgdmFyIG1vbnRwID0gQk4ubW9udChwKVxuICB2YXIgdyA9IHMuaW52bShxKVxuICB2YXIgdiA9IGcudG9SZWQobW9udHApXG4gICAgLnJlZFBvdyhuZXcgQk4oaGFzaCkubXVsKHcpLm1vZChxKSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLm11bCh5LnRvUmVkKG1vbnRwKS5yZWRQb3coci5tdWwodykubW9kKHEpKS5mcm9tUmVkKCkpXG4gICAgLm1vZChwKVxuICAgIC5tb2QocSlcbiAgcmV0dXJuIHYuY21wKHIpID09PSAwXG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsdWUgKGIsIHEpIHtcbiAgaWYgKGIuY21wbigwKSA8PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbiAgaWYgKGIuY21wKHEpID49IHEpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcmlmeVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgaWYgKHRoaXMuX2ZpbmFsKSB7XG4gICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWxcbiAgICB0aGlzLl9maW5hbCA9IG51bGxcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYylcbiAgfVxuXG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSByZXR1cm4gdGhpc1xuXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG5cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9XG5cbiAgZG9uZShlcnIpXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMClcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbikge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cblxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuXG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCJ2YXIgZWxsaXB0aWMgPSByZXF1aXJlKCdlbGxpcHRpYycpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRUNESCAoY3VydmUpIHtcbiAgcmV0dXJuIG5ldyBFQ0RIKGN1cnZlKVxufVxuXG52YXIgYWxpYXNlcyA9IHtcbiAgc2VjcDI1NmsxOiB7XG4gICAgbmFtZTogJ3NlY3AyNTZrMScsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgc2VjcDIyNHIxOiB7XG4gICAgbmFtZTogJ3AyMjQnLFxuICAgIGJ5dGVMZW5ndGg6IDI4XG4gIH0sXG4gIHByaW1lMjU2djE6IHtcbiAgICBuYW1lOiAncDI1NicsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgcHJpbWUxOTJ2MToge1xuICAgIG5hbWU6ICdwMTkyJyxcbiAgICBieXRlTGVuZ3RoOiAyNFxuICB9LFxuICBlZDI1NTE5OiB7XG4gICAgbmFtZTogJ2VkMjU1MTknLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHNlY3AzODRyMToge1xuICAgIG5hbWU6ICdwMzg0JyxcbiAgICBieXRlTGVuZ3RoOiA0OFxuICB9LFxuICBzZWNwNTIxcjE6IHtcbiAgICBuYW1lOiAncDUyMScsXG4gICAgYnl0ZUxlbmd0aDogNjZcbiAgfVxufVxuXG5hbGlhc2VzLnAyMjQgPSBhbGlhc2VzLnNlY3AyMjRyMVxuYWxpYXNlcy5wMjU2ID0gYWxpYXNlcy5zZWNwMjU2cjEgPSBhbGlhc2VzLnByaW1lMjU2djFcbmFsaWFzZXMucDE5MiA9IGFsaWFzZXMuc2VjcDE5MnIxID0gYWxpYXNlcy5wcmltZTE5MnYxXG5hbGlhc2VzLnAzODQgPSBhbGlhc2VzLnNlY3AzODRyMVxuYWxpYXNlcy5wNTIxID0gYWxpYXNlcy5zZWNwNTIxcjFcblxuZnVuY3Rpb24gRUNESCAoY3VydmUpIHtcbiAgdGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXVxuICBpZiAoIXRoaXMuY3VydmVUeXBlKSB7XG4gICAgdGhpcy5jdXJ2ZVR5cGUgPSB7XG4gICAgICBuYW1lOiBjdXJ2ZVxuICAgIH1cbiAgfVxuICB0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmVjKHRoaXMuY3VydmVUeXBlLm5hbWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB0aGlzLmtleXMgPSB2b2lkIDBcbn1cblxuRUNESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG4gIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpXG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleShlbmMsIGZvcm1hdClcbn1cblxuRUNESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlciwgaW5lbmMsIGVuYykge1xuICBpbmVuYyA9IGluZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvdGhlcikpIHtcbiAgICBvdGhlciA9IG5ldyBCdWZmZXIob3RoZXIsIGluZW5jKVxuICB9XG4gIHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0UHVibGljKClcbiAgdmFyIG91dCA9IG90aGVyUHViLm11bCh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpKS5nZXRYKClcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKG91dCwgZW5jLCB0aGlzLmN1cnZlVHlwZS5ieXRlTGVuZ3RoKVxufVxuXG5FQ0RILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcbiAgdmFyIGtleSA9IHRoaXMua2V5cy5nZXRQdWJsaWMoZm9ybWF0ID09PSAnY29tcHJlc3NlZCcsIHRydWUpXG4gIGlmIChmb3JtYXQgPT09ICdoeWJyaWQnKSB7XG4gICAgaWYgKGtleVtrZXkubGVuZ3RoIC0gMV0gJSAyKSB7XG4gICAgICBrZXlbMF0gPSA3XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleVswXSA9IDZcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKGtleSwgZW5jKVxufVxuXG5FQ0RILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5rZXlzLmdldFByaXZhdGUoKSwgZW5jKVxufVxuXG5FQ0RILnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG4gICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYylcbiAgfVxuICB0aGlzLmtleXMuX2ltcG9ydFB1YmxpYyhwdWIpXG4gIHJldHVybiB0aGlzXG59XG5cbkVDREgucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpXG4gIH1cblxuICB2YXIgX3ByaXYgPSBuZXcgQk4ocHJpdilcbiAgX3ByaXYgPSBfcHJpdi50b1N0cmluZygxNilcbiAgdGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKClcbiAgdGhpcy5rZXlzLl9pbXBvcnRQcml2YXRlKF9wcml2KVxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZSAoYm4sIGVuYywgbGVuKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShibikpIHtcbiAgICBibiA9IGJuLnRvQXJyYXkoKVxuICB9XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuKVxuICBpZiAobGVuICYmIGJ1Zi5sZW5ndGggPCBsZW4pIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKGxlbiAtIGJ1Zi5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCBidWZdKVxuICB9XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxufVxuXG5pbmhlcml0cyhIYXNoLCBCYXNlKVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGFzaC5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2ggKGFsZykge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG5ldyBNRDUoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gbmV3IFJJUEVNRDE2MCgpXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIiwidmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICByZXR1cm4gbmV3IE1ENSgpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBMZWdhY3kgPSByZXF1aXJlKCcuL2xlZ2FjeScpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcblxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAgdmFyIGhhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgICBrZXkgPSBoYXNoLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cbiAgdGhpcy5faGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICB0aGlzLl9oYXNoLnVwZGF0ZShpcGFkKVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIGhhc2ggPSB0aGlzLl9hbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKHRoaXMuX2FsZylcbiAgcmV0dXJuIGhhc2gudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhtYWMgKGFsZywga2V5KSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHtcbiAgICByZXR1cm4gbmV3IEhtYWMoJ3JtZDE2MCcsIGtleSlcbiAgfVxuICBpZiAoYWxnID09PSAnbWQ1Jykge1xuICAgIHJldHVybiBuZXcgTGVnYWN5KG1kNSwga2V5KVxuICB9XG4gIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIGJsb2Nrc2l6ZSA9IDY0XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gYWxnKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBbaXBhZF1cbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gucHVzaChkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQodGhpcy5faGFzaCkpXG4gIHJldHVybiB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdChbdGhpcy5fb3BhZCwgaF0pKVxufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjXG4iLCJ2YXIgX19yb290X18gPSAoZnVuY3Rpb24gKHJvb3QpIHtcbmZ1bmN0aW9uIEYoKSB7IHRoaXMuZmV0Y2ggPSBmYWxzZTsgfVxuRi5wcm90b3R5cGUgPSByb290O1xucmV0dXJuIG5ldyBGKCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG4oZnVuY3Rpb24oc2VsZikge1xuXG4oZnVuY3Rpb24oc2VsZikge1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9O1xuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXTtcblxuICAgIHZhciBpc0RhdGFWaWV3ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbiAgICB9O1xuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge307XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdO1xuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSsnLCcrdmFsdWUgOiB2YWx1ZTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKTsgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkgeyBpdGVtcy5wdXNoKHZhbHVlKTsgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKTsgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYik7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKTtcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHk7XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcik7XG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKTtcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKTtcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXTtcblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keTtcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmw7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHM7XG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kO1xuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZTtcbiAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0O1xuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0JztcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKTtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGw7XG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGw7XG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpO1xuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgeyBib2R5OiB0aGlzLl9ib2R5SW5pdCB9KVxuICB9O1xuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpO1xuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gICAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJyk7XG4gICAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpO1xuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpO1xuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0JztcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1cztcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJztcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJyc7XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpO1xuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSk7XG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfTtcblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pO1xuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InO1xuICAgIHJldHVybiByZXNwb25zZVxuICB9O1xuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XTtcblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9O1xuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnM7XG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZTtcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KTtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfTtcbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKTtcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KTtcbiAgICB9KVxuICB9O1xuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcbn0pLmNhbGwoX19yb290X18sIHZvaWQoMCkpO1xudmFyIGZldGNoID0gX19yb290X18uZmV0Y2g7XG52YXIgUmVzcG9uc2UgPSBmZXRjaC5SZXNwb25zZSA9IF9fcm9vdF9fLlJlc3BvbnNlO1xudmFyIFJlcXVlc3QgPSBmZXRjaC5SZXF1ZXN0ID0gX19yb290X18uUmVxdWVzdDtcbnZhciBIZWFkZXJzID0gZmV0Y2guSGVhZGVycyA9IF9fcm9vdF9fLkhlYWRlcnM7XG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbm1vZHVsZS5leHBvcnRzID0gZmV0Y2g7XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMucm5nID0gZXhwb3J0cy5wc2V1ZG9SYW5kb21CeXRlcyA9IGV4cG9ydHMucHJuZyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGV4cG9ydHMuSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbmV4cG9ydHMuY3JlYXRlSG1hYyA9IGV4cG9ydHMuSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcblxudmFyIGFsZ29zID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduL2FsZ29zJylcbnZhciBhbGdvS2V5cyA9IE9iamVjdC5rZXlzKGFsZ29zKVxudmFyIGhhc2hlcyA9IFsnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInLCAnbWQ1JywgJ3JtZDE2MCddLmNvbmNhdChhbGdvS2V5cylcbmV4cG9ydHMuZ2V0SGFzaGVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGFzaGVzXG59XG5cbnZhciBwID0gcmVxdWlyZSgncGJrZGYyJylcbmV4cG9ydHMucGJrZGYyID0gcC5wYmtkZjJcbmV4cG9ydHMucGJrZGYyU3luYyA9IHAucGJrZGYyU3luY1xuXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1jaXBoZXInKVxuXG5leHBvcnRzLkNpcGhlciA9IGFlcy5DaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gYWVzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5DaXBoZXJpdiA9IGFlcy5DaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGFlcy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5EZWNpcGhlciA9IGFlcy5EZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGFlcy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5EZWNpcGhlcml2ID0gYWVzLkRlY2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGFlcy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmdldENpcGhlcnMgPSBhZXMuZ2V0Q2lwaGVyc1xuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGFlcy5saXN0Q2lwaGVyc1xuXG52YXIgZGggPSByZXF1aXJlKCdkaWZmaWUtaGVsbG1hbicpXG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZGguRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZGguZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZGguY3JlYXRlRGlmZmllSGVsbG1hblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gZGguRGlmZmllSGVsbG1hblxuXG52YXIgc2lnbiA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbicpXG5cbmV4cG9ydHMuY3JlYXRlU2lnbiA9IHNpZ24uY3JlYXRlU2lnblxuZXhwb3J0cy5TaWduID0gc2lnbi5TaWduXG5leHBvcnRzLmNyZWF0ZVZlcmlmeSA9IHNpZ24uY3JlYXRlVmVyaWZ5XG5leHBvcnRzLlZlcmlmeSA9IHNpZ24uVmVyaWZ5XG5cbmV4cG9ydHMuY3JlYXRlRUNESCA9IHJlcXVpcmUoJ2NyZWF0ZS1lY2RoJylcblxudmFyIHB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCdwdWJsaWMtZW5jcnlwdCcpXG5cbmV4cG9ydHMucHVibGljRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRW5jcnlwdFxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZUVuY3J5cHRcbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHVibGljRGVjcnlwdFxuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHB1YmxpY0VuY3J5cHQucHJpdmF0ZURlY3J5cHRcblxuLy8gdGhlIGxlYXN0IEkgY2FuIGRvIGlzIG1ha2UgZXJyb3IgbWVzc2FnZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBub2RlLmpzL2NyeXB0byBhcGkuXG4vLyA7W1xuLy8gICAnY3JlYXRlQ3JlZGVudGlhbHMnXG4vLyBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbi8vICAgZXhwb3J0c1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuLy8gICAgICAgJ3NvcnJ5LCAnICsgbmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4vLyAgICAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuLy8gICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbi8vICAgICBdLmpvaW4oJ1xcbicpKVxuLy8gICB9XG4vLyB9KVxuXG52YXIgcmYgPSByZXF1aXJlKCdyYW5kb21maWxsJylcblxuZXhwb3J0cy5yYW5kb21GaWxsID0gcmYucmFuZG9tRmlsbFxuZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJmLnJhbmRvbUZpbGxTeW5jXG5cbmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihbXG4gICAgJ3NvcnJ5LCBjcmVhdGVDcmVkZW50aWFscyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gIF0uam9pbignXFxuJykpXG59XG5cbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsXG4gICdESF9DSEVDS19QX05PVF9QUklNRSc6IDEsXG4gICdESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SJzogNCxcbiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1InOiA4LFxuICAnTlBOX0VOQUJMRUQnOiAxLFxuICAnQUxQTl9FTkFCTEVEJzogMSxcbiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSxcbiAgJ1JTQV9TU0xWMjNfUEFERElORyc6IDIsXG4gICdSU0FfTk9fUEFERElORyc6IDMsXG4gICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCxcbiAgJ1JTQV9YOTMxX1BBRERJTkcnOiA1LFxuICAnUlNBX1BLQ1MxX1BTU19QQURESU5HJzogNixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsXG4gICdQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCc6IDQsXG4gICdQT0lOVF9DT05WRVJTSU9OX0hZQlJJRCc6IDZcbn1cbiIsInZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4vbGliL2tleXMuanMnKTtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vbGliL2lzX2FyZ3VtZW50cy5qcycpO1xuXG52YXIgZGVlcEVxdWFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBEYXRlICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkIHx8IHR5cGVvZiBhY3R1YWwgIT0gJ29iamVjdCcgJiYgdHlwZW9mIGV4cGVjdGVkICE9ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcblxuICAvLyA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyICh4KSB7XG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuICB2YXIgaSwga2V5O1xuICBpZiAoaXNVbmRlZmluZWRPck51bGwoYSkgfHwgaXNVbmRlZmluZWRPck51bGwoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHJldHVybiBmYWxzZTtcbiAgLy9+fn5JJ3ZlIG1hbmFnZWQgdG8gYnJlYWsgT2JqZWN0LmtleXMgdGhyb3VnaCBzY3Jld3kgYXJndW1lbnRzIHBhc3NpbmcuXG4gIC8vICAgQ29udmVydGluZyB0byBhcnJheSBzb2x2ZXMgdGhlIHByb2JsZW0uXG4gIGlmIChpc0FyZ3VtZW50cyhhKSkge1xuICAgIGlmICghaXNBcmd1bWVudHMoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIG9wdHMpO1xuICB9XG4gIGlmIChpc0J1ZmZlcihhKSkge1xuICAgIGlmICghaXNCdWZmZXIoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0cnkge1xuICAgIHZhciBrYSA9IG9iamVjdEtleXMoYSksXG4gICAgICAgIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgfSBjYXRjaCAoZSkgey8vaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPSBrYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChrYVtpXSAhPSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGI7XG59XG4iLCJ2YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50cylcbn0pKCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPyBzdXBwb3J0ZWQgOiB1bnN1cHBvcnRlZDtcblxuZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XG5mdW5jdGlvbiBzdXBwb3J0ZWQob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbmV4cG9ydHMudW5zdXBwb3J0ZWQgPSB1bnN1cHBvcnRlZDtcbmZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG4gIHJldHVybiBvYmplY3QgJiZcbiAgICB0eXBlb2Ygb2JqZWN0ID09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnY2FsbGVlJykgJiZcbiAgICAhT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpIHx8XG4gICAgZmFsc2U7XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nXG4gID8gT2JqZWN0LmtleXMgOiBzaGltO1xuXG5leHBvcnRzLnNoaW0gPSBzaGltO1xuZnVuY3Rpb24gc2hpbSAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy51dGlscyA9IHJlcXVpcmUoJy4vZGVzL3V0aWxzJyk7XG5leHBvcnRzLkNpcGhlciA9IHJlcXVpcmUoJy4vZGVzL2NpcGhlcicpO1xuZXhwb3J0cy5ERVMgPSByZXF1aXJlKCcuL2Rlcy9kZXMnKTtcbmV4cG9ydHMuQ0JDID0gcmVxdWlyZSgnLi9kZXMvY2JjJyk7XG5leHBvcnRzLkVERSA9IHJlcXVpcmUoJy4vZGVzL2VkZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIHByb3RvID0ge307XG5cbmZ1bmN0aW9uIENCQ1N0YXRlKGl2KSB7XG4gIGFzc2VydC5lcXVhbChpdi5sZW5ndGgsIDgsICdJbnZhbGlkIElWIGxlbmd0aCcpO1xuXG4gIHRoaXMuaXYgPSBuZXcgQXJyYXkoOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdi5sZW5ndGg7IGkrKylcbiAgICB0aGlzLml2W2ldID0gaXZbaV07XG59XG5cbmZ1bmN0aW9uIGluc3RhbnRpYXRlKEJhc2UpIHtcbiAgZnVuY3Rpb24gQ0JDKG9wdGlvbnMpIHtcbiAgICBCYXNlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5fY2JjSW5pdCgpO1xuICB9XG4gIGluaGVyaXRzKENCQywgQmFzZSk7XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm90byk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIENCQy5wcm90b3R5cGVba2V5XSA9IHByb3RvW2tleV07XG4gIH1cblxuICBDQkMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IENCQyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gQ0JDO1xufVxuXG5leHBvcnRzLmluc3RhbnRpYXRlID0gaW5zdGFudGlhdGU7XG5cbnByb3RvLl9jYmNJbml0ID0gZnVuY3Rpb24gX2NiY0luaXQoKSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBDQkNTdGF0ZSh0aGlzLm9wdGlvbnMuaXYpO1xuICB0aGlzLl9jYmNTdGF0ZSA9IHN0YXRlO1xufTtcblxucHJvdG8uX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fY2JjU3RhdGU7XG4gIHZhciBzdXBlclByb3RvID0gdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcl8ucHJvdG90eXBlO1xuXG4gIHZhciBpdiA9IHN0YXRlLml2O1xuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSBePSBpbnBbaW5PZmYgKyBpXTtcblxuICAgIHN1cGVyUHJvdG8uX3VwZGF0ZS5jYWxsKHRoaXMsIGl2LCAwLCBvdXQsIG91dE9mZik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSA9IG91dFtvdXRPZmYgKyBpXTtcbiAgfSBlbHNlIHtcbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBvdXRbb3V0T2ZmICsgaV0gXj0gaXZbaV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSA9IGlucFtpbk9mZiArIGldO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgZGVzID0gcmVxdWlyZSgnLi4vZGVzJyk7XG52YXIgdXRpbHMgPSBkZXMudXRpbHM7XG52YXIgQ2lwaGVyID0gZGVzLkNpcGhlcjtcblxuZnVuY3Rpb24gREVTU3RhdGUoKSB7XG4gIHRoaXMudG1wID0gbmV3IEFycmF5KDIpO1xuICB0aGlzLmtleXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBERVMob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgREVTU3RhdGUoKTtcbiAgdGhpcy5fZGVzU3RhdGUgPSBzdGF0ZTtcblxuICB0aGlzLmRlcml2ZUtleXMoc3RhdGUsIG9wdGlvbnMua2V5KTtcbn1cbmluaGVyaXRzKERFUywgQ2lwaGVyKTtcbm1vZHVsZS5leHBvcnRzID0gREVTO1xuXG5ERVMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBERVMob3B0aW9ucyk7XG59O1xuXG52YXIgc2hpZnRUYWJsZSA9IFtcbiAgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMVxuXTtcblxuREVTLnByb3RvdHlwZS5kZXJpdmVLZXlzID0gZnVuY3Rpb24gZGVyaXZlS2V5cyhzdGF0ZSwga2V5KSB7XG4gIHN0YXRlLmtleXMgPSBuZXcgQXJyYXkoMTYgKiAyKTtcblxuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgdGhpcy5ibG9ja1NpemUsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIga0wgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCAwKTtcbiAgdmFyIGtSID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgNCk7XG5cbiAgdXRpbHMucGMxKGtMLCBrUiwgc3RhdGUudG1wLCAwKTtcbiAga0wgPSBzdGF0ZS50bXBbMF07XG4gIGtSID0gc3RhdGUudG1wWzFdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgc2hpZnQgPSBzaGlmdFRhYmxlW2kgPj4+IDFdO1xuICAgIGtMID0gdXRpbHMucjI4c2hsKGtMLCBzaGlmdCk7XG4gICAga1IgPSB1dGlscy5yMjhzaGwoa1IsIHNoaWZ0KTtcbiAgICB1dGlscy5wYzIoa0wsIGtSLCBzdGF0ZS5rZXlzLCBpKTtcbiAgfVxufTtcblxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9kZXNTdGF0ZTtcblxuICB2YXIgbCA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmKTtcbiAgdmFyIHIgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZiArIDQpO1xuXG4gIC8vIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMuaXAobCwgciwgc3RhdGUudG1wLCAwKTtcbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpXG4gICAgdGhpcy5fZW5jcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcbiAgZWxzZVxuICAgIHRoaXMuX2RlY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgbCwgb3V0T2ZmKTtcbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIHIsIG91dE9mZiArIDQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICB2YXIgdmFsdWUgPSBidWZmZXIubGVuZ3RoIC0gb2ZmO1xuICBmb3IgKHZhciBpID0gb2ZmOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGJ1ZmZlcltpXSA9IHZhbHVlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuREVTLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHZhciBwYWQgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdO1xuICBmb3IgKHZhciBpID0gYnVmZmVyLmxlbmd0aCAtIHBhZDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBhc3NlcnQuZXF1YWwoYnVmZmVyW2ldLCBwYWQpO1xuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoMCwgYnVmZmVyLmxlbmd0aCAtIHBhZCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9lbmNyeXB0ID0gZnVuY3Rpb24gX2VuY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IGxTdGFydDtcbiAgdmFyIHIgPSByU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQociwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IHI7XG4gICAgciA9IChsIF4gZikgPj4+IDA7XG4gICAgbCA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKHIsIGwsIG91dCwgb2ZmKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiBfZGVjcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gclN0YXJ0O1xuICB2YXIgciA9IGxTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSBzdGF0ZS5rZXlzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKGwsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSBsO1xuICAgIGwgPSAociBeIGYpID4+PiAwO1xuICAgIHIgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChsLCByLCBvdXQsIG9mZik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGRlcyA9IHJlcXVpcmUoJy4uL2RlcycpO1xudmFyIENpcGhlciA9IGRlcy5DaXBoZXI7XG52YXIgREVTID0gZGVzLkRFUztcblxuZnVuY3Rpb24gRURFU3RhdGUodHlwZSwga2V5KSB7XG4gIGFzc2VydC5lcXVhbChrZXkubGVuZ3RoLCAyNCwgJ0ludmFsaWQga2V5IGxlbmd0aCcpO1xuXG4gIHZhciBrMSA9IGtleS5zbGljZSgwLCA4KTtcbiAgdmFyIGsyID0ga2V5LnNsaWNlKDgsIDE2KTtcbiAgdmFyIGszID0ga2V5LnNsaWNlKDE2LCAyNCk7XG5cbiAgaWYgKHR5cGUgPT09ICdlbmNyeXB0Jykge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazEgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdlbmNyeXB0Jywga2V5OiBrMyB9KVxuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jaXBoZXJzID0gW1xuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMyB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazIgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGsxIH0pXG4gICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBFREUob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgRURFU3RhdGUodGhpcy50eXBlLCB0aGlzLm9wdGlvbnMua2V5KTtcbiAgdGhpcy5fZWRlU3RhdGUgPSBzdGF0ZTtcbn1cbmluaGVyaXRzKEVERSwgQ2lwaGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFREU7XG5cbkVERS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEVERShvcHRpb25zKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZWRlU3RhdGU7XG5cbiAgc3RhdGUuY2lwaGVyc1swXS5fdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKTtcbiAgc3RhdGUuY2lwaGVyc1sxXS5fdXBkYXRlKG91dCwgb3V0T2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMl0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xufTtcblxuRURFLnByb3RvdHlwZS5fcGFkID0gREVTLnByb3RvdHlwZS5fcGFkO1xuRURFLnByb3RvdHlwZS5fdW5wYWQgPSBERVMucHJvdG90eXBlLl91bnBhZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUoYnl0ZXMsIG9mZikge1xuICB2YXIgcmVzID0gIChieXRlc1swICsgb2ZmXSA8PCAyNCkgfFxuICAgICAgICAgICAgIChieXRlc1sxICsgb2ZmXSA8PCAxNikgfFxuICAgICAgICAgICAgIChieXRlc1syICsgb2ZmXSA8PCA4KSB8XG4gICAgICAgICAgICAgYnl0ZXNbMyArIG9mZl07XG4gIHJldHVybiByZXMgPj4+IDA7XG59O1xuXG5leHBvcnRzLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFKGJ5dGVzLCB2YWx1ZSwgb2ZmKSB7XG4gIGJ5dGVzWzAgKyBvZmZdID0gdmFsdWUgPj4+IDI0O1xuICBieXRlc1sxICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gMTYpICYgMHhmZjtcbiAgYnl0ZXNbMiArIG9mZl0gPSAodmFsdWUgPj4+IDgpICYgMHhmZjtcbiAgYnl0ZXNbMyArIG9mZl0gPSB2YWx1ZSAmIDB4ZmY7XG59O1xuXG5leHBvcnRzLmlwID0gZnVuY3Rpb24gaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIGZvciAodmFyIGkgPSA2OyBpID49IDA7IGkgLT0gMikge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSA2OyBpID49IDA7IGkgLT0gMikge1xuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDI1OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLnJpcCA9IGZ1bmN0aW9uIHJpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGkgPSA0OyBpIDwgODsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLnBjMSA9IGZ1bmN0aW9uIHBjMShpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgLy8gNywgMTUsIDIzLCAzMSwgMzksIDQ3LCA1NSwgNjNcbiAgLy8gNiwgMTQsIDIyLCAzMCwgMzksIDQ3LCA1NSwgNjNcbiAgLy8gNSwgMTMsIDIxLCAyOSwgMzksIDQ3LCA1NSwgNjNcbiAgLy8gNCwgMTIsIDIwLCAyOFxuICBmb3IgKHZhciBpID0gNzsgaSA+PSA1OyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICBvdXRMIDw8PSAxO1xuICAgIG91dEwgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gIH1cblxuICAvLyAxLCA5LCAxNywgMjUsIDMzLCA0MSwgNDksIDU3XG4gIC8vIDIsIDEwLCAxOCwgMjYsIDM0LCA0MiwgNTAsIDU4XG4gIC8vIDMsIDExLCAxOSwgMjcsIDM1LCA0MywgNTEsIDU5XG4gIC8vIDM2LCA0NCwgNTIsIDYwXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dFIgPDw9IDE7XG4gICAgb3V0UiB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLnIyOHNobCA9IGZ1bmN0aW9uIHIyOHNobChudW0sIHNoaWZ0KSB7XG4gIHJldHVybiAoKG51bSA8PCBzaGlmdCkgJiAweGZmZmZmZmYpIHwgKG51bSA+Pj4gKDI4IC0gc2hpZnQpKTtcbn07XG5cbnZhciBwYzJ0YWJsZSA9IFtcbiAgLy8gaW5MID0+IG91dExcbiAgMTQsIDExLCAxNywgNCwgMjcsIDIzLCAyNSwgMCxcbiAgMTMsIDIyLCA3LCAxOCwgNSwgOSwgMTYsIDI0LFxuICAyLCAyMCwgMTIsIDIxLCAxLCA4LCAxNSwgMjYsXG5cbiAgLy8gaW5SID0+IG91dFJcbiAgMTUsIDQsIDI1LCAxOSwgOSwgMSwgMjYsIDE2LFxuICA1LCAxMSwgMjMsIDgsIDEyLCA3LCAxNywgMCxcbiAgMjIsIDMsIDEwLCAxNCwgNiwgMjAsIDI3LCAyNFxuXTtcblxuZXhwb3J0cy5wYzIgPSBmdW5jdGlvbiBwYzIoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIHZhciBsZW4gPSBwYzJ0YWJsZS5sZW5ndGggPj4+IDE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBvdXRMIDw8PSAxO1xuICAgIG91dEwgfD0gKGluTCA+Pj4gcGMydGFibGVbaV0pICYgMHgxO1xuICB9XG4gIGZvciAodmFyIGkgPSBsZW47IGkgPCBwYzJ0YWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dFIgPDw9IDE7XG4gICAgb3V0UiB8PSAoaW5SID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5leHBhbmQgPSBmdW5jdGlvbiBleHBhbmQociwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgb3V0TCA9ICgociAmIDEpIDw8IDUpIHwgKHIgPj4+IDI3KTtcbiAgZm9yICh2YXIgaSA9IDIzOyBpID49IDE1OyBpIC09IDQpIHtcbiAgICBvdXRMIDw8PSA2O1xuICAgIG91dEwgfD0gKHIgPj4+IGkpICYgMHgzZjtcbiAgfVxuICBmb3IgKHZhciBpID0gMTE7IGkgPj0gMzsgaSAtPSA0KSB7XG4gICAgb3V0UiB8PSAociA+Pj4gaSkgJiAweDNmO1xuICAgIG91dFIgPDw9IDY7XG4gIH1cbiAgb3V0UiB8PSAoKHIgJiAweDFmKSA8PCAxKSB8IChyID4+PiAzMSk7XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbnZhciBzVGFibGUgPSBbXG4gIDE0LCAwLCA0LCAxNSwgMTMsIDcsIDEsIDQsIDIsIDE0LCAxNSwgMiwgMTEsIDEzLCA4LCAxLFxuICAzLCAxMCwgMTAsIDYsIDYsIDEyLCAxMiwgMTEsIDUsIDksIDksIDUsIDAsIDMsIDcsIDgsXG4gIDQsIDE1LCAxLCAxMiwgMTQsIDgsIDgsIDIsIDEzLCA0LCA2LCA5LCAyLCAxLCAxMSwgNyxcbiAgMTUsIDUsIDEyLCAxMSwgOSwgMywgNywgMTQsIDMsIDEwLCAxMCwgMCwgNSwgNiwgMCwgMTMsXG5cbiAgMTUsIDMsIDEsIDEzLCA4LCA0LCAxNCwgNywgNiwgMTUsIDExLCAyLCAzLCA4LCA0LCAxNCxcbiAgOSwgMTIsIDcsIDAsIDIsIDEsIDEzLCAxMCwgMTIsIDYsIDAsIDksIDUsIDExLCAxMCwgNSxcbiAgMCwgMTMsIDE0LCA4LCA3LCAxMCwgMTEsIDEsIDEwLCAzLCA0LCAxNSwgMTMsIDQsIDEsIDIsXG4gIDUsIDExLCA4LCA2LCAxMiwgNywgNiwgMTIsIDksIDAsIDMsIDUsIDIsIDE0LCAxNSwgOSxcblxuICAxMCwgMTMsIDAsIDcsIDksIDAsIDE0LCA5LCA2LCAzLCAzLCA0LCAxNSwgNiwgNSwgMTAsXG4gIDEsIDIsIDEzLCA4LCAxMiwgNSwgNywgMTQsIDExLCAxMiwgNCwgMTEsIDIsIDE1LCA4LCAxLFxuICAxMywgMSwgNiwgMTAsIDQsIDEzLCA5LCAwLCA4LCA2LCAxNSwgOSwgMywgOCwgMCwgNyxcbiAgMTEsIDQsIDEsIDE1LCAyLCAxNCwgMTIsIDMsIDUsIDExLCAxMCwgNSwgMTQsIDIsIDcsIDEyLFxuXG4gIDcsIDEzLCAxMywgOCwgMTQsIDExLCAzLCA1LCAwLCA2LCA2LCAxNSwgOSwgMCwgMTAsIDMsXG4gIDEsIDQsIDIsIDcsIDgsIDIsIDUsIDEyLCAxMSwgMSwgMTIsIDEwLCA0LCAxNCwgMTUsIDksXG4gIDEwLCAzLCA2LCAxNSwgOSwgMCwgMCwgNiwgMTIsIDEwLCAxMSwgMSwgNywgMTMsIDEzLCA4LFxuICAxNSwgOSwgMSwgNCwgMywgNSwgMTQsIDExLCA1LCAxMiwgMiwgNywgOCwgMiwgNCwgMTQsXG5cbiAgMiwgMTQsIDEyLCAxMSwgNCwgMiwgMSwgMTIsIDcsIDQsIDEwLCA3LCAxMSwgMTMsIDYsIDEsXG4gIDgsIDUsIDUsIDAsIDMsIDE1LCAxNSwgMTAsIDEzLCAzLCAwLCA5LCAxNCwgOCwgOSwgNixcbiAgNCwgMTEsIDIsIDgsIDEsIDEyLCAxMSwgNywgMTAsIDEsIDEzLCAxNCwgNywgMiwgOCwgMTMsXG4gIDE1LCA2LCA5LCAxNSwgMTIsIDAsIDUsIDksIDYsIDEwLCAzLCA0LCAwLCA1LCAxNCwgMyxcblxuICAxMiwgMTAsIDEsIDE1LCAxMCwgNCwgMTUsIDIsIDksIDcsIDIsIDEyLCA2LCA5LCA4LCA1LFxuICAwLCA2LCAxMywgMSwgMywgMTMsIDQsIDE0LCAxNCwgMCwgNywgMTEsIDUsIDMsIDExLCA4LFxuICA5LCA0LCAxNCwgMywgMTUsIDIsIDUsIDEyLCAyLCA5LCA4LCA1LCAxMiwgMTUsIDMsIDEwLFxuICA3LCAxMSwgMCwgMTQsIDQsIDEsIDEwLCA3LCAxLCA2LCAxMywgMCwgMTEsIDgsIDYsIDEzLFxuXG4gIDQsIDEzLCAxMSwgMCwgMiwgMTEsIDE0LCA3LCAxNSwgNCwgMCwgOSwgOCwgMSwgMTMsIDEwLFxuICAzLCAxNCwgMTIsIDMsIDksIDUsIDcsIDEyLCA1LCAyLCAxMCwgMTUsIDYsIDgsIDEsIDYsXG4gIDEsIDYsIDQsIDExLCAxMSwgMTMsIDEzLCA4LCAxMiwgMSwgMywgNCwgNywgMTAsIDE0LCA3LFxuICAxMCwgOSwgMTUsIDUsIDYsIDAsIDgsIDE1LCAwLCAxNCwgNSwgMiwgOSwgMywgMiwgMTIsXG5cbiAgMTMsIDEsIDIsIDE1LCA4LCAxMywgNCwgOCwgNiwgMTAsIDE1LCAzLCAxMSwgNywgMSwgNCxcbiAgMTAsIDEyLCA5LCA1LCAzLCA2LCAxNCwgMTEsIDUsIDAsIDAsIDE0LCAxMiwgOSwgNywgMixcbiAgNywgMiwgMTEsIDEsIDQsIDE0LCAxLCA3LCA5LCA0LCAxMiwgMTAsIDE0LCA4LCAyLCAxMyxcbiAgMCwgMTUsIDYsIDEyLCAxMCwgOSwgMTMsIDAsIDE1LCAzLCAzLCA1LCA1LCA2LCA4LCAxMVxuXTtcblxuZXhwb3J0cy5zdWJzdGl0dXRlID0gZnVuY3Rpb24gc3Vic3RpdHV0ZShpbkwsIGluUikge1xuICB2YXIgb3V0ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgYiA9IChpbkwgPj4+ICgxOCAtIGkgKiA2KSkgJiAweDNmO1xuICAgIHZhciBzYiA9IHNUYWJsZVtpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluUiA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlWzQgKiAweDQwICsgaSAqIDB4NDAgKyBiXTtcblxuICAgIG91dCA8PD0gNDtcbiAgICBvdXQgfD0gc2I7XG4gIH1cbiAgcmV0dXJuIG91dCA+Pj4gMDtcbn07XG5cbnZhciBwZXJtdXRlVGFibGUgPSBbXG4gIDE2LCAyNSwgMTIsIDExLCAzLCAyMCwgNCwgMTUsIDMxLCAxNywgOSwgNiwgMjcsIDE0LCAxLCAyMixcbiAgMzAsIDI0LCA4LCAxOCwgMCwgNSwgMjksIDIzLCAxMywgMTksIDIsIDI2LCAxMCwgMjEsIDI4LCA3XG5dO1xuXG5leHBvcnRzLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlKG51bSkge1xuICB2YXIgb3V0ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwZXJtdXRlVGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICBvdXQgPDw9IDE7XG4gICAgb3V0IHw9IChudW0gPj4+IHBlcm11dGVUYWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgcmV0dXJuIG91dCA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGFkU3BsaXQgPSBmdW5jdGlvbiBwYWRTcGxpdChudW0sIHNpemUsIGdyb3VwKSB7XG4gIHZhciBzdHIgPSBudW0udG9TdHJpbmcoMik7XG4gIHdoaWxlIChzdHIubGVuZ3RoIDwgc2l6ZSlcbiAgICBzdHIgPSAnMCcgKyBzdHI7XG5cbiAgdmFyIG91dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkgKz0gZ3JvdXApXG4gICAgb3V0LnB1c2goc3RyLnNsaWNlKGksIGkgKyBncm91cCkpO1xuICByZXR1cm4gb3V0LmpvaW4oJyAnKTtcbn07XG4iLCJ2YXIgZ2VuZXJhdGVQcmltZSA9IHJlcXVpcmUoJy4vbGliL2dlbmVyYXRlUHJpbWUnKVxudmFyIHByaW1lcyA9IHJlcXVpcmUoJy4vbGliL3ByaW1lcy5qc29uJylcblxudmFyIERIID0gcmVxdWlyZSgnLi9saWIvZGgnKVxuXG5mdW5jdGlvbiBnZXREaWZmaWVIZWxsbWFuIChtb2QpIHtcbiAgdmFyIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZXNbbW9kXS5wcmltZSwgJ2hleCcpXG4gIHZhciBnZW4gPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLmdlbiwgJ2hleCcpXG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuKVxufVxuXG52YXIgRU5DT0RJTkdTID0ge1xuICAnYmluYXJ5JzogdHJ1ZSwgJ2hleCc6IHRydWUsICdiYXNlNjQnOiB0cnVlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURpZmZpZUhlbGxtYW4gKHByaW1lLCBlbmMsIGdlbmVyYXRvciwgZ2VuYykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGVuYykgfHwgRU5DT0RJTkdTW2VuY10gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjcmVhdGVEaWZmaWVIZWxsbWFuKHByaW1lLCAnYmluYXJ5JywgZW5jLCBnZW5lcmF0b3IpXG4gIH1cblxuICBlbmMgPSBlbmMgfHwgJ2JpbmFyeSdcbiAgZ2VuYyA9IGdlbmMgfHwgJ2JpbmFyeSdcbiAgZ2VuZXJhdG9yID0gZ2VuZXJhdG9yIHx8IG5ldyBCdWZmZXIoWzJdKVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbmVyYXRvcikpIHtcbiAgICBnZW5lcmF0b3IgPSBuZXcgQnVmZmVyKGdlbmVyYXRvciwgZ2VuYylcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJpbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5ldyBESChnZW5lcmF0ZVByaW1lKHByaW1lLCBnZW5lcmF0b3IpLCBnZW5lcmF0b3IsIHRydWUpXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcmltZSkpIHtcbiAgICBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWUsIGVuYylcbiAgfVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbmVyYXRvciwgdHJ1ZSlcbn1cblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuZ2V0RGlmZmllSGVsbG1hbiA9IGdldERpZmZpZUhlbGxtYW5cbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbiA9IGV4cG9ydHMuRGlmZmllSGVsbG1hbiA9IGNyZWF0ZURpZmZpZUhlbGxtYW5cbiIsInZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2dlbmVyYXRlUHJpbWUnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IERIO1xuXG5mdW5jdGlvbiBzZXRQdWJsaWNLZXkocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuICB9XG4gIHRoaXMuX3B1YiA9IG5ldyBCTihwdWIpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0UHJpdmF0ZUtleShwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuICB9XG4gIHRoaXMuX3ByaXYgPSBuZXcgQk4ocHJpdik7XG4gIHJldHVybiB0aGlzO1xufVxuXG52YXIgcHJpbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gY2hlY2tQcmltZShwcmltZSwgZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW4gPSBnZW5lcmF0b3IudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgaGV4ID0gW2dlbiwgcHJpbWUudG9TdHJpbmcoMTYpXS5qb2luKCdfJyk7XG4gIGlmIChoZXggaW4gcHJpbWVDYWNoZSkge1xuICAgIHJldHVybiBwcmltZUNhY2hlW2hleF07XG4gIH1cbiAgdmFyIGVycm9yID0gMDtcblxuICBpZiAocHJpbWUuaXNFdmVuKCkgfHxcbiAgICAhcHJpbWVzLnNpbXBsZVNpZXZlIHx8XG4gICAgIXByaW1lcy5mZXJtYXRUZXN0KHByaW1lKSB8fFxuICAgICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkge1xuICAgIC8vbm90IGEgcHJpbWUgc28gKzFcbiAgICBlcnJvciArPSAxO1xuXG4gICAgaWYgKGdlbiA9PT0gJzAyJyB8fCBnZW4gPT09ICcwNScpIHtcbiAgICAgIC8vIHdlJ2QgYmUgYWJsZSB0byBjaGVjayB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBpdCB3b3VsZCBmYWlsIHNvICs4XG4gICAgICBlcnJvciArPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3dlIHdvdWxkbid0IGJlIGFibGUgdG8gdGVzdCB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBzbyArNFxuICAgICAgZXJyb3IgKz0gNDtcbiAgICB9XG4gICAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIGlmICghbWlsbGVyUmFiaW4udGVzdChwcmltZS5zaHJuKDEpKSkge1xuICAgIC8vbm90IGEgc2FmZSBwcmltZVxuICAgIGVycm9yICs9IDI7XG4gIH1cbiAgdmFyIHJlbTtcbiAgc3dpdGNoIChnZW4pIHtcbiAgICBjYXNlICcwMic6XG4gICAgICBpZiAocHJpbWUubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIC8vIHVuc3VpZGFibGUgZ2VuZXJhdG9yXG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwNSc6XG4gICAgICByZW0gPSBwcmltZS5tb2QoVEVOKTtcbiAgICAgIGlmIChyZW0uY21wKFRIUkVFKSAmJiByZW0uY21wKFNFVkVOKSkge1xuICAgICAgICAvLyBwcmltZSBtb2QgMTAgbmVlZHMgdG8gZXF1YWwgMyBvciA3XG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXJyb3IgKz0gNDtcbiAgfVxuICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBESChwcmltZSwgZ2VuZXJhdG9yLCBtYWxsZWFibGUpIHtcbiAgdGhpcy5zZXRHZW5lcmF0b3IoZ2VuZXJhdG9yKTtcbiAgdGhpcy5fX3ByaW1lID0gbmV3IEJOKHByaW1lKTtcbiAgdGhpcy5fcHJpbWUgPSBCTi5tb250KHRoaXMuX19wcmltZSk7XG4gIHRoaXMuX3ByaW1lTGVuID0gcHJpbWUubGVuZ3RoO1xuICB0aGlzLl9wdWIgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3ByaXYgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3ByaW1lQ29kZSA9IHVuZGVmaW5lZDtcbiAgaWYgKG1hbGxlYWJsZSkge1xuICAgIHRoaXMuc2V0UHVibGljS2V5ID0gc2V0UHVibGljS2V5O1xuICAgIHRoaXMuc2V0UHJpdmF0ZUtleSA9IHNldFByaXZhdGVLZXk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fcHJpbWVDb2RlID0gODtcbiAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERILnByb3RvdHlwZSwgJ3ZlcmlmeUVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ByaW1lQ29kZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuX3ByaW1lQ29kZSA9IGNoZWNrUHJpbWUodGhpcy5fX3ByaW1lLCB0aGlzLl9fZ2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ByaW1lQ29kZTtcbiAgfVxufSk7XG5ESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3ByaXYpIHtcbiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7XG4gIH1cbiAgdGhpcy5fcHViID0gdGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoKTtcbn07XG5cbkRILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIG90aGVyID0gbmV3IEJOKG90aGVyKTtcbiAgb3RoZXIgPSBvdGhlci50b1JlZCh0aGlzLl9wcmltZSk7XG4gIHZhciBzZWNyZXQgPSBvdGhlci5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTtcbiAgdmFyIHByaW1lID0gdGhpcy5nZXRQcmltZSgpO1xuICBpZiAob3V0Lmxlbmd0aCA8IHByaW1lLmxlbmd0aCkge1xuICAgIHZhciBmcm9udCA9IG5ldyBCdWZmZXIocHJpbWUubGVuZ3RoIC0gb3V0Lmxlbmd0aCk7XG4gICAgZnJvbnQuZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtmcm9udCwgb3V0XSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRQdWJsaWNLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wcml2LCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaW1lID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fX3ByaW1lLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuKSkge1xuICAgIGdlbiA9IG5ldyBCdWZmZXIoZ2VuLCBlbmMpO1xuICB9XG4gIHRoaXMuX19nZW4gPSBnZW47XG4gIHRoaXMuX2dlbiA9IG5ldyBCTihnZW4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMpIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4udG9BcnJheSgpKTtcbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcbiAgfVxufVxuIiwidmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZmluZFByaW1lO1xuZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7XG5maW5kUHJpbWUuZmVybWF0VGVzdCA9IGZlcm1hdFRlc3Q7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBPTkUgPSBuZXcgQk4oMSk7XG52YXIgVFdPID0gbmV3IEJOKDIpO1xudmFyIEZJVkUgPSBuZXcgQk4oNSk7XG52YXIgU0lYVEVFTiA9IG5ldyBCTigxNik7XG52YXIgRUlHSFQgPSBuZXcgQk4oOCk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIEZPVVIgPSBuZXcgQk4oNCk7XG52YXIgVFdFTFZFID0gbmV3IEJOKDEyKTtcbnZhciBwcmltZXMgPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UHJpbWVzKCkge1xuICBpZiAocHJpbWVzICE9PSBudWxsKVxuICAgIHJldHVybiBwcmltZXM7XG5cbiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVzWzBdID0gMjtcbiAgZm9yICh2YXIgaSA9IDEsIGsgPSAzOyBrIDwgbGltaXQ7IGsgKz0gMikge1xuICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspXG4gICAgICBpZiAoayAlIHJlc1tqXSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAoaSAhPT0gaiAmJiByZXNbal0gPD0gc3FydClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcmVzW2krK10gPSBrO1xuICB9XG4gIHByaW1lcyA9IHJlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2ltcGxlU2lldmUocCkge1xuICB2YXIgcHJpbWVzID0gX2dldFByaW1lcygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aDsgaSsrKVxuICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgaWYgKHAuY21wbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZmVybWF0VGVzdChwKSB7XG4gIHZhciByZWQgPSBCTi5tb250KHApO1xuICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHtcbiAgaWYgKGJpdHMgPCAxNikge1xuICAgIC8vIHRoaXMgaXMgd2hhdCBvcGVuc3NsIGRvZXNcbiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHg3Yl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7XG4gICAgfVxuICB9XG4gIGdlbiA9IG5ldyBCTihnZW4pO1xuXG4gIHZhciBudW0sIG4yO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbnVtID0gbmV3IEJOKHJhbmRvbUJ5dGVzKE1hdGguY2VpbChiaXRzIC8gOCkpKTtcbiAgICB3aGlsZSAobnVtLmJpdExlbmd0aCgpID4gYml0cykge1xuICAgICAgbnVtLmlzaHJuKDEpO1xuICAgIH1cbiAgICBpZiAobnVtLmlzRXZlbigpKSB7XG4gICAgICBudW0uaWFkZChPTkUpO1xuICAgIH1cbiAgICBpZiAoIW51bS50ZXN0bigxKSkge1xuICAgICAgbnVtLmlhZGQoVFdPKTtcbiAgICB9XG4gICAgaWYgKCFnZW4uY21wKFRXTykpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRFTikuY21wKFRIUkVFKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbjIgPSBudW0uc2hybigxKTtcbiAgICBpZiAoc2ltcGxlU2lldmUobjIpICYmIHNpbXBsZVNpZXZlKG51bSkgJiZcbiAgICAgIGZlcm1hdFRlc3QobjIpICYmIGZlcm1hdFRlc3QobnVtKSAmJlxuICAgICAgbWlsbGVyUmFiaW4udGVzdChuMikgJiYgbWlsbGVyUmFiaW4udGVzdChudW0pKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbGxpcHRpYyA9IGV4cG9ydHM7XG5cbmVsbGlwdGljLnZlcnNpb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuZWxsaXB0aWMudXRpbHMgPSByZXF1aXJlKCcuL2VsbGlwdGljL3V0aWxzJyk7XG5lbGxpcHRpYy5yYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xuZWxsaXB0aWMuY3VydmUgPSByZXF1aXJlKCcuL2VsbGlwdGljL2N1cnZlJyk7XG5lbGxpcHRpYy5jdXJ2ZXMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2N1cnZlcycpO1xuXG4vLyBQcm90b2NvbHNcbmVsbGlwdGljLmVjID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lYycpO1xuZWxsaXB0aWMuZWRkc2EgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VkZHNhJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgZ2V0TkFGID0gdXRpbHMuZ2V0TkFGO1xudmFyIGdldEpTRiA9IHV0aWxzLmdldEpTRjtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJhc2VDdXJ2ZSh0eXBlLCBjb25mKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucCA9IG5ldyBCTihjb25mLnAsIDE2KTtcblxuICAvLyBVc2UgTW9udGdvbWVyeSwgd2hlbiB0aGVyZSBpcyBubyBmYXN0IHJlZHVjdGlvbiBmb3IgdGhlIHByaW1lXG4gIHRoaXMucmVkID0gY29uZi5wcmltZSA/IEJOLnJlZChjb25mLnByaW1lKSA6IEJOLm1vbnQodGhpcy5wKTtcblxuICAvLyBVc2VmdWwgZm9yIG1hbnkgY3VydmVzXG4gIHRoaXMuemVybyA9IG5ldyBCTigwKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMub25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIEN1cnZlIGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsXG4gIHRoaXMubiA9IGNvbmYubiAmJiBuZXcgQk4oY29uZi5uLCAxNik7XG4gIHRoaXMuZyA9IGNvbmYuZyAmJiB0aGlzLnBvaW50RnJvbUpTT04oY29uZi5nLCBjb25mLmdSZWQpO1xuXG4gIC8vIFRlbXBvcmFyeSBhcnJheXNcbiAgdGhpcy5fd25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDIgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMyA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQ0ID0gbmV3IEFycmF5KDQpO1xuXG4gIC8vIEdlbmVyYWxpemVkIEdyZWcgTWF4d2VsbCdzIHRyaWNrXG4gIHZhciBhZGp1c3RDb3VudCA9IHRoaXMubiAmJiB0aGlzLnAuZGl2KHRoaXMubik7XG4gIGlmICghYWRqdXN0Q291bnQgfHwgYWRqdXN0Q291bnQuY21wbigxMDApID4gMCkge1xuICAgIHRoaXMucmVkTiA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbWF4d2VsbFRyaWNrID0gdHJ1ZTtcbiAgICB0aGlzLnJlZE4gPSB0aGlzLm4udG9SZWQodGhpcy5yZWQpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDdXJ2ZTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fZml4ZWROYWZNdWwgPSBmdW5jdGlvbiBfZml4ZWROYWZNdWwocCwgaykge1xuICBhc3NlcnQocC5wcmVjb21wdXRlZCk7XG4gIHZhciBkb3VibGVzID0gcC5fZ2V0RG91YmxlcygpO1xuXG4gIHZhciBuYWYgPSBnZXROQUYoaywgMSk7XG4gIHZhciBJID0gKDEgPDwgKGRvdWJsZXMuc3RlcCArIDEpKSAtIChkb3VibGVzLnN0ZXAgJSAyID09PSAwID8gMiA6IDEpO1xuICBJIC89IDM7XG5cbiAgLy8gVHJhbnNsYXRlIGludG8gbW9yZSB3aW5kb3dlZCBmb3JtXG4gIHZhciByZXByID0gW107XG4gIGZvciAodmFyIGogPSAwOyBqIDwgbmFmLmxlbmd0aDsgaiArPSBkb3VibGVzLnN0ZXApIHtcbiAgICB2YXIgbmFmVyA9IDA7XG4gICAgZm9yICh2YXIgayA9IGogKyBkb3VibGVzLnN0ZXAgLSAxOyBrID49IGo7IGstLSlcbiAgICAgIG5hZlcgPSAobmFmVyA8PCAxKSArIG5hZltrXTtcbiAgICByZXByLnB1c2gobmFmVyk7XG4gIH1cblxuICB2YXIgYSA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgYiA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gSTsgaSA+IDA7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVwci5sZW5ndGg7IGorKykge1xuICAgICAgdmFyIG5hZlcgPSByZXByW2pdO1xuICAgICAgaWYgKG5hZlcgPT09IGkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdKTtcbiAgICAgIGVsc2UgaWYgKG5hZlcgPT09IC1pKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXS5uZWcoKSk7XG4gICAgfVxuICAgIGEgPSBhLmFkZChiKTtcbiAgfVxuICByZXR1cm4gYS50b1AoKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWwgPSBmdW5jdGlvbiBfd25hZk11bChwLCBrKSB7XG4gIHZhciB3ID0gNDtcblxuICAvLyBQcmVjb21wdXRlIHdpbmRvd1xuICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKHcpO1xuICB3ID0gbmFmUG9pbnRzLnduZDtcbiAgdmFyIHduZCA9IG5hZlBvaW50cy5wb2ludHM7XG5cbiAgLy8gR2V0IE5BRiBmb3JtXG4gIHZhciBuYWYgPSBnZXROQUYoaywgdyk7XG5cbiAgLy8gQWRkIGB0aGlzYCooTisxKSBmb3IgZXZlcnkgdy1OQUYgaW5kZXhcbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gbmFmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgLy8gQ291bnQgemVyb2VzXG4gICAgZm9yICh2YXIgayA9IDA7IGkgPj0gMCAmJiBuYWZbaV0gPT09IDA7IGktLSlcbiAgICAgIGsrKztcbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuXG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG4gICAgdmFyIHogPSBuYWZbaV07XG4gICAgYXNzZXJ0KHogIT09IDApO1xuICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSB7XG4gICAgICAvLyBKICstIFBcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEogKy0gSlxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcC50eXBlID09PSAnYWZmaW5lJyA/IGFjYy50b1AoKSA6IGFjYztcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWxBZGQgPSBmdW5jdGlvbiBfd25hZk11bEFkZChkZWZXLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2VmZnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciB3bmRXaWR0aCA9IHRoaXMuX3duYWZUMTtcbiAgdmFyIHduZCA9IHRoaXMuX3duYWZUMjtcbiAgdmFyIG5hZiA9IHRoaXMuX3duYWZUMztcblxuICAvLyBGaWxsIGFsbCBhcnJheXNcbiAgdmFyIG1heCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKGRlZlcpO1xuICAgIHduZFdpZHRoW2ldID0gbmFmUG9pbnRzLnduZDtcbiAgICB3bmRbaV0gPSBuYWZQb2ludHMucG9pbnRzO1xuICB9XG5cbiAgLy8gQ29tYiBzbWFsbCB3aW5kb3cgTkFGc1xuICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAxOyBpIC09IDIpIHtcbiAgICB2YXIgYSA9IGkgLSAxO1xuICAgIHZhciBiID0gaTtcbiAgICBpZiAod25kV2lkdGhbYV0gIT09IDEgfHwgd25kV2lkdGhbYl0gIT09IDEpIHtcbiAgICAgIG5hZlthXSA9IGdldE5BRihjb2VmZnNbYV0sIHduZFdpZHRoW2FdKTtcbiAgICAgIG5hZltiXSA9IGdldE5BRihjb2VmZnNbYl0sIHduZFdpZHRoW2JdKTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZlthXS5sZW5ndGgsIG1heCk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYl0ubGVuZ3RoLCBtYXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGNvbWIgPSBbXG4gICAgICBwb2ludHNbYV0sIC8qIDEgKi9cbiAgICAgIG51bGwsIC8qIDMgKi9cbiAgICAgIG51bGwsIC8qIDUgKi9cbiAgICAgIHBvaW50c1tiXSAvKiA3ICovXG4gICAgXTtcblxuICAgIC8vIFRyeSB0byBhdm9pZCBQcm9qZWN0aXZlIHBvaW50cywgaWYgcG9zc2libGVcbiAgICBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55KSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2UgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueS5yZWROZWcoKSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBbXG4gICAgICAtMywgLyogLTEgLTEgKi9cbiAgICAgIC0xLCAvKiAtMSAwICovXG4gICAgICAtNSwgLyogLTEgMSAqL1xuICAgICAgLTcsIC8qIDAgLTEgKi9cbiAgICAgIDAsIC8qIDAgMCAqL1xuICAgICAgNywgLyogMCAxICovXG4gICAgICA1LCAvKiAxIC0xICovXG4gICAgICAxLCAvKiAxIDAgKi9cbiAgICAgIDMgIC8qIDEgMSAqL1xuICAgIF07XG5cbiAgICB2YXIganNmID0gZ2V0SlNGKGNvZWZmc1thXSwgY29lZmZzW2JdKTtcbiAgICBtYXggPSBNYXRoLm1heChqc2ZbMF0ubGVuZ3RoLCBtYXgpO1xuICAgIG5hZlthXSA9IG5ldyBBcnJheShtYXgpO1xuICAgIG5hZltiXSA9IG5ldyBBcnJheShtYXgpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF4OyBqKyspIHtcbiAgICAgIHZhciBqYSA9IGpzZlswXVtqXSB8IDA7XG4gICAgICB2YXIgamIgPSBqc2ZbMV1bal0gfCAwO1xuXG4gICAgICBuYWZbYV1bal0gPSBpbmRleFsoamEgKyAxKSAqIDMgKyAoamIgKyAxKV07XG4gICAgICBuYWZbYl1bal0gPSAwO1xuICAgICAgd25kW2FdID0gY29tYjtcbiAgICB9XG4gIH1cblxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciB0bXAgPSB0aGlzLl93bmFmVDQ7XG4gIGZvciAodmFyIGkgPSBtYXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGsgPSAwO1xuXG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgdmFyIHplcm8gPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgICB0bXBbal0gPSBuYWZbal1baV0gfCAwO1xuICAgICAgICBpZiAodG1wW2pdICE9PSAwKVxuICAgICAgICAgIHplcm8gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghemVybylcbiAgICAgICAgYnJlYWs7XG4gICAgICBrKys7XG4gICAgICBpLS07XG4gICAgfVxuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICB2YXIgeiA9IHRtcFtqXTtcbiAgICAgIHZhciBwO1xuICAgICAgaWYgKHogPT09IDApXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgZWxzZSBpZiAoeiA+IDApXG4gICAgICAgIHAgPSB3bmRbal1bKHogLSAxKSA+PiAxXTtcbiAgICAgIGVsc2UgaWYgKHogPCAwKVxuICAgICAgICBwID0gd25kW2pdWygteiAtIDEpID4+IDFdLm5lZygpO1xuXG4gICAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHApO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHApO1xuICAgIH1cbiAgfVxuICAvLyBaZXJvaWZ5IHJlZmVyZW5jZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICB3bmRbaV0gPSBudWxsO1xuXG4gIGlmIChqYWNvYmlhblJlc3VsdClcbiAgICByZXR1cm4gYWNjO1xuICBlbHNlXG4gICAgcmV0dXJuIGFjYy50b1AoKTtcbn07XG5cbmZ1bmN0aW9uIEJhc2VQb2ludChjdXJ2ZSwgdHlwZSkge1xuICB0aGlzLmN1cnZlID0gY3VydmU7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucHJlY29tcHV0ZWQgPSBudWxsO1xufVxuQmFzZUN1cnZlLkJhc2VQb2ludCA9IEJhc2VQb2ludDtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKC8qb3RoZXIqLykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS52YWxpZGF0ZSh0aGlzKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIGJ5dGVzID0gdXRpbHMudG9BcnJheShieXRlcywgZW5jKTtcblxuICB2YXIgbGVuID0gdGhpcy5wLmJ5dGVMZW5ndGgoKTtcblxuICAvLyB1bmNvbXByZXNzZWQsIGh5YnJpZC1vZGQsIGh5YnJpZC1ldmVuXG4gIGlmICgoYnl0ZXNbMF0gPT09IDB4MDQgfHwgYnl0ZXNbMF0gPT09IDB4MDYgfHwgYnl0ZXNbMF0gPT09IDB4MDcpICYmXG4gICAgICBieXRlcy5sZW5ndGggLSAxID09PSAyICogbGVuKSB7XG4gICAgaWYgKGJ5dGVzWzBdID09PSAweDA2KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMCk7XG4gICAgZWxzZSBpZiAoYnl0ZXNbMF0gPT09IDB4MDcpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAxKTtcblxuICAgIHZhciByZXMgPSAgdGhpcy5wb2ludChieXRlcy5zbGljZSgxLCAxICsgbGVuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMuc2xpY2UoMSArIGxlbiwgMSArIDIgKiBsZW4pKTtcblxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoKGJ5dGVzWzBdID09PSAweDAyIHx8IGJ5dGVzWzBdID09PSAweDAzKSAmJlxuICAgICAgICAgICAgICBieXRlcy5sZW5ndGggLSAxID09PSBsZW4pIHtcbiAgICByZXR1cm4gdGhpcy5wb2ludEZyb21YKGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLCBieXRlc1swXSA9PT0gMHgwMyk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHBvaW50IGZvcm1hdCcpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGVDb21wcmVzc2VkID0gZnVuY3Rpb24gZW5jb2RlQ29tcHJlc3NlZChlbmMpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2RlKGVuYywgdHJ1ZSk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKGNvbXBhY3QpIHtcbiAgdmFyIGxlbiA9IHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCk7XG4gIHZhciB4ID0gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCBsZW4pO1xuXG4gIGlmIChjb21wYWN0KVxuICAgIHJldHVybiBbIHRoaXMuZ2V0WSgpLmlzRXZlbigpID8gMHgwMiA6IDB4MDMgXS5jb25jYXQoeCk7XG5cbiAgcmV0dXJuIFsgMHgwNCBdLmNvbmNhdCh4LCB0aGlzLmdldFkoKS50b0FycmF5KCdiZScsIGxlbikpIDtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGVuYywgY29tcGFjdCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMuX2VuY29kZShjb21wYWN0KSwgZW5jKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUocG93ZXIpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHByZWNvbXB1dGVkID0ge1xuICAgIGRvdWJsZXM6IG51bGwsXG4gICAgbmFmOiBudWxsLFxuICAgIGJldGE6IG51bGxcbiAgfTtcbiAgcHJlY29tcHV0ZWQubmFmID0gdGhpcy5fZ2V0TkFGUG9pbnRzKDgpO1xuICBwcmVjb21wdXRlZC5kb3VibGVzID0gdGhpcy5fZ2V0RG91Ymxlcyg0LCBwb3dlcik7XG4gIHByZWNvbXB1dGVkLmJldGEgPSB0aGlzLl9nZXRCZXRhKCk7XG4gIHRoaXMucHJlY29tcHV0ZWQgPSBwcmVjb21wdXRlZDtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2hhc0RvdWJsZXMgPSBmdW5jdGlvbiBfaGFzRG91YmxlcyhrKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRvdWJsZXMgPSB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7XG4gIGlmICghZG91YmxlcylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIGRvdWJsZXMucG9pbnRzLmxlbmd0aCA+PSBNYXRoLmNlaWwoKGsuYml0TGVuZ3RoKCkgKyAxKSAvIGRvdWJsZXMuc3RlcCk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXREb3VibGVzID0gZnVuY3Rpb24gX2dldERvdWJsZXMoc3RlcCwgcG93ZXIpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7XG5cbiAgdmFyIGRvdWJsZXMgPSBbIHRoaXMgXTtcbiAgdmFyIGFjYyA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG93ZXI7IGkgKz0gc3RlcCkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RlcDsgaisrKVxuICAgICAgYWNjID0gYWNjLmRibCgpO1xuICAgIGRvdWJsZXMucHVzaChhY2MpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RlcDogc3RlcCxcbiAgICBwb2ludHM6IGRvdWJsZXNcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldE5BRlBvaW50cyA9IGZ1bmN0aW9uIF9nZXROQUZQb2ludHMod25kKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQubmFmKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLm5hZjtcblxuICB2YXIgcmVzID0gWyB0aGlzIF07XG4gIHZhciBtYXggPSAoMSA8PCB3bmQpIC0gMTtcbiAgdmFyIGRibCA9IG1heCA9PT0gMSA/IG51bGwgOiB0aGlzLmRibCgpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IG1heDsgaSsrKVxuICAgIHJlc1tpXSA9IHJlc1tpIC0gMV0uYWRkKGRibCk7XG4gIHJldHVybiB7XG4gICAgd25kOiB3bmQsXG4gICAgcG9pbnRzOiByZXNcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKGspIHtcbiAgdmFyIHIgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGs7IGkrKylcbiAgICByID0gci5kYmwoKTtcbiAgcmV0dXJuIHI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBFZHdhcmRzQ3VydmUoY29uZikge1xuICAvLyBOT1RFOiBJbXBvcnRhbnQgYXMgd2UgYXJlIGNyZWF0aW5nIHBvaW50IGluIEJhc2UuY2FsbCgpXG4gIHRoaXMudHdpc3RlZCA9IChjb25mLmEgfCAwKSAhPT0gMTtcbiAgdGhpcy5tT25lQSA9IHRoaXMudHdpc3RlZCAmJiAoY29uZi5hIHwgMCkgPT09IC0xO1xuICB0aGlzLmV4dGVuZGVkID0gdGhpcy5tT25lQTtcblxuICBCYXNlLmNhbGwodGhpcywgJ2Vkd2FyZHMnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudW1vZCh0aGlzLnJlZC5tKTtcbiAgdGhpcy5hID0gdGhpcy5hLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jID0gbmV3IEJOKGNvbmYuYywgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jMiA9IHRoaXMuYy5yZWRTcXIoKTtcbiAgdGhpcy5kID0gbmV3IEJOKGNvbmYuZCwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5kZCA9IHRoaXMuZC5yZWRBZGQodGhpcy5kKTtcblxuICBhc3NlcnQoIXRoaXMudHdpc3RlZCB8fCB0aGlzLmMuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDApO1xuICB0aGlzLm9uZUMgPSAoY29uZi5jIHwgMCkgPT09IDE7XG59XG5pbmhlcml0cyhFZHdhcmRzQ3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBFZHdhcmRzQ3VydmU7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEEgPSBmdW5jdGlvbiBfbXVsQShudW0pIHtcbiAgaWYgKHRoaXMubU9uZUEpXG4gICAgcmV0dXJuIG51bS5yZWROZWcoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmEucmVkTXVsKG51bSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxDID0gZnVuY3Rpb24gX211bEMobnVtKSB7XG4gIGlmICh0aGlzLm9uZUMpXG4gICAgcmV0dXJuIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmMucmVkTXVsKG51bSk7XG59O1xuXG4vLyBKdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggU2hvcnQgY3VydmVcbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSwgeiwgdCk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkU3ViKHRoaXMuYS5yZWRNdWwoeDIpKTtcbiAgdmFyIGxocyA9IHRoaXMub25lLnJlZFN1Yih0aGlzLmMyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh4MikpO1xuXG4gIHZhciB5MiA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSk7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVkgPSBmdW5jdGlvbiBwb2ludEZyb21ZKHksIG9kZCkge1xuICB5ID0gbmV3IEJOKHksIDE2KTtcbiAgaWYgKCF5LnJlZClcbiAgICB5ID0geS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8geF4yID0gKHleMiAtIDEpIC8gKGQgeV4yICsgMSlcbiAgdmFyIHkyID0geS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHkyLnJlZFN1Yih0aGlzLm9uZSk7XG4gIHZhciByaHMgPSB5Mi5yZWRNdWwodGhpcy5kKS5yZWRBZGQodGhpcy5vbmUpO1xuICB2YXIgeDIgPSBsaHMucmVkTXVsKHJocy5yZWRJbnZtKCkpO1xuXG4gIGlmICh4Mi5jbXAodGhpcy56ZXJvKSA9PT0gMCkge1xuICAgIGlmIChvZGQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5wb2ludCh0aGlzLnplcm8sIHkpO1xuICB9XG5cbiAgdmFyIHggPSB4Mi5yZWRTcXJ0KCk7XG4gIGlmICh4LnJlZFNxcigpLnJlZFN1Yih4MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgaWYgKHguaXNPZGQoKSAhPT0gb2RkKVxuICAgIHggPSB4LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ3VydmU6IEEgKiBYXjIgKyBZXjIgPSBDXjIgKiAoMSArIEQgKiBYXjIgKiBZXjIpXG4gIHBvaW50Lm5vcm1hbGl6ZSgpO1xuXG4gIHZhciB4MiA9IHBvaW50LngucmVkU3FyKCk7XG4gIHZhciB5MiA9IHBvaW50LnkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB4Mi5yZWRNdWwodGhpcy5hKS5yZWRBZGQoeTIpO1xuICB2YXIgcmhzID0gdGhpcy5jMi5yZWRNdWwodGhpcy5vbmUucmVkQWRkKHRoaXMuZC5yZWRNdWwoeDIpLnJlZE11bCh5MikpKTtcblxuICByZXR1cm4gbGhzLmNtcChyaHMpID09PSAwO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIHosIHQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMudCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnpPbmUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSB6ID8gbmV3IEJOKHosIDE2KSA6IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMudCA9IHQgJiYgbmV3IEJOKHQsIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAodGhpcy50ICYmICF0aGlzLnQucmVkKVxuICAgICAgdGhpcy50ID0gdGhpcy50LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xuXG4gICAgLy8gVXNlIGV4dGVuZGVkIGNvb3JkaW5hdGVzXG4gICAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQgJiYgIXRoaXMudCkge1xuICAgICAgdGhpcy50ID0gdGhpcy54LnJlZE11bCh0aGlzLnkpO1xuICAgICAgaWYgKCF0aGlzLnpPbmUpXG4gICAgICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gICAgfVxuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqKTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgeiwgdCk7XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHtcbiAgcmV0dXJuIG5ldyBQb2ludChjdXJ2ZSwgb2JqWzBdLCBvYmpbMV0sIG9ialsyXSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnguY21wbigwKSA9PT0gMCAmJlxuICAgICAgICAgdGhpcy55LmNtcCh0aGlzLnopID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHREYmwgPSBmdW5jdGlvbiBfZXh0RGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1od2NkXG4gIC8vIDRNICsgNFNcblxuICAvLyBBID0gWDFeMlxuICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gQiA9IFkxXjJcbiAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIEMgPSAyICogWjFeMlxuICB2YXIgYyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgYyA9IGMucmVkSUFkZChjKTtcbiAgLy8gRCA9IGEgKiBBXG4gIHZhciBkID0gdGhpcy5jdXJ2ZS5fbXVsQShhKTtcbiAgLy8gRSA9IChYMSArIFkxKV4yIC0gQSAtIEJcbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGIpO1xuICAvLyBHID0gRCArIEJcbiAgdmFyIGcgPSBkLnJlZEFkZChiKTtcbiAgLy8gRiA9IEcgLSBDXG4gIHZhciBmID0gZy5yZWRTdWIoYyk7XG4gIC8vIEggPSBEIC0gQlxuICB2YXIgaCA9IGQucmVkU3ViKGIpO1xuICAvLyBYMyA9IEUgKiBGXG4gIHZhciBueCA9IGUucmVkTXVsKGYpO1xuICAvLyBZMyA9IEcgKiBIXG4gIHZhciBueSA9IGcucmVkTXVsKGgpO1xuICAvLyBUMyA9IEUgKiBIXG4gIHZhciBudCA9IGUucmVkTXVsKGgpO1xuICAvLyBaMyA9IEYgKiBHXG4gIHZhciBueiA9IGYucmVkTXVsKGcpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56LCBudCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX3Byb2pEYmwgPSBmdW5jdGlvbiBfcHJvakRibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtYmJqbHBcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwNy1ibFxuICAvLyBhbmQgb3RoZXJzXG4gIC8vIEdlbmVyYWxseSAzTSArIDRTIG9yIDJNICsgNFNcblxuICAvLyBCID0gKFgxICsgWTEpXjJcbiAgdmFyIGIgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkU3FyKCk7XG4gIC8vIEMgPSBYMV4yXG4gIHZhciBjID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBEID0gWTFeMlxuICB2YXIgZCA9IHRoaXMueS5yZWRTcXIoKTtcblxuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gRSA9IGEgKiBDXG4gICAgdmFyIGUgPSB0aGlzLmN1cnZlLl9tdWxBKGMpO1xuICAgIC8vIEYgPSBFICsgRFxuICAgIHZhciBmID0gZS5yZWRBZGQoZCk7XG4gICAgaWYgKHRoaXMuek9uZSkge1xuICAgICAgLy8gWDMgPSAoQiAtIEMgLSBEKSAqIChGIC0gMilcbiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkU3ViKGQpLnJlZE11bChmLnJlZFN1Yih0aGlzLmN1cnZlLnR3bykpO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEZeMiAtIDIgKiBGXG4gICAgICBueiA9IGYucmVkU3FyKCkucmVkU3ViKGYpLnJlZFN1YihmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSCA9IFoxXjJcbiAgICAgIHZhciBoID0gdGhpcy56LnJlZFNxcigpO1xuICAgICAgLy8gSiA9IEYgLSAyICogSFxuICAgICAgdmFyIGogPSBmLnJlZFN1YihoKS5yZWRJU3ViKGgpO1xuICAgICAgLy8gWDMgPSAoQi1DLUQpKkpcbiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkSVN1YihkKS5yZWRNdWwoaik7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRiAqIEpcbiAgICAgIG56ID0gZi5yZWRNdWwoaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEUgPSBDICsgRFxuICAgIHZhciBlID0gYy5yZWRBZGQoZCk7XG4gICAgLy8gSCA9IChjICogWjEpXjJcbiAgICB2YXIgaCA9IHRoaXMuY3VydmUuX211bEModGhpcy5jLnJlZE11bCh0aGlzLnopKS5yZWRTcXIoKTtcbiAgICAvLyBKID0gRSAtIDIgKiBIXG4gICAgdmFyIGogPSBlLnJlZFN1YihoKS5yZWRTdWIoaCk7XG4gICAgLy8gWDMgPSBjICogKEIgLSBFKSAqIEpcbiAgICBueCA9IHRoaXMuY3VydmUuX211bEMoYi5yZWRJU3ViKGUpKS5yZWRNdWwoaik7XG4gICAgLy8gWTMgPSBjICogRSAqIChDIC0gRClcbiAgICBueSA9IHRoaXMuY3VydmUuX211bEMoZSkucmVkTXVsKGMucmVkSVN1YihkKSk7XG4gICAgLy8gWjMgPSBFICogSlxuICAgIG56ID0gZS5yZWRNdWwoaik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRG91YmxlIGluIGV4dGVuZGVkIGNvb3JkaW5hdGVzXG4gIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkKVxuICAgIHJldHVybiB0aGlzLl9leHREYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qRGJsKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dEFkZCA9IGZ1bmN0aW9uIF9leHRBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1od2NkLTNcbiAgLy8gOE1cblxuICAvLyBBID0gKFkxIC0gWDEpICogKFkyIC0gWDIpXG4gIHZhciBhID0gdGhpcy55LnJlZFN1Yih0aGlzLngpLnJlZE11bChwLnkucmVkU3ViKHAueCkpO1xuICAvLyBCID0gKFkxICsgWDEpICogKFkyICsgWDIpXG4gIHZhciBiID0gdGhpcy55LnJlZEFkZCh0aGlzLngpLnJlZE11bChwLnkucmVkQWRkKHAueCkpO1xuICAvLyBDID0gVDEgKiBrICogVDJcbiAgdmFyIGMgPSB0aGlzLnQucmVkTXVsKHRoaXMuY3VydmUuZGQpLnJlZE11bChwLnQpO1xuICAvLyBEID0gWjEgKiAyICogWjJcbiAgdmFyIGQgPSB0aGlzLnoucmVkTXVsKHAuei5yZWRBZGQocC56KSk7XG4gIC8vIEUgPSBCIC0gQVxuICB2YXIgZSA9IGIucmVkU3ViKGEpO1xuICAvLyBGID0gRCAtIENcbiAgdmFyIGYgPSBkLnJlZFN1YihjKTtcbiAgLy8gRyA9IEQgKyBDXG4gIHZhciBnID0gZC5yZWRBZGQoYyk7XG4gIC8vIEggPSBCICsgQVxuICB2YXIgaCA9IGIucmVkQWRkKGEpO1xuICAvLyBYMyA9IEUgKiBGXG4gIHZhciBueCA9IGUucmVkTXVsKGYpO1xuICAvLyBZMyA9IEcgKiBIXG4gIHZhciBueSA9IGcucmVkTXVsKGgpO1xuICAvLyBUMyA9IEUgKiBIXG4gIHZhciBudCA9IGUucmVkTXVsKGgpO1xuICAvLyBaMyA9IEYgKiBHXG4gIHZhciBueiA9IGYucmVkTXVsKGcpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56LCBudCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX3Byb2pBZGQgPSBmdW5jdGlvbiBfcHJvakFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWJiamxwXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDctYmxcbiAgLy8gMTBNICsgMVNcblxuICAvLyBBID0gWjEgKiBaMlxuICB2YXIgYSA9IHRoaXMuei5yZWRNdWwocC56KTtcbiAgLy8gQiA9IEFeMlxuICB2YXIgYiA9IGEucmVkU3FyKCk7XG4gIC8vIEMgPSBYMSAqIFgyXG4gIHZhciBjID0gdGhpcy54LnJlZE11bChwLngpO1xuICAvLyBEID0gWTEgKiBZMlxuICB2YXIgZCA9IHRoaXMueS5yZWRNdWwocC55KTtcbiAgLy8gRSA9IGQgKiBDICogRFxuICB2YXIgZSA9IHRoaXMuY3VydmUuZC5yZWRNdWwoYykucmVkTXVsKGQpO1xuICAvLyBGID0gQiAtIEVcbiAgdmFyIGYgPSBiLnJlZFN1YihlKTtcbiAgLy8gRyA9IEIgKyBFXG4gIHZhciBnID0gYi5yZWRBZGQoZSk7XG4gIC8vIFgzID0gQSAqIEYgKiAoKFgxICsgWTEpICogKFgyICsgWTIpIC0gQyAtIEQpXG4gIHZhciB0bXAgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkTXVsKHAueC5yZWRBZGQocC55KSkucmVkSVN1YihjKS5yZWRJU3ViKGQpO1xuICB2YXIgbnggPSBhLnJlZE11bChmKS5yZWRNdWwodG1wKTtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBhICogQylcbiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1Yih0aGlzLmN1cnZlLl9tdWxBKGMpKSk7XG4gICAgLy8gWjMgPSBGICogR1xuICAgIG56ID0gZi5yZWRNdWwoZyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gQylcbiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1YihjKSk7XG4gICAgLy8gWjMgPSBjICogRiAqIEdcbiAgICBueiA9IHRoaXMuY3VydmUuX211bEMoZikucmVkTXVsKGcpO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcDtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkKVxuICAgIHJldHVybiB0aGlzLl9leHRBZGQocCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakFkZChwKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAsIGsyKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIFsgdGhpcywgcCBdLCBbIGsxLCBrMiBdLCAyLCBmYWxzZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAsIGsyKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIFsgdGhpcywgcCBdLCBbIGsxLCBrMiBdLCAyLCB0cnVlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIGlmICh0aGlzLnpPbmUpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHZhciB6aSA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwoemkpO1xuICB0aGlzLnkgPSB0aGlzLnkucmVkTXVsKHppKTtcbiAgaWYgKHRoaXMudClcbiAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHppKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHRoaXMuek9uZSA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE5lZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ICYmIHRoaXMudC5yZWROZWcoKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzID09PSBvdGhlciB8fFxuICAgICAgICAgdGhpcy5nZXRYKCkuY21wKG90aGVyLmdldFgoKSkgPT09IDAgJiZcbiAgICAgICAgIHRoaXMuZ2V0WSgpLmNtcChvdGhlci5nZXRZKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh0aGlzLnopO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwodGhpcy56KTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSBleHBvcnRzO1xuXG5jdXJ2ZS5iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5jdXJ2ZS5zaG9ydCA9IHJlcXVpcmUoJy4vc2hvcnQnKTtcbmN1cnZlLm1vbnQgPSByZXF1aXJlKCcuL21vbnQnKTtcbmN1cnZlLmVkd2FyZHMgPSByZXF1aXJlKCcuL2Vkd2FyZHMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG5cbmZ1bmN0aW9uIE1vbnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnbW9udCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuaTQgPSBuZXcgQk4oNCkudG9SZWQodGhpcy5yZWQpLnJlZEludm0oKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmEyNCA9IHRoaXMuaTQucmVkTXVsKHRoaXMuYS5yZWRBZGQodGhpcy50d28pKTtcbn1cbmluaGVyaXRzKE1vbnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRDdXJ2ZTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnQubm9ybWFsaXplKCkueDtcbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHgyLnJlZE11bCh4KS5yZWRBZGQoeDIucmVkTXVsKHRoaXMuYSkpLnJlZEFkZCh4KTtcbiAgdmFyIHkgPSByaHMucmVkU3FydCgpO1xuXG4gIHJldHVybiB5LnJlZFNxcigpLmNtcChyaHMpID09PSAwO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHopIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IHRoaXMuY3VydmUuemVybztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICByZXR1cm4gdGhpcy5wb2ludCh1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpLCAxKTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB6KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeik7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZSgpIHtcbiAgLy8gTm8tb3Bcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZSgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKSk7XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHtcbiAgcmV0dXJuIG5ldyBQb2ludChjdXJ2ZSwgb2JqWzBdLCBvYmpbMV0gfHwgY3VydmUub25lKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZG91YmxpbmctZGJsLTE5ODctbS0zXG4gIC8vIDJNICsgMlMgKyA0QVxuXG4gIC8vIEEgPSBYMSArIFoxXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBBQSA9IEFeMlxuICB2YXIgYWEgPSBhLnJlZFNxcigpO1xuICAvLyBCID0gWDEgLSBaMVxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQkIgPSBCXjJcbiAgdmFyIGJiID0gYi5yZWRTcXIoKTtcbiAgLy8gQyA9IEFBIC0gQkJcbiAgdmFyIGMgPSBhYS5yZWRTdWIoYmIpO1xuICAvLyBYMyA9IEFBICogQkJcbiAgdmFyIG54ID0gYWEucmVkTXVsKGJiKTtcbiAgLy8gWjMgPSBDICogKEJCICsgQTI0ICogQylcbiAgdmFyIG56ID0gYy5yZWRNdWwoYmIucmVkQWRkKHRoaXMuY3VydmUuYTI0LnJlZE11bChjKSkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kaWZmQWRkID0gZnVuY3Rpb24gZGlmZkFkZChwLCBkaWZmKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RpZmZhZGQtZGFkZC0xOTg3LW0tM1xuICAvLyA0TSArIDJTICsgNkFcblxuICAvLyBBID0gWDIgKyBaMlxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQiA9IFgyIC0gWjJcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEMgPSBYMyArIFozXG4gIHZhciBjID0gcC54LnJlZEFkZChwLnopO1xuICAvLyBEID0gWDMgLSBaM1xuICB2YXIgZCA9IHAueC5yZWRTdWIocC56KTtcbiAgLy8gREEgPSBEICogQVxuICB2YXIgZGEgPSBkLnJlZE11bChhKTtcbiAgLy8gQ0IgPSBDICogQlxuICB2YXIgY2IgPSBjLnJlZE11bChiKTtcbiAgLy8gWDUgPSBaMSAqIChEQSArIENCKV4yXG4gIHZhciBueCA9IGRpZmYuei5yZWRNdWwoZGEucmVkQWRkKGNiKS5yZWRTcXIoKSk7XG4gIC8vIFo1ID0gWDEgKiAoREEgLSBDQileMlxuICB2YXIgbnogPSBkaWZmLngucmVkTXVsKGRhLnJlZElTdWIoY2IpLnJlZFNxcigpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICB2YXIgdCA9IGsuY2xvbmUoKTtcbiAgdmFyIGEgPSB0aGlzOyAvLyAoTiAvIDIpICogUSArIFFcbiAgdmFyIGIgPSB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpOyAvLyAoTiAvIDIpICogUVxuICB2YXIgYyA9IHRoaXM7IC8vIFFcblxuICBmb3IgKHZhciBiaXRzID0gW107IHQuY21wbigwKSAhPT0gMDsgdC5pdXNocm4oMSkpXG4gICAgYml0cy5wdXNoKHQuYW5kbG4oMSkpO1xuXG4gIGZvciAodmFyIGkgPSBiaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGJpdHNbaV0gPT09IDApIHtcbiAgICAgIC8vIE4gKiBRICsgUSA9ICgoTiAvIDIpICogUSArIFEpKSArIChOIC8gMikgKiBRXG4gICAgICBhID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgPSAyICogKChOIC8gMikgKiBRICsgUSkpXG4gICAgICBiID0gYi5kYmwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTiAqIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSArICgoTiAvIDIpICogUSlcbiAgICAgIGIgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSArIFEgPSAyICogKChOIC8gMikgKiBRICsgUSlcbiAgICAgIGEgPSBhLmRibCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuanVtbEFkZCA9IGZ1bmN0aW9uIGp1bWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcy5nZXRYKCkuY21wKG90aGVyLmdldFgoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2hvcnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnc2hvcnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnRpbnYgPSB0aGlzLnR3by5yZWRJbnZtKCk7XG5cbiAgdGhpcy56ZXJvQSA9IHRoaXMuYS5mcm9tUmVkKCkuY21wbigwKSA9PT0gMDtcbiAgdGhpcy50aHJlZUEgPSB0aGlzLmEuZnJvbVJlZCgpLnN1Yih0aGlzLnApLmNtcG4oLTMpID09PSAwO1xuXG4gIC8vIElmIHRoZSBjdXJ2ZSBpcyBlbmRvbW9ycGhpYywgcHJlY2FsY3VsYXRlIGJldGEgYW5kIGxhbWJkYVxuICB0aGlzLmVuZG8gPSB0aGlzLl9nZXRFbmRvbW9ycGhpc20oY29uZik7XG4gIHRoaXMuX2VuZG9XbmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX2VuZG9XbmFmVDIgPSBuZXcgQXJyYXkoNCk7XG59XG5pbmhlcml0cyhTaG9ydEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gU2hvcnRDdXJ2ZTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9tb3JwaGlzbSA9IGZ1bmN0aW9uIF9nZXRFbmRvbW9ycGhpc20oY29uZikge1xuICAvLyBObyBlZmZpY2llbnQgZW5kb21vcnBoaXNtXG4gIGlmICghdGhpcy56ZXJvQSB8fCAhdGhpcy5nIHx8ICF0aGlzLm4gfHwgdGhpcy5wLm1vZG4oMykgIT09IDEpXG4gICAgcmV0dXJuO1xuXG4gIC8vIENvbXB1dGUgYmV0YSBhbmQgbGFtYmRhLCB0aGF0IGxhbWJkYSAqIFAgPSAoYmV0YSAqIFB4OyBQeSlcbiAgdmFyIGJldGE7XG4gIHZhciBsYW1iZGE7XG4gIGlmIChjb25mLmJldGEpIHtcbiAgICBiZXRhID0gbmV3IEJOKGNvbmYuYmV0YSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYmV0YXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5wKTtcbiAgICAvLyBDaG9vc2UgdGhlIHNtYWxsZXN0IGJldGFcbiAgICBiZXRhID0gYmV0YXNbMF0uY21wKGJldGFzWzFdKSA8IDAgPyBiZXRhc1swXSA6IGJldGFzWzFdO1xuICAgIGJldGEgPSBiZXRhLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxuICBpZiAoY29uZi5sYW1iZGEpIHtcbiAgICBsYW1iZGEgPSBuZXcgQk4oY29uZi5sYW1iZGEsIDE2KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDaG9vc2UgdGhlIGxhbWJkYSB0aGF0IGlzIG1hdGNoaW5nIHNlbGVjdGVkIGJldGFcbiAgICB2YXIgbGFtYmRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLm4pO1xuICAgIGlmICh0aGlzLmcubXVsKGxhbWJkYXNbMF0pLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMV07XG4gICAgICBhc3NlcnQodGhpcy5nLm11bChsYW1iZGEpLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBiYXNpcyB2ZWN0b3JzLCB1c2VkIGZvciBiYWxhbmNlZCBsZW5ndGgtdHdvIHJlcHJlc2VudGF0aW9uXG4gIHZhciBiYXNpcztcbiAgaWYgKGNvbmYuYmFzaXMpIHtcbiAgICBiYXNpcyA9IGNvbmYuYmFzaXMubWFwKGZ1bmN0aW9uKHZlYykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbmV3IEJOKHZlYy5hLCAxNiksXG4gICAgICAgIGI6IG5ldyBCTih2ZWMuYiwgMTYpXG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJhc2lzID0gdGhpcy5fZ2V0RW5kb0Jhc2lzKGxhbWJkYSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJldGE6IGJldGEsXG4gICAgbGFtYmRhOiBsYW1iZGEsXG4gICAgYmFzaXM6IGJhc2lzXG4gIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzID0gZnVuY3Rpb24gX2dldEVuZG9Sb290cyhudW0pIHtcbiAgLy8gRmluZCByb290cyBvZiBmb3IgeF4yICsgeCArIDEgaW4gRlxuICAvLyBSb290ID0gKC0xICstIFNxcnQoLTMpKSAvIDJcbiAgLy9cbiAgdmFyIHJlZCA9IG51bSA9PT0gdGhpcy5wID8gdGhpcy5yZWQgOiBCTi5tb250KG51bSk7XG4gIHZhciB0aW52ID0gbmV3IEJOKDIpLnRvUmVkKHJlZCkucmVkSW52bSgpO1xuICB2YXIgbnRpbnYgPSB0aW52LnJlZE5lZygpO1xuXG4gIHZhciBzID0gbmV3IEJOKDMpLnRvUmVkKHJlZCkucmVkTmVnKCkucmVkU3FydCgpLnJlZE11bCh0aW52KTtcblxuICB2YXIgbDEgPSBudGludi5yZWRBZGQocykuZnJvbVJlZCgpO1xuICB2YXIgbDIgPSBudGludi5yZWRTdWIocykuZnJvbVJlZCgpO1xuICByZXR1cm4gWyBsMSwgbDIgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvQmFzaXMgPSBmdW5jdGlvbiBfZ2V0RW5kb0Jhc2lzKGxhbWJkYSkge1xuICAvLyBhcHJ4U3FydCA+PSBzcXJ0KHRoaXMubilcbiAgdmFyIGFwcnhTcXJ0ID0gdGhpcy5uLnVzaHJuKE1hdGguZmxvb3IodGhpcy5uLmJpdExlbmd0aCgpIC8gMikpO1xuXG4gIC8vIDMuNzRcbiAgLy8gUnVuIEVHQ0QsIHVudGlsIHIoTCArIDEpIDwgYXByeFNxcnRcbiAgdmFyIHUgPSBsYW1iZGE7XG4gIHZhciB2ID0gdGhpcy5uLmNsb25lKCk7XG4gIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgdmFyIHkxID0gbmV3IEJOKDApO1xuICB2YXIgeDIgPSBuZXcgQk4oMCk7XG4gIHZhciB5MiA9IG5ldyBCTigxKTtcblxuICAvLyBOT1RFOiBhbGwgdmVjdG9ycyBhcmUgcm9vdHMgb2Y6IGEgKyBiICogbGFtYmRhID0gMCAobW9kIG4pXG4gIHZhciBhMDtcbiAgdmFyIGIwO1xuICAvLyBGaXJzdCB2ZWN0b3JcbiAgdmFyIGExO1xuICB2YXIgYjE7XG4gIC8vIFNlY29uZCB2ZWN0b3JcbiAgdmFyIGEyO1xuICB2YXIgYjI7XG5cbiAgdmFyIHByZXZSO1xuICB2YXIgaSA9IDA7XG4gIHZhciByO1xuICB2YXIgeDtcbiAgd2hpbGUgKHUuY21wbigwKSAhPT0gMCkge1xuICAgIHZhciBxID0gdi5kaXYodSk7XG4gICAgciA9IHYuc3ViKHEubXVsKHUpKTtcbiAgICB4ID0geDIuc3ViKHEubXVsKHgxKSk7XG4gICAgdmFyIHkgPSB5Mi5zdWIocS5tdWwoeTEpKTtcblxuICAgIGlmICghYTEgJiYgci5jbXAoYXByeFNxcnQpIDwgMCkge1xuICAgICAgYTAgPSBwcmV2Ui5uZWcoKTtcbiAgICAgIGIwID0geDE7XG4gICAgICBhMSA9IHIubmVnKCk7XG4gICAgICBiMSA9IHg7XG4gICAgfSBlbHNlIGlmIChhMSAmJiArK2kgPT09IDIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2UiA9IHI7XG5cbiAgICB2ID0gdTtcbiAgICB1ID0gcjtcbiAgICB4MiA9IHgxO1xuICAgIHgxID0geDtcbiAgICB5MiA9IHkxO1xuICAgIHkxID0geTtcbiAgfVxuICBhMiA9IHIubmVnKCk7XG4gIGIyID0geDtcblxuICB2YXIgbGVuMSA9IGExLnNxcigpLmFkZChiMS5zcXIoKSk7XG4gIHZhciBsZW4yID0gYTIuc3FyKCkuYWRkKGIyLnNxcigpKTtcbiAgaWYgKGxlbjIuY21wKGxlbjEpID49IDApIHtcbiAgICBhMiA9IGEwO1xuICAgIGIyID0gYjA7XG4gIH1cblxuICAvLyBOb3JtYWxpemUgc2lnbnNcbiAgaWYgKGExLm5lZ2F0aXZlKSB7XG4gICAgYTEgPSBhMS5uZWcoKTtcbiAgICBiMSA9IGIxLm5lZygpO1xuICB9XG4gIGlmIChhMi5uZWdhdGl2ZSkge1xuICAgIGEyID0gYTIubmVnKCk7XG4gICAgYjIgPSBiMi5uZWcoKTtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgeyBhOiBhMSwgYjogYjEgfSxcbiAgICB7IGE6IGEyLCBiOiBiMiB9XG4gIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1NwbGl0ID0gZnVuY3Rpb24gX2VuZG9TcGxpdChrKSB7XG4gIHZhciBiYXNpcyA9IHRoaXMuZW5kby5iYXNpcztcbiAgdmFyIHYxID0gYmFzaXNbMF07XG4gIHZhciB2MiA9IGJhc2lzWzFdO1xuXG4gIHZhciBjMSA9IHYyLmIubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG4gIHZhciBjMiA9IHYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG5cbiAgdmFyIHAxID0gYzEubXVsKHYxLmEpO1xuICB2YXIgcDIgPSBjMi5tdWwodjIuYSk7XG4gIHZhciBxMSA9IGMxLm11bCh2MS5iKTtcbiAgdmFyIHEyID0gYzIubXVsKHYyLmIpO1xuXG4gIC8vIENhbGN1bGF0ZSBhbnN3ZXJcbiAgdmFyIGsxID0gay5zdWIocDEpLnN1YihwMik7XG4gIHZhciBrMiA9IHExLmFkZChxMikubmVnKCk7XG4gIHJldHVybiB7IGsxOiBrMSwgazI6IGsyIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB5MiA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoeC5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICAvLyBYWFggSXMgdGhlcmUgYW55IHdheSB0byB0ZWxsIGlmIHRoZSBudW1iZXIgaXMgb2RkIHdpdGhvdXQgY29udmVydGluZyBpdFxuICAvLyB0byBub24tcmVkIGZvcm0/XG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pbmYpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHggPSBwb2ludC54O1xuICB2YXIgeSA9IHBvaW50Lnk7XG5cbiAgdmFyIGF4ID0gdGhpcy5hLnJlZE11bCh4KTtcbiAgdmFyIHJocyA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoYXgpLnJlZElBZGQodGhpcy5iKTtcbiAgcmV0dXJuIHkucmVkU3FyKCkucmVkSVN1YihyaHMpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1duYWZNdWxBZGQgPVxuICAgIGZ1bmN0aW9uIF9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIG5wb2ludHMgPSB0aGlzLl9lbmRvV25hZlQxO1xuICB2YXIgbmNvZWZmcyA9IHRoaXMuX2VuZG9XbmFmVDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwbGl0ID0gdGhpcy5fZW5kb1NwbGl0KGNvZWZmc1tpXSk7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIGJldGEgPSBwLl9nZXRCZXRhKCk7XG5cbiAgICBpZiAoc3BsaXQuazEubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsxLmluZWcoKTtcbiAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHNwbGl0LmsyLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMi5pbmVnKCk7XG4gICAgICBiZXRhID0gYmV0YS5uZWcodHJ1ZSk7XG4gICAgfVxuXG4gICAgbnBvaW50c1tpICogMl0gPSBwO1xuICAgIG5wb2ludHNbaSAqIDIgKyAxXSA9IGJldGE7XG4gICAgbmNvZWZmc1tpICogMl0gPSBzcGxpdC5rMTtcbiAgICBuY29lZmZzW2kgKiAyICsgMV0gPSBzcGxpdC5rMjtcbiAgfVxuICB2YXIgcmVzID0gdGhpcy5fd25hZk11bEFkZCgxLCBucG9pbnRzLCBuY29lZmZzLCBpICogMiwgamFjb2JpYW5SZXN1bHQpO1xuXG4gIC8vIENsZWFuLXVwIHJlZmVyZW5jZXMgdG8gcG9pbnRzIGFuZCBjb2VmZmljaWVudHNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBpICogMjsgaisrKSB7XG4gICAgbnBvaW50c1tqXSA9IG51bGw7XG4gICAgbmNvZWZmc1tqXSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCBpc1JlZCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnYWZmaW5lJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSBudWxsO1xuICAgIHRoaXMueSA9IG51bGw7XG4gICAgdGhpcy5pbmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICAvLyBGb3JjZSByZWRnb21lcnkgcmVwcmVzZW50YXRpb24gd2hlbiBsb2FkaW5nIGZyb20gSlNPTlxuICAgIGlmIChpc1JlZCkge1xuICAgICAgdGhpcy54LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICAgIHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLmluZiA9IGZhbHNlO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIGlzUmVkKSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgaXNSZWQpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqLCByZWQpIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaiwgcmVkKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICBpZiAoIXRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm47XG5cbiAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gIGlmIChwcmUgJiYgcHJlLmJldGEpXG4gICAgcmV0dXJuIHByZS5iZXRhO1xuXG4gIHZhciBiZXRhID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTXVsKHRoaXMuY3VydmUuZW5kby5iZXRhKSwgdGhpcy55KTtcbiAgaWYgKHByZSkge1xuICAgIHZhciBjdXJ2ZSA9IHRoaXMuY3VydmU7XG4gICAgdmFyIGVuZG9NdWwgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gY3VydmUucG9pbnQocC54LnJlZE11bChjdXJ2ZS5lbmRvLmJldGEpLCBwLnkpO1xuICAgIH07XG4gICAgcHJlLmJldGEgPSBiZXRhO1xuICAgIGJldGEucHJlY29tcHV0ZWQgPSB7XG4gICAgICBiZXRhOiBudWxsLFxuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJldGE7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnkgXTtcblxuICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSwgdGhpcy5wcmVjb21wdXRlZCAmJiB7XG4gICAgZG91YmxlczogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpXG4gICAgfSxcbiAgICBuYWY6IHRoaXMucHJlY29tcHV0ZWQubmFmICYmIHtcbiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSlcbiAgICB9XG4gIH0gXTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaiwgcmVkKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJylcbiAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XG4gIHZhciByZXMgPSBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgaWYgKCFvYmpbMl0pXG4gICAgcmV0dXJuIHJlcztcblxuICBmdW5jdGlvbiBvYmoycG9pbnQob2JqKSB7XG4gICAgcmV0dXJuIGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICB9XG5cbiAgdmFyIHByZSA9IG9ialsyXTtcbiAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgIGJldGE6IG51bGwsXG4gICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLmRvdWJsZXMucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH0sXG4gICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgcmV0dXJuIHRoaXMuaW5mO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBQICsgUCA9IDJQXG4gIGlmICh0aGlzLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIC8vIFAgKyAoLVApID0gT1xuICBpZiAodGhpcy5uZWcoKS5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICAvLyBQICsgUSA9IE9cbiAgaWYgKHRoaXMueC5jbXAocC54KSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYyA9IHRoaXMueS5yZWRTdWIocC55KTtcbiAgaWYgKGMuY21wbigwKSAhPT0gMClcbiAgICBjID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihwLngpLnJlZEludm0oKSk7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIocC54KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAyUCA9IE9cbiAgdmFyIHlzMSA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgaWYgKHlzMS5jbXBuKDApID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIHZhciB4MiA9IHRoaXMueC5yZWRTcXIoKTtcbiAgdmFyIGR5aW52ID0geXMxLnJlZEludm0oKTtcbiAgdmFyIGMgPSB4Mi5yZWRBZGQoeDIpLnJlZElBZGQoeDIpLnJlZElBZGQoYSkucmVkTXVsKGR5aW52KTtcblxuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54LnJlZEFkZCh0aGlzLngpKTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGsgPSBuZXcgQk4oaywgMTYpO1xuXG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbIHRoaXMgXSwgWyBrIF0pO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIHJldHVybiB0aGlzID09PSBwIHx8XG4gICAgICAgICB0aGlzLmluZiA9PT0gcC5pbmYgJiZcbiAgICAgICAgICAgICAodGhpcy5pbmYgfHwgdGhpcy54LmNtcChwLngpID09PSAwICYmIHRoaXMueS5jbXAocC55KSA9PT0gMCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKF9wcmVjb21wdXRlKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSk7XG4gIGlmIChfcHJlY29tcHV0ZSAmJiB0aGlzLnByZWNvbXB1dGVkKSB7XG4gICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwLm5lZygpO1xuICAgIH07XG4gICAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KID0gZnVuY3Rpb24gdG9KKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueSwgdGhpcy5jdXJ2ZS5vbmUpO1xuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdqYWNvYmlhbicpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSBuZXcgQk4oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gIH1cbiAgaWYgKCF0aGlzLngucmVkKVxuICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy55LnJlZClcbiAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMuei5yZWQpXG4gICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcblxuICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xufVxuaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgQk4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgenMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh6cyk7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh6cyk7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBKUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgSlBvaW50IHg6ICcgKyB0aGlzLngudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZXMgPSBleHBvcnRzO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uL2VsbGlwdGljJyk7XG5cbnZhciBhc3NlcnQgPSBlbGxpcHRpYy51dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Nob3J0JylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmN1cnZlLnNob3J0KG9wdGlvbnMpO1xuICBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09ICdlZHdhcmRzJylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmN1cnZlLmVkd2FyZHMob3B0aW9ucyk7XG4gIGVsc2VcbiAgICB0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmN1cnZlLm1vbnQob3B0aW9ucyk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG5cbiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpO1xuICBhc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSwgJ0ludmFsaWQgY3VydmUsIEcqTiAhPSBPJyk7XG59XG5jdXJ2ZXMuUHJlc2V0Q3VydmUgPSBQcmVzZXRDdXJ2ZTtcblxuZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJ2ZSA9IG5ldyBQcmVzZXRDdXJ2ZShvcHRpb25zKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY3VydmVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGN1cnZlO1xuICAgIH1cbiAgfSk7XG59XG5cbmRlZmluZUN1cnZlKCdwMTkyJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AxOTInLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTInLFxuICAgICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjI0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AyMjQnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUnLFxuICBiOiAnYjQwNTBhODUgMGMwNGIzYWIgZjU0MTMyNTYgNTA0NGIwYjcgZDdiZmQ4YmEgMjcwYjM5NDMgMjM1NWZmYjQnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZjE2YTIgZTBiOGYwM2UgMTNkZDI5NDUgNWM1YzJhM2QnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjEnLFxuICAgICdiZDM3NjM4OCBiNWY3MjNmYiA0YzIyZGZlNiBjZDQzNzVhMCA1YTA3NDc2NCA0NGQ1ODE5OSA4NTAwN2UzNCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjU2Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiJyxcbiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JyxcbiAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjUnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDM4NCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmMnLFxuICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArXG4gICAgICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZicsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSAnICtcbiAgICAgJ2Y0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczJyxcbiAgaGFzaDogaGFzaC5zaGEzODQsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4ICcgK1xuICAgICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsXG4gICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwICcgK1xuICAgICcwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZidcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwNTIxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnMDAwMDAwNTEgOTUzZWI5NjEgOGUxYzlhMWYgOTI5YTIxYTAgYjY4NTQwZWUgYTJkYTcyNWIgJyArXG4gICAgICc5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMSA1NjE5Mzk1MSBlYzdlOTM3YiAxNjUyYzBiZCAnICtcbiAgICAgJzNiYjFiZjA3IDM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwJyxcbiAgbjogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmEgNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggJyArXG4gICAgICdmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOScsXG4gIGhhc2g6IGhhc2guc2hhNTEyLFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcwMDAwMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSAnICtcbiAgICAnMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgJyArXG4gICAgJ2EyZmZhOGRlIDMzNDhiM2MxIDg1NmE0MjliIGY5N2U3ZTMxIGMyZTViZDY2JyxcbiAgICAnMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgJyArXG4gICAgJzU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxICcgK1xuICAgICczZmFkMDc2MSAzNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMScsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgSG1hY0RSQkcgPSByZXF1aXJlKCdobWFjLWRyYmcnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQoZWxsaXB0aWMuY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7XG5cbiAgICBvcHRpb25zID0gZWxsaXB0aWMuY3VydmVzW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBlbGxpcHRpYy5jdXJ2ZXMuUHJlc2V0Q3VydmUpXG4gICAgb3B0aW9ucyA9IHsgY3VydmU6IG9wdGlvbnMgfTtcblxuICB0aGlzLmN1cnZlID0gb3B0aW9ucy5jdXJ2ZS5jdXJ2ZTtcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLm5oID0gdGhpcy5uLnVzaHJuKDEpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG5cbiAgLy8gUG9pbnQgb24gY3VydmVcbiAgdGhpcy5nID0gb3B0aW9ucy5jdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShvcHRpb25zLmN1cnZlLm4uYml0TGVuZ3RoKCkgKyAxKTtcblxuICAvLyBIYXNoIGZvciBmdW5jdGlvbiBmb3IgRFJCR1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2ggfHwgb3B0aW9ucy5jdXJ2ZS5oYXNoO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFQztcblxuRUMucHJvdG90eXBlLmtleVBhaXIgPSBmdW5jdGlvbiBrZXlQYWlyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKHRoaXMsIG9wdGlvbnMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21Qcml2YXRlID0gZnVuY3Rpb24ga2V5RnJvbVByaXZhdGUocHJpdiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21Qcml2YXRlKHRoaXMsIHByaXYsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViLCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2VuS2V5UGFpciA9IGZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnLFxuICAgIGVudHJvcHk6IG9wdGlvbnMuZW50cm9weSB8fCBlbGxpcHRpYy5yYW5kKHRoaXMuaGFzaC5obWFjU3RyZW5ndGgpLFxuICAgIGVudHJvcHlFbmM6IG9wdGlvbnMuZW50cm9weSAmJiBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ3V0ZjgnLFxuICAgIG5vbmNlOiB0aGlzLm4udG9BcnJheSgpXG4gIH0pO1xuXG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBuczIgPSB0aGlzLm4uc3ViKG5ldyBCTigyKSk7XG4gIGRvIHtcbiAgICB2YXIgcHJpdiA9IG5ldyBCTihkcmJnLmdlbmVyYXRlKGJ5dGVzKSk7XG4gICAgaWYgKHByaXYuY21wKG5zMikgPiAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBwcml2LmlhZGRuKDEpO1xuICAgIHJldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpO1xuICB9IHdoaWxlICh0cnVlKTtcbn07XG5cbkVDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb04gPSBmdW5jdGlvbiB0cnVuY2F0ZVRvTihtc2csIHRydW5jT25seSkge1xuICB2YXIgZGVsdGEgPSBtc2cuYnl0ZUxlbmd0aCgpICogOCAtIHRoaXMubi5iaXRMZW5ndGgoKTtcbiAgaWYgKGRlbHRhID4gMClcbiAgICBtc2cgPSBtc2cudXNocm4oZGVsdGEpO1xuICBpZiAoIXRydW5jT25seSAmJiBtc2cuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gbXNnLnN1Yih0aGlzLm4pO1xuICBlbHNlXG4gICAgcmV0dXJuIG1zZztcbn07XG5cbkVDLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2csIGtleSwgZW5jLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZW5jID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIGtleSA9IHRoaXMua2V5RnJvbVByaXZhdGUoa2V5LCBlbmMpO1xuICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIGtleSB0byBwcm92aWRlIGVub3VnaCBlbnRyb3B5XG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBia2V5ID0ga2V5LmdldFByaXZhdGUoKS50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBaZXJvLWV4dGVuZCBub25jZSB0byBoYXZlIHRoZSBzYW1lIGJ5dGUgc2l6ZSBhcyBOXG4gIHZhciBub25jZSA9IG1zZy50b0FycmF5KCdiZScsIGJ5dGVzKTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBlbnRyb3B5OiBia2V5LFxuICAgIG5vbmNlOiBub25jZSxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4J1xuICB9KTtcblxuICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGVcbiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTtcblxuICBmb3IgKHZhciBpdGVyID0gMDsgdHJ1ZTsgaXRlcisrKSB7XG4gICAgdmFyIGsgPSBvcHRpb25zLmsgP1xuICAgICAgICBvcHRpb25zLmsoaXRlcikgOlxuICAgICAgICBuZXcgQk4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7XG4gICAgayA9IHRoaXMuX3RydW5jYXRlVG9OKGssIHRydWUpO1xuICAgIGlmIChrLmNtcG4oMSkgPD0gMCB8fCBrLmNtcChuczEpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7XG4gICAgaWYgKGtwLmlzSW5maW5pdHkoKSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwWCA9IGtwLmdldFgoKTtcbiAgICB2YXIgciA9IGtwWC51bW9kKHRoaXMubik7XG4gICAgaWYgKHIuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHMgPSBrLmludm0odGhpcy5uKS5tdWwoci5tdWwoa2V5LmdldFByaXZhdGUoKSkuaWFkZChtc2cpKTtcbiAgICBzID0gcy51bW9kKHRoaXMubik7XG4gICAgaWYgKHMuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHJlY292ZXJ5UGFyYW0gPSAoa3AuZ2V0WSgpLmlzT2RkKCkgPyAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7XG5cbiAgICAvLyBVc2UgY29tcGxlbWVudCBvZiBgc2AsIGlmIGl0IGlzID4gYG4gLyAyYFxuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbCAmJiBzLmNtcCh0aGlzLm5oKSA+IDApIHtcbiAgICAgIHMgPSB0aGlzLm4uc3ViKHMpO1xuICAgICAgcmVjb3ZlcnlQYXJhbSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHsgcjogciwgczogcywgcmVjb3ZlcnlQYXJhbTogcmVjb3ZlcnlQYXJhbSB9KTtcbiAgfVxufTtcblxuRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcbiAga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKGtleSwgZW5jKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTtcblxuICAvLyBQZXJmb3JtIHByaW1pdGl2ZSB2YWx1ZXMgdmFsaWRhdGlvblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLnVtb2QodGhpcy5uKTtcbiAgdmFyIHUyID0gc2ludi5tdWwocikudW1vZCh0aGlzLm4pO1xuXG4gIGlmICghdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKSB7XG4gICAgdmFyIHAgPSB0aGlzLmcubXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gcC5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChyKSA9PT0gMDtcbiAgfVxuXG4gIC8vIE5PVEU6IEdyZWcgTWF4d2VsbCdzIHRyaWNrLCBpbnNwaXJlZCBieTpcbiAgLy8gaHR0cHM6Ly9naXQuaW8vdmFkM0tcblxuICB2YXIgcCA9IHRoaXMuZy5qbXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBDb21wYXJlIGBwLnhgIG9mIEphY29iaWFuIHBvaW50IHdpdGggYHJgLFxuICAvLyB0aGlzIHdpbGwgZG8gYHAueCA9PSByICogcC56XjJgIGluc3RlYWQgb2YgbXVsdGlwbHlpbmcgYHAueGAgYnkgdGhlXG4gIC8vIGludmVyc2Ugb2YgYHAuel4yYFxuICByZXR1cm4gcC5lcVhUb1Aocik7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBCTihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpID49IDAgJiYgaXNTZWNvbmRLZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBzZW5jb25kIGtleSBjYW5kaW5hdGUnKTtcblxuICAvLyAxLjEuIExldCB4ID0gciArIGpuLlxuICBpZiAoaXNTZWNvbmRLZXkpXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLmFkZCh0aGlzLmN1cnZlLm4pLCBpc1lPZGQpO1xuICBlbHNlXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLCBpc1lPZGQpO1xuXG4gIHZhciBySW52ID0gc2lnbmF0dXJlLnIuaW52bShuKTtcbiAgdmFyIHMxID0gbi5zdWIoZSkubXVsKHJJbnYpLnVtb2Qobik7XG4gIHZhciBzMiA9IHMubXVsKHJJbnYpLnVtb2Qobik7XG5cbiAgLy8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpXG4gIC8vICAgICAgICAgICAgICAgUSA9IHJeLTEgKHNSICsgLWVHKVxuICByZXR1cm4gdGhpcy5nLm11bEFkZChzMSwgciwgczIpO1xufTtcblxuRUMucHJvdG90eXBlLmdldEtleVJlY292ZXJ5UGFyYW0gPSBmdW5jdGlvbihlLCBzaWduYXR1cmUsIFEsIGVuYykge1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcbiAgaWYgKHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtICE9PSBudWxsKVxuICAgIHJldHVybiBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBRcHJpbWU7XG4gICAgdHJ5IHtcbiAgICAgIFFwcmltZSA9IHRoaXMucmVjb3ZlclB1YktleShlLCBzaWduYXR1cmUsIGkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChRcHJpbWUuZXEoUSkpXG4gICAgICByZXR1cm4gaTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICAvLyBjb21wYWN0IGlzIG9wdGlvbmFsIGFyZ3VtZW50XG4gIGlmICh0eXBlb2YgY29tcGFjdCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBjb21wYWN0O1xuICAgIGNvbXBhY3QgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF0aGlzLnB1YilcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuZy5tdWwodGhpcy5wcml2KTtcblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgcmV0dXJuIHRoaXMucHViLmVuY29kZShlbmMsIGNvbXBhY3QpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZSA9IGZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMucHJpdjtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQcml2YXRlID0gZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LCBlbmMpIHtcbiAgdGhpcy5wcml2ID0gbmV3IEJOKGtleSwgZW5jIHx8IDE2KTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGUgcHJpdiB3b24ndCBiZSBiaWdnZXIgdGhhbiBuLCBvdGhlcndpc2Ugd2UgbWF5IGZhaWxcbiAgLy8gaW4gZml4ZWQgbXVsdGlwbGljYXRpb24gbWV0aG9kXG4gIHRoaXMucHJpdiA9IHRoaXMucHJpdi51bW9kKHRoaXMuZWMuY3VydmUubik7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpYyhrZXksIGVuYykge1xuICBpZiAoa2V5LnggfHwga2V5LnkpIHtcbiAgICAvLyBNb250Z29tZXJ5IHBvaW50cyBvbmx5IGhhdmUgYW4gYHhgIGNvb3JkaW5hdGUuXG4gICAgLy8gV2VpZXJzdHJhc3MvRWR3YXJkcyBwb2ludHMgb24gdGhlIG90aGVyIGhhbmQgaGF2ZSBib3RoIGB4YCBhbmRcbiAgICAvLyBgeWAgY29vcmRpbmF0ZXMuXG4gICAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ21vbnQnKSB7XG4gICAgICBhc3NlcnQoa2V5LngsICdOZWVkIHggY29vcmRpbmF0ZScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnc2hvcnQnIHx8XG4gICAgICAgICAgICAgICB0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdlZHdhcmRzJykge1xuICAgICAgYXNzZXJ0KGtleS54ICYmIGtleS55LCAnTmVlZCBib3RoIHggYW5kIHkgY29vcmRpbmF0ZScpO1xuICAgIH1cbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnQoa2V5LngsIGtleS55KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGtleSwgZW5jKTtcbn07XG5cbi8vIEVDREhcbktleVBhaXIucHJvdG90eXBlLmRlcml2ZSA9IGZ1bmN0aW9uIGRlcml2ZShwdWIpIHtcbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IEJOKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgQk4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gPT09IHVuZGVmaW5lZClcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xufVxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFBvc2l0aW9uKCkge1xuICB0aGlzLnBsYWNlID0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkge1xuICB2YXIgaW5pdGlhbCA9IGJ1ZltwLnBsYWNlKytdO1xuICBpZiAoIShpbml0aWFsICYgMHg4MCkpIHtcbiAgICByZXR1cm4gaW5pdGlhbDtcbiAgfVxuICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmO1xuICB2YXIgdmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykge1xuICAgIHZhbCA8PD0gODtcbiAgICB2YWwgfD0gYnVmW29mZl07XG4gIH1cbiAgcC5wbGFjZSA9IG9mZjtcbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gcm1QYWRkaW5nKGJ1Zikge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCFidWZbaV0gJiYgIShidWZbaSArIDFdICYgMHg4MCkgJiYgaSA8IGxlbikge1xuICAgIGkrKztcbiAgfVxuICBpZiAoaSA9PT0gMCkge1xuICAgIHJldHVybiBidWY7XG4gIH1cbiAgcmV0dXJuIGJ1Zi5zbGljZShpKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS5faW1wb3J0REVSID0gZnVuY3Rpb24gX2ltcG9ydERFUihkYXRhLCBlbmMpIHtcbiAgZGF0YSA9IHV0aWxzLnRvQXJyYXkoZGF0YSwgZW5jKTtcbiAgdmFyIHAgPSBuZXcgUG9zaXRpb24oKTtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgzMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoKGxlbiArIHAucGxhY2UpICE9PSBkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBybGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICB2YXIgciA9IGRhdGEuc2xpY2UocC5wbGFjZSwgcmxlbiArIHAucGxhY2UpO1xuICBwLnBsYWNlICs9IHJsZW47XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc2xlbiArIHAucGxhY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHMgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHNsZW4gKyBwLnBsYWNlKTtcbiAgaWYgKHJbMF0gPT09IDAgJiYgKHJbMV0gJiAweDgwKSkge1xuICAgIHIgPSByLnNsaWNlKDEpO1xuICB9XG4gIGlmIChzWzBdID09PSAwICYmIChzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuXG4gIHRoaXMuciA9IG5ldyBCTihyKTtcbiAgdGhpcy5zID0gbmV3IEJOKHMpO1xuICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPCAweDgwKSB7XG4gICAgYXJyLnB1c2gobGVuKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTtcbiAgYXJyLnB1c2gob2N0ZXRzIHwgMHg4MCk7XG4gIHdoaWxlICgtLW9jdGV0cykge1xuICAgIGFyci5wdXNoKChsZW4gPj4+IChvY3RldHMgPDwgMykpICYgMHhmZik7XG4gIH1cbiAgYXJyLnB1c2gobGVuKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUiA9IGZ1bmN0aW9uIHRvREVSKGVuYykge1xuICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7XG4gIHZhciBzID0gdGhpcy5zLnRvQXJyYXkoKTtcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MClcbiAgICByID0gWyAwIF0uY29uY2F0KHIpO1xuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MClcbiAgICBzID0gWyAwIF0uY29uY2F0KHMpO1xuXG4gIHIgPSBybVBhZGRpbmcocik7XG4gIHMgPSBybVBhZGRpbmcocyk7XG5cbiAgd2hpbGUgKCFzWzBdICYmICEoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgdmFyIGFyciA9IFsgMHgwMiBdO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCByLmxlbmd0aCk7XG4gIGFyciA9IGFyci5jb25jYXQocik7XG4gIGFyci5wdXNoKDB4MDIpO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBzLmxlbmd0aCk7XG4gIHZhciBiYWNrSGFsZiA9IGFyci5jb25jYXQocyk7XG4gIHZhciByZXMgPSBbIDB4MzAgXTtcbiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTtcbiAgcmVzID0gcmVzLmNvbmNhdChiYWNrSGFsZik7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVERFNBKGN1cnZlKSB7XG4gIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpXG4gICAgcmV0dXJuIG5ldyBFRERTQShjdXJ2ZSk7XG5cbiAgdmFyIGN1cnZlID0gZWxsaXB0aWMuY3VydmVzW2N1cnZlXS5jdXJ2ZTtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLmcgPSBjdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShjdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgdGhpcy5wb2ludENsYXNzID0gY3VydmUucG9pbnQoKS5jb25zdHJ1Y3RvcjtcbiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7XG4gIHRoaXMuaGFzaCA9IGhhc2guc2hhNTEyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVERFNBO1xuXG4vKipcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXJcbiogQHJldHVybnMge1NpZ25hdHVyZX0gLSBzaWduYXR1cmVcbiovXG5FRERTQS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tU2VjcmV0KHNlY3JldCk7XG4gIHZhciByID0gdGhpcy5oYXNoSW50KGtleS5tZXNzYWdlUHJlZml4KCksIG1lc3NhZ2UpO1xuICB2YXIgUiA9IHRoaXMuZy5tdWwocik7XG4gIHZhciBSZW5jb2RlZCA9IHRoaXMuZW5jb2RlUG9pbnQoUik7XG4gIHZhciBzXyA9IHRoaXMuaGFzaEludChSZW5jb2RlZCwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAubXVsKGtleS5wcml2KCkpO1xuICB2YXIgUyA9IHIuYWRkKHNfKS51bW9kKHRoaXMuY3VydmUubik7XG4gIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoeyBSOiBSLCBTOiBTLCBSZW5jb2RlZDogUmVuY29kZWQgfSk7XG59O1xuXG4vKipcbiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8U2lnbmF0dXJlfSBzaWcgLSBzaWcgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8UG9pbnR8S2V5UGFpcn0gcHViIC0gcHVibGljIGtleVxuKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZVxuKi9cbkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHNpZyA9IHRoaXMubWFrZVNpZ25hdHVyZShzaWcpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7XG4gIHZhciBoID0gdGhpcy5oYXNoSW50KHNpZy5SZW5jb2RlZCgpLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSk7XG4gIHZhciBTRyA9IHRoaXMuZy5tdWwoc2lnLlMoKSk7XG4gIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7XG4gIHJldHVybiBScGx1c0FoLmVxKFNHKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5oYXNoSW50ID0gZnVuY3Rpb24gaGFzaEludCgpIHtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgaGFzaC51cGRhdGUoYXJndW1lbnRzW2ldKTtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0ID0gZnVuY3Rpb24ga2V5RnJvbVNlY3JldChzZWNyZXQpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVNlY3JldCh0aGlzLCBzZWNyZXQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLm1ha2VTaWduYXR1cmUgPSBmdW5jdGlvbiBtYWtlU2lnbmF0dXJlKHNpZykge1xuICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBzaWc7XG4gIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7XG59O1xuXG4vKipcbiogKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtam9zZWZzc29uLWVkZHNhLWVkMjU1MTktMDMjc2VjdGlvbi01LjJcbipcbiogRUREU0EgZGVmaW5lcyBtZXRob2RzIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcG9pbnRzIGFuZCBpbnRlZ2Vycy4gVGhlc2UgYXJlXG4qIGhlbHBlciBjb252ZW5pZW5jZSBtZXRob2RzLCB0aGF0IHBhc3MgYWxvbmcgdG8gdXRpbGl0eSBmdW5jdGlvbnMgaW1wbGllZFxuKiBwYXJhbWV0ZXJzLlxuKlxuKi9cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVQb2ludCA9IGZ1bmN0aW9uIGVuY29kZVBvaW50KHBvaW50KSB7XG4gIHZhciBlbmMgPSBwb2ludC5nZXRZKCkudG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbiAgZW5jW3RoaXMuZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwO1xuICByZXR1cm4gZW5jO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzKGJ5dGVzKTtcblxuICB2YXIgbGFzdEl4ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7XG4gIHZhciB4SXNPZGQgPSAoYnl0ZXNbbGFzdEl4XSAmIDB4ODApICE9PSAwO1xuXG4gIHZhciB5ID0gdXRpbHMuaW50RnJvbUxFKG5vcm1lZCk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50RnJvbVkoeSwgeElzT2RkKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtKSB7XG4gIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShieXRlcyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaXNQb2ludCA9IGZ1bmN0aW9uIGlzUG9pbnQodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVyc1xuKlxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnNlY3JldF0gLSBzZWNyZXQgc2VlZCBieXRlc1xuKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKVxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IGVuY29kZWQgYXMgYnl0ZXNcbipcbiovXG5mdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuICB0aGlzLl9zZWNyZXQgPSBwYXJzZUJ5dGVzKHBhcmFtcy5zZWNyZXQpO1xuICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSlcbiAgICB0aGlzLl9wdWIgPSBwYXJhbXMucHViO1xuICBlbHNlXG4gICAgdGhpcy5fcHViQnl0ZXMgPSBwYXJzZUJ5dGVzKHBhcmFtcy5wdWIpO1xufVxuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVkZHNhLCBwdWIpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHB1YjogcHViIH0pO1xufTtcblxuS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7XG4gIGlmIChzZWNyZXQgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBzZWNyZXQ7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBzZWNyZXQ6IHNlY3JldCB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnNlY3JldCA9IGZ1bmN0aW9uIHNlY3JldCgpIHtcbiAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbn07XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWJCeXRlcycsIGZ1bmN0aW9uIHB1YkJ5dGVzKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViJywgZnVuY3Rpb24gcHViKCkge1xuICBpZiAodGhpcy5fcHViQnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5fcHViQnl0ZXMpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHtcbiAgdmFyIGVkZHNhID0gdGhpcy5lZGRzYTtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTtcblxuICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xuICBhWzBdICY9IDI0ODtcbiAgYVtsYXN0SXhdICY9IDEyNztcbiAgYVtsYXN0SXhdIHw9IDY0O1xuXG4gIHJldHVybiBhO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2JywgZnVuY3Rpb24gcHJpdigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMucHJpdkJ5dGVzKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnbWVzc2FnZVByZWZpeCcsIGZ1bmN0aW9uIG1lc3NhZ2VQcmVmaXgoKSB7XG4gIHJldHVybiB0aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbn0pO1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGNhbiBvbmx5IHZlcmlmeScpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5zaWduKG1lc3NhZ2UsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZykge1xuICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgaXMgcHVibGljIG9ubHknKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnNlY3JldCgpLCBlbmMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGVuYykge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gZWRkc2EgaW5zdGFuY2VcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58T2JqZWN0fSBzaWcgLVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxQb2ludH0gW3NpZy5SXSAtIFIgcG9pbnQgYXMgUG9pbnQgb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58Ym59IFtzaWcuU10gLSBTIHNjYWxhciBhcyBibiBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5SZW5jb2RlZF0gLSBSIHBvaW50IGVuY29kZWRcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuU2VuY29kZWRdIC0gUyBzY2FsYXIgZW5jb2RlZFxuKi9cbmZ1bmN0aW9uIFNpZ25hdHVyZShlZGRzYSwgc2lnKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcblxuICBpZiAodHlwZW9mIHNpZyAhPT0gJ29iamVjdCcpXG4gICAgc2lnID0gcGFyc2VCeXRlcyhzaWcpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHtcbiAgICBzaWcgPSB7XG4gICAgICBSOiBzaWcuc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpLFxuICAgICAgUzogc2lnLnNsaWNlKGVkZHNhLmVuY29kaW5nTGVuZ3RoKVxuICAgIH07XG4gIH1cblxuICBhc3NlcnQoc2lnLlIgJiYgc2lnLlMsICdTaWduYXR1cmUgd2l0aG91dCBSIG9yIFMnKTtcblxuICBpZiAoZWRkc2EuaXNQb2ludChzaWcuUikpXG4gICAgdGhpcy5fUiA9IHNpZy5SO1xuICBpZiAoc2lnLlMgaW5zdGFuY2VvZiBCTilcbiAgICB0aGlzLl9TID0gc2lnLlM7XG5cbiAgdGhpcy5fUmVuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5SKSA/IHNpZy5SIDogc2lnLlJlbmNvZGVkO1xuICB0aGlzLl9TZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlMpID8gc2lnLlMgOiBzaWcuU2VuY29kZWQ7XG59XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1MnLCBmdW5jdGlvbiBTKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVJbnQodGhpcy5TZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSJywgZnVuY3Rpb24gUigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5SZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSZW5jb2RlZCcsIGZ1bmN0aW9uIFJlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLlIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnU2VuY29kZWQnLCBmdW5jdGlvbiBTZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlSW50KHRoaXMuUygpKTtcbn0pO1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbiB0b0J5dGVzKCkge1xuICByZXR1cm4gdGhpcy5SZW5jb2RlZCgpLmNvbmNhdCh0aGlzLlNlbmNvZGVkKCkpO1xufTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIHRvSGV4KCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMudG9CeXRlcygpLCAnaGV4JykudG9VcHBlckNhc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvdWJsZXM6IHtcbiAgICBzdGVwOiA0LFxuICAgIHBvaW50czogW1xuICAgICAgW1xuICAgICAgICAnZTYwZmNlOTNiNTllOWVjNTMwMTFhYWJjMjFjMjNlOTdiMmEzMTM2OWI4N2E1YWU5YzQ0ZWU4OWUyYTZkZWMwYScsXG4gICAgICAgICdmN2UzNTA3Mzk5ZTU5NTkyOWRiOTlmMzRmNTc5MzcxMDEyOTY4OTFlNDRkMjNmMGJlMWYzMmNjZTY5NjE2ODIxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyODIyNjMyMTJjNjA5ZDllYTJhNmUzZTE3MmRlMjM4ZDhjMzljYWJkNWFjMWNhMTA2NDZlMjNmZDVmNTE1MDgnLFxuICAgICAgICAnMTFmOGE4MDk4NTU3ZGZlNDVlODI1NmU4MzBiNjBhY2U2MmQ2MTNhYzJmN2IxN2JlZDMxYjZlYWZmNmUyNmNhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzVlMTU5ZjcyOGI4NjVhNzJmOTljYzZjNmZjODQ2ZGUwYjkzODMzZmQyMjIyZWQ3M2ZjZTViNTUxZTViNzM5JyxcbiAgICAgICAgJ2QzNTA2ZTBkOWUzYzc5ZWJhNGVmOTdhNTFmZjcxZjVlYWNiNTk1NWFkZDI0MzQ1YzZlZmE2ZmZlZTlmZWQ2OTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzYzZDkwZDQ0N2IwMGM5Yzk5Y2VhYzA1YjYyNjJlZTA1MzQ0MWM3ZTU1NTUyZmZlNTI2YmFkOGY4M2ZmNDY0MCcsXG4gICAgICAgICc0ZTI3M2FkZmM3MzIyMjE5NTNiNDQ1Mzk3ZjMzNjMxNDViOWE4OTAwODE5OWVjYjYyMDAzYzdmM2JlZTlkZTknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGI0YjVmMTY1ZGYzYzJiZThjNjI0NGI1Yjc0NTYzODg0M2U0YTc4MWExNWJjZDFiNjlmNzlhNTVkZmZkZjgwYycsXG4gICAgICAgICc0YWFkMGE2ZjY4ZDMwOGI0YjNmYmQ3ODEzYWIwZGEwNGY5ZTMzNjU0NjE2MmVlNTZiM2VmZjBjNjVmZDRmZDM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzcyM2NiYWE2ZTVkYjk5NmQ2YmY3NzFjMDBiZDU0OGM3YjcwMGRiZmZhNmMwZTc3YmNiNjExNTkyNTIzMmZjZGEnLFxuICAgICAgICAnOTZlODY3YjU1OTVjYzQ5OGE5MjExMzc0ODg4MjRkNmUyNjYwYTA2NTM3Nzk0OTQ4MDFkYzA2OWQ5ZWIzOWY1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZWJmYTRkNDkzYmViZjk4YmE1ZmVlYzgxMmMyZDNiNTA5NDc5NjEyMzdhOTE5ODM5YTUzM2VjYTBlN2RkN2ZhJyxcbiAgICAgICAgJzVkOWE4Y2EzOTcwZWYwZjI2OWVlN2VkYWYxNzgwODlkOWFlNGNkYzNhNzExZjcxMmRkZmQ0ZmRhZTFkZTg5OTknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTAwZjQ0ZGE2OTZlNzE2NzI3OTFkMGEwOWI3YmRlNDU5ZjEyMTVhMjliM2MwM2JmZWZkNzgzNWIzOWE0OGRiMCcsXG4gICAgICAgICdjZGQ5ZTEzMTkyYTAwYjc3MmVjOGYzMzAwYzA5MDY2NmI3ZmY0YTE4ZmY1MTk1YWMwZmJkNWNkNjJiYzY1YTA5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UxMDMxYmUyNjJjN2VkMWIxZGM5MjI3YTRhMDRjMDE3YTc3ZjhkNDQ2NGYzYjM4NTJjOGFjZGU2ZTUzNGZkMmQnLFxuICAgICAgICAnOWQ3MDYxOTI4OTQwNDA1ZTZiYjZhNDE3NjU5NzUzNWFmMjkyZGQ0MTllMWNlZDc5YTQ0ZjE4ZjI5NDU2YTAwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZWVhNmNhZTQ2ZDU1YjUzMGFjMjgzOWYxNDNiZDdlYzVjZjhiMjY2YTQxZDZhZjUyZDVlNjg4ZDkwOTQ2OTZkJyxcbiAgICAgICAgJ2U1N2M2YjZjOTdkY2UxYmFiMDZlNGUxMmJmM2VjZDVjOTgxYzg5NTdjYzQxNDQyZDMxNTVkZWJmMTgwOTAwODgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2N2E5MWQ5MTA0OWNkY2IzNjdiZTRiZTZmZmNhM2NmZWVkNjU3ZDgwODU4M2RlMzNmYTk3OGJjMWVjNmNiMScsXG4gICAgICAgICc5YmFjYWEzNTQ4MTY0MmJjNDFmNDYzZjdlYzk3ODBlNWRlYzdhZGM1MDhmNzQwYTE3ZTllYThlMjdhNjhiZTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUzOTA0ZmFhMGIzMzRjZGRhNmUwMDA5MzVlZjIyMTUxZWMwOGQwZjdiYjExMDY5ZjU3NTQ1Y2NjMWEzN2I3YzAnLFxuICAgICAgICAnNWJjMDg3ZDBiYzgwMTA2ZDg4YzllY2NhYzIwZDNjMWMxMzk5OTk4MWUxNDQzNDY5OWRjYjA5NmIwMjI3NzFjOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZTdiY2QwYmQzNTk4M2E3NzE5Y2NhNzc2NGNhOTA2Nzc5YjUzYTA0M2E5YjhiY2FlZmY5NTlmNDNhZDg2MDQ3JyxcbiAgICAgICAgJzEwYjc3NzBiMmEzZGE0YjM5NDAzMTA0MjBjYTk1MTQ1NzllODhlMmU0N2ZkNjhiM2VhMTAwNDdlODQ2MDM3MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzg1ZWVkMzRjMWNkZmYyMWU2ZDA4MTg2ODliODFiZGU3MWE3ZjRmMTgzOTdlNjY5MGE4NDFlMTU5OWM0Mzg2MicsXG4gICAgICAgICcyODNiZWJjM2U4ZWEyM2Y1NjcwMWRlMTllOWViZjQ1NzZiMzA0ZWVjMjA4NmRjOGNjMDQ1OGZlNTU0MmU1NDUzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZmOWQ5YjgwM2VjZjE5MTYzN2M3M2E0NDEzZGZhMTgwZmRkZjg0YTU5NDdmYmM5YzYwNmVkODZjM2ZhYzNhNycsXG4gICAgICAgICc3YzgwYzY4ZTYwMzA1OWJhNjliOGUyYTMwZTQ1YzRkNDdlYTRkZDJmNWMyODEwMDJkODY4OTA2MDNhODQyMTYwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzMjJkNDAxMjQzYzRlMjU4MmEyMTQ3YzEwNGQ2ZWNiZjc3NGQxNjNkYjBmNWU1MzEzYjdlMGU3NDJkMGU2YmQnLFxuICAgICAgICAnNTZlNzA3OTdlOTY2NGVmNWJmYjAxOWJjNGRkYWY5YjcyODA1ZjYzZWEyODczYWY2MjRmM2EyZTk2YzI4YjJhMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NTY3MmM3ZDJkZTBiN2RhMmJkMTc3MGQ4OTY2NTg2ODc0MWIzZjlhZjc2NDMzOTc3MjFkNzRkMjgxMzRhYjgzJyxcbiAgICAgICAgJzdjNDgxYjliNWI0M2IyZWI2Mzc0MDQ5YmZhNjJjMmU1ZTc3ZjE3ZmNjNTI5OGY0NGM4ZTMwOTRmNzkwMzEzYTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTQ4YmY4MDliMTk4OGE0NmIwNmM5ZjE5MTk0MTNiMTBmOTIyNmM2MGY2Njg4MzJmZmQ5NTlhZjYwYzgyYTBhJyxcbiAgICAgICAgJzUzYTU2Mjg1NmRjYjY2NDZkYzZiNzRjNWQxYzM0MThjNmQ0ZGZmMDhjOTdjZDJiZWQ0Y2I3Zjg4ZDhjOGU1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjI2MGNlN2Y0NjE4MDFjMzRmMDY3Y2UwZjAyODczYThmMWIwZTQ0ZGZjNjk3NTJhY2NlY2Q4MTlmMzhmZDhlOCcsXG4gICAgICAgICdiYzJkYTgyYjZmYTViNTcxYTdmMDkwNDk3NzZhMWVmN2VjZDI5MjIzODA1MWMxOThjMWE4NGU5NWIyYjRhZTE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U1MDM3ZGUwYWZjMWQ4ZDQzZDgzNDg0MTRiYmY0MTAzMDQzZWM4ZjU3NWJmZGM0MzI5NTNjYzhkMjAzN2ZhMmQnLFxuICAgICAgICAnNDU3MTUzNGJhYTk0ZDNiNWY5Zjk4ZDA5ZmI5OTBiZGRiZDVmNWIwM2VjNDgxZjEwZTBlNWRjODQxZDc1NWJkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMDYzNzJiMGY0YTIwN2FkZjVlYTkwNWU4ZjE3NzFiNGU3ZThkYmQxYzZhNmM1YjcyNTg2NmEwYWU0ZmNlNzI1JyxcbiAgICAgICAgJzdhOTA4OTc0YmNlMThjZmUxMmEyN2JiMmFkNWE0ODhjZDc0ODRhNzc4NzEwNDg3MGIyNzAzNGY5NGVlZTMxZGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjEzYzdhNzE1Y2Q1ZDQ1MzU4ZDBiYmY5ZGMwY2UwMjIwNGIxMGJkZGUyYTNmNTg1NDBhZDY5MDhkMDU1OTc1NCcsXG4gICAgICAgICc0YjZkYWQwYjVhZTQ2MjUwNzAxM2FkMDYyNDViYTE5MGJiNDg1MGY1ZjM2YTdlZWRkZmYyYzI3NTM0YjQ1OGYyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlN2MyNzJhN2FmNGIzNGU4ZGJiOTM1MmE1NDE5YTg3ZTI4MzhjNzBhZGM2MmNkZGYwY2MzYTNiMDhmYmQ1M2MnLFxuICAgICAgICAnMTc3NDljNzY2YzlkMGIxOGUxNmZkMDlmNmRlZjY4MWI1MzBiOTYxNGJmZjdkZDMzZTBiMzk0MTgxN2RjYWFlNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZWE3NGUzZGJlNzc4YjFiMTBmMjM4YWQ2MTY4NmFhNWM3NmUzZGIyYmU0MzA1NzYzMjQyN2UyODQwZmIyN2I2JyxcbiAgICAgICAgJzZlMDU2OGRiOWIwYjEzMjk3Y2Y2NzRkZWNjYjZhZjkzMTI2YjU5NmI5NzNmN2I3NzcwMWQzZGI3ZjIzY2I5NmYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzZlNjQxMTNmNjc3Y2YwZTEwYTI1NzBkNTk5OTY4ZDMxNTQ0ZTE3OWI3NjA0MzI5NTJjMDJhNDQxN2JkZGUzOScsXG4gICAgICAgICdjOTBkZGY4ZGVlNGU5NWNmNTc3MDY2ZDcwNjgxZjBkMzVlMmEzM2QyYjU2ZDIwMzJiNGIxNzUyZDE5MDFhYzAxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M3MzhjNTZiMDNiMmFiZTFlODI4MWJhYTc0M2Y4ZjlhOGY3Y2M2NDNkZjI2Y2JlZTNhYjE1MDI0MmJjYmI4OTEnLFxuICAgICAgICAnODkzZmI1Nzg5NTFhZDI1MzdmNzE4ZjJlYWNiZmJiYmI4MjMxNGVlZjc4ODBjZmU5MTdlNzM1ZDk2OTlhODRjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkODk1NjI2NTQ4YjY1YjgxZTI2NGM3NjM3Yzk3Mjg3N2QxZDcyZTVmM2E5MjUwMTQzNzJlOWY2NTg4ZjZjMTRiJyxcbiAgICAgICAgJ2ZlYmZhYTM4ZjJiYzdlYWU3MjhlYzYwODE4YzM0MGViMDM0MjhkNjMyYmIwNjdlMTc5MzYzZWQ3NWQ3ZDk5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjhkYTk0MDMyYTk1NzUxOGViMGY2NDMzNTcxZTg3NjFjZWZmYzczNjkzZTg0ZWRkNDkxNTBhNTY0ZjY3NmUwMycsXG4gICAgICAgICcyODA0ZGZhNDQ4MDVhMWU0ZDdjOTljYzk3NjI4MDhiMDkyY2M1ODRkOTVmZjNiNTExNDg4ZTRlNzRlZmRmNmU3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U4MGZlYTE0NDQxZmIzM2E3ZDhhZGFiOTQ3NWQ3ZmFiMjAxOWVmZmI1MTU2YTc5MmYxYTExNzc4ZTNjMGRmNWQnLFxuICAgICAgICAnZWVkMWRlN2Y2MzhlMDA3NzFlODk3NjhjYTNjYTk0NDcyZDE1NWU4MGFmMzIyZWE5ZmNiNDI5MWI2YWM5ZWM3OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMzAxNjk3YmRmY2Q3MDQzMTNiYTQ4ZTUxZDU2NzU0M2YyYTE4MjAzMWVmZDY5MTVkZGMwN2JiY2M0ZTE2MDcwJyxcbiAgICAgICAgJzczNzBmOTFjZmI2N2U0ZjUwODE4MDlmYTI1ZDQwZjliMTczNWRiZjdjMGExMWExMzBjMGQxYTA0MWUxNzdlYTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTBhZDg1YjM4OWQ2YjkzNjQ2M2Y5ZDA1MTI2NzhkZTIwOGNjMzMwYjExMzA3ZmZmYWI3YWM2M2UzZmIwNGVkNCcsXG4gICAgICAgICdlNTA3YTM2MjBhMzgyNjFhZmZkY2JkOTQyNzIyMmI4MzlhZWZhYmUxNTgyODk0ZDk5MWQ0ZDQ4Y2I2ZWYxNTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGY2OGI5ZDJmNjNiNWYzMzkyMzljMWFkOTgxZjE2MmVlODhjNTY3ODcyM2VhMzM1MWI3YjQ0NGM5ZWM0YzBkYScsXG4gICAgICAgICc2NjJhOWYyZGJhMDYzOTg2ZGUxZDkwYzJiNmJlMjE1ZGJiZWEyY2ZlOTU1MTBiZmRmMjNjYmY3OTUwMWZmZjgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U0ZjNmYjAxNzZhZjg1ZDY1ZmY5OWZmOTE5OGMzNjA5MWY0OGU4NjUwMzY4MWUzZTY2ODZmZDUwNTMyMzFlMTEnLFxuICAgICAgICAnMWU2MzYzM2FkMGVmNGYxYzE2NjFhNmQwZWEwMmI3Mjg2Y2M3ZTc0ZWM5NTFkMWM5ODIyYzM4NTc2ZmViNzNiYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzAwZmE5YjE4ZWJmMzMxZWI5NjE1MzdhNDVhNDI2NmM3MDM0ZjJmMGQ0ZTFkMDcxNmZiNmVhZTIwZWFlMjllJyxcbiAgICAgICAgJ2VmYTQ3MjY3ZmVhNTIxYTFhOWRjMzQzYTM3MzZjOTc0YzJmYWRhZmE4MWUzNmM1NGU3ZDJhNGM2NjcwMjQxNGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTdhMjZjZTY5ZGQ0ODI5ZjNlMTBjZWMwYTllOThlZDMxNDNkMDg0ZjMwOGI5MmMwOTk3ZmRkZmM2MGNiM2U0MScsXG4gICAgICAgICcyYTc1OGUzMDBmYTc5ODRiNDcxYjAwNmExYWFmYmIxOGQwYTZiMmMwNDIwZTgzZTIwZThhOTQyMWNmMmNmZDUxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I2NDU5ZTBlZTM2NjJlYzhkMjM1NDBjMjIzYmNiZGM1NzFjYmNiOTY3ZDc5NDI0ZjNjZjI5ZWIzZGU2YjgwZWYnLFxuICAgICAgICAnNjdjODc2ZDA2ZjNlMDZkZTFkYWRmMTZlNTY2MWRiM2M0YjNhZTZkNDhlMzViMmZmMzBiZjBiNjFhNzFiYTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q2OGE4MGM4MjgwYmI4NDA3OTMyMzRhYTExOGYwNjIzMWQ2ZjFmYzY3ZTczYzVhNWRlZGEwZjViNDk2OTQzZTgnLFxuICAgICAgICAnZGI4YmE5ZmZmNGI1ODZkMDBjNGIxZjkxNzdiMGUyOGI1YjBlN2I4Zjc4NDUyOTVhMjk0Yzg0MjY2YjEzMzEyMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMjRhZWQ3ZGY2NWM4MDQyNTJkYzAyNzA5MDdhMzBiMDk2MTJhZWI5NzM0NDljZWE0MDk1OTgwZmMyOGQzZDVkJyxcbiAgICAgICAgJzY0OGEzNjU3NzRiNjFmMmZmMTMwYzBjMzVhZWMxZjRmMTkyMTNiMGM3ZTMzMjg0Mzk2NzIyNGFmOTZhYjdjODQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGRmOWMxNDkxOWNkZTYxZjZkNTFkZmRiZTVmZWU1ZGNlZWM0MTQzYmE4ZDFjYTg4OGU4YmQzNzNmZDA1NGM5NicsXG4gICAgICAgICczNWVjNTEwOTJkODcyODA1MDk3NGMyM2ExZDg1ZDRiNWQ1MDZjZGMyODg0OTAxOTJlYmFjMDZjYWQxMGQ1ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5YzM5MTlhODRhNDc0ODcwZmFlZDhhOWMxY2M2NjAyMTUyMzQ4OTA1NGQ3ZjAzMDhjYmZjOTljOGFjMWY5OGNkJyxcbiAgICAgICAgJ2RkYjg0ZjBmNGE0ZGRkNTc1ODRmMDQ0YmYyNjBlNjQxOTA1MzI2Zjc2YzY0YzhlNmJlN2U1ZTAzZDRmYzU5OWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1NzE3MGIxZGQxMmZkZjhkZTA1ZjI4MWQ4ZTA2YmI5MWUxNDkzYThiOTFkNGNjNWEyMTM4MjEyMGE5NTllNScsXG4gICAgICAgICc5YTFhZjBiMjZhNmE0ODA3YWRkOWEyZGFmNzFkZjI2MjQ2NTE1MmJjM2VlMjRjNjVlODk5YmU5MzIzODVhMmE4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1NzZkZjhlMjNhMDg0MTE0MjE0MzlhNDUxOGRhMzE4ODBjZWYwZmJhN2Q0ZGYxMmIxYTY5NzNlZWNiOTQyNjYnLFxuICAgICAgICAnNDBhNmJmMjBlNzY2NDBiMmM5MmI5N2FmZTU4Y2Q4MmM0MzJlMTBhN2Y1MTRkOWYzZWU4YmUxMWFlMWIyOGVjOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3Nzc4YTc4YzI4ZGVjM2UzMGEwNWZlOTYyOWRlOGMzOGJiMzBkMWY1Y2Y5YTNhMjA4Zjc2Mzg4OWJlNThhZDcxJyxcbiAgICAgICAgJzM0NjI2ZDlhYjVhNWIyMmZmNzA5OGUxMmYyZmY1ODAwODdiMzg0MTFmZjI0YWM1NjNiNTEzZmMxZmQ5ZjQzYWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTI4OTU1ZWU2MzdhODQ0NjM3MjlmZDMwZTdhZmQyZWQ1Zjk2Mjc0ZTVhZDdlNWNiMDllZGE5YzA2ZDkwM2FjJyxcbiAgICAgICAgJ2MyNTYyMTAwM2QzZjQyYTgyN2I3OGExMzA5M2E5NWVlYWMzZDI2ZWZhOGE4ZDgzZmM1MTgwZTkzNWJjZDA5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODVkMGZlZjNlYzZkYjEwOTM5OTA2NGYzYTBlM2IyODU1NjQ1YjRhOTA3YWQzNTQ1MjdhYWU3NTE2M2Q4Mjc1MScsXG4gICAgICAgICcxZjAzNjQ4NDEzYTM4YzBiZTI5ZDQ5NmU1ODJjZjU2NjNlODc1MWU5Njg3NzMzMTU4MmMyMzdhMjRlYjFmOTYyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZmMmIwZGNlOTdlZWNlOTdjMWM5YjYwNDE3OThiODVkZmRmYjZkODg4MmRhMjAzMDhmNTQwNDgyNDUyNjA4N2UnLFxuICAgICAgICAnNDkzZDEzZmVmNTI0YmExODhhZjRjNGRjNTRkMDc5MzZjN2I3ZWQ2ZmI5MGUyY2ViMmM5NTFlMDFmMGMyOTkwNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjdmYmJlNGIxZTg4MGVhOWVkMmIyZTYzMDFiMjEyYjU3ZjFlZTE0OGNkNmRkMjg3ODBlNWUyY2Y4NTZlMjQxJyxcbiAgICAgICAgJ2M2MGY5YzkyM2M3MjdiMGI3MWJlZjJjNjdkMWQxMjY4N2ZmN2E2MzE4NjkwMzE2NmQ2MDViNjhiYWVjMjkzZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWFhNjQ5ZjIxZjUxYmRiYWU3YmU0YWUzNGNlNmU1MjE3YTU4ZmRjZTdmNDdmOWFhN2YzYjU4ZmEyMTIwZTJiMycsXG4gICAgICAgICdiZTMyNzllZDViYmJiMDNhYzY5YTgwZjg5ODc5YWE1YTAxYTZiOTY1ZjEzZjdlNTlkNDdhNTMwNWJhNWFkOTNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U0YTQyZDQzYzVjZjE2OWQ5MzkxZGY2ZGVjZjQyZWU1NDFiNmQ4ZjBjOWExMzc0MDFlMjM2MzJkZGEzNGQyNGYnLFxuICAgICAgICAnNGQ5ZjkyZTcxNmQxYzczNTI2ZmM5OWNjZmI4YWQzNGNlODg2ZWVkZmE4ZDhlNGYxM2E3ZjcxMzFkZWJhOTQxNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZWM4MGZlZjM2MGNiZGQ5NTQxNjBmYWRhYjM1MmI2YjkyYjUzNTc2YTg4ZmVhNDk0NzE3M2I5ZDQzMDBiZjE5JyxcbiAgICAgICAgJ2FlZWZlOTM3NTZiNTM0MGQyZjNhNDk1OGE3YWJiZjVlMDE0NmU3N2Y2Mjk1YTA3YjY3MWNkYzFjYzEwN2NlZmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTQ2YTc3OGMwNDY3MGMyZjkxYjAwYWY0NjgwZGZhOGJjZTM0OTA3MTdkNThiYTg4OWRkYjU5MjgzNjY2NDJiZScsXG4gICAgICAgICdiMzE4ZTBlYzMzNTQwMjhhZGQ2Njk4MjdmOWQ0YjI4NzBhYWE5NzFkMmY3ZTVlZDFkMGIyOTc0ODNkODNlZmQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZhNTBjMGY2MWQyMmU1ZjA3ZTNhY2ViYjFhYTA3YjEyOGQwMDEyMjA5YTI4Yjk3NzZkNzZhODc5MzE4MGVlZjknLFxuICAgICAgICAnNmI4NGM2OTIyMzk3ZWJhOWI3MmNkMjg3MjI4MWE2OGE1ZTY4MzI5M2E1N2EyMTNiMzhjZDhkN2QzZjRmMjgxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTFkNjFkMGNhNzIxYTExYjFhNWJmNmI3ZDg4ZTg0MjFhMjg4YWI1ZDViYmE1MjIwZTUzZDMyYjVmMDY3ZWMyJyxcbiAgICAgICAgJzgxNTdmNTVhN2M5OTMwNmM3OWMwNzY2MTYxYzkxZTI5NjZhNzM4OTlkMjc5YjQ4YTY1NWZiYTBmMWFkODM2ZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYThlMjgyZmYwYzk3MDY5MDcyMTVmZjk4ZThmZDQxNjYxNTMxMWRlMDQ0NmYxZTA2MmE3M2IwNjEwZDA2NGUxMycsXG4gICAgICAgICc3Zjk3MzU1YjhkYjgxYzA5YWJmYjdmM2M1YjI1MTU4ODhiNjc5YTNlNTBkZDZiZDZjZWY3YzczMTExZjRjYzBjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NGE1M2I5YzlhMjg1ODcyZDM5ZTU2ZTY5MTNjYWIxNWQ1OWIxZmE1MTI1MDhjMDIyZjM4MmRlODMxOTQ5N2MnLFxuICAgICAgICAnY2NjOWRjMzdhYmZjOWMxNjU3YjQxNTVmMmM0N2Y5ZTY2NDZiM2ExZDhjYjk4NTQzODNkYTEzYWMwNzlhZmE3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NTkzOTY5ODE5NDM3ODVjM2QzZTU3ZWRmNTAxOGNkYmUwMzllNzMwZTQ5MThiM2Q4ODRmZGZmMDk0NzViN2JhJyxcbiAgICAgICAgJzJlN2U1NTI4ODhjMzMxZGQ4YmEwMzg2YTRiOWNkNjg0OWM2NTNmNjRjODcwOTM4NWU5YjhhYmY4NzUyNGYyZmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDJhNjNhNTBhZTQwMWU1NmQ2NDVhMTE1M2IxMDlhOGZjY2EwYTQzZDU2MWZiYTJkYmI1MTM0MGM5ZDgyYjE1MScsXG4gICAgICAgICdlODJkODZmYjY0NDNmY2I3NTY1YWVlNThiMjk0ODIyMGE3MGY3NTBhZjQ4NGNhNTJkNDE0MjE3NGRjZjg5NDA1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY0NTg3ZTIzMzU0NzFlYjg5MGVlNzg5NmQ3Y2ZkYzg2NmJhY2JkYmQzODM5MzE3YjM0MzZmOWI0NTYxN2UwNzMnLFxuICAgICAgICAnZDk5ZmNkZDViZjY5MDJlMmFlOTZkZDY0NDdjMjk5YTE4NWI5MGEzOTEzM2FlYWIzNTgyOTllNWU5ZmFmNjU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDgxYmRlMGU0ZTRkODg1YjNhNTQ2ZDNlNTQ5ZGUwNDJmMGFhNmNlYTI1MGU3ZmQzNThkNmM4NmRkNDVlNDU4JyxcbiAgICAgICAgJzM4ZWU3YjhjYmE1NDA0ZGQ4NGEyNWJmMzljZWNiMmNhOTAwYTc5YzQyYjI2MmU1NTZkNjRiMWI1OTc3OTA1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTM0NjRhNTdhNzgxMDJhYTYyYjY5NzlhZTgxN2Y0NjM3ZmZjZmVkM2M0YjFjZTMwYmNkNjMwM2Y2Y2FmNjY2YicsXG4gICAgICAgICc2OWJlMTU5MDA0NjE0NTgwZWY3ZTQzMzQ1M2NjYjBjYTQ4ZjMwMGE4MWQwOTQyZTEzZjQ5NWE5MDdmNmVjYzI3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JjNGE5ZGY1YjcxM2ZlMmU5YWVmNDMwYmNjMWRjOTdhMGNkOWNjZWRlMmYyODU4OGNhZGEzYTBkMmQ4M2YzNjYnLFxuICAgICAgICAnZDNhODFjYTZlNzg1YzA2MzgzOTM3YWRmNGI3OThjYWE2ZThhOWZiZmE1NDdiMTZkNzU4ZDY2NjU4MWYzM2MxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMjhhOTdiZjgyOThiYzBkMjNkOGM3NDk0NTJhMzJlNjk0YjY1ZTMwYTk0NzJhMzk1NGFiMzBmZTUzMjRjYWEnLFxuICAgICAgICAnNDBhMzA0NjNhMzMwNTE5MzM3OGZlZGYzMWY3Y2MwZWI3YWU3ODRmMDQ1MWNiOTQ1OWU3MWRjNzNjYmVmOTQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZWE5NjY2MTM5NTI3YThjMWRkOTRjZTRmMDcxZmQyM2M4YjM1MGM1YTRiYjMzNzQ4YzRiYTExMWZhY2NhZTAnLFxuICAgICAgICAnNjIwZWZhYmJjOGVlMjc4MmUyNGU3YzBjZmI5NWM1ZDczNWI3ODNiZTljZjBmOGU5NTVhZjM0YTMwZTYyYjk0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZDM2MjVmYWVmNWJhMDYwNzQ2Njk3MTZiYmQzNzg4ZDg5YmRkZTgxNTk1OTk2ODA5MmY3NmNjNGViOWE5Nzg3JyxcbiAgICAgICAgJzdhMTg4ZmEzNTIwZTMwZDQ2MWRhMjUwMTA0NTczMWNhOTQxNDYxOTgyODgzMzk1OTM3ZjY4ZDAwYzY0NGE1NzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjcxMGQ3OWQ5ZWI5NjIyOTdlNGY2MjMyYjQwZThmN2ZlYjJiYzYzODE0NjE0ZDY5MmMxMmRlNzUyNDA4MjIxZScsXG4gICAgICAgICdlYTk4ZTY3MjMyZDNiMzI5NWQzYjUzNTUzMjExNWNjYWM4NjEyYzcyMTg1MTYxNzUyNmFlNDdhOWM3N2JmYzgyJ1xuICAgICAgXVxuICAgIF1cbiAgfSxcbiAgbmFmOiB7XG4gICAgd25kOiA3LFxuICAgIHBvaW50czogW1xuICAgICAgW1xuICAgICAgICAnZjkzMDhhMDE5MjU4YzMxMDQ5MzQ0Zjg1Zjg5ZDUyMjliNTMxYzg0NTgzNmY5OWIwODYwMWYxMTNiY2UwMzZmOScsXG4gICAgICAgICczODhmN2IwZjYzMmRlODE0MGZlMzM3ZTYyYTM3ZjM1NjY1MDBhOTk5MzRjMjIzMWI2Y2I5ZmQ3NTg0YjhlNjcyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmOGJkZTRkMWEwNzIwOTM1NWI0YTcyNTBhNWM1MTI4ZTg4Yjg0YmRkYzYxOWFiN2NiYThkNTY5YjI0MGVmZTQnLFxuICAgICAgICAnZDhhYzIyMjYzNmU1ZTNkNmQ0ZGJhOWRkYTZjOWM0MjZmNzg4MjcxYmFiMGQ2ODQwZGNhODdkM2FhNmFjNjJkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1Y2JkZjA2NDZlNWRiNGVhYTM5OGYzNjVmMmVhN2EwZTNkNDE5YjdlMDMzMGUzOWNlOTJiZGRlZGNhYzRmOWJjJyxcbiAgICAgICAgJzZhZWJjYTQwYmEyNTU5NjBhMzE3OGQ2ZDg2MWE1NGRiYTgxM2QwYjgxM2ZkZTdiNWE1MDgyNjI4MDg3MjY0ZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWNkNDg0ZTJmMGM3ZjY1MzA5YWQxNzhhOWY1NTlhYmRlMDk3OTY5NzRjNTdlNzE0YzM1ZjExMGRmYzI3Y2NiZScsXG4gICAgICAgICdjYzMzODkyMWIwYTdkOWZkNjQzODA5NzE3NjNiNjFlOWFkZDg4OGE0Mzc1ZjhlMGYwNWNjMjYyYWM2NGY5YzM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NGFlN2Y4NThhOTQxMWU1ZWY0MjQ2YjcwYzY1YWFjNTY0OTk4MGJlNWMxNzg5MWJiZWMxNzg5NWRhMDA4Y2InLFxuICAgICAgICAnZDk4NGEwMzJlYjZiNWUxOTAyNDNkZDU2ZDdiN2IzNjUzNzJkYjFlMmRmZjlkNmE4MzAxZDc0YzljOTUzYzYxYidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjg3NzNjMmQ5NzUyODhiYzdkMWQyMDVjMzc0ODY1MWIwNzVmYmM2NjEwZTU4Y2RkZWVkZGY4ZjE5NDA1YWE4JyxcbiAgICAgICAgJ2FiMDkwMmU4ZDg4MGE4OTc1ODIxMmViNjVjZGFmNDczYTFhMDZkYTUyMWZhOTFmMjliNWNiNTJkYjAzZWQ4MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNzkyNGQ0ZjdkNDNlYTk2NWE0NjVhZTMwOTVmZjQxMTMxZTU5NDZmM2M4NWY3OWU0NGFkYmNmOGUyN2UwODBlJyxcbiAgICAgICAgJzU4MWUyODcyYTg2YzcyYTY4Mzg0MmVjMjI4Y2M2ZGVmZWE0MGFmMmJkODk2ZDNhNWM1MDRkYzlmZjZhMjZiNTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGVmZGVhNGNkYjY3Nzc1MGE0MjBmZWU4MDdlYWNmMjFlYjk4OThhZTc5Yjk3Njg3NjZlNGZhYTA0YTJkNGEzNCcsXG4gICAgICAgICc0MjExYWIwNjk0NjM1MTY4ZTk5N2IwZWFkMmE5M2RhZWNlZDFmNGEwNGE5NWMwZjZjZmIxOTlmNjllNTZlYjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJiNGVhMGE3OTdhNDQzZDI5M2VmNWNmZjQ0NGY0OTc5ZjA2YWNmZWJkN2U4NmQyNzc0NzU2NTYxMzgzODViNmMnLFxuICAgICAgICAnODVlODliYzAzNzk0NWQ5M2IzNDMwODNiNWExYzg2MTMxYTAxZjYwYzUwMjY5NzYzYjU3MGM4NTRlNWMwOWI3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNTJiYmY0YTRjZGQxMjU2NGY5M2ZhMzMyY2UzMzMzMDFkOWFkNDAyNzFmODEwNzE4MTM0MGFlZjI1YmU1OWQ1JyxcbiAgICAgICAgJzMyMWViNDA3NTM0OGY1MzRkNTljMTgyNTlkZGEzZTFmNGExYjNiMmU3MWIxMDM5YzY3YmQzZDhiY2Y4MTk5OGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmZhMjEwNGQ2YjM4ZDExYjAyMzAwMTA1NTk4NzkxMjRlNDJhYjhkZmVmZjVmZjI5ZGM5Y2RhZGQ0ZWNhY2MzZicsXG4gICAgICAgICcyZGUxMDY4Mjk1ZGQ4NjViNjQ1NjkzMzViZDVkZDgwMTgxZDcwZWNmYzg4MjY0ODQyM2JhNzZiNTMyYjdkNjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTI0ODI3OWIwOWI0ZDY4ZGFiMjFhOWIwNjZlZGRhODMyNjNjM2Q4NGUwOTU3MmUyNjljYTBjZDdmNTQ1MzcxNCcsXG4gICAgICAgICc3MzAxNmY3YmYyMzRhYWRlNWQxYWE3MWJkZWEyYjFmZjNmYzBkZTJhODg3OTEyZmZlNTRhMzJjZTk3Y2IzNDAyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhZWQ0ZjJiZTNhOGJmMjc4ZTcwMTMyZmIwYmViNzUyMmY1NzBlMTQ0YmY2MTVjMDdlOTk2ZDQ0M2RlZTg3MjknLFxuICAgICAgICAnYTY5ZGNlNGE3ZDZjOThlOGQ0YTFhY2E4N2VmOGQ3MDAzZjgzYzIzMGYzYWZhNzI2YWI0MGU1MjI5MGJlMWM1NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDRkMTJjNzA2NWQ4MTJlOGFjZjI4ZDdjYmIxOWY5MDExZWNkOWU5ZmRmMjgxYjBlNmEzYjVlODdkMjJlN2RiJyxcbiAgICAgICAgJzIxMTlhNDYwY2UzMjZjZGM3NmM0NTkyNmM5ODJmZGFjMGUxMDZlODYxZWRmNjFjNWEwMzkwNjNmMGUwZTY0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmEyNDViZjZkYzY5ODUwNGM4OWEyMGNmZGVkNjA4NTMxNTJiNjk1MzM2YzI4MDYzYjYxYzY1Y2JkMjY5ZTZiNCcsXG4gICAgICAgICdlMDIyY2Y0MmMyYmQ0YTcwOGIzZjUxMjZmMTZhMjRhZDhiMzNiYTQ4ZDA0MjNiNmVmZDVlNjM0ODEwMGQ4YTgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2OTdmZmE2ZmQ5ZGU2MjdjMDc3ZTNkMmZlNTQxMDg0Y2UxMzMwMGIwYmVjMTE0NmY5NWFlNTdmMGQwYmQ2YTUnLFxuICAgICAgICAnYjljMzk4ZjE4NjgwNmY1ZDI3NTYxNTA2ZTQ1NTc0MzNhMmNmMTUwMDllNDk4YWU3YWRlZTlkNjNkMDFiMjM5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDViZGIwMTk5ODE3MThiOTg2ZDBmMDdlODM0Y2IwZDlkZWI4MzYwZmZiN2Y2MWRmOTgyMzQ1ZWYyN2E3NDc5JyxcbiAgICAgICAgJzI5NzJkMmRlNGY4ZDIwNjgxYTc4ZDkzZWM5NmZlMjNjMjZiZmFlODRmYjE0ZGI0M2IwMWUxZTkwNTZiOGM0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MmQxNGRhYjQxNTBiZjQ5NzQwMmZkYzQ1YTIxNWUxMGRjYjAxYzM1NDk1OWIxMGNmZTMxYzdlOWQ4N2ZmMzNkJyxcbiAgICAgICAgJzgwZmMwNmJkOGNjNWIwMTA5ODA4OGExOTUwZWVkMGRiMDFhYTEzMjk2N2FiNDcyMjM1ZjU2NDI0ODNiMjVlYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODBjNjBhZDAwNDBmMjdkYWRlNWI0YjA2YzQwOGU1NmIyYzUwZTlmNTZiOWI4YjQyNWU1NTVjMmY4NjMwOGI2ZicsXG4gICAgICAgICcxYzM4MzAzZjFjYzVjMzBmMjZlNjZiYWQ3ZmU3MmY3MGE2NWVlZDRjYmU3MDI0ZWIxYWEwMWY1NjQzMGJkNTdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzdhOTM3NWFkNjE2N2FkNTRhYTc0YzYzNDhjYzU0ZDM0NGNjNWRjOTQ4N2Q4NDcwNDlkNWVhYmIwZmEwM2M4ZmInLFxuICAgICAgICAnZDBlM2ZhOWVjYTg3MjY5MDk1NTllMGQ3OTI2OTA0NmJkYzU5ZWExMGM3MGNlMmIwMmQ0OTllYzIyNGRjN2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1MjhlY2Q5YjY5NmI1NGM5MDdhOWVkMDQ1NDQ3YTc5YmI0MDhlYzM5YjY4ZGY1MDRiYjUxZjQ1OWJjM2ZmYzknLFxuICAgICAgICAnZWVjZjQxMjUzMTM2ZTVmOTk5NjZmMjE4ODFmZDY1NmViYzQzNDU0MDVjNTIwZGJjMDYzNDY1YjUyMTQwOTkzMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTM3MGE0YjVmNDM0MTJlYTI1ZjUxNGU4ZWNkYWQwNTI2NjExNWU0YTdlY2IxMzg3MjMxODA4ZjhiNDU5NjMnLFxuICAgICAgICAnNzU4ZjNmNDFhZmQ2ZWQ0MjhiMzA4MWIwNTEyZmQ2MmE1NGMzZjNhZmJiNWI2NzY0YjY1MzA1MmExMjk0OWM5YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3N2YyMzA5MzZlZTg4Y2JiZDczZGY5MzBkNjQ3MDJlZjg4MWQ4MTFlMGUxNDk4ZTJmMWMxM2ViMWZjMzQ1ZDc0JyxcbiAgICAgICAgJzk1OGVmNDJhNzg4NmI2NDAwYTA4MjY2ZTliYTFiMzc4OTZjOTUzMzBkOTcwNzdjYmJlOGViM2M3NjcxYzYwZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjJkYWM5OTFjYzRjZTRiOWVhNDQ4ODdlNWM3YzBiY2U1OGM4MDA3NGFiOWQ0ZGJhZWIyODUzMWI3NzM5ZjUzMCcsXG4gICAgICAgICdlMGRlZGM5YjNiMmY4ZGFkNGRhMWYzMmRlYzI1MzFkZjllYjVmYmViMDU5OGU0ZmQxYTExN2RiYTcwM2EzYzM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2IzZDlmNjYyNjIxZmIxYjRiZThmYmJlMjUyMDEyNWEyMTZjZGZjOWRhZTNkZWJjYmE0ODUwYzY5MGQ0NWInLFxuICAgICAgICAnNWVkNDMwZDc4YzI5NmMzNTQzMTE0MzA2ZGQ4NjIyZDdjNjIyZTI3Yzk3MGExZGUzMWNiMzc3YjAxYWY3MzA3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTZmODA0MjQ0ZTQ2ZTJhMDkyMzJkNGFmZjNiNTk5NzZiOThmYWMxNDMyOGEyZDFhMzI0OTZiNDk5OThmMjQ3JyxcbiAgICAgICAgJ2NlZGFiZDliODIyMDNmN2UxM2QyMDZmY2RmNGUzM2Q5MmE2YzUzYzI2ZTVjY2UyNmQ2NTc5OTYyYzRlMzFkZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2FmNzU0MjcyZGM4NDU2M2IwMzUyYjdhMTQzMTFhZjU1ZDI0NTMxNWFjZTI3YzY1MzY5ZTE1ZjcxNTFkNDFkMScsXG4gICAgICAgICdjYjQ3NDY2MGVmMzVmNWYyYTQxYjY0M2ZhNWU0NjA1NzVmNGZhOWI3OTYyMjMyYTVjMzJmOTA4MzE4YTA0NDc2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI2MDBjYTRiMjgyY2I5ODZmODVkMGYxNzA5OTc5ZDhiNDRhMDljMDdjYjg2ZDdjMTI0NDk3YmM4NmYwODIxMjAnLFxuICAgICAgICAnNDExOWI4ODc1M2MxNWJkNmE2OTNiMDNmY2RkYmI0NWQ1YWM2YmU3NGFiNWYwZWY0NGIwYmU5NDc1YTdlNGI0MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NjM1Y2E3MmQ3ZTg0MzJjMzM4ZWM1M2NkMTIyMjBiYzAxYzQ4Njg1ZTI0ZjdkYzhjNjAyYTc3NDY5OThlNDM1JyxcbiAgICAgICAgJzkxYjY0OTYwOTQ4OWQ2MTNkMWQ1ZTU5MGY3OGU2ZDc0ZWNmYzA2MWQ1NzA0OGJhZDllNzZmMzAyYzViOWM2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NTRlMzIzOWYzMjU1NzBjZGJiZjRhODdkZWVlOGE2NmI3ZjJiMzM0NzlkNDY4ZmJjMWE1MDc0M2JmNTZjYzE4JyxcbiAgICAgICAgJzY3M2ZiODZlNWJkYTMwZmIzY2QwZWQzMDRlYTQ5YTAyM2VlMzNkMDE5N2E2OTVkMGM1ZDk4MDkzYzUzNjY4MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlM2U2YmQxMDcxYTFlOTZhZmY1Nzg1OWM4MmQ1NzBmMDMzMDgwMDY2MWQxYzk1MmY5ZmUyNjk0NjkxZDliOWU4JyxcbiAgICAgICAgJzU5YzllMGJiYTM5NGU3NmY0MGMwYWE1ODM3OWEzY2I2YTVhMjI4Mzk5M2U5MGM0MTY3MDAyYWY0OTIwZTM3ZjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTg2YjQ4M2QwNTZhMDMzODI2YWU3M2Q4OGY3MzI5ODVjNGNjYjFmMzJiYTM1ZjRiNGNjNDdmZGNmMDRhYTZlYicsXG4gICAgICAgICczYjk1MmQzMmM2N2NmNzdlMmUxNzQ0NmUyMDQxODBhYjIxZmI4MDkwODk1MTM4YjRhNGE3OTdmODZlODA4ODhiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmOWQ3MGE2Yjk4NzZjZTU0NGM5ODU2MWY0YmU0ZjcyNTQ0MmU2ZDJiNzM3ZDljOTFhODMyMTcyNGNlMDk2M2YnLFxuICAgICAgICAnNTVlYjJkYWZkODRkNmNjZDVmODYyYjc4NWRjMzlkNGFiMTU3MjIyNzIwZWY5ZGEyMTdiOGM0NWNmMmJhMjQxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZWRkNWNjMjNjNTFlODdhNDk3Y2E4MTVkNWRjZTBmOGFiNTI1NTRmODQ5ZWQ4OTk1ZGU2NGM1ZjM0Y2U3MTQzJyxcbiAgICAgICAgJ2VmYWU5YzhkYmMxNDEzMDY2MWU4Y2VjMDMwYzg5YWQwYzEzYzY2YzBkMTdhMjkwNWNkYzcwNmFiNzM5OWE4NjgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjkwNzk4YzJiNjQ3NjgzMGRhMTJmZTAyMjg3ZTllNzc3YWEzZmJhMWMzNTViMTdhNzIyZDM2MmY4NDYxNGZiYScsXG4gICAgICAgICdlMzhkYTc2ZGNkNDQwNjIxOTg4ZDAwYmNmNzlhZjI1ZDViMjljMDk0ZGIyYTIzMTQ2ZDAwM2FmZDQxOTQzZTdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FmM2M0MjNhOTVkOWY1YjMwNTQ3NTRlZmExNTBhYzM5Y2QyOTU1MmZlMzYwMjU3MzYyZGZkZWNlZjQwNTNiNDUnLFxuICAgICAgICAnZjk4YTNmZDgzMWViMmI3NDlhOTNiMGU2ZjM1Y2ZiNDBjOGNkNWFhNjY3YTE1NTgxYmMyZmVkZWQ0OThmZDljNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NjZkYmIyNGQxMzRlNzQ1Y2NjYWEyOGM5OWJmMjc0OTA2YmI2NmIyNmRjZjk4ZGY4ZDJmZWQ1MGQ4ODQyNDlhJyxcbiAgICAgICAgJzc0NGIxMTUyZWFjYmU1ZTM4ZGNjODg3OTgwZGEzOGI4OTc1ODRhNjVmYTA2Y2VkZDJjOTI0Zjk3Y2JhYzU5OTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTlkYmY0NmY4Yzk0NzU5YmEyMTI3N2MzMzc4NGY0MTY0NWY3YjQ0ZjZjNTk2YTU4Y2U5MmU2NjYxOTFhYmUzZScsXG4gICAgICAgICdjNTM0YWQ0NDE3NWZiYzMwMGY0ZWE2Y2U2NDgzMDlhMDQyY2U3MzlhNzkxOTc5OGNkODVlMjE2YzRhMzA3ZjZlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxM2FkYTk1MTAzYzQ1MzczMDVlNjkxZTc0ZTlhNGE4ZGQ2NDdlNzExYTk1ZTczY2I2MmRjNjAxOGNmZDg3YjgnLFxuICAgICAgICAnZTEzODE3YjQ0ZWUxNGRlNjYzYmY0YmM4MDgzNDFmMzI2OTQ5ZTIxYTZhNzVjMjU3MDc3ODQxOWJkYWY1NzMzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzU0YjRmYTBlOGFjZWQwNmQ0MTY3YTJjNTljY2E0Y2RhMTg2OWMwNmViYWRmYjY0ODg1NTAwMTVhODg1MjJjJyxcbiAgICAgICAgJzMwZTkzZTg2NGU2NjlkODIyMjRiOTY3YzMwMjBiOGZhOGQxZTRlMzUwYjZjYmNjNTM3YTQ4YjU3ODQxMTYzYTInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTQ4ZGNhZGY1OTkwZTA0OGFhMzg3NGQ0NmFiZWY5ZDcwMTg1OGY5NWRlODA0MWQyYTY4MjhjOTllMjI2MjUxOScsXG4gICAgICAgICdlNDkxYTQyNTM3ZjZlNTk3ZDVkMjhhMzIyNGIxYmMyNWRmOTE1NGVmYmQyZWYxZDJjYmJhMmNhZTUzNDdkNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5NjI0MTQ0NTBjNzZjMTY4OWM3YjQ4ZjgyMDJlYzM3ZmIyMjRjZjVhYzBiZmExNTcwMzI4YThhM2Q3Yzc3YWInLFxuICAgICAgICAnMTAwYjYxMGVjNGZmYjQ3NjBkNWMxZmMxMzNlZjZmNmIxMjUwN2EwNTFmMDRhYzU3NjBhZmE1YjI5ZGI4MzQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNTE0MDg3ODM0OTY0YjU0YjE1YjE2MDY0NGQ5MTU0ODVhMTY5NzcyMjViODg0N2JiMGRkMDg1MTM3ZWM0N2NhJyxcbiAgICAgICAgJ2VmMGFmYmIyMDU2MjA1NDQ4ZTE2NTJjNDhlODEyN2ZjNjAzOWU3N2MxNWMyMzc4YjdlN2QxNWEwZGUyOTMzMTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNjYzMwYWQ2YjQ4M2U0YmM3OWNlMmM5ZGQ4YmM1NDk5M2U5NDdlYjhkZjc4N2I0NDI5NDNkM2Y3YjUyN2VhZicsXG4gICAgICAgICc4YjM3OGEyMmQ4MjcyNzhkODljNWU5YmU4Zjk1MDhhZTNjMmFkNDYyOTAzNTg2MzBhZmIzNGRiMDRlZWRlMGE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2MjRkODQ3ODA3MzI4NjBjZTFjNzhmY2JmZWZlMDhiMmIyOTgyM2RiOTEzZjY0OTM5NzViYTBmZjQ4NDc2MTAnLFxuICAgICAgICAnNjg2NTFjZjliNmRhOTAzZTA5MTQ0NDhjNmNkOWQ0Y2E4OTY4NzhmNTI4MmJlNGM4Y2MwNmUyYTQwNDA3ODU3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MzNjZTgwZGE5NTVhOGEyNjkwMmM5NTYzM2U2MmE5ODUxOTI0NzRiNWFmMjA3ZGE2ZGY3YjRmZDVmYzYxY2Q0JyxcbiAgICAgICAgJ2Y1NDM1YTJiZDJiYWRmN2Q0ODVhNGQ4YjhkYjlmY2NlM2UxZWY4ZTAyMDFlNDU3OGM1NDY3M2JjMWRjNWVhMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTVkOTQ0MTI1NDk0NTA2NGNmMWExYzMzYmJkM2I0OWY4OTY2YzUwOTIxNzFlNjk5ZWYyNThkZmFiODFjMDQ1YycsXG4gICAgICAgICdkNTZlYjMwYjY5NDYzZTcyMzRmNTEzN2I3M2I4NDE3NzQzNDgwMGJhY2ViZmM2ODVmYzM3YmJlOWVmZTQwNzBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ExZDBmY2YyZWM5ZGU2NzViNjEyMTM2ZTVjZTcwZDI3MWMyMTQxN2M5ZDJiOGFhYWFjMTM4NTk5ZDA3MTc5NDAnLFxuICAgICAgICAnZWRkNzdmNTBiY2I1YTNjYWIyZTkwNzM3MzA5NjY3ZjI2NDE0NjJhNTQwNzBmM2Q1MTkyMTJkMzljMTk3YTYyOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMjJmYmUxNWMwYWY4Y2NjNTc4MGMwNzM1Zjg0ZGJlOWE3OTBiYWRlZTgyNDVjMDZjN2NhMzczMzFjYjM2OTgwJyxcbiAgICAgICAgJ2E4NTViYWJhZDVjZDYwYzg4YjQzMGE2OWY1M2ExYTdhMzgyODkxNTQ5NjQ3OTliZTQzZDA2ZDc3ZDMxZGEwNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMTEwOTFkZDk4NjBlOGUyMGVlMTM0NzNjMTE1NWY1ZjY5NjM1ZTM5NDcwNGVhYTc0MDA5NDUyMjQ2Y2ZhOWIzJyxcbiAgICAgICAgJzY2ZGI2NTZmODdkMWYwNGZmZmQxZjA0Nzg4YzA2ODMwODcxZWM1YTY0ZmVlZTY4NWJkODBmMGIxMjg2ZDgzNzQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzRjMWZkMDRkMzAxYmU4OWIzMWMwNDQyZDNlNmFjMjQ4ODM5MjhiNDVhOTM0MDc4MTg2N2Q0MjMyZWMyZGJkZicsXG4gICAgICAgICc5NDE0Njg1ZTk3YjFiNTk1NGJkNDZmNzMwMTc0MTM2ZDU3ZjFjZWViNDg3NDQzZGM1MzIxODU3YmE3M2FiZWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjIxOWVhNWQ2YjU0NzAxYzFjMTRkZTViNTU3ZWI0MmE4ZDEzZjNhYmJjZDA4YWZmY2MyYTVlNmIwNDliOGQ2MycsXG4gICAgICAgICc0Y2I5NTk1N2U4M2Q0MGIwZjczYWY0NTQ0Y2NjZjZiMWY0YjA4ZDNjMDdiMjdmYjhkOGMyOTYyYTQwMDc2NmQxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3Yjg3NDBmNzRhOGZiYWFiMWY2ODNkYjhmNDVkZTI2NTQzYTU0OTBiY2E2MjcwODcyMzY5MTI0NjlhMGI0NDgnLFxuICAgICAgICAnZmE3Nzk2ODEyOGQ5YzkyZWUxMDEwZjMzN2FkNDcxN2VmZjE1ZGI1ZWQzYzA0OWIzNDExZTAzMTVlYWE0NTkzYidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMmQzMWMyMjJmOGY2ZjBlZjg2ZjdjOThkM2EzMzM1ZWFkNWJjZDMyYWJkZDk0Mjg5ZmU0ZDMwOTFhYTgyNGJmJyxcbiAgICAgICAgJzVmMzAzMmY1ODkyMTU2ZTM5Y2NkM2Q3OTE1YjllMWRhMmU2ZGFjOWU2ZjI2ZTk2MTExOGQxNGI4NDYyZTE2NjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzQ2MWYzNzE5MTRhYjMyNjcxMDQ1YTE1NWQ5ODMxZWE4NzkzZDc3Y2Q1OTU5MmM0MzQwZjg2Y2JjMTgzNDdiNScsXG4gICAgICAgICc4ZWMwYmEyMzhiOTZiZWMwY2JkZGRjYWUwYWE0NDI1NDJlZWUxZmY1MGM5ODZlYTZiMzk4NDdiM2NjMDkyZmY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMDc5YWRiMWRmMTg2MDA3NDM1NmEyNWFhMzgyMDZhNmQ3MTZiMmMzZTY3NDUzZDI4NzY5OGJhZDdiMmIyZDYnLFxuICAgICAgICAnOGRjMjQxMmFhZmUzYmU1YzRjNWYzN2UwZWNjNWY5ZjZhNDQ2OTg5YWYwNGM0ZTI1ZWJhYWM0NzllYzFjOGMxZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNmVjOTNlNDQ3ZWM4M2YwNDY3YjE4MzAyZWU2MjBmN2U2NWRlMzMxODc0YzlkYzcyYmZkODYxNmJhOWRhNmI1JyxcbiAgICAgICAgJzVlNDYzMTE1MGU2MmZiNDBkMGU4YzJhN2NhNTgwNGEzOWQ1ODE4NmE1MGU0OTcxMzk2MjY3NzhlMjViMDY3NGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWFhNWY5ODBjMjQ1ZjZmMDM4OTc4MjkwYWZhNzBiNmJkODg1NTg5N2Y5OGI2YWE0ODViOTYwNjVkNTM3YmQ5OScsXG4gICAgICAgICdmNjVmNWQzZTI5MmMyZTA4MTlhNTI4MzkxYzk5NDYyNGQ3ODQ4NjlkN2U2ZWE2N2ZiMTgwNDEwMjRlZGMwN2RjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc4Yzk0MDc1NDRhYzEzMjY5MmVlMTkxMGEwMjQzOTk1OGFlMDQ4NzcxNTEzNDJlYTk2YzRiNmIzNWE0OWY1MScsXG4gICAgICAgICdmM2UwMzE5MTY5ZWI5Yjg1ZDU0MDQ3OTU1MzlhNWU2OGZhMWZiZDU4M2MwNjRkMjQ2MmI2NzVmMTk0YTNkZGI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5NGY0YmUyMTlhMWE3NzAxNmRjZDgzODQzMWFlYTAwMDFjZGM4YWU3YTZmYzY4ODcyNjU3OGQ5NzAyODU3YTUnLFxuICAgICAgICAnNDIyNDJhOTY5MjgzYTVmMzM5YmE3ZjA3NWUzNmJhMmFmOTI1Y2UzMGQ3NjdlZDZlNTVmNGIwMzE4ODBkNTYyYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTk4YTgwMzBkYTZkODZjNmJjN2YyZjUxNDRlYTU0OWQyODIxMWVhNThmYWE3MGViZjRjMWU2NjVjMWZlOWI1JyxcbiAgICAgICAgJzIwNGI1ZDZmODQ4MjJjMzA3ZTRiNGE3MTQwNzM3YWVjMjNmYzYzYjY1YjM1Zjg2YTEwMDI2ZGJkMmQ4NjRlNmInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQxOTE2MzY1YWJiMmI1ZDA5MTkyZjVmMmRiZWFmZWMyMDhmMDIwZjEyNTcwYTE4NGRiYWRjM2U1ODU5NTk5NycsXG4gICAgICAgICc0ZjE0MzUxZDAwODdlZmE0OWQyNDViMzI4OTg0OTg5ZDVjYWY5NDUwZjM0YmZjMGVkMTZlOTZiNThmYTk5MTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQxZDYwNjNhNTg2ZmE0NzVhNzI0NjA0ZGEwM2JjNWI5MmEyZTBkMmUwYTM2YWNmZTRjNzNhNTUxNDc0Mjg4MScsXG4gICAgICAgICc3Mzg2N2Y1OWMwNjU5ZTgxOTA0ZjlhMWM3NTQzNjk4ZTYyNTYyZDY3NDRjMTY5Y2U3YTM2ZGUwMWE4ZDYxNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWU5NWJiMzk5YTY5NzFkMzc2MDI2OTQ3Zjg5YmRlMmYyODJiMzM4MTA5MjhiZTRkZWQxMTJhYzRkNzBlMjBkNScsXG4gICAgICAgICczOWYyM2YzNjY4MDkwODViZWViZmM3MTE4MTMxMzc3NWE5OWM5YWVkN2Q4YmEzOGIxNjEzODRjNzQ2MDEyODY1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2ZTQ2NDFhNTM5NDhmZDQ3NmMzOWY4YTk5ZmQ5NzRlNWVjMDc1NjRiNTMxNWQ4YmY5OTQ3MWJjYTBlZjJmNjYnLFxuICAgICAgICAnZDI0MjRiMWIxYWJlNGViODE2NDIyN2IwODVjOWFhOTQ1NmVhMTM0OTNmZDU2M2UwNmZkNTFjZjU2OTRjNzhmYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzY1ODFlYTdiZmJiYjI5MGMxOTFhMmY1MDdhNDFjZjU2NDM4NDIxNzBlOTE0ZmFlYWIyN2MyYzU3OWY3MjYnLFxuICAgICAgICAnZWFkMTIxNjg1OTVmZTFiZTk5MjUyMTI5YjZlNTZiMzM5MWY3YWIxNDEwY2QxZTBlZjNkY2RjYWJkMmZkYTIyNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YWI4OTgxNmRhZGZkNmI2YTFmMjYzNGZjZjAwZWM4NDAzNzgxMDI1ZWQ2ODkwYzQ4NDk3NDI3MDZiZDQzZWRlJyxcbiAgICAgICAgJzZmZGNlZjA5ZjJmNmQwYTA0NGU2NTRhZWY2MjQxMzZmNTAzZDQ1OWMzZTg5ODQ1ODU4YTQ3YTkxMjljZGQyNGUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWUzM2YxYTc0NmM5YzU3NzgxMzMzNDRkOTI5OWZjYWEyMGIwOTM4ZThhY2ZmMjU0NGJiNDAyODRiOGM1ZmI5NCcsXG4gICAgICAgICc2MDY2MDI1N2RkMTFiM2FhOWM4ZWQ2MThkMjRlZGZmMjMwNmQzMjBmMWQwMzAxMGUzM2E3ZDIwNTdmM2IzYjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODViN2MxZGNiM2NlYzFiN2VlN2YzMGRlZDc5ZGQyMGEwZWQxZjRjYzE4Y2JjZmNmYTQxMDM2MWZkOGYwOGYzMScsXG4gICAgICAgICczZDk4YTljZGQwMjZkZDQzZjM5MDQ4ZjI1YTg4NDdmNGZjYWZhZDE4OTVkN2E2MzNjNmZlZDNjMzVlOTk5NTExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5ZGY5ZmJkOGQ5ZTQ2NTA5Mjc1ZjRiMTI1ZDZkNDVkN2ZiZTlhM2I4NzhhN2FmODcyYTI4MDA2NjFhYzVmNTEnLFxuICAgICAgICAnYjRjNGZlOTljNzc1YTYwNmUyZDg4NjIxNzkxMzlmZmRhNjFkYzg2MWMwMTllNTVjZDI4NzZlYjJhMjdkODRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EwYjFjYWUwNmIwYTg0N2EzZmVhNmU2NzFhYWY4YWRmZGZlNThjYTJmNzY4MTA1YzgwODJiMmU0NDlmY2UyNTInLFxuICAgICAgICAnYWU0MzQxMDJlZGRlMDk1OGVjNGIxOWQ5MTdhNmEyOGU2YjcyZGExODM0YWZmMGU2NTBmMDQ5NTAzYTI5NmNmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZThjZWFmYjliM2U5YTEzNmRjN2ZmNjdlODQwMjk1YjQ5OWRmYjNiMjEzM2U0YmExMTNmMmU0YzBlMTIxZTUnLFxuICAgICAgICAnY2YyMTc0MTE4YzhiNmQ3YTRiNDhmNmQ1MzRjZTVjNzk0MjJjMDg2YTYzNDYwNTAyYjgyN2NlNjJhMzI2NjgzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMjRhNDRlMDQ3ZTE5YjZmNWFmYjgxYzdjYTJmNjkwODBhNTA3NjY4OWEwMTA5MTlmNDI3MjVjMmI3ODlhMzNiJyxcbiAgICAgICAgJzZmYjhkNTU5MWI0NjZmOGZjNjNkYjUwZjFjMGYxYzY5MDEzZjk5Njg4N2I4MjQ0ZDJjZGVjNDE3YWZlYThmYTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWEwMTYwNmE3YTZjOWNkZDI0OWZkZmNmYWNiOTk1ODQwMDFlZGQyOGFiYmFiNzdiNTEwNGU5OGU4ZTNiMzVkNCcsXG4gICAgICAgICczMjJhZjQ5MDhjNzMxMmIwY2ZiZmUzNjlmN2E3YjNjZGI3ZDQ0OTRiYzI4MjM3MDBjZmQ2NTIxODhhM2VhOThkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FmOGFkZGJmMmI2NjFjOGE2YzYzMjg2NTVlYjk2NjUxMjUyMDA3ZDhjNWVhMzFiZTRhZDE5NmRlOGNlMjEzMWYnLFxuICAgICAgICAnNjc0OWU2N2MwMjliODVmNTJhMDM0ZWFmZDA5NjgzNmIyNTIwODE4NjgwZTI2YWM4ZjNkZmJjZGI3MTc0OTcwMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlM2FlMTk3NDU2NmNhMDZjYzUxNmQ0N2UwZmIxNjVhNjc0YTNkYWJjZmNhMTVlNzIyZjBlMzQ1MGY0NTg4OScsXG4gICAgICAgICcyYWVhYmU3ZTQ1MzE1MTAxMTYyMTdmMDdiZjRkMDczMDBkZTk3ZTQ4NzRmODFmNTMzNDIwYTcyZWViMGJkNmE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5MWVlMzU1MzEzZDk5NzIxY2Y2OTkzZmZlZDFlM2UzMDE5OTNmZjNlZDI1ODgwMjA3NWVhOGNlZDM5N2UyNDYnLFxuICAgICAgICAnYjBlYTU1OGExMTNjMzBiZWE2MGZjNDc3NTQ2MGM3OTAxZmYwYjA1M2QyNWNhMmJkZWVlOThmMWE0YmU1ZDE5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMTM5NmQ1NWZkYTU0YzQ5ZjE5YWE5NzMxOGQ4ZGE2MWZhODU4NGU0N2IwODQ5NDUwNzdjZjAzMjU1YjUyOTg0JyxcbiAgICAgICAgJzk5OGM3NGE4Y2Q0NWFjMDEyODlkNTgzM2E3YmViNDc0NGZmNTM2YjAxYjI1N2JlNGM1NzY3YmVhOTNlYTU3YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnM2M1ZDJhMWJhMzljNWExNzkwMDAwNzM4YzllMGM0MGI4ZGNkZmQ1NDY4NzU0YjY0MDU1NDAxNTdlMDE3YWE3YScsXG4gICAgICAgICdiMjI4NDI3OTk5NWEzNGUyZjlkNGRlNzM5NmZjMThiODBmOWI4YjlmZGQyNzBmNjY2MWY3OWNhNGM4MWJkMjU3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NjODcwNGI4YTYwYTBkZWZhM2E5OWE3Mjk5ZjJlOWMzZmJjMzk1YWZiMDRhYzA3ODQyNWVmOGExNzkzY2MwMzAnLFxuICAgICAgICAnYmRkNDYwMzlmZWVkMTc4ODFkMWUwODYyZGIzNDdmOGNmMzk1Yjc0ZmM0YmNkYzRlOTQwYjc0ZTNhYzFmMWIxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNTMzZTRmN2VhODU1NWFhY2Q5Nzc3YWM1Y2FkMjliOTdkZDRkZWZjY2M1M2VlN2VhMjA0MTE5YjI4ODliMTk3JyxcbiAgICAgICAgJzZmMGEyNTZiYzVlZmRmNDI5YTJmYjYyNDJmMWE0M2EyZDliOTI1YmI0YTRiM2EyNmJiOGUwZjQ1ZWI1OTYwOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzE0ZjhmMmNjYjI3ZDZmMTA5ZjZkMDhkMDNjYzk2YTY5YmE4YzM0ZWVjMDdiYmNmNTY2ZDQ4ZTMzZGE2NTkzJyxcbiAgICAgICAgJ2MzNTlkNjkyM2JiMzk4ZjdmZDQ0NzNlMTZmZTFjMjg0NzViNzQwZGQwOTgwNzVlNmMwZTg2NDkxMTNkYzNhMzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTZjYmMzMDQ2YmM2YTQ1MGJhYzI0Nzg5ZmExNzExNWE0Yzk3MzllZDc1ZjhmMjFjZTQ0MWY3MmUwYjkwZTZlZicsXG4gICAgICAgICcyMWFlN2Y0NjgwZTg4OWJiMTMwNjE5ZTJjMGY5NWEzNjBjZWI1NzNjNzA2MDMxMzk4NjJhZmQ2MTdmYTliOWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzQ3ZDZkOWEwMmM0ODkyN2ViZmI4NmMxMzU5YjFjYWYxMzBhM2MwMjY3ZDExY2U2MzQ0YjM5Zjk5ZDQzY2MzOCcsXG4gICAgICAgICc2MGVhN2Y2MWEzNTM1MjRkMWM5ODdmNmVjZWM5MmYwODZkNTY1YWI2ODc4NzBjYjEyNjg5ZmYxZTMxYzc0NDQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjU0NWQyMTgxZGI4ZDk4M2Y3ZGNiMzc1ZWY1ODY2ZDQ3YzY3YjFiZjMxYzhjZjg1NWVmNzQzN2I3MjY1NmEnLFxuICAgICAgICAnNDliOTY3MTVhYjY4NzhhNzllNzhmMDdjZTU2ODBjNWQ2NjczMDUxYjQ5MzViZDg5N2ZlYTgyNGI3N2RjMjA4YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDA3NDdjYzlkMDEyY2IxYTEzYjgxNDgzMDljNmRlN2VjMjVkNjk0NWQ2NTcxNDZiOWQ1OTk0YjhmZWIxMTExJyxcbiAgICAgICAgJzVjYTU2MDc1M2JlMmExMmZjNmRlNmNhZjJjYjQ4OTU2NWRiOTM2MTU2Yjk1MTRlMWJiNWU4MzAzN2UwZmEyZDQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU0MmM4ZWM4MmM5OTc5OGNjZjNhNjEwYmU4NzBlNzgzMzhjN2Y3MTMzNDhiZDM0YzgyMDNlZjQwMzdmMzUwMicsXG4gICAgICAgICc3NTcxZDc0ZWU1ZTBmYjkyYTdhOGIzM2EwNzc4MzM0MWE1NDkyMTQ0Y2M1NGJjYzQwYTk0NDczNjkzNjA2NDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM3NzVhYjcwODliYzZhZjgyM2FiYTJlMWFmNzBiMjM2ZDI1MWNhZGIwYzg2NzQzMjg3NTIyYTFiM2IwZGVkZWEnLFxuICAgICAgICAnYmU1MmQxMDdiY2ZhMDlkOGJjYjk3MzZhODI4Y2ZhN2ZhYzhkYjE3YmY3YTc2YTJjNDJhZDk2MTQwOTAxOGNmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjZWUzMWNiZjdlMzRlYzM3OWQ5NGZiODE0ZDNkNzc1YWQ5NTQ1OTVkMTMxNGJhODg0Njk1OWUzZTgyZjc0ZTI2JyxcbiAgICAgICAgJzhmZDY0YTE0YzA2YjU4OWMyNmI5NDdhZTJiY2Y2YmZhMDE0OWVmMGJlMTRlZDRkODBmNDQ4YTAxYzQzYjFjNmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjRmOWVhZWEwOWI2OTE3NjE5ZjZlYTZhNGViNTQ2NGVmZGRiNThmZDQ1YjFlYmVmY2RjMWEwMWQwOGI0Nzk4NicsXG4gICAgICAgICczOWU1Yzk5MjViNWE1NGIwNzQzM2E0ZjE4YzYxNzI2ZjhiYjEzMWMwMTJjYTU0MmViMjRhOGFjMDcyMDA2ODJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q0MjYzZGZjM2QyZGY5MjNhMDE3OWE0ODk2NmQzMGNlODRlMjUxNWFmYzNkY2NjMWI3NzkwNzc5MmViY2M2MGUnLFxuICAgICAgICAnNjJkZmFmMDdhMGY3OGZlYjMwZTMwZDYyOTU4NTNjZTE4OWUxMjc3NjBhZDZjZjdmYWUxNjRlMTIyYTIwOGQ1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ODQ1NzUyNDgyMGZhNjVhNGY4ZDM1ZWI2OTMwODU3YzAwMzJhY2MwYTRhMmRlNDIyMjMzZWVkYTg5NzYxMmM0JyxcbiAgICAgICAgJzI1YTc0OGFiMzY3OTc5ZDk4NzMzYzM4YTFmYTFjMmU3ZGM2Y2MwN2RiMmQ2MGE5YWU3YTc2YWFhNDliZDBmNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGZlZWVmMTg4MTEwMWYyY2IxMTY0NGYzYTJhZmRmYzIwNDVlMTk5MTkxNTI5MjNmMzY3YTE3NjdjMTFjY2VkYScsXG4gICAgICAgICdlY2ZiNzA1NmNmMWRlMDQyZjk0MjBiYWIzOTY3OTNjMGMzOTBiZGU3NGI0YmJkZmYxNmE4M2FlMDlhOWE3NTE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZkN2VmNmIxNzU0M2Y4MzczYzU3M2Y0NGUxZjM4OTgzNWQ4OWJjYmM2MDYyY2VkMzZjODJkZjgzYjhmYWU4NTknLFxuICAgICAgICAnY2Q0NTBlYzMzNTQzODk4NmRmZWZhMTBjNTdmZWE5YmNjNTIxYTA5NTliMmQ4MGJiZjc0YjE5MGRjYTcxMmQxMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNzU2MDVkNTkxMDJhNWEyNjg0NTAwZDNiOTkxZjJlM2YzYzg4YjkzMjI1NTQ3MDM1YWYyNWFmNjZlMDQ1NDFmJyxcbiAgICAgICAgJ2Y1YzU0NzU0YThmNzFlZTU0MGI5YjQ4NzI4NDczZTMxNGY3MjlhYzUzMDhiMDY5MzgzNjA5OTBlMmJmYWQxMjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWI5ODY2MGY0YzRkZmFhMDZhMmJlNDUzZDUwMjBiYzk5YTBjMmU2MGFiZTM4ODQ1N2RkNDNmZWZiMWVkNjIwYycsXG4gICAgICAgICc2Y2I5YTg4NzZkOWNiODUyMDYwOWFmM2FkZDI2Y2QyMGEwYTdjZDhhOTQxMTEzMWNlODVmNDQxMDAwOTkyMjNlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzZTg3YjAyN2Q4NTE0ZDM1OTM5ZjJlNjg5MmIxOTkyMjE1NDU5Njk0MTg4ODMzNmRjMzU2M2UzYjhkYmE5NDInLFxuICAgICAgICAnZmVmNWEzYzY4MDU5YTZkZWM1ZDYyNDExNGJmMWU5MWFhYzJiOWRhNTY4ZDZhYmViMjU3MGQ1NTY0NmI4YWRmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTE2MzAyNmU5ZmQ2ZmUwMTdjMzhmMDZhNWJlNmZjMTI1NDI0YjM3MWNlMjcwOGU3YmY0NDkxNjkxZTU3NjRhJyxcbiAgICAgICAgJzFhY2IyNTBmMjU1ZGQ2MWM0M2Q5NGNjYzY3MGQwZjU4ZjQ5YWUzZmExNWI5NjYyM2U1NDMwZGEwYWQ2YzYyYjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjI2OGY1ZWY5YWQ1MWU0ZDc4ZGUzYTc1MGMyZGM4OWIxZTYyNmQ0MzUwNTg2Nzk5OTkzMmU1ZGIzM2FmM2Q4MCcsXG4gICAgICAgICc1ZjMxMGQ0YjNjOTliOWViYjE5Zjc3ZDQxYzFkZWUwMThjZjBkMzRmZDQxOTE2MTQwMDNlOTQ1YTEyMTZlNDIzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZmMDdmMzExOGE5ZGYwMzVlOWZhZDg1ZWI2YzdiZmU0MmIwMmYwMWNhOTljZWVhM2JmN2ZmZGJhOTNjNDc1MGQnLFxuICAgICAgICAnNDM4MTM2ZDYwM2U4NThhM2E1YzQ0MGMzOGVjY2JhZGRjMWQyOTQyMTE0ZTJlZGRkNDc0MGQwOThjZWQxZjBkOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZDhiOTg1NWM3YzA1MmEzNDE0NmZkMjBmZmI2NThiZWE0YjlmNjllMGQ4MjVlYmVjMTZlOGMzY2UyYjUyNmExJyxcbiAgICAgICAgJ2NkYjU1OWVlZGMyZDc5ZjkyNmJhZjQ0ZmI4NGVhNGQ0NGJjZjUwZmVlNTFkN2NlYjMwZTJlN2Y0NjMwMzY3NTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTJkYjBiNTM4NGRmYmYwNWJmYTlkNDcyZDdhZTI2ZGZlNGI4NTFjZWNhOTFiMWViYTU0MjYzMTgwZGEzMmI2MycsXG4gICAgICAgICdjM2I5OTdkMDUwZWU1ZDQyM2ViYWY2NmE2ZGI5ZjU3YjMxODBjOTAyODc1Njc5ZGU5MjRiNjlkODRhN2IzNzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTYyZjk0OTBkM2Q1MWRhNjM5NWVmZDI0ZTgwOTE5Y2M3ZDBmMjljM2YzZmE0OGM2ZmZmNTQzYmVjYmQ0MzM1MicsXG4gICAgICAgICc2ZDg5YWQ3YmE0ODc2YjBiMjJjMmNhMjgwYzY4Mjg2MmYzNDJjODU5MWYxZGFmNTE3MGUwN2JmZDljY2FmYTdkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzdmMzBlYTI0NzZiMzk5YjQ5NTc1MDljODhmNzdkMDE5MWFmYTJmZjVjYjdiMTRmZDZkOGU3ZDY1YWFhYjExOTMnLFxuICAgICAgICAnY2E1ZWY3ZDRiMjMxYzk0YzNiMTUzODlhNWY2MzExZTlkYWZmN2JiNjdiMTAzZTk4ODBlZjRiZmY2MzdhY2FlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MDk4ZmYxZTFkOWYxNGZiNDZhMjEwZmFkYTZjOTAzZmVmMGZiN2I0YTFkZDFkOWFjNjBhMDM2MTgwMGI3YTAwJyxcbiAgICAgICAgJzk3MzExNDFkODFmYzhmODA4NGQzN2M2ZTc1NDIwMDZiM2VlMWI0MGQ2MGRmZTUzNjJhNWIxMzJmZDE3ZGRjMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMmI3OGM3ZGU5ZWU1MTJhNzI4OTViZTZiOWNiZWZhNmUyZjNjNGNjY2U0NDVjOTZiOWYyYzgxZTI3NzhhZDU4JyxcbiAgICAgICAgJ2VlMTg0OWY1MTNkZjcxZTMyZWZjMzg5NmVlMjgyNjBjNzNiYjgwNTQ3YWUyMjc1YmE0OTcyMzc3OTRjODc1M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTJjYjc0ZmRkYzhlOWZiY2QwNzZlZWYyYTdjNzJiMGNlMzdkNTBmMDgyNjlkZmMwNzRiNTgxNTUwNTQ3YTRmNycsXG4gICAgICAgICdkM2FhMmVkNzFjOWRkMjI0N2E2MmRmMDYyNzM2ZWIwYmFkZGVhOWUzNjEyMmQyYmU4NjQxYWJjYjAwNWNjNGE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0Mzg0NDc1NjZkNGQ3YmVkYWRjMjk5NDk2YWIzNTc0MjYwMDlhMzVmMjM1Y2IxNDFiZTBkOTljZDEwYWUzYTgnLFxuICAgICAgICAnYzRlMTAyMDkxNjk4MGE0ZGE1ZDAxYWM1ZTZhZDMzMDczNGVmMGQ3OTA2NjMxYzRmMjM5MDQyNmIyZWRkNzkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0MTYyZDQ4OGI4OTQwMjAzOWI1ODRjNmZjNmMzMDg4NzA1ODdkOWM0NmY2NjBiODc4YWI2NWM4MmM3MTFkNjdlJyxcbiAgICAgICAgJzY3MTYzZTkwMzIzNjI4OWY3NzZmMjJjMjVmYjhhM2FmYzE3MzJmMmI4NGI0ZTk1ZGJkYTQ3YWU1YTA4NTI2NDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnM2ZhZDNmYTg0Y2FmMGYzNGYwZjg5YmZkMmRjZjU0ZmMxNzVkNzY3YWVjM2U1MDY4NGYzYmE0YTRiZjVmNjgzZCcsXG4gICAgICAgICdjZDFiYzdjYjZjYzQwN2JiMmYwY2E2NDdjNzE4YTczMGNmNzE4NzJlN2QwZDJhNTNmYTIwZWZjZGZlNjE4MjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjc0ZjI2MDBhMzAwN2EwMDU2OGMxYTdjZTA1ZDA4MTZjMWZiODRiZjEzNzA3OThmMWM2OTUzMmZhZWIxYTg2YicsXG4gICAgICAgICcyOTlkMjFmOTQxM2YzM2IzZWRmNDNiMjU3MDA0NTgwYjcwZGI1N2RhMGIxODIyNTllMDllZWNjNjllMGQzOGE1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzMmY0ZGE1NGFkZTc0YWJiODFiODE1YWQxZmIzYjI2M2Q4MmQ2YzY5MjcxNGJjZmY4N2QyOWJkNWVlOWYwOGYnLFxuICAgICAgICAnZjk0MjllNzM4YjhlNTNiOTY4ZTk5MDE2YzA1OTcwNzc4MmUxNGY0NTM1MzU5ZDU4MmZjNDE2OTEwYjNlZWE4NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMGU0ZTY3MDQzNTM4NTU1NmU1OTM2NTcxMzU4NDVkMzZmYmI2OTMxZjcyYjA4Y2IxZWQ5NTRmMWUzY2UzZmY2JyxcbiAgICAgICAgJzQ2MmY5YmNlNjE5ODk4NjM4NDk5MzUwMTEzYmJjOWIxMGE4NzhkMzVkYTcwNzQwZGM2OTVhNTU5ZWI4OGRiN2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmUyMDYyMDAzYzUxY2MzMDA0NjgyOTA0MzMwZTRkZWU3ZjNkY2QxMGIwMWU1ODBiZjE5NzFiMDRkNGNhZDI5NycsXG4gICAgICAgICc2MjE4OGJjNDlkNjFlNTQyODU3M2Q0OGE3NGUxYzY1NWIxYzYxMDkwOTA1NjgyYTBkNTU1OGVkNzJkY2NiOWJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkzMTQ0NDIzYWNlMzQ1MWVkMjllMGZiOWFjMmFmMjExY2I2ZTg0YTYwMWRmNTk5M2M0MTk4NTlmZmY1ZGYwNGEnLFxuICAgICAgICAnN2MxMGRmYjE2NGMzNDI1ZjVjNzFhM2Y5ZDc5OTIwMzhmMTA2NTIyNGY3MmJiOWQxZDkwMmE2ZDEzMDM3YjQ3YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMDE1ZjgwNDRmNWZjYmRjZjIxY2EyNmQ2YzM0ZmI4MTk3ODI5MjA1YzdiN2QyYTdjYjY2NDE4YzE1N2IxMTJjJyxcbiAgICAgICAgJ2FiOGMxZTA4NmQwNGU4MTM3NDRhNjU1YjJkZjhkNWY4M2IzY2RjNmZhYTMwODhjMWQzYWVhMTQ1NGUzYTFkNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDVlOWUxZGE2NDlkOTdkODllNDg2ODExN2E0NjVhM2E0ZjhhMThkZTU3YTE0MGQzNmIzZjJhZjM0MWEyMWI1MicsXG4gICAgICAgICc0Y2IwNDQzN2YzOTFlZDczMTExYTEzY2MxZDRkZDBkYjE2OTM0NjVjMjI0MDQ4MGQ4OTU1ZTg1OTJmMjc0NDdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzYWU0MTA0N2RkN2NhMDY1ZGJmOGVkNzdiOTkyNDM5OTgzMDA1Y2Q3MmUxNmQ2Zjk5NmE1MzE2ZDM2OTY2YmInLFxuICAgICAgICAnYmQxYWViMjFhZDIyZWJiMjJhMTBmMDMwMzQxN2M2ZDk2NGY4Y2RkN2RmMGFjYTYxNGIxMGRjMTRkMTI1YWM0NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNlMjc2M2Q4ODVmOTU4ZmM2NmNkZDIyODAwZjBhNDg3MTk3ZDBhODJlMzc3YjQ5ZjgwYWY4N2M4OTdiMDY1JyxcbiAgICAgICAgJ2JmZWZhY2RiMGU1ZDBmZDdkZjNhMzExYTk0ZGUwNjJiMjZiODBjNjFmYmM5NzUwOGI3OTk5MjY3MWVmN2NhN2YnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk4NWZkZmQxMjdjMDU2N2M2ZjUzZWMxYmI2M2VjMzE1OGU1OTdjNDBiZmU3NDdjODNjZGRmYzkxMDY0MTkxNycsXG4gICAgICAgICc2MDNjMTJkYWYzZDk4NjJlZjJiMjVmZTFkZTI4OWFlZDI0ZWQyOTFlMGVjNjcwODcwM2E1YmQ1NjdmMzJlZDAzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0YTFhZDZiNWY3NmUzOWRiMmRkMjQ5NDEwZWFjN2Y5OWU3NGM1OWNiODNkMmQwZWQ1ZmYxNTQzZGE3NzAzZTknLFxuICAgICAgICAnY2M2MTU3ZWYxOGM5YzYzY2Q2MTkzZDgzNjMxYmJlYTAwOTNlMDk2ODk0MmU4YzMzZDU3MzdmZDc5MGUwZGIwOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMDY4MmE1MDcwMzM3NWY2MDJkNDE2NjY0YmExOWI3ZmM5YmFiNDJjNzI3NDc0NjNhNzFkMDg5NmIyMmY2ZGEzJyxcbiAgICAgICAgJzU1M2UwNGY2YjAxOGI0ZmE2YzhmMzllN2YzMTFkMzE3NjI5MGQwZTBmMTljYTczZjE3NzE0ZDk5NzdhMjJmZjgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWUyMTU4ZjBkN2MwZDVmMjZjMzc5MWVmZWZhNzk1OTc2NTRlN2EyYjI0NjRmNTJiMWVlNmMxMzQ3NzY5ZWY1NycsXG4gICAgICAgICc3MTJmY2RkMWI5MDUzZjA5MDAzYTM0ODFmYTc3NjJlOWZmZDdjOGVmMzVhMzg1MDllMmZiZjI2MjkwMDgzNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc2ZTI2OTg5YTQzYzljZmViYTQwMjljMjAyNTM4YzI4MTcyZTU2NmUzYzRmY2U3MzIyODU3ZjNiZTMyN2Q2NicsXG4gICAgICAgICdlZDhjYzlkMDRiMjllYjg3N2QyNzBiNDg3OGRjNDNjMTlhZWZkMzFmNGVlZTA5ZWU3YjQ3ODM0YzFmYTRiMWMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1ZDQ2ZWZlYTM3NzFlNmU2OGFiYjg5YTEzYWQ3NDdlY2YxODkyMzkzZGZjNGYxYjcwMDQ3ODhjNTAzNzRkYTgnLFxuICAgICAgICAnOTg1MjM5MGE5OTUwNzY3OWZkMGI4NmZkMmIzOWE4NjhkN2VmYzIyMTUxMzQ2ZTFhM2NhNDcyNjU4NmE2YmVkOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MDlhMjBjNjdkNjQ5MDBmZmI2OThjNGM4MjVmNmQ1ZjIzMTBmYjA0NTFjODY5MzQ1YjczMTlmNjQ1NjA1NzIxJyxcbiAgICAgICAgJzllOTk0OTgwZDk5MTdlMjJiNzZiMDYxOTI3ZmEwNDE0M2QwOTZjY2M1NDk2M2U2YTVlYmZhNWYzZjhlMjg2YzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWIzODkwM2E0M2Y3ZjExNGVkNDUwMGI0ZWFjNzA4M2ZkZWZlY2UxY2YyOWM2MzUyOGQ1NjM0NDZmOTcyYzE4MCcsXG4gICAgICAgICc0MDM2ZWRjOTMxYTYwYWU4ODkzNTNmNzdmZDUzZGU0YTI3MDhiMjZiNmY1ZGE3MmFkMzM5NDExOWRhZjQwOGY5J1xuICAgICAgXVxuICAgIF1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgbWluQXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIG1pblV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xuXG51dGlscy5hc3NlcnQgPSBtaW5Bc3NlcnQ7XG51dGlscy50b0FycmF5ID0gbWluVXRpbHMudG9BcnJheTtcbnV0aWxzLnplcm8yID0gbWluVXRpbHMuemVybzI7XG51dGlscy50b0hleCA9IG1pblV0aWxzLnRvSGV4O1xudXRpbHMuZW5jb2RlID0gbWluVXRpbHMuZW5jb2RlO1xuXG4vLyBSZXByZXNlbnQgbnVtIGluIGEgdy1OQUYgZm9ybVxuZnVuY3Rpb24gZ2V0TkFGKG51bSwgdykge1xuICB2YXIgbmFmID0gW107XG4gIHZhciB3cyA9IDEgPDwgKHcgKyAxKTtcbiAgdmFyIGsgPSBudW0uY2xvbmUoKTtcbiAgd2hpbGUgKGsuY21wbigxKSA+PSAwKSB7XG4gICAgdmFyIHo7XG4gICAgaWYgKGsuaXNPZGQoKSkge1xuICAgICAgdmFyIG1vZCA9IGsuYW5kbG4od3MgLSAxKTtcbiAgICAgIGlmIChtb2QgPiAod3MgPj4gMSkgLSAxKVxuICAgICAgICB6ID0gKHdzID4+IDEpIC0gbW9kO1xuICAgICAgZWxzZVxuICAgICAgICB6ID0gbW9kO1xuICAgICAgay5pc3Vibih6KTtcbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IDA7XG4gICAgfVxuICAgIG5hZi5wdXNoKHopO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uLCBzaGlmdCBieSB3b3JkIGlmIHBvc3NpYmxlXG4gICAgdmFyIHNoaWZ0ID0gKGsuY21wbigwKSAhPT0gMCAmJiBrLmFuZGxuKHdzIC0gMSkgPT09IDApID8gKHcgKyAxKSA6IDE7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzaGlmdDsgaSsrKVxuICAgICAgbmFmLnB1c2goMCk7XG4gICAgay5pdXNocm4oc2hpZnQpO1xuICB9XG5cbiAgcmV0dXJuIG5hZjtcbn1cbnV0aWxzLmdldE5BRiA9IGdldE5BRjtcblxuLy8gUmVwcmVzZW50IGsxLCBrMiBpbiBhIEpvaW50IFNwYXJzZSBGb3JtXG5mdW5jdGlvbiBnZXRKU0YoazEsIGsyKSB7XG4gIHZhciBqc2YgPSBbXG4gICAgW10sXG4gICAgW11cbiAgXTtcblxuICBrMSA9IGsxLmNsb25lKCk7XG4gIGsyID0gazIuY2xvbmUoKTtcbiAgdmFyIGQxID0gMDtcbiAgdmFyIGQyID0gMDtcbiAgd2hpbGUgKGsxLmNtcG4oLWQxKSA+IDAgfHwgazIuY21wbigtZDIpID4gMCkge1xuXG4gICAgLy8gRmlyc3QgcGhhc2VcbiAgICB2YXIgbTE0ID0gKGsxLmFuZGxuKDMpICsgZDEpICYgMztcbiAgICB2YXIgbTI0ID0gKGsyLmFuZGxuKDMpICsgZDIpICYgMztcbiAgICBpZiAobTE0ID09PSAzKVxuICAgICAgbTE0ID0gLTE7XG4gICAgaWYgKG0yNCA9PT0gMylcbiAgICAgIG0yNCA9IC0xO1xuICAgIHZhciB1MTtcbiAgICBpZiAoKG0xNCAmIDEpID09PSAwKSB7XG4gICAgICB1MSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMS5hbmRsbig3KSArIGQxKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMjQgPT09IDIpXG4gICAgICAgIHUxID0gLW0xNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTEgPSBtMTQ7XG4gICAgfVxuICAgIGpzZlswXS5wdXNoKHUxKTtcblxuICAgIHZhciB1MjtcbiAgICBpZiAoKG0yNCAmIDEpID09PSAwKSB7XG4gICAgICB1MiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgICAgICAgdGhpc1trZXldID0gY29tcHV0ZXIuY2FsbCh0aGlzKTtcbiAgfTtcbn1cbnV0aWxzLmNhY2hlZFByb3BlcnR5ID0gY2FjaGVkUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycgPyB1dGlscy50b0FycmF5KGJ5dGVzLCAnaGV4JykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzO1xufVxudXRpbHMucGFyc2VCeXRlcyA9IHBhcnNlQnl0ZXM7XG5cbmZ1bmN0aW9uIGludEZyb21MRShieXRlcykge1xuICByZXR1cm4gbmV3IEJOKGJ5dGVzLCAnaGV4JywgJ2xlJyk7XG59XG51dGlscy5pbnRGcm9tTEUgPSBpbnRGcm9tTEU7XG5cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlCaXRzLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoc2FsdCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgJ2JpbmFyeScpXG4gICAgaWYgKHNhbHQubGVuZ3RoICE9PSA4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2FsdCBzaG91bGQgYmUgQnVmZmVyIHdpdGggOCBieXRlIGxlbmd0aCcpXG4gIH1cblxuICB2YXIga2V5TGVuID0ga2V5Qml0cyAvIDhcbiAgdmFyIGtleSA9IEJ1ZmZlci5hbGxvYyhrZXlMZW4pXG4gIHZhciBpdiA9IEJ1ZmZlci5hbGxvYyhpdkxlbiB8fCAwKVxuICB2YXIgdG1wID0gQnVmZmVyLmFsbG9jKDApXG5cbiAgd2hpbGUgKGtleUxlbiA+IDAgfHwgaXZMZW4gPiAwKSB7XG4gICAgdmFyIGhhc2ggPSBuZXcgTUQ1KClcbiAgICBoYXNoLnVwZGF0ZSh0bXApXG4gICAgaGFzaC51cGRhdGUocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIGhhc2gudXBkYXRlKHNhbHQpXG4gICAgdG1wID0gaGFzaC5kaWdlc3QoKVxuXG4gICAgdmFyIHVzZWQgPSAwXG5cbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgdmFyIGtleVN0YXJ0ID0ga2V5Lmxlbmd0aCAtIGtleUxlblxuICAgICAgdXNlZCA9IE1hdGgubWluKGtleUxlbiwgdG1wLmxlbmd0aClcbiAgICAgIHRtcC5jb3B5KGtleSwga2V5U3RhcnQsIDAsIHVzZWQpXG4gICAgICBrZXlMZW4gLT0gdXNlZFxuICAgIH1cblxuICAgIGlmICh1c2VkIDwgdG1wLmxlbmd0aCAmJiBpdkxlbiA+IDApIHtcbiAgICAgIHZhciBpdlN0YXJ0ID0gaXYubGVuZ3RoIC0gaXZMZW5cbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihpdkxlbiwgdG1wLmxlbmd0aCAtIHVzZWQpXG4gICAgICB0bXAuY29weShpdiwgaXZTdGFydCwgdXNlZCwgdXNlZCArIGxlbmd0aClcbiAgICAgIGl2TGVuIC09IGxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHRtcC5maWxsKDApXG4gIHJldHVybiB7IGtleToga2V5LCBpdjogaXYgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIgKHZhbCwgcHJlZml4KSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbCkgJiYgdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHByZWZpeCArICcgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpXG4gIH1cbn1cblxuZnVuY3Rpb24gSGFzaEJhc2UgKGJsb2NrU2l6ZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2NrU2l6ZSlcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB0aGlzLl9sZW5ndGggPSBbMCwgMCwgMCwgMF1cblxuICB0aGlzLl9maW5hbGl6ZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhIYXNoQmFzZSwgVHJhbnNmb3JtKVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnVwZGF0ZShjaHVuaywgZW5jb2RpbmcpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIoZGF0YSwgJ0RhdGEnKVxuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpXG5cbiAgLy8gY29uc3VtZSBkYXRhXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBvZmZzZXQgPSAwXG4gIHdoaWxlICh0aGlzLl9ibG9ja09mZnNldCArIGRhdGEubGVuZ3RoIC0gb2Zmc2V0ID49IHRoaXMuX2Jsb2NrU2l6ZSkge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLl9ibG9ja09mZnNldDsgaSA8IHRoaXMuX2Jsb2NrU2l6ZTspIGJsb2NrW2krK10gPSBkYXRhW29mZnNldCsrXVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cbiAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSBibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IGRhdGFbb2Zmc2V0KytdXG5cbiAgLy8gdXBkYXRlIGxlbmd0aFxuICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBkYXRhLmxlbmd0aCAqIDg7IGNhcnJ5ID4gMDsgKytqKSB7XG4gICAgdGhpcy5fbGVuZ3RoW2pdICs9IGNhcnJ5XG4gICAgY2FycnkgPSAodGhpcy5fbGVuZ3RoW2pdIC8gMHgwMTAwMDAwMDAwKSB8IDBcbiAgICBpZiAoY2FycnkgPiAwKSB0aGlzLl9sZW5ndGhbal0gLT0gMHgwMTAwMDAwMDAwICogY2FycnlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIHRoaXMuX2ZpbmFsaXplZCA9IHRydWVcblxuICB2YXIgZGlnZXN0ID0gdGhpcy5fZGlnZXN0KClcbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIGRpZ2VzdCA9IGRpZ2VzdC50b1N0cmluZyhlbmNvZGluZylcblxuICAvLyByZXNldCBzdGF0ZVxuICB0aGlzLl9ibG9jay5maWxsKDApXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkgdGhpcy5fbGVuZ3RoW2ldID0gMFxuXG4gIHJldHVybiBkaWdlc3Rcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX2RpZ2VzdCBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hCYXNlXG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG5mdW5jdGlvbiBSSVBFTUQxNjAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSSVBFTUQxNjApKVxuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5oID0gWyAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuZW5kaWFuID0gJ2xpdHRsZSc7XG59XG51dGlscy5pbmhlcml0cyhSSVBFTUQxNjAsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IFJJUEVNRDE2MDtcblxuUklQRU1EMTYwLmJsb2NrU2l6ZSA9IDUxMjtcblJJUEVNRDE2MC5vdXRTaXplID0gMTYwO1xuUklQRU1EMTYwLmhtYWNTdHJlbmd0aCA9IDE5MjtcblJJUEVNRDE2MC5wYWRMZW5ndGggPSA2NDtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIEEgPSB0aGlzLmhbMF07XG4gIHZhciBCID0gdGhpcy5oWzFdO1xuICB2YXIgQyA9IHRoaXMuaFsyXTtcbiAgdmFyIEQgPSB0aGlzLmhbM107XG4gIHZhciBFID0gdGhpcy5oWzRdO1xuICB2YXIgQWggPSBBO1xuICB2YXIgQmggPSBCO1xuICB2YXIgQ2ggPSBDO1xuICB2YXIgRGggPSBEO1xuICB2YXIgRWggPSBFO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICB2YXIgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEEsIGYoaiwgQiwgQywgRCksIG1zZ1tyW2pdICsgc3RhcnRdLCBLKGopKSxcbiAgICAgICAgc1tqXSksXG4gICAgICBFKTtcbiAgICBBID0gRTtcbiAgICBFID0gRDtcbiAgICBEID0gcm90bDMyKEMsIDEwKTtcbiAgICBDID0gQjtcbiAgICBCID0gVDtcbiAgICBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksXG4gICAgICAgIHNoW2pdKSxcbiAgICAgIEVoKTtcbiAgICBBaCA9IEVoO1xuICAgIEVoID0gRGg7XG4gICAgRGggPSByb3RsMzIoQ2gsIDEwKTtcbiAgICBDaCA9IEJoO1xuICAgIEJoID0gVDtcbiAgfVxuICBUID0gc3VtMzJfMyh0aGlzLmhbMV0sIEMsIERoKTtcbiAgdGhpcy5oWzFdID0gc3VtMzJfMyh0aGlzLmhbMl0sIEQsIEVoKTtcbiAgdGhpcy5oWzJdID0gc3VtMzJfMyh0aGlzLmhbM10sIEUsIEFoKTtcbiAgdGhpcy5oWzNdID0gc3VtMzJfMyh0aGlzLmhbNF0sIEEsIEJoKTtcbiAgdGhpcy5oWzRdID0gc3VtMzJfMyh0aGlzLmhbMF0sIEIsIENoKTtcbiAgdGhpcy5oWzBdID0gVDtcbn07XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnbGl0dGxlJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdsaXR0bGUnKTtcbn07XG5cbmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4geCBeIHkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gKHggfCAofnkpKSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpO1xuICBlbHNlXG4gICAgcmV0dXJuIHggXiAoeSB8ICh+eikpO1xufVxuXG5mdW5jdGlvbiBLKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWE4Mjc5OTk7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmVkOWViYTE7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4OGYxYmJjZGM7XG4gIGVsc2VcbiAgICByZXR1cm4gMHhhOTUzZmQ0ZTtcbn1cblxuZnVuY3Rpb24gS2goaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHg1MGEyOGJlNjtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YzRkZDEyNDtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZDcwM2VmMztcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg3YTZkNzZlOTtcbiAgZWxzZVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xufVxuXG52YXIgciA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXTtcblxudmFyIHJoID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dO1xuXG52YXIgcyA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl07XG5cbnZhciBzaCA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGZ0XzEgPSBzaGFDb21tb24uZnRfMTtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMV9LID0gW1xuICAweDVBODI3OTk5LCAweDZFRDlFQkExLFxuICAweDhGMUJCQ0RDLCAweENBNjJDMUQ2XG5dO1xuXG5mdW5jdGlvbiBTSEExKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMSkpXG4gICAgcmV0dXJuIG5ldyBTSEExKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLFxuICAgIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5XID0gbmV3IEFycmF5KDgwKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoU0hBMSwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMTtcblxuU0hBMS5ibG9ja1NpemUgPSA1MTI7XG5TSEExLm91dFNpemUgPSAxNjA7XG5TSEExLmhtYWNTdHJlbmd0aCA9IDgwO1xuU0hBMS5wYWRMZW5ndGggPSA2NDtcblxuU0hBMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuXG4gIGZvcig7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSByb3RsMzIoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSwgMSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHMgPSB+fihpIC8gMjApO1xuICAgIHZhciB0ID0gc3VtMzJfNShyb3RsMzIoYSwgNSksIGZ0XzEocywgYiwgYywgZCksIGUsIFdbaV0sIHNoYTFfS1tzXSk7XG4gICAgZSA9IGQ7XG4gICAgZCA9IGM7XG4gICAgYyA9IHJvdGwzMihiLCAzMCk7XG4gICAgYiA9IGE7XG4gICAgYSA9IHQ7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xufTtcblxuU0hBMS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgU0hBMjU2ID0gcmVxdWlyZSgnLi8yNTYnKTtcblxuZnVuY3Rpb24gU0hBMjI0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjI0KSlcbiAgICByZXR1cm4gbmV3IFNIQTIyNCgpO1xuXG4gIFNIQTI1Ni5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSxcbiAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEyMjQsIFNIQTI1Nik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTIyNDtcblxuU0hBMjI0LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTIyNC5vdXRTaXplID0gMjI0O1xuU0hBMjI0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTIyNC5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjI0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICAvLyBKdXN0IHRydW5jYXRlIG91dHB1dFxuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBjaDMyID0gc2hhQ29tbW9uLmNoMzI7XG52YXIgbWFqMzIgPSBzaGFDb21tb24ubWFqMzI7XG52YXIgczBfMjU2ID0gc2hhQ29tbW9uLnMwXzI1NjtcbnZhciBzMV8yNTYgPSBzaGFDb21tb24uczFfMjU2O1xudmFyIGcwXzI1NiA9IHNoYUNvbW1vbi5nMF8yNTY7XG52YXIgZzFfMjU2ID0gc2hhQ29tbW9uLmcxXzI1NjtcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGEyNTZfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSxcbiAgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMyxcbiAgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSxcbiAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNyxcbiAgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMyxcbiAgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMyxcbiAgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCxcbiAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSxcbiAgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCxcbiAgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXTtcblxuZnVuY3Rpb24gU0hBMjU2KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjU2KSlcbiAgICByZXR1cm4gbmV3IFNIQTI1NigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhiYjY3YWU4NSwgMHgzYzZlZjM3MiwgMHhhNTRmZjUzYSxcbiAgICAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5XG4gIF07XG4gIHRoaXMuayA9IHNoYTI1Nl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoNjQpO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjU2LCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyNTY7XG5cblNIQTI1Ni5ibG9ja1NpemUgPSA1MTI7XG5TSEEyNTYub3V0U2l6ZSA9IDI1NjtcblNIQTI1Ni5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyNTYucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHN1bTMyXzQoZzFfMjU2KFdbaSAtIDJdKSwgV1tpIC0gN10sIGcwXzI1NihXW2kgLSAxNV0pLCBXW2kgLSAxNl0pO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcbiAgdmFyIGYgPSB0aGlzLmhbNV07XG4gIHZhciBnID0gdGhpcy5oWzZdO1xuICB2YXIgaCA9IHRoaXMuaFs3XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYsIGcpLCB0aGlzLmtbaV0sIFdbaV0pO1xuICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSBzdW0zMihkLCBUMSk7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9IHN1bTMyKFQxLCBUMik7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xuICB0aGlzLmhbNV0gPSBzdW0zMih0aGlzLmhbNV0sIGYpO1xuICB0aGlzLmhbNl0gPSBzdW0zMih0aGlzLmhbNl0sIGcpO1xuICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpO1xufTtcblxuU0hBMjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vNTEyJyk7XG5cbmZ1bmN0aW9uIFNIQTM4NCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpXG4gICAgcmV0dXJuIG5ldyBTSEEzODQoKTtcblxuICBTSEE1MTIuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgsXG4gICAgMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyxcbiAgICAweDkxNTkwMTVhLCAweDMwNzBkZDE3LFxuICAgIDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzksXG4gICAgMHg2NzMzMjY2NywgMHhmZmMwMGIzMSxcbiAgICAweDhlYjQ0YTg3LCAweDY4NTgxNTExLFxuICAgIDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcsXG4gICAgMHg0N2I1NDgxZCwgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMzg0LCBTSEE1MTIpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEzODQ7XG5cblNIQTM4NC5ibG9ja1NpemUgPSAxMDI0O1xuU0hBMzg0Lm91dFNpemUgPSAzODQ7XG5TSEEzODQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMzg0LnBhZExlbmd0aCA9IDEyODtcblxuU0hBMzg0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHJvdHI2NF9oaSA9IHV0aWxzLnJvdHI2NF9oaTtcbnZhciByb3RyNjRfbG8gPSB1dGlscy5yb3RyNjRfbG87XG52YXIgc2hyNjRfaGkgPSB1dGlscy5zaHI2NF9oaTtcbnZhciBzaHI2NF9sbyA9IHV0aWxzLnNocjY0X2xvO1xudmFyIHN1bTY0ID0gdXRpbHMuc3VtNjQ7XG52YXIgc3VtNjRfaGkgPSB1dGlscy5zdW02NF9oaTtcbnZhciBzdW02NF9sbyA9IHV0aWxzLnN1bTY0X2xvO1xudmFyIHN1bTY0XzRfaGkgPSB1dGlscy5zdW02NF80X2hpO1xudmFyIHN1bTY0XzRfbG8gPSB1dGlscy5zdW02NF80X2xvO1xudmFyIHN1bTY0XzVfaGkgPSB1dGlscy5zdW02NF81X2hpO1xudmFyIHN1bTY0XzVfbG8gPSB1dGlscy5zdW02NF81X2xvO1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTUxMl9LID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dO1xuXG5mdW5jdGlvbiBTSEE1MTIoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEE1MTIpKVxuICAgIHJldHVybiBuZXcgU0hBNTEyKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGYzYmNjOTA4LFxuICAgIDB4YmI2N2FlODUsIDB4ODRjYWE3M2IsXG4gICAgMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYixcbiAgICAweGE1NGZmNTNhLCAweDVmMWQzNmYxLFxuICAgIDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEsXG4gICAgMHg5YjA1Njg4YywgMHgyYjNlNmMxZixcbiAgICAweDFmODNkOWFiLCAweGZiNDFiZDZiLFxuICAgIDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkgXTtcbiAgdGhpcy5rID0gc2hhNTEyX0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSgxNjApO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBNTEyLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEE1MTI7XG5cblNIQTUxMi5ibG9ja1NpemUgPSAxMDI0O1xuU0hBNTEyLm91dFNpemUgPSA1MTI7XG5TSEE1MTIuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBNTEyLnBhZExlbmd0aCA9IDEyODtcblxuU0hBNTEyLnByb3RvdHlwZS5fcHJlcGFyZUJsb2NrID0gZnVuY3Rpb24gX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIC8vIDMyIHggMzJiaXQgd29yZHNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gZzFfNTEyX2hpKFdbaSAtIDRdLCBXW2kgLSAzXSk7ICAvLyBpIC0gMlxuICAgIHZhciBjMF9sbyA9IGcxXzUxMl9sbyhXW2kgLSA0XSwgV1tpIC0gM10pO1xuICAgIHZhciBjMV9oaSA9IFdbaSAtIDE0XTsgIC8vIGkgLSA3XG4gICAgdmFyIGMxX2xvID0gV1tpIC0gMTNdO1xuICAgIHZhciBjMl9oaSA9IGcwXzUxMl9oaShXW2kgLSAzMF0sIFdbaSAtIDI5XSk7ICAvLyBpIC0gMTVcbiAgICB2YXIgYzJfbG8gPSBnMF81MTJfbG8oV1tpIC0gMzBdLCBXW2kgLSAyOV0pO1xuICAgIHZhciBjM19oaSA9IFdbaSAtIDMyXTsgIC8vIGkgLSAxNlxuICAgIHZhciBjM19sbyA9IFdbaSAtIDMxXTtcblxuICAgIFdbaV0gPSBzdW02NF80X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgICBXW2kgKyAxXSA9IHN1bTY0XzRfbG8oXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICB9XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdGhpcy5fcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpO1xuXG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIHZhciBhaCA9IHRoaXMuaFswXTtcbiAgdmFyIGFsID0gdGhpcy5oWzFdO1xuICB2YXIgYmggPSB0aGlzLmhbMl07XG4gIHZhciBibCA9IHRoaXMuaFszXTtcbiAgdmFyIGNoID0gdGhpcy5oWzRdO1xuICB2YXIgY2wgPSB0aGlzLmhbNV07XG4gIHZhciBkaCA9IHRoaXMuaFs2XTtcbiAgdmFyIGRsID0gdGhpcy5oWzddO1xuICB2YXIgZWggPSB0aGlzLmhbOF07XG4gIHZhciBlbCA9IHRoaXMuaFs5XTtcbiAgdmFyIGZoID0gdGhpcy5oWzEwXTtcbiAgdmFyIGZsID0gdGhpcy5oWzExXTtcbiAgdmFyIGdoID0gdGhpcy5oWzEyXTtcbiAgdmFyIGdsID0gdGhpcy5oWzEzXTtcbiAgdmFyIGhoID0gdGhpcy5oWzE0XTtcbiAgdmFyIGhsID0gdGhpcy5oWzE1XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBoaDtcbiAgICB2YXIgYzBfbG8gPSBobDtcbiAgICB2YXIgYzFfaGkgPSBzMV81MTJfaGkoZWgsIGVsKTtcbiAgICB2YXIgYzFfbG8gPSBzMV81MTJfbG8oZWgsIGVsKTtcbiAgICB2YXIgYzJfaGkgPSBjaDY0X2hpKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjMl9sbyA9IGNoNjRfbG8oZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMzX2hpID0gdGhpcy5rW2ldO1xuICAgIHZhciBjM19sbyA9IHRoaXMua1tpICsgMV07XG4gICAgdmFyIGM0X2hpID0gV1tpXTtcbiAgICB2YXIgYzRfbG8gPSBXW2kgKyAxXTtcblxuICAgIHZhciBUMV9oaSA9IHN1bTY0XzVfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8sXG4gICAgICBjNF9oaSwgYzRfbG8pO1xuICAgIHZhciBUMV9sbyA9IHN1bTY0XzVfbG8oXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8sXG4gICAgICBjNF9oaSwgYzRfbG8pO1xuXG4gICAgYzBfaGkgPSBzMF81MTJfaGkoYWgsIGFsKTtcbiAgICBjMF9sbyA9IHMwXzUxMl9sbyhhaCwgYWwpO1xuICAgIGMxX2hpID0gbWFqNjRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG4gICAgYzFfbG8gPSBtYWo2NF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcblxuICAgIHZhciBUMl9oaSA9IHN1bTY0X2hpKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcbiAgICB2YXIgVDJfbG8gPSBzdW02NF9sbyhjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG5cbiAgICBoaCA9IGdoO1xuICAgIGhsID0gZ2w7XG5cbiAgICBnaCA9IGZoO1xuICAgIGdsID0gZmw7XG5cbiAgICBmaCA9IGVoO1xuICAgIGZsID0gZWw7XG5cbiAgICBlaCA9IHN1bTY0X2hpKGRoLCBkbCwgVDFfaGksIFQxX2xvKTtcbiAgICBlbCA9IHN1bTY0X2xvKGRsLCBkbCwgVDFfaGksIFQxX2xvKTtcblxuICAgIGRoID0gY2g7XG4gICAgZGwgPSBjbDtcblxuICAgIGNoID0gYmg7XG4gICAgY2wgPSBibDtcblxuICAgIGJoID0gYWg7XG4gICAgYmwgPSBhbDtcblxuICAgIGFoID0gc3VtNjRfaGkoVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICAgIGFsID0gc3VtNjRfbG8oVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICB9XG5cbiAgc3VtNjQodGhpcy5oLCAwLCBhaCwgYWwpO1xuICBzdW02NCh0aGlzLmgsIDIsIGJoLCBibCk7XG4gIHN1bTY0KHRoaXMuaCwgNCwgY2gsIGNsKTtcbiAgc3VtNjQodGhpcy5oLCA2LCBkaCwgZGwpO1xuICBzdW02NCh0aGlzLmgsIDgsIGVoLCBlbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTAsIGZoLCBmbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTIsIGdoLCBnbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTQsIGhoLCBobCk7XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBjaDY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICgofnhoKSAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBjaDY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoKH54bCkgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKHhoICYgemgpIF4gKHloICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoeGwgJiB6bCkgXiAoeWwgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDgpO1xuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDgpO1xuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgcm90cjMyID0gdXRpbHMucm90cjMyO1xuXG5mdW5jdGlvbiBmdF8xKHMsIHgsIHksIHopIHtcbiAgaWYgKHMgPT09IDApXG4gICAgcmV0dXJuIGNoMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAxIHx8IHMgPT09IDMpXG4gICAgcmV0dXJuIHAzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDIpXG4gICAgcmV0dXJuIG1hajMyKHgsIHksIHopO1xufVxuZXhwb3J0cy5mdF8xID0gZnRfMTtcblxuZnVuY3Rpb24gY2gzMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKCh+eCkgJiB6KTtcbn1cbmV4cG9ydHMuY2gzMiA9IGNoMzI7XG5cbmZ1bmN0aW9uIG1hajMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoeCAmIHopIF4gKHkgJiB6KTtcbn1cbmV4cG9ydHMubWFqMzIgPSBtYWozMjtcblxuZnVuY3Rpb24gcDMyKHgsIHksIHopIHtcbiAgcmV0dXJuIHggXiB5IF4gejtcbn1cbmV4cG9ydHMucDMyID0gcDMyO1xuXG5mdW5jdGlvbiBzMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDIpIF4gcm90cjMyKHgsIDEzKSBeIHJvdHIzMih4LCAyMik7XG59XG5leHBvcnRzLnMwXzI1NiA9IHMwXzI1NjtcblxuZnVuY3Rpb24gczFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA2KSBeIHJvdHIzMih4LCAxMSkgXiByb3RyMzIoeCwgMjUpO1xufVxuZXhwb3J0cy5zMV8yNTYgPSBzMV8yNTY7XG5cbmZ1bmN0aW9uIGcwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNykgXiByb3RyMzIoeCwgMTgpIF4gKHggPj4+IDMpO1xufVxuZXhwb3J0cy5nMF8yNTYgPSBnMF8yNTY7XG5cbmZ1bmN0aW9uIGcxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMTcpIF4gcm90cjMyKHgsIDE5KSBeICh4ID4+PiAxMCk7XG59XG5leHBvcnRzLmcxXzI1NiA9IGcxXzI1NjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgIGlmICghZW5jKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgICBpZiAoaGkpXG4gICAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5cbmZ1bmN0aW9uIGh0b25sKHcpIHtcbiAgdmFyIHJlcyA9ICh3ID4+PiAyNCkgfFxuICAgICAgICAgICAgKCh3ID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICAgICAgICAgKCh3IDw8IDgpICYgMHhmZjAwMDApIHxcbiAgICAgICAgICAgICgodyAmIDB4ZmYpIDw8IDI0KTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn1cbmV4cG9ydHMuaHRvbmwgPSBodG9ubDtcblxuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpXG4gICAgICB3ID0gaHRvbmwodyk7XG4gICAgcmVzICs9IHplcm84KHcudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gemVybzgod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDcpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA2KVxuICAgIHJldHVybiAnMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDUpXG4gICAgcmV0dXJuICcwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDQpXG4gICAgcmV0dXJuICcwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAzKVxuICAgIHJldHVybiAnMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuICcwMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzggPSB6ZXJvODtcblxuZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7XG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgYXNzZXJ0KGxlbiAlIDQgPT09IDApO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IHN0YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJylcbiAgICAgIHcgPSAobXNnW2tdIDw8IDI0KSB8IChtc2dbayArIDFdIDw8IDE2KSB8IChtc2dbayArIDJdIDw8IDgpIHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gKG1zZ1trICsgM10gPDwgMjQpIHwgKG1zZ1trICsgMl0gPDwgMTYpIHwgKG1zZ1trICsgMV0gPDwgOCkgfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnNwbGl0MzIgPSBzcGxpdDMyO1xuXG5mdW5jdGlvbiByb3RyMzIodywgYikge1xuICByZXR1cm4gKHcgPj4+IGIpIHwgKHcgPDwgKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RyMzIgPSByb3RyMzI7XG5cbmZ1bmN0aW9uIHJvdGwzMih3LCBiKSB7XG4gIHJldHVybiAodyA8PCBiKSB8ICh3ID4+PiAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzIgPSBzdW0zMjtcblxuZnVuY3Rpb24gc3VtMzJfMyhhLCBiLCBjKSB7XG4gIHJldHVybiAoYSArIGIgKyBjKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfMyA9IHN1bTMyXzM7XG5cbmZ1bmN0aW9uIHN1bTMyXzQoYSwgYiwgYywgZCkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl81ID0gc3VtMzJfNTtcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfaGkgPSBzdW02NF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfbG8oYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9sbyA9IHN1bTY0X2xvO1xuXG5mdW5jdGlvbiBzdW02NF80X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2xvID0gc3VtNjRfNF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNV9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBlbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZWwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzVfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGwgKyBlbDtcblxuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfaGkgPSByb3RyNjRfaGk7XG5cbmZ1bmN0aW9uIHJvdHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9sbyA9IHJvdHI2NF9sbztcblxuZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgcmV0dXJuIGFoID4+PiBudW07XG59XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMuc2hyNjRfbG8gPSBzaHI2NF9sbztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjRFJCRyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjRFJCRykpXG4gICAgcmV0dXJuIG5ldyBIbWFjRFJCRyhvcHRpb25zKTtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuICB0aGlzLnByZWRSZXNpc3QgPSAhIW9wdGlvbnMucHJlZFJlc2lzdDtcblxuICB0aGlzLm91dExlbiA9IHRoaXMuaGFzaC5vdXRTaXplO1xuICB0aGlzLm1pbkVudHJvcHkgPSBvcHRpb25zLm1pbkVudHJvcHkgfHwgdGhpcy5oYXNoLmhtYWNTdHJlbmd0aDtcblxuICB0aGlzLl9yZXNlZWQgPSBudWxsO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gbnVsbDtcbiAgdGhpcy5LID0gbnVsbDtcbiAgdGhpcy5WID0gbnVsbDtcblxuICB2YXIgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5lbnRyb3B5LCBvcHRpb25zLmVudHJvcHlFbmMgfHwgJ2hleCcpO1xuICB2YXIgbm9uY2UgPSB1dGlscy50b0FycmF5KG9wdGlvbnMubm9uY2UsIG9wdGlvbnMubm9uY2VFbmMgfHwgJ2hleCcpO1xuICB2YXIgcGVycyA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5wZXJzLCBvcHRpb25zLnBlcnNFbmMgfHwgJ2hleCcpO1xuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuICB0aGlzLl9pbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY0RSQkc7XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpIHtcbiAgdmFyIHNlZWQgPSBlbnRyb3B5LmNvbmNhdChub25jZSkuY29uY2F0KHBlcnMpO1xuXG4gIHRoaXMuSyA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICB0aGlzLlYgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLlYubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLktbaV0gPSAweDAwO1xuICAgIHRoaXMuVltpXSA9IDB4MDE7XG4gIH1cblxuICB0aGlzLl91cGRhdGUoc2VlZCk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSAweDEwMDAwMDAwMDAwMDA7ICAvLyAyXjQ4XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2htYWMgPSBmdW5jdGlvbiBobWFjKCkge1xuICByZXR1cm4gbmV3IGhhc2guaG1hYyh0aGlzLmhhc2gsIHRoaXMuSyk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVkKSB7XG4gIHZhciBrbWFjID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMCBdKTtcbiAgaWYgKHNlZWQpXG4gICAga21hYyA9IGttYWMudXBkYXRlKHNlZWQpO1xuICB0aGlzLksgPSBrbWFjLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gIGlmICghc2VlZClcbiAgICByZXR1cm47XG5cbiAgdGhpcy5LID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAxIF0pXG4gICAgICAgICAgICAgICAudXBkYXRlKHNlZWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5yZXNlZWQgPSBmdW5jdGlvbiByZXNlZWQoZW50cm9weSwgZW50cm9weUVuYywgYWRkLCBhZGRFbmMpIHtcbiAgLy8gT3B0aW9uYWwgZW50cm9weSBlbmNcbiAgaWYgKHR5cGVvZiBlbnRyb3B5RW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbnRyb3B5RW5jO1xuICAgIGVudHJvcHlFbmMgPSBudWxsO1xuICB9XG5cbiAgZW50cm9weSA9IHV0aWxzLnRvQXJyYXkoZW50cm9weSwgZW50cm9weUVuYyk7XG4gIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMpO1xuXG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG5cbiAgdGhpcy5fdXBkYXRlKGVudHJvcHkuY29uY2F0KGFkZCB8fCBbXSkpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUobGVuLCBlbmMsIGFkZCwgYWRkRW5jKSB7XG4gIGlmICh0aGlzLl9yZXNlZWQgPiB0aGlzLnJlc2VlZEludGVydmFsKVxuICAgIHRocm93IG5ldyBFcnJvcignUmVzZWVkIGlzIHJlcXVpcmVkJyk7XG5cbiAgLy8gT3B0aW9uYWwgZW5jb2RpbmdcbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG5cbiAgLy8gT3B0aW9uYWwgYWRkaXRpb25hbCBkYXRhXG4gIGlmIChhZGQpIHtcbiAgICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jIHx8ICdoZXgnKTtcbiAgICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgfVxuXG4gIHZhciB0ZW1wID0gW107XG4gIHdoaWxlICh0ZW1wLmxlbmd0aCA8IGxlbikge1xuICAgIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgICB0ZW1wID0gdGVtcC5jb25jYXQodGhpcy5WKTtcbiAgfVxuXG4gIHZhciByZXMgPSB0ZW1wLnNsaWNlKDAsIGxlbik7XG4gIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB0aGlzLl9yZXNlZWQrKztcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2p3dCcpO1xuIiwiLypcbiAqIGp3dC1zaW1wbGVcbiAqXG4gKiBKU09OIFdlYiBUb2tlbiBlbmNvZGUgYW5kIGRlY29kZSBtb2R1bGUgZm9yIG5vZGUuanNcbiAqXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBLYXp1aGl0byBIb2thbXVyYVxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBtb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuXG4vKipcbiAqIHN1cHBvcnQgYWxnb3JpdGhtIG1hcHBpbmdcbiAqL1xudmFyIGFsZ29yaXRobU1hcCA9IHtcbiAgSFMyNTY6ICdzaGEyNTYnLFxuICBIUzM4NDogJ3NoYTM4NCcsXG4gIEhTNTEyOiAnc2hhNTEyJyxcbiAgUlMyNTY6ICdSU0EtU0hBMjU2J1xufTtcblxuLyoqXG4gKiBNYXAgYWxnb3JpdGhtIHRvIGhtYWMgb3Igc2lnbiB0eXBlLCB0byBkZXRlcm1pbmUgd2hpY2ggY3J5cHRvIGZ1bmN0aW9uIHRvIHVzZVxuICovXG52YXIgdHlwZU1hcCA9IHtcbiAgSFMyNTY6ICdobWFjJyxcbiAgSFMzODQ6ICdobWFjJyxcbiAgSFM1MTI6ICdobWFjJyxcbiAgUlMyNTY6ICdzaWduJ1xufTtcblxuXG4vKipcbiAqIGV4cG9zZSBvYmplY3RcbiAqL1xudmFyIGp3dCA9IG1vZHVsZS5leHBvcnRzO1xuXG5cbi8qKlxuICogdmVyc2lvblxuICovXG5qd3QudmVyc2lvbiA9ICcwLjUuMSc7XG5cbi8qKlxuICogRGVjb2RlIGp3dFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlblxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHBhcmFtIHtCb29sZWFufSBub1ZlcmlmeVxuICogQHBhcmFtIHtTdHJpbmd9IGFsZ29yaXRobVxuICogQHJldHVybiB7T2JqZWN0fSBwYXlsb2FkXG4gKiBAYXBpIHB1YmxpY1xuICovXG5qd3QuZGVjb2RlID0gZnVuY3Rpb24gand0X2RlY29kZSh0b2tlbiwga2V5LCBub1ZlcmlmeSwgYWxnb3JpdGhtKSB7XG4gIC8vIGNoZWNrIHRva2VuXG4gIGlmICghdG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRva2VuIHN1cHBsaWVkJyk7XG4gIH1cbiAgLy8gY2hlY2sgc2VnbWVudHNcbiAgdmFyIHNlZ21lbnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCAhPT0gMykge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IGVub3VnaCBvciB0b28gbWFueSBzZWdtZW50cycpO1xuICB9XG5cbiAgLy8gQWxsIHNlZ21lbnQgc2hvdWxkIGJlIGJhc2U2NFxuICB2YXIgaGVhZGVyU2VnID0gc2VnbWVudHNbMF07XG4gIHZhciBwYXlsb2FkU2VnID0gc2VnbWVudHNbMV07XG4gIHZhciBzaWduYXR1cmVTZWcgPSBzZWdtZW50c1syXTtcblxuICAvLyBiYXNlNjQgZGVjb2RlIGFuZCBwYXJzZSBKU09OXG4gIHZhciBoZWFkZXIgPSBKU09OLnBhcnNlKGJhc2U2NHVybERlY29kZShoZWFkZXJTZWcpKTtcbiAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGJhc2U2NHVybERlY29kZShwYXlsb2FkU2VnKSk7XG5cbiAgaWYgKCFub1ZlcmlmeSkge1xuICAgIHZhciBzaWduaW5nTWV0aG9kID0gYWxnb3JpdGhtTWFwW2FsZ29yaXRobSB8fCBoZWFkZXIuYWxnXTtcbiAgICB2YXIgc2lnbmluZ1R5cGUgPSB0eXBlTWFwW2FsZ29yaXRobSB8fCBoZWFkZXIuYWxnXTtcbiAgICBpZiAoIXNpZ25pbmdNZXRob2QgfHwgIXNpZ25pbmdUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FsZ29yaXRobSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuXG4gICAgLy8gdmVyaWZ5IHNpZ25hdHVyZS4gYHNpZ25gIHdpbGwgcmV0dXJuIGJhc2U2NCBzdHJpbmcuXG4gICAgdmFyIHNpZ25pbmdJbnB1dCA9IFtoZWFkZXJTZWcsIHBheWxvYWRTZWddLmpvaW4oJy4nKTtcbiAgICBpZiAoIXZlcmlmeShzaWduaW5nSW5wdXQsIGtleSwgc2lnbmluZ01ldGhvZCwgc2lnbmluZ1R5cGUsIHNpZ25hdHVyZVNlZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQnKTtcbiAgICB9XG5cbiAgICAvLyBTdXBwb3J0IGZvciBuYmYgYW5kIGV4cCBjbGFpbXMuXG4gICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBSRkMsIHRoZXkgc2hvdWxkIGJlIGluIHNlY29uZHMuXG4gICAgaWYgKHBheWxvYWQubmJmICYmIERhdGUubm93KCkgPCBwYXlsb2FkLm5iZioxMDAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VuIG5vdCB5ZXQgYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKHBheWxvYWQuZXhwICYmIERhdGUubm93KCkgPiBwYXlsb2FkLmV4cCoxMDAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VuIGV4cGlyZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF5bG9hZDtcbn07XG5cblxuLyoqXG4gKiBFbmNvZGUgand0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBhbGdvcml0aG1cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRva2VuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5qd3QuZW5jb2RlID0gZnVuY3Rpb24gand0X2VuY29kZShwYXlsb2FkLCBrZXksIGFsZ29yaXRobSwgb3B0aW9ucykge1xuICAvLyBDaGVjayBrZXlcbiAgaWYgKCFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmUga2V5Jyk7XG4gIH1cblxuICAvLyBDaGVjayBhbGdvcml0aG0sIGRlZmF1bHQgaXMgSFMyNTZcbiAgaWYgKCFhbGdvcml0aG0pIHtcbiAgICBhbGdvcml0aG0gPSAnSFMyNTYnO1xuICB9XG5cbiAgdmFyIHNpZ25pbmdNZXRob2QgPSBhbGdvcml0aG1NYXBbYWxnb3JpdGhtXTtcbiAgdmFyIHNpZ25pbmdUeXBlID0gdHlwZU1hcFthbGdvcml0aG1dO1xuICBpZiAoIXNpZ25pbmdNZXRob2QgfHwgIXNpZ25pbmdUeXBlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbGdvcml0aG0gbm90IHN1cHBvcnRlZCcpO1xuICB9XG5cbiAgLy8gaGVhZGVyLCB0eXAgaXMgZml4ZWQgdmFsdWUuXG4gIHZhciBoZWFkZXIgPSB7IHR5cDogJ0pXVCcsIGFsZzogYWxnb3JpdGhtIH07XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaGVhZGVyKSB7XG4gICAgYXNzaWduUHJvcGVydGllcyhoZWFkZXIsIG9wdGlvbnMuaGVhZGVyKTtcbiAgfVxuXG4gIC8vIGNyZWF0ZSBzZWdtZW50cywgYWxsIHNlZ21lbnRzIHNob3VsZCBiZSBiYXNlNjQgc3RyaW5nXG4gIHZhciBzZWdtZW50cyA9IFtdO1xuICBzZWdtZW50cy5wdXNoKGJhc2U2NHVybEVuY29kZShKU09OLnN0cmluZ2lmeShoZWFkZXIpKSk7XG4gIHNlZ21lbnRzLnB1c2goYmFzZTY0dXJsRW5jb2RlKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSk7XG4gIHNlZ21lbnRzLnB1c2goc2lnbihzZWdtZW50cy5qb2luKCcuJyksIGtleSwgc2lnbmluZ01ldGhvZCwgc2lnbmluZ1R5cGUpKTtcblxuICByZXR1cm4gc2VnbWVudHMuam9pbignLicpO1xufTtcblxuLyoqXG4gKiBwcml2YXRlIHV0aWwgZnVuY3Rpb25zXG4gKi9cblxuZnVuY3Rpb24gYXNzaWduUHJvcGVydGllcyhkZXN0LCBzb3VyY2UpIHtcbiAgZm9yICh2YXIgYXR0ciBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICBkZXN0W2F0dHJdID0gc291cmNlW2F0dHJdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2ZXJpZnkoaW5wdXQsIGtleSwgbWV0aG9kLCB0eXBlLCBzaWduYXR1cmUpIHtcbiAgaWYodHlwZSA9PT0gXCJobWFjXCIpIHtcbiAgICByZXR1cm4gKHNpZ25hdHVyZSA9PT0gc2lnbihpbnB1dCwga2V5LCBtZXRob2QsIHR5cGUpKTtcbiAgfVxuICBlbHNlIGlmKHR5cGUgPT0gXCJzaWduXCIpIHtcbiAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZVZlcmlmeShtZXRob2QpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoaW5wdXQpXG4gICAgICAgICAgICAgICAgIC52ZXJpZnkoa2V5LCBiYXNlNjR1cmxVbmVzY2FwZShzaWduYXR1cmUpLCAnYmFzZTY0Jyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbGdvcml0aG0gdHlwZSBub3QgcmVjb2duaXplZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNpZ24oaW5wdXQsIGtleSwgbWV0aG9kLCB0eXBlKSB7XG4gIHZhciBiYXNlNjRzdHI7XG4gIGlmKHR5cGUgPT09IFwiaG1hY1wiKSB7XG4gICAgYmFzZTY0c3RyID0gY3J5cHRvLmNyZWF0ZUhtYWMobWV0aG9kLCBrZXkpLnVwZGF0ZShpbnB1dCkuZGlnZXN0KCdiYXNlNjQnKTtcbiAgfVxuICBlbHNlIGlmKHR5cGUgPT0gXCJzaWduXCIpIHtcbiAgICBiYXNlNjRzdHIgPSBjcnlwdG8uY3JlYXRlU2lnbihtZXRob2QpLnVwZGF0ZShpbnB1dCkuc2lnbihrZXksICdiYXNlNjQnKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FsZ29yaXRobSB0eXBlIG5vdCByZWNvZ25pemVkJyk7XG4gIH1cblxuICByZXR1cm4gYmFzZTY0dXJsRXNjYXBlKGJhc2U2NHN0cik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NHVybERlY29kZShzdHIpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoYmFzZTY0dXJsVW5lc2NhcGUoc3RyKSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NHVybFVuZXNjYXBlKHN0cikge1xuICBzdHIgKz0gbmV3IEFycmF5KDUgLSBzdHIubGVuZ3RoICUgNCkuam9pbignPScpO1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0dXJsRW5jb2RlKHN0cikge1xuICByZXR1cm4gYmFzZTY0dXJsRXNjYXBlKG5ldyBCdWZmZXIoc3RyKS50b1N0cmluZygnYmFzZTY0JykpO1xufVxuXG5mdW5jdGlvbiBiYXNlNjR1cmxFc2NhcGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJykucmVwbGFjZSgvPS9nLCAnJyk7XG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG5mdW5jdGlvbiBNRDUgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG59XG5cbmluaGVyaXRzKE1ENSwgSGFzaEJhc2UpXG5cbk1ENS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIE0gPSBBUlJBWTE2XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgTVtpXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGkgKiA0KVxuXG4gIHZhciBhID0gdGhpcy5fYVxuICB2YXIgYiA9IHRoaXMuX2JcbiAgdmFyIGMgPSB0aGlzLl9jXG4gIHZhciBkID0gdGhpcy5fZFxuXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVswXSwgMHhkNzZhYTQ3OCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzFdLCAweGU4YzdiNzU2LCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzJdLCAweDI0MjA3MGRiLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzNdLCAweGMxYmRjZWVlLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzRdLCAweGY1N2MwZmFmLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bNV0sIDB4NDc4N2M2MmEsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTgzMDQ2MTMsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bN10sIDB4ZmQ0Njk1MDEsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bOF0sIDB4Njk4MDk4ZDgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs5XSwgMHg4YjQ0ZjdhZiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZmZjViYjEsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bMTFdLCAweDg5NWNkN2JlLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzEyXSwgMHg2YjkwMTEyMiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzEzXSwgMHhmZDk4NzE5MywgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsxNF0sIDB4YTY3OTQzOGUsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bMTVdLCAweDQ5YjQwODIxLCAyMilcblxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMV0sIDB4ZjYxZTI1NjIsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVs2XSwgMHhjMDQwYjM0MCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzExXSwgMHgyNjVlNWE1MSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVswXSwgMHhlOWI2YzdhYSwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVs1XSwgMHhkNjJmMTA1ZCwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzEwXSwgMHgwMjQ0MTQ1MywgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzE1XSwgMHhkOGExZTY4MSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs0XSwgMHhlN2QzZmJjOCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVs5XSwgMHgyMWUxY2RlNiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzE0XSwgMHhjMzM3MDdkNiwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzNdLCAweGY0ZDUwZDg3LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzhdLCAweDQ1NWExNGVkLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzEzXSwgMHhhOWUzZTkwNSwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzJdLCAweGZjZWZhM2Y4LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bN10sIDB4Njc2ZjAyZDksIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMTJdLCAweDhkMmE0YzhhLCAyMClcblxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZmZmYTM5NDIsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs4XSwgMHg4NzcxZjY4MSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxMV0sIDB4NmQ5ZDYxMjIsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTRdLCAweGZkZTUzODBjLCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzFdLCAweGE0YmVlYTQ0LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bNF0sIDB4NGJkZWNmYTksIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bN10sIDB4ZjZiYjRiNjAsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTBdLCAweGJlYmZiYzcwLCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzEzXSwgMHgyODliN2VjNiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzBdLCAweGVhYTEyN2ZhLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzNdLCAweGQ0ZWYzMDg1LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzZdLCAweDA0ODgxZDA1LCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzldLCAweGQ5ZDRkMDM5LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMTJdLCAweGU2ZGI5OWU1LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzE1XSwgMHgxZmEyN2NmOCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsyXSwgMHhjNGFjNTY2NSwgMjMpXG5cbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzBdLCAweGY0MjkyMjQ0LCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bN10sIDB4NDMyYWZmOTcsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTRdLCAweGFiOTQyM2E3LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzVdLCAweGZjOTNhMDM5LCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzEyXSwgMHg2NTViNTljMywgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzNdLCAweDhmMGNjYzkyLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmVmZjQ3ZCwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVsxXSwgMHg4NTg0NWRkMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs4XSwgMHg2ZmE4N2U0ZiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzE1XSwgMHhmZTJjZTZlMCwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVs2XSwgMHhhMzAxNDMxNCwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVsxM10sIDB4NGUwODExYTEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bNF0sIDB4Zjc1MzdlODIsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxMV0sIDB4YmQzYWYyMzUsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMl0sIDB4MmFkN2QyYmIsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bOV0sIDB4ZWI4NmQzOTEsIDIxKVxuXG4gIHRoaXMuX2EgPSAodGhpcy5fYSArIGEpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2IgKyBiKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9jICsgYykgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZCArIGQpIHwgMFxufVxuXG5NRDUucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNyZWF0ZSBwYWRkaW5nIGFuZCBoYW5kbGUgYmxvY2tzXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gMHg4MFxuICBpZiAodGhpcy5fYmxvY2tPZmZzZXQgPiA1Nikge1xuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDY0KVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cblxuICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMF0sIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFsxXSwgNjApXG4gIHRoaXMuX3VwZGF0ZSgpXG5cbiAgLy8gcHJvZHVjZSByZXN1bHRcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgYnJvcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcblxuZnVuY3Rpb24gTWlsbGVyUmFiaW4ocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kIHx8IG5ldyBicm9yYW5kLlJhbmQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWlsbGVyUmFiaW47XG5cbk1pbGxlclJhYmluLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShyYW5kKSB7XG4gIHJldHVybiBuZXcgTWlsbGVyUmFiaW4ocmFuZCk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRiZWxvdyA9IGZ1bmN0aW9uIF9yYW5kYmVsb3cobikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIG1pbl9ieXRlcyA9IE1hdGguY2VpbChsZW4gLyA4KTtcblxuICAvLyBHZW5lcmFnZSByYW5kb20gYnl0ZXMgdW50aWwgYSBudW1iZXIgbGVzcyB0aGFuIG4gaXMgZm91bmQuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IDAuLm4tMSBoYXZlIGFuIGVxdWFsIHByb2JhYmlsaXR5IG9mIGJlaW5nIHNlbGVjdGVkLlxuICBkb1xuICAgIHZhciBhID0gbmV3IGJuKHRoaXMucmFuZC5nZW5lcmF0ZShtaW5fYnl0ZXMpKTtcbiAgd2hpbGUgKGEuY21wKG4pID49IDApO1xuXG4gIHJldHVybiBhO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kcmFuZ2UgPSBmdW5jdGlvbiBfcmFuZHJhbmdlKHN0YXJ0LCBzdG9wKSB7XG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gc3RhcnQgYW5kIGxlc3MgdGhhbiBzdG9wLlxuICB2YXIgc2l6ZSA9IHN0b3Auc3ViKHN0YXJ0KTtcbiAgcmV0dXJuIHN0YXJ0LmFkZCh0aGlzLl9yYW5kYmVsb3coc2l6ZSkpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0KG4sIGssIGNiKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIHZhciBwcmltZSA9IHRydWU7XG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7XG4gICAgaWYgKGNiKVxuICAgICAgY2IoYSk7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcHJpbWU7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuZ2V0RGl2aXNvciA9IGZ1bmN0aW9uIGdldERpdmlzb3Iobiwgaykge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuXG4gICAgdmFyIGcgPSBuLmdjZChhKTtcbiAgICBpZiAoZy5jbXBuKDEpICE9PSAwKVxuICAgICAgcmV0dXJuIGc7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnICE9PSAnc3RyaW5nJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgdmFyIGxvID0gYyAmIDB4ZmY7XG4gICAgICBpZiAoaGkpXG4gICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxudXRpbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGFyciwgZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0b0hleChhcnIpO1xuICBlbHNlXG4gICAgcmV0dXJuIGFycjtcbn07XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWZcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FmLmpzXCIsXG5cdFwiLi9hZi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYWYuanNcIixcblx0XCIuL2FyXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qc1wiLFxuXHRcIi4vYXItZHpcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWR6LmpzXCIsXG5cdFwiLi9hci1kei5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItZHouanNcIixcblx0XCIuL2FyLWt3XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qc1wiLFxuXHRcIi4vYXIta3cuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWt3LmpzXCIsXG5cdFwiLi9hci1seVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanNcIixcblx0XCIuL2FyLWx5LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1seS5qc1wiLFxuXHRcIi4vYXItbWFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLW1hLmpzXCIsXG5cdFwiLi9hci1tYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbWEuanNcIixcblx0XCIuL2FyLXNhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qc1wiLFxuXHRcIi4vYXItc2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXNhLmpzXCIsXG5cdFwiLi9hci10blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanNcIixcblx0XCIuL2FyLXRuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci10bi5qc1wiLFxuXHRcIi4vYXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLmpzXCIsXG5cdFwiLi9helwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanNcIixcblx0XCIuL2F6LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hei5qc1wiLFxuXHRcIi4vYmVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JlLmpzXCIsXG5cdFwiLi9iZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmUuanNcIixcblx0XCIuL2JnXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qc1wiLFxuXHRcIi4vYmcuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JnLmpzXCIsXG5cdFwiLi9ibVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanNcIixcblx0XCIuL2JtLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibS5qc1wiLFxuXHRcIi4vYm5cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JuLmpzXCIsXG5cdFwiLi9ibi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4uanNcIixcblx0XCIuL2JvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qc1wiLFxuXHRcIi4vYm8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JvLmpzXCIsXG5cdFwiLi9iclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnIuanNcIixcblx0XCIuL2JyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qc1wiLFxuXHRcIi4vYnNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JzLmpzXCIsXG5cdFwiLi9icy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnMuanNcIixcblx0XCIuL2NhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qc1wiLFxuXHRcIi4vY2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NhLmpzXCIsXG5cdFwiLi9jc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3MuanNcIixcblx0XCIuL2NzLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qc1wiLFxuXHRcIi4vY3ZcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N2LmpzXCIsXG5cdFwiLi9jdi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3YuanNcIixcblx0XCIuL2N5XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qc1wiLFxuXHRcIi4vY3kuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N5LmpzXCIsXG5cdFwiLi9kYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGEuanNcIixcblx0XCIuL2RhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kYS5qc1wiLFxuXHRcIi4vZGVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLmpzXCIsXG5cdFwiLi9kZS1hdFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanNcIixcblx0XCIuL2RlLWF0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1hdC5qc1wiLFxuXHRcIi4vZGUtY2hcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWNoLmpzXCIsXG5cdFwiLi9kZS1jaC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtY2guanNcIixcblx0XCIuL2RlLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qc1wiLFxuXHRcIi4vZHZcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2R2LmpzXCIsXG5cdFwiLi9kdi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZHYuanNcIixcblx0XCIuL2VsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qc1wiLFxuXHRcIi4vZWwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VsLmpzXCIsXG5cdFwiLi9lbi1hdVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tYXUuanNcIixcblx0XCIuL2VuLWF1LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qc1wiLFxuXHRcIi4vZW4tY2FcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWNhLmpzXCIsXG5cdFwiLi9lbi1jYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tY2EuanNcIixcblx0XCIuL2VuLWdiXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qc1wiLFxuXHRcIi4vZW4tZ2IuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWdiLmpzXCIsXG5cdFwiLi9lbi1pZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWUuanNcIixcblx0XCIuL2VuLWllLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pZS5qc1wiLFxuXHRcIi4vZW4taWxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWlsLmpzXCIsXG5cdFwiLi9lbi1pbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWwuanNcIixcblx0XCIuL2VuLW56XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1uei5qc1wiLFxuXHRcIi4vZW4tbnouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLW56LmpzXCIsXG5cdFwiLi9lb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanNcIixcblx0XCIuL2VvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qc1wiLFxuXHRcIi4vZXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLmpzXCIsXG5cdFwiLi9lcy1kb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanNcIixcblx0XCIuL2VzLWRvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qc1wiLFxuXHRcIi4vZXMtdXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLXVzLmpzXCIsXG5cdFwiLi9lcy11cy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanNcIixcblx0XCIuL2VzLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qc1wiLFxuXHRcIi4vZXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V0LmpzXCIsXG5cdFwiLi9ldC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanNcIixcblx0XCIuL2V1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qc1wiLFxuXHRcIi4vZXUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V1LmpzXCIsXG5cdFwiLi9mYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanNcIixcblx0XCIuL2ZhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qc1wiLFxuXHRcIi4vZmlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZpLmpzXCIsXG5cdFwiLi9maS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanNcIixcblx0XCIuL2ZvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mby5qc1wiLFxuXHRcIi4vZm8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZvLmpzXCIsXG5cdFwiLi9mclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanNcIixcblx0XCIuL2ZyLWNhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jYS5qc1wiLFxuXHRcIi4vZnItY2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNhLmpzXCIsXG5cdFwiLi9mci1jaFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanNcIixcblx0XCIuL2ZyLWNoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jaC5qc1wiLFxuXHRcIi4vZnIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLmpzXCIsXG5cdFwiLi9meVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanNcIixcblx0XCIuL2Z5LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qc1wiLFxuXHRcIi4vZ2RcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dkLmpzXCIsXG5cdFwiLi9nZC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanNcIixcblx0XCIuL2dsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nbC5qc1wiLFxuXHRcIi4vZ2wuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dsLmpzXCIsXG5cdFwiLi9nb20tbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanNcIixcblx0XCIuL2dvbS1sYXRuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tbGF0bi5qc1wiLFxuXHRcIi4vZ3VcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2d1LmpzXCIsXG5cdFwiLi9ndS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanNcIixcblx0XCIuL2hlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oZS5qc1wiLFxuXHRcIi4vaGUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hlLmpzXCIsXG5cdFwiLi9oaVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanNcIixcblx0XCIuL2hpLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oaS5qc1wiLFxuXHRcIi4vaHJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hyLmpzXCIsXG5cdFwiLi9oci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanNcIixcblx0XCIuL2h1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9odS5qc1wiLFxuXHRcIi4vaHUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h1LmpzXCIsXG5cdFwiLi9oeS1hbVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanNcIixcblx0XCIuL2h5LWFtLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oeS1hbS5qc1wiLFxuXHRcIi4vaWRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lkLmpzXCIsXG5cdFwiLi9pZC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanNcIixcblx0XCIuL2lzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pcy5qc1wiLFxuXHRcIi4vaXMuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzXCIsXG5cdFwiLi9pdFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanNcIixcblx0XCIuL2l0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC5qc1wiLFxuXHRcIi4vamFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2phLmpzXCIsXG5cdFwiLi9qYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanNcIixcblx0XCIuL2p2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qdi5qc1wiLFxuXHRcIi4vanYuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2p2LmpzXCIsXG5cdFwiLi9rYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanNcIixcblx0XCIuL2thLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rYS5qc1wiLFxuXHRcIi4va2tcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2trLmpzXCIsXG5cdFwiLi9ray5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanNcIixcblx0XCIuL2ttXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbS5qc1wiLFxuXHRcIi4va20uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ttLmpzXCIsXG5cdFwiLi9rblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanNcIixcblx0XCIuL2tuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbi5qc1wiLFxuXHRcIi4va29cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tvLmpzXCIsXG5cdFwiLi9rby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanNcIixcblx0XCIuL2t5XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9reS5qc1wiLFxuXHRcIi4va3kuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzXCIsXG5cdFwiLi9sYlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbGIuanNcIixcblx0XCIuL2xiLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qc1wiLFxuXHRcIi4vbG9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xvLmpzXCIsXG5cdFwiLi9sby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbG8uanNcIixcblx0XCIuL2x0XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdC5qc1wiLFxuXHRcIi4vbHQuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzXCIsXG5cdFwiLi9sdlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHYuanNcIixcblx0XCIuL2x2LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qc1wiLFxuXHRcIi4vbWVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21lLmpzXCIsXG5cdFwiLi9tZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanNcIixcblx0XCIuL21pXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qc1wiLFxuXHRcIi4vbWkuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzXCIsXG5cdFwiLi9ta1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWsuanNcIixcblx0XCIuL21rLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qc1wiLFxuXHRcIi4vbWxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21sLmpzXCIsXG5cdFwiLi9tbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanNcIixcblx0XCIuL21uXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbi5qc1wiLFxuXHRcIi4vbW4uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21uLmpzXCIsXG5cdFwiLi9tclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXIuanNcIixcblx0XCIuL21yLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qc1wiLFxuXHRcIi4vbXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzXCIsXG5cdFwiLi9tcy1teVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMtbXkuanNcIixcblx0XCIuL21zLW15LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qc1wiLFxuXHRcIi4vbXMuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzXCIsXG5cdFwiLi9tdFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXQuanNcIixcblx0XCIuL210LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tdC5qc1wiLFxuXHRcIi4vbXlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL215LmpzXCIsXG5cdFwiLi9teS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanNcIixcblx0XCIuL25iXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uYi5qc1wiLFxuXHRcIi4vbmIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzXCIsXG5cdFwiLi9uZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmUuanNcIixcblx0XCIuL25lLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qc1wiLFxuXHRcIi4vbmxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzXCIsXG5cdFwiLi9ubC1iZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwtYmUuanNcIixcblx0XCIuL25sLWJlLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qc1wiLFxuXHRcIi4vbmwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzXCIsXG5cdFwiLi9ublwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbm4uanNcIixcblx0XCIuL25uLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qc1wiLFxuXHRcIi4vcGEtaW5cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BhLWluLmpzXCIsXG5cdFwiLi9wYS1pbi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanNcIixcblx0XCIuL3BsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qc1wiLFxuXHRcIi4vcGwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BsLmpzXCIsXG5cdFwiLi9wdFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanNcIixcblx0XCIuL3B0LWJyXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC1ici5qc1wiLFxuXHRcIi4vcHQtYnIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LWJyLmpzXCIsXG5cdFwiLi9wdC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanNcIixcblx0XCIuL3JvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9yby5qc1wiLFxuXHRcIi4vcm8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3JvLmpzXCIsXG5cdFwiLi9ydVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanNcIixcblx0XCIuL3J1LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qc1wiLFxuXHRcIi4vc2RcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NkLmpzXCIsXG5cdFwiLi9zZC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanNcIixcblx0XCIuL3NlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZS5qc1wiLFxuXHRcIi4vc2UuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NlLmpzXCIsXG5cdFwiLi9zaVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2kuanNcIixcblx0XCIuL3NpLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qc1wiLFxuXHRcIi4vc2tcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NrLmpzXCIsXG5cdFwiLi9zay5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanNcIixcblx0XCIuL3NsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zbC5qc1wiLFxuXHRcIi4vc2wuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NsLmpzXCIsXG5cdFwiLi9zcVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3EuanNcIixcblx0XCIuL3NxLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qc1wiLFxuXHRcIi4vc3JcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLmpzXCIsXG5cdFwiLi9zci1jeXJsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci1jeXJsLmpzXCIsXG5cdFwiLi9zci1jeXJsLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci1jeXJsLmpzXCIsXG5cdFwiLi9zci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanNcIixcblx0XCIuL3NzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcy5qc1wiLFxuXHRcIi4vc3MuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzXCIsXG5cdFwiLi9zdlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3YuanNcIixcblx0XCIuL3N2LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qc1wiLFxuXHRcIi4vc3dcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N3LmpzXCIsXG5cdFwiLi9zdy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3cuanNcIixcblx0XCIuL3RhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90YS5qc1wiLFxuXHRcIi4vdGEuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzXCIsXG5cdFwiLi90ZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGUuanNcIixcblx0XCIuL3RlLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qc1wiLFxuXHRcIi4vdGV0XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZXQuanNcIixcblx0XCIuL3RldC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGV0LmpzXCIsXG5cdFwiLi90Z1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGcuanNcIixcblx0XCIuL3RnLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90Zy5qc1wiLFxuXHRcIi4vdGhcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RoLmpzXCIsXG5cdFwiLi90aC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanNcIixcblx0XCIuL3RsLXBoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qc1wiLFxuXHRcIi4vdGwtcGguanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsLXBoLmpzXCIsXG5cdFwiLi90bGhcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsaC5qc1wiLFxuXHRcIi4vdGxoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanNcIixcblx0XCIuL3RyXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ci5qc1wiLFxuXHRcIi4vdHIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzXCIsXG5cdFwiLi90emxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qc1wiLFxuXHRcIi4vdHpsLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90emwuanNcIixcblx0XCIuL3R6bVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLmpzXCIsXG5cdFwiLi90em0tbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanNcIixcblx0XCIuL3R6bS1sYXRuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0tbGF0bi5qc1wiLFxuXHRcIi4vdHptLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanNcIixcblx0XCIuL3VnLWNuXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91Zy1jbi5qc1wiLFxuXHRcIi4vdWctY24uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VnLWNuLmpzXCIsXG5cdFwiLi91a1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWsuanNcIixcblx0XCIuL3VrLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qc1wiLFxuXHRcIi4vdXJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VyLmpzXCIsXG5cdFwiLi91ci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanNcIixcblx0XCIuL3V6XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qc1wiLFxuXHRcIi4vdXotbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qc1wiLFxuXHRcIi4vdXotbGF0bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qc1wiLFxuXHRcIi4vdXouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LmpzXCIsXG5cdFwiLi92aVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdmkuanNcIixcblx0XCIuL3ZpLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qc1wiLFxuXHRcIi4veC1wc2V1ZG9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzXCIsXG5cdFwiLi94LXBzZXVkby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveC1wc2V1ZG8uanNcIixcblx0XCIuL3lvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS95by5qc1wiLFxuXHRcIi4veW8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzXCIsXG5cdFwiLi96aC1jblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtY24uanNcIixcblx0XCIuL3poLWNuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qc1wiLFxuXHRcIi4vemgtaGtcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzXCIsXG5cdFwiLi96aC1oay5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtaGsuanNcIixcblx0XCIuL3poLXR3XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC10dy5qc1wiLFxuXHRcIi4vemgtdHcuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIHsgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIGlkO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIHJlY3Vyc2l2ZSBeXFxcXC5cXFxcLy4qJFwiOyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFmID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYWYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01ydF9BcHJfTWVpX0p1bl9KdWxfQXVnX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29uZGFnX01hYW5kYWdfRGluc2RhZ19Xb2Vuc2RhZ19Eb25kZXJkYWdfVnJ5ZGFnX1NhdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1Nvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTWFfRGlfV29fRG9fVnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC92bXxubS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL15ubSQvaS50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAndm0nIDogJ1ZNJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnbm0nIDogJ05NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1ZhbmRhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbTcO0cmUgb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tHaXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYWFzXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29vciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZScsXG4gICAgICAgICAgICBzIDogJ1xcJ24gcGFhciBzZWtvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRlcycsXG4gICAgICAgICAgICBtIDogJ1xcJ24gbWludXV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZScsXG4gICAgICAgICAgICBoIDogJ1xcJ24gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHVyZScsXG4gICAgICAgICAgICBkIDogJ1xcJ24gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZScsXG4gICAgICAgICAgICBNIDogJ1xcJ24gbWFhbmQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWFhbmRlJyxcbiAgICAgICAgICAgIHkgOiAnXFwnbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7IC8vIFRoYW5rcyB0byBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pqdXBpdGVyXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNYWFuZGFnIGlzIGRpZSBlZXJzdGUgZGFnIHZhbiBkaWUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIERpZSB3ZWVrIHdhdCBkaWUgNGRlIEphbnVhcmllIGJldmF0IGlzIGRpZSBlZXJzdGUgd2VlayB2YW4gZGllIGphYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhZjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyRHogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1keicsIHtcbiAgICAgICAgbW9udGhzIDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KfYrdivX9in2KvZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9ij2K1f2KXYq1/Yq9mE2Kdf2KPYsV/YrtmFX9is2YVf2LPYqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJEejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyS3cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1rdycsIHtcbiAgICAgICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzIDogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbSA6ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE0gOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2YbZiNin2KonXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhckt3O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICcxJyxcbiAgICAgICAgJzInOiAnMicsXG4gICAgICAgICczJzogJzMnLFxuICAgICAgICAnNCc6ICc0JyxcbiAgICAgICAgJzUnOiAnNScsXG4gICAgICAgICc2JzogJzYnLFxuICAgICAgICAnNyc6ICc3JyxcbiAgICAgICAgJzgnOiAnOCcsXG4gICAgICAgICc5JzogJzknLFxuICAgICAgICAnMCc6ICcwJ1xuICAgIH0sIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiBuID09PSAxID8gMSA6IG4gPT09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1O1xuICAgIH0sIHBsdXJhbHMgPSB7XG4gICAgICAgIHMgOiBbJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLCAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJywgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLCAnJWQg2KvZiNin2YYnLCAnJWQg2KvYp9mG2YrYqScsICclZCDYq9in2YbZitipJ10sXG4gICAgICAgIG0gOiBbJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLCAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJywgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLCAnJWQg2K/Zgtin2KbZgicsICclZCDYr9mC2YrZgtipJywgJyVkINiv2YLZitmC2KknXSxcbiAgICAgICAgaCA6IFsn2KPZgtmEINmF2YYg2LPYp9i52KknLCAn2LPYp9i52Kkg2YjYp9it2K/YqScsIFsn2LPYp9i52KrYp9mGJywgJ9iz2KfYudiq2YrZhiddLCAnJWQg2LPYp9i52KfYqicsICclZCDYs9in2LnYqScsICclZCDYs9in2LnYqSddLFxuICAgICAgICBkIDogWyfYo9mC2YQg2YXZhiDZitmI2YUnLCAn2YrZiNmFINmI2KfYrdivJywgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSwgJyVkINij2YrYp9mFJywgJyVkINmK2YjZhdmL2KcnLCAnJWQg2YrZiNmFJ10sXG4gICAgICAgIE0gOiBbJ9ij2YLZhCDZhdmGINi02YfYsScsICfYtNmH2LEg2YjYp9it2K8nLCBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLCAnJWQg2KPYtNmH2LEnLCAnJWQg2LTZh9ix2KcnLCAnJWQg2LTZh9ixJ10sXG4gICAgICAgIHkgOiBbJ9ij2YLZhCDZhdmGINi52KfZhScsICfYudin2YUg2YjYp9it2K8nLCBbJ9i52KfZhdin2YYnLCAn2LnYp9mF2YrZhiddLCAnJWQg2KPYudmI2KfZhScsICclZCDYudin2YXZi9inJywgJyVkINi52KfZhSddXG4gICAgfSwgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgIGlmIChmID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgICAgIH07XG4gICAgfSwgbW9udGhzID0gW1xuICAgICAgICAn2YrZhtin2YrYsScsXG4gICAgICAgICfZgdio2LHYp9mK2LEnLFxuICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAn2KPYqNix2YrZhCcsXG4gICAgICAgICfZhdin2YrZiCcsXG4gICAgICAgICfZitmI2YbZitmIJyxcbiAgICAgICAgJ9mK2YjZhNmK2YgnLFxuICAgICAgICAn2KPYutiz2LfYsycsXG4gICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAn2KPZg9iq2YjYqNixJyxcbiAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICfYr9mK2LPZhdio2LEnXG4gICAgXTtcblxuICAgIHZhciBhckx5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbHknLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzIDogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbSA6IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaCA6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQgOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkIDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTSA6IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeSA6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyTHk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBhck1hID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbWEnLCB7XG4gICAgICAgIG1vbnRocyA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdiq2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KfYrdivX9in2KrZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgcyA6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzcyA6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG0gOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGggOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGggOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZCA6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNIDogJ9i02YfYsScsXG4gICAgICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5IDogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eSA6ICclZCDYs9mG2YjYp9iqJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhck1hO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfZoScsXG4gICAgICAgICcyJzogJ9miJyxcbiAgICAgICAgJzMnOiAn2aMnLFxuICAgICAgICAnNCc6ICfZpCcsXG4gICAgICAgICc1JzogJ9mlJyxcbiAgICAgICAgJzYnOiAn2aYnLFxuICAgICAgICAnNyc6ICfZpycsXG4gICAgICAgICc4JzogJ9moJyxcbiAgICAgICAgJzknOiAn2aknLFxuICAgICAgICAnMCc6ICfZoCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICfZoCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgYXJTYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXNhJywge1xuICAgICAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mK2Yhf2YrZiNmG2YrZiF/ZitmI2YTZitmIX9ij2LrYs9i32LNf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJTYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyVG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci10bicsIHtcbiAgICAgICAgbW9udGhzOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyVG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ9mhJyxcbiAgICAgICAgJzInOiAn2aInLFxuICAgICAgICAnMyc6ICfZoycsXG4gICAgICAgICc0JzogJ9mkJyxcbiAgICAgICAgJzUnOiAn2aUnLFxuICAgICAgICAnNic6ICfZpicsXG4gICAgICAgICc3JzogJ9mnJyxcbiAgICAgICAgJzgnOiAn2agnLFxuICAgICAgICAnOSc6ICfZqScsXG4gICAgICAgICcwJzogJ9mgJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICfZoyc6ICczJyxcbiAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICfZpic6ICc2JyxcbiAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICfZqSc6ICc5JyxcbiAgICAgICAgJ9mgJzogJzAnXG4gICAgfSwgcGx1cmFsRm9ybSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuID09PSAwID8gMCA6IG4gPT09IDEgPyAxIDogbiA9PT0gMiA/IDIgOiBuICUgMTAwID49IDMgJiYgbiAlIDEwMCA8PSAxMCA/IDMgOiBuICUgMTAwID49IDExID8gNCA6IDU7XG4gICAgfSwgcGx1cmFscyA9IHtcbiAgICAgICAgcyA6IFsn2KPZgtmEINmF2YYg2KvYp9mG2YrYqScsICfYq9in2YbZitipINmI2KfYrdiv2KknLCBbJ9ir2KfZhtmK2KrYp9mGJywgJ9ir2KfZhtmK2KrZitmGJ10sICclZCDYq9mI2KfZhicsICclZCDYq9in2YbZitipJywgJyVkINir2KfZhtmK2KknXSxcbiAgICAgICAgbSA6IFsn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsICfYr9mC2YrZgtipINmI2KfYrdiv2KknLCBbJ9iv2YLZitmC2KrYp9mGJywgJ9iv2YLZitmC2KrZitmGJ10sICclZCDYr9mC2KfYptmCJywgJyVkINiv2YLZitmC2KknLCAnJWQg2K/ZgtmK2YLYqSddLFxuICAgICAgICBoIDogWyfYo9mC2YQg2YXZhiDYs9in2LnYqScsICfYs9in2LnYqSDZiNin2K3Yr9ipJywgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sICclZCDYs9in2LnYp9iqJywgJyVkINiz2KfYudipJywgJyVkINiz2KfYudipJ10sXG4gICAgICAgIGQgOiBbJ9ij2YLZhCDZhdmGINmK2YjZhScsICfZitmI2YUg2YjYp9it2K8nLCBbJ9mK2YjZhdin2YYnLCAn2YrZiNmF2YrZhiddLCAnJWQg2KPZitin2YUnLCAnJWQg2YrZiNmF2YvYpycsICclZCDZitmI2YUnXSxcbiAgICAgICAgTSA6IFsn2KPZgtmEINmF2YYg2LTZh9ixJywgJ9i02YfYsSDZiNin2K3YrycsIFsn2LTZh9ix2KfZhicsICfYtNmH2LHZitmGJ10sICclZCDYo9i02YfYsScsICclZCDYtNmH2LHYpycsICclZCDYtNmH2LEnXSxcbiAgICAgICAgeSA6IFsn2KPZgtmEINmF2YYg2LnYp9mFJywgJ9i52KfZhSDZiNin2K3YrycsIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sICclZCDYo9i52YjYp9mFJywgJyVkINi52KfZhdmL2KcnLCAnJWQg2LnYp9mFJ11cbiAgICB9LCBwbHVyYWxpemUgPSBmdW5jdGlvbiAodSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgdmFyIGYgPSBwbHVyYWxGb3JtKG51bWJlciksXG4gICAgICAgICAgICAgICAgc3RyID0gcGx1cmFsc1t1XVtwbHVyYWxGb3JtKG51bWJlcildO1xuICAgICAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHJbd2l0aG91dFN1ZmZpeCA/IDAgOiAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICAgICAgfTtcbiAgICB9LCBtb250aHMgPSBbXG4gICAgICAgICfZitmG2KfZitixJyxcbiAgICAgICAgJ9mB2KjYsdin2YrYsScsXG4gICAgICAgICfZhdin2LHYsycsXG4gICAgICAgICfYo9io2LHZitmEJyxcbiAgICAgICAgJ9mF2KfZitmIJyxcbiAgICAgICAgJ9mK2YjZhtmK2YgnLFxuICAgICAgICAn2YrZiNmE2YrZiCcsXG4gICAgICAgICfYo9i62LPYt9izJyxcbiAgICAgICAgJ9iz2KjYqtmF2KjYsScsXG4gICAgICAgICfYo9mD2KrZiNio2LEnLFxuICAgICAgICAn2YbZiNmB2YXYqNixJyxcbiAgICAgICAgJ9iv2YrYs9mF2KjYsSdcbiAgICBdO1xuXG4gICAgdmFyIGFyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXInLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzIDogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbSA6IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaCA6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQgOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkIDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTSA6IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeSA6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiAnLWluY2knLFxuICAgICAgICA1OiAnLWluY2knLFxuICAgICAgICA4OiAnLWluY2knLFxuICAgICAgICA3MDogJy1pbmNpJyxcbiAgICAgICAgODA6ICctaW5jaScsXG4gICAgICAgIDI6ICctbmNpJyxcbiAgICAgICAgNzogJy1uY2knLFxuICAgICAgICAyMDogJy1uY2knLFxuICAgICAgICA1MDogJy1uY2knLFxuICAgICAgICAzOiAnLcO8bmPDvCcsXG4gICAgICAgIDQ6ICctw7xuY8O8JyxcbiAgICAgICAgMTAwOiAnLcO8bmPDvCcsXG4gICAgICAgIDY6ICctbmPEsScsXG4gICAgICAgIDk6ICctdW5jdScsXG4gICAgICAgIDEwOiAnLXVuY3UnLFxuICAgICAgICAzMDogJy11bmN1JyxcbiAgICAgICAgNjA6ICctxLFuY8SxJyxcbiAgICAgICAgOTA6ICctxLFuY8SxJ1xuICAgIH07XG5cbiAgICB2YXIgYXogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdheicsIHtcbiAgICAgICAgbW9udGhzIDogJ3lhbnZhcl9mZXZyYWxfbWFydF9hcHJlbF9tYXlfaXl1bl9peXVsX2F2cXVzdF9zZW50eWFicl9va3R5YWJyX25veWFicl9kZWthYnInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3lhbl9mZXZfbWFyX2Fwcl9tYXlfaXluX2l5bF9hdnFfc2VuX29rdF9ub3lfZGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdCYXphcl9CYXphciBlcnTJmXNpX8OHyZlyxZ/JmW5iyZkgYXjFn2FtxLFfw4fJmXLFn8mZbmLJmV9Dw7xtyZkgYXjFn2FtxLFfQ8O8bcmZX8WeyZluYsmZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0Jhel9CekVfw4dBeF/Dh8mZcl9DQXhfQ8O8bV/FnsmZbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnQnpfQkVfw4dBX8OHyZlfQ0FfQ8O8X8WeyZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tidWfDvG4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbc2FiYWggc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW2fJmWzJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZMO8bsmZbl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2tlw6fJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgyZl2dsmZbCcsXG4gICAgICAgICAgICBzIDogJ2Jpcm5lw6fJmSBzYW5pecmZJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhbml5yZknLFxuICAgICAgICAgICAgbSA6ICdiaXIgZMmZcWlxyZknLFxuICAgICAgICAgICAgbW0gOiAnJWQgZMmZcWlxyZknLFxuICAgICAgICAgICAgaCA6ICdiaXIgc2FhdCcsXG4gICAgICAgICAgICBoaCA6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIGQgOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICBNIDogJ2JpciBheScsXG4gICAgICAgICAgICBNTSA6ICclZCBheScsXG4gICAgICAgICAgICB5IDogJ2JpciBpbCcsXG4gICAgICAgICAgICB5eSA6ICclZCBpbCdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2dlY8mZfHPJmWjJmXJ8Z8O8bmTDvHp8YXjFn2FtLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKGfDvG5kw7x6fGF4xZ9hbSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2dlY8mZJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzyZloyZlyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnw7xuZMO8eic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnYXjFn2FtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjEsW5jxLF8aW5jaXxuY2l8w7xuY8O8fG5jxLF8dW5jdSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkgeyAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICctxLFuY8SxJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciAlIDEwMCAtIGEsXG4gICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGF6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3NzJzogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScgOiAn0YXQstGW0LvRltC90YNf0YXQstGW0LvRltC90Ytf0YXQstGW0LvRltC9JyxcbiAgICAgICAgICAgICdoaCc6IHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LBf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyA6ICfQs9Cw0LTQt9GW0L3Rg1/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nLFxuICAgICAgICAgICAgJ2RkJzogJ9C00LfQtdC90Yxf0LTQvdGWX9C00LfRkdC9JyxcbiAgICAgICAgICAgICdNTSc6ICfQvNC10YHRj9GGX9C80LXRgdGP0YbRi1/QvNC10YHRj9GG0LDRnicsXG4gICAgICAgICAgICAneXknOiAn0LPQvtC0X9Cz0LDQtNGLX9Cz0LDQtNC+0Z4nXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstGW0LvRltC90LAnIDogJ9GF0LLRltC70ZbQvdGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LAnIDogJ9Cz0LDQtNC30ZbQvdGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmUnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GB0YLRg9C00LfQtdC90Y9f0LvRjtGC0LDQs9CwX9GB0LDQutCw0LLRltC60LBf0LrRgNCw0YHQsNCy0ZbQutCwX9GC0YDQsNGe0L3Rj1/Rh9GN0YDQstC10L3Rj1/Qu9GW0L/QtdC90Y9f0LbQvdGW0Z7QvdGPX9Cy0LXRgNCw0YHQvdGPX9C60LDRgdGC0YDRi9GH0L3RltC60LBf0LvRltGB0YLQsNC/0LDQtNCwX9GB0L3QtdC20L3Rjycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRgdGC0YPQtNC30LXQvdGMX9C70Y7RgtGLX9GB0LDQutCw0LLRltC6X9C60YDQsNGB0LDQstGW0Lpf0YLRgNCw0LLQtdC90Yxf0YfRjdGA0LLQtdC90Yxf0LvRltC/0LXQvdGMX9C20L3RltCy0LXQvdGMX9Cy0LXRgNCw0YHQtdC90Yxf0LrQsNGB0YLRgNGL0YfQvdGW0Lpf0LvRltGB0YLQsNC/0LDQtF/RgdC90LXQttCw0L3RjCcuc3BsaXQoJ18nKVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICfRgdGC0YPQtF/Qu9GO0YJf0YHQsNC6X9C60YDQsNGBX9GC0YDQsNCyX9GH0Y3RgNCyX9C70ZbQv1/QttC90ZbQsl/QstC10YBf0LrQsNGB0YJf0LvRltGB0YJf0YHQvdC10LYnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0L3Rj9C00LfQtdC70Y5f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNGDX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbRg1/RgdGD0LHQvtGC0YMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0L3Rj9C00LfQtdC70Y9f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNCwX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbQsF/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9Cj0YPRnl0gPyg/OtC80ZbQvdGD0LvRg9GOfNC90LDRgdGC0YPQv9C90YPRjik/ID9cXF0gP2RkZGQvXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodGR0L3QvdGPINGeXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CX0LDRntGC0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQo9GH0L7RgNCwINGeXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW9CjXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRg9GOXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0KMg0LzRltC90YPQu9GLXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQv9GA0LDQtyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINGC0LDQvNGDJyxcbiAgICAgICAgICAgIHMgOiAn0L3QtdC60LDQu9GM0LrRliDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAn0LTQt9C10L3RjCcsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRi3zRgNCw0L3RltGG0Yt80LTQvdGPfNCy0LXRh9Cw0YDQsC8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LDRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0YsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdGW0YbRiyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQsNGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGWfNGLfNCz0LApLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobnVtYmVyICUgMTAgPT09IDIgfHwgbnVtYmVyICUgMTAgPT09IDMpICYmIChudW1iZXIgJSAxMDAgIT09IDEyICYmIG51bWJlciAlIDEwMCAhPT0gMTMpID8gbnVtYmVyICsgJy3RlicgOiBudW1iZXIgKyAnLdGLJztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQsCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBiZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JnJywge1xuICAgICAgICBtb250aHMgOiAn0Y/QvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LLRgNC4X9C+0LrRgtC+0LzQstGA0Lhf0L3QvtC10LzQstGA0Lhf0LTQtdC60LXQvNCy0YDQuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0Y/QvdGAX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9C90LXQtNC10LvRj1/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0Y/QtNCwX9GH0LXRgtCy0YrRgNGC0YrQul/Qv9C10YLRitC6X9GB0YrQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0Y9f0YfQtdGCX9C/0LXRgl/RgdGK0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb0JTQvdC10YEg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Cj0YLRgNC1INCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JLRh9C10YDQsCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQuNC30LzQuNC90LDQu9Cw0YLQsF0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0LjQt9C80LjQvdCw0LvQuNGPXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0YHQu9C10LQgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfQv9GA0LXQtNC4ICVzJyxcbiAgICAgICAgICAgIHMgOiAn0L3Rj9C60L7Qu9C60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgbSA6ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgtC4JyxcbiAgICAgICAgICAgIGggOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC00L3QuCcsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdC10YYnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0LzQtdGB0LXRhtCwJyxcbiAgICAgICAgICAgIHkgOiAn0LPQvtC00LjQvdCwJyxcbiAgICAgICAgICAgIHl5IDogJyVkINCz0L7QtNC40L3QuCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGxhc3QyRGlnaXRzID0gbnVtYmVyICUgMTAwO1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10LInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA+IDEwICYmIGxhc3QyRGlnaXRzIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDcgfHwgbGFzdERpZ2l0ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LzQuCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBiZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGJtID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm0nLCB7XG4gICAgICAgIG1vbnRocyA6ICdaYW53dXlla2Fsb19GZXd1cnV5ZWthbG9fTWFyaXNpa2Fsb19Bd2lyaWxpa2Fsb19NyZtrYWxvX1p1d8mbbmthbG9fWnVsdXlla2Fsb19VdGlrYWxvX1PJm3RhbmJ1cnVrYWxvX8mUa3V0yZRidXJ1a2Fsb19Ob3dhbmJ1cnVrYWxvX0Rlc2FuYnVydWthbG8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1phbl9GZXdfTWFyX0F3aV9NyZtfWnV3X1p1bF9VdGlfU8mbdF/JlGt1X05vd19EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0thcmlfTnTJm27Jm25fVGFyYXRhX0FyYWJhX0FsYW1pc2FfSnVtYV9TaWJpcmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnS2FyX050yZtfVGFyX0FyYV9BbGFfSnVtX1NpYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnS2FfTnRfVGFfQXJfQWxfSnVfU2knLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZIFtsyZtyyZtdIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0JpIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbU2luaSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2RvbiBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0t1bnUgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFt0yZttyZtuZW4gbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMga8mUbsmUJyxcbiAgICAgICAgICAgIHBhc3QgOiAnYSBiyZsgJXMgYsmUJyxcbiAgICAgICAgICAgIHMgOiAnc2FuZ2EgZGFtYSBkYW1hJyxcbiAgICAgICAgICAgIHNzIDogJ3Nla29uZGkgJWQnLFxuICAgICAgICAgICAgbSA6ICdtaW5pdGkga2VsZW4nLFxuICAgICAgICAgICAgbW0gOiAnbWluaXRpICVkJyxcbiAgICAgICAgICAgIGggOiAnbMmbcsmbIGtlbGVuJyxcbiAgICAgICAgICAgIGhoIDogJ2zJm3LJmyAlZCcsXG4gICAgICAgICAgICBkIDogJ3RpbGUga2VsZW4nLFxuICAgICAgICAgICAgZGQgOiAndGlsZSAlZCcsXG4gICAgICAgICAgICBNIDogJ2thbG8ga2VsZW4nLFxuICAgICAgICAgICAgTU0gOiAna2FsbyAlZCcsXG4gICAgICAgICAgICB5IDogJ3NhbiBrZWxlbicsXG4gICAgICAgICAgICB5eSA6ICdzYW4gJWQnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJtO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgp6cnLFxuICAgICAgICAnMic6ICfgp6gnLFxuICAgICAgICAnMyc6ICfgp6knLFxuICAgICAgICAnNCc6ICfgp6onLFxuICAgICAgICAnNSc6ICfgp6snLFxuICAgICAgICAnNic6ICfgp6wnLFxuICAgICAgICAnNyc6ICfgp60nLFxuICAgICAgICAnOCc6ICfgp64nLFxuICAgICAgICAnOSc6ICfgp68nLFxuICAgICAgICAnMCc6ICfgp6YnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgp6cnOiAnMScsXG4gICAgICAgICfgp6gnOiAnMicsXG4gICAgICAgICfgp6knOiAnMycsXG4gICAgICAgICfgp6onOiAnNCcsXG4gICAgICAgICfgp6snOiAnNScsXG4gICAgICAgICfgp6wnOiAnNicsXG4gICAgICAgICfgp60nOiAnNycsXG4gICAgICAgICfgp64nOiAnOCcsXG4gICAgICAgICfgp68nOiAnOScsXG4gICAgICAgICfgp6YnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGJuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4nLCB7XG4gICAgICAgIG1vbnRocyA6ICfgppzgpr7gpqjgp4Hgp5/gpr7gprDgp4Bf4Kar4KeH4Kas4KeN4Kaw4KeB4Kef4Ka+4Kaw4Ka/X+CmruCmvuCmsOCnjeCmml/gpo/gpqrgp43gprDgpr/gprJf4Kau4KeHX+CmnOCngeCmqF/gppzgp4HgprLgpr7gpodf4KaG4KaX4Ka44KeN4KafX+CmuOCnh+CmquCnjeCmn+Cnh+CmruCnjeCmrOCmsF/gpoXgppXgp43gpp/gp4vgpqzgprBf4Kao4Kat4KeH4Kau4KeN4Kas4KawX+CmoeCmv+CmuOCnh+CmruCnjeCmrOCmsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4Kac4Ka+4Kao4KeBX+Cmq+Cnh+CmrF/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4KawX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4KayX+CmhuCml1/gprjgp4fgpqrgp43gpp9f4KaF4KaV4KeN4Kaf4KeLX+CmqOCmreCnh1/gpqHgpr/gprjgp4cnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaXX+CmrOCngeCmp1/gpqzgp4PgprngpoNf4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4Ka44Kau4KefJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpobgppxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CmhuCml+CmvuCmruCngOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KaX4Kak4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4KaX4KakXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4Kaq4Kaw4KeHJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KaG4KaX4KeHJyxcbiAgICAgICAgICAgIHMgOiAn4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBzcyA6ICclZCDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgbSA6ICfgpo/gppUg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBoIDogJ+Cmj+CmlSDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGQgOiAn4KaP4KaVIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgTSA6ICfgpo/gppUg4Kau4Ka+4Ka4JyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCmruCmvuCmuCcsXG4gICAgICAgICAgICB5IDogJ+Cmj+CmlSDgpqzgppvgprAnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Kas4Kab4KawJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Ken4Keo4Kep4Keq4Ker4Kes4Ket4Keu4Kev4KemXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kaw4Ka+4KakfOCmuOCmleCmvuCmsnzgpqbgp4Hgpqrgp4HgprB84Kas4Ka/4KaV4Ka+4KayfOCmsOCmvuCmpC8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4Kaw4Ka+4KakJyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmpuCngeCmquCngeCmsCcgJiYgaG91ciA8IDUpIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4Kas4Ka/4KaV4Ka+4KayJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprjgppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmpuCngeCmquCngeCmsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kas4Ka/4KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBibjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4LyhJyxcbiAgICAgICAgJzInOiAn4LyiJyxcbiAgICAgICAgJzMnOiAn4LyjJyxcbiAgICAgICAgJzQnOiAn4LykJyxcbiAgICAgICAgJzUnOiAn4LylJyxcbiAgICAgICAgJzYnOiAn4LymJyxcbiAgICAgICAgJzcnOiAn4LynJyxcbiAgICAgICAgJzgnOiAn4LyoJyxcbiAgICAgICAgJzknOiAn4LypJyxcbiAgICAgICAgJzAnOiAn4LygJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4LyhJzogJzEnLFxuICAgICAgICAn4LyiJzogJzInLFxuICAgICAgICAn4LyjJzogJzMnLFxuICAgICAgICAn4LykJzogJzQnLFxuICAgICAgICAn4LylJzogJzUnLFxuICAgICAgICAn4LymJzogJzYnLFxuICAgICAgICAn4LynJzogJzcnLFxuICAgICAgICAn4LyoJzogJzgnLFxuICAgICAgICAn4LypJzogJzknLFxuICAgICAgICAn4LygJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBibyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JvJywge1xuICAgICAgICBtb250aHMgOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C9n+C+s+C8i+C9luC8i+C9keC9hOC8i+C9lOC9vF/gvZ/gvrPgvIvgvZbgvIvgvYLgvYngvbLgvabgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2C4L2m4L204L2Y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9nuC9suC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvaPgvpTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L6y4L204L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9keC9tOC9k+C8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvaLgvpLgvrHgvZHgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L2C4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYXgvbLgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2J4L2y4L2m4LyL4L2UJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgvYLgvZ/gvaDgvIvgvYngvbLgvIvgvZjgvItf4L2C4L2f4L2g4LyL4L2f4L6z4LyL4L2W4LyLX+C9guC9n+C9oOC8i+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvYLgvZ/gvaDgvIvgvaPgvrfgvYLgvIvgvZTgvItf4L2C4L2f4L2g4LyL4L2V4L204L2i4LyL4L2W4L20X+C9guC9n+C9oOC8i+C9lOC8i+C9puC9hOC9puC8i1/gvYLgvZ/gvaDgvIvgvabgvqTgvbrgvZPgvIvgvZTgvIsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgvYngvbLgvIvgvZjgvItf4L2f4L6z4LyL4L2W4LyLX+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvaPgvrfgvYLgvIvgvZTgvItf4L2V4L204L2i4LyL4L2W4L20X+C9lOC8i+C9puC9hOC9puC8i1/gvabgvqTgvbrgvZPgvIvgvZTgvIsnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgvZHgvbLgvIvgvaLgvbLgvYRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+C9puC9hOC8i+C9ieC9suC9k10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9ouC+l+C9uuC9puC8i+C9mF0sIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C9geC8i+C9puC9hF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9mOC9kOC9oOC8i+C9mF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOC9o+C8iycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOC9puC+lOC9k+C8i+C9oycsXG4gICAgICAgICAgICBzIDogJ+C9o+C9mOC8i+C9puC9hCcsXG4gICAgICAgICAgICBzcyA6ICclZCDgvabgvpDgvaLgvIvgvYbgvI0nLFxuICAgICAgICAgICAgbSA6ICfgvabgvpDgvaLgvIvgvZjgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgbW0gOiAnJWQg4L2m4L6Q4L2i4LyL4L2YJyxcbiAgICAgICAgICAgIGggOiAn4L2G4L204LyL4L2a4L284L2R4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOC9huC9tOC8i+C9muC9vOC9kScsXG4gICAgICAgICAgICBkIDogJ+C9ieC9suC9k+C8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBkZCA6ICclZCDgvYngvbLgvZPgvIsnLFxuICAgICAgICAgICAgTSA6ICfgvZ/gvrPgvIvgvZbgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgTU0gOiAnJWQg4L2f4L6z4LyL4L2WJyxcbiAgICAgICAgICAgIHkgOiAn4L2j4L284LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOC9o+C9vCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+C8oeC8ouC8o+C8pOC8peC8puC8p+C8qOC8qeC8oF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C9mOC9muC9k+C8i+C9mOC9vHzgvZ7gvbzgvYLgvabgvIvgvYDgvaZ84L2J4L2y4L2T4LyL4L2C4L204L2EfOC9keC9guC9vOC9hOC8i+C9keC9gnzgvZjgvZrgvZPgvIvgvZjgvbwvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChtZXJpZGllbSA9PT0gJ+C9mOC9muC9k+C8i+C9mOC9vCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnICYmIGhvdXIgPCA1KSB8fFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C9keC9guC9vOC9hOC8i+C9keC9gicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2e4L284L2C4L2m4LyL4L2A4L2mJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9keC9guC9vOC9hOC8i+C9keC9gic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2Y4L2a4L2T4LyL4L2Y4L28JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ21tJzogJ211bnV0ZW5uJyxcbiAgICAgICAgICAgICdNTSc6ICdtaXonLFxuICAgICAgICAgICAgJ2RkJzogJ2RldmV6aCdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIG11dGF0aW9uKGZvcm1hdFtrZXldLCBudW1iZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFycyhudW1iZXIpIHtcbiAgICAgICAgc3dpdGNoIChsYXN0TnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyBibG9heic7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIHZsb2F6JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBsYXN0TnVtYmVyKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID4gOSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3ROdW1iZXIobnVtYmVyICUgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG11dGF0aW9uKHRleHQsIG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gc29mdE11dGF0aW9uKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzb2Z0TXV0YXRpb24odGV4dCkge1xuICAgICAgICB2YXIgbXV0YXRpb25UYWJsZSA9IHtcbiAgICAgICAgICAgICdtJzogJ3YnLFxuICAgICAgICAgICAgJ2InOiAndicsXG4gICAgICAgICAgICAnZCc6ICd6J1xuICAgICAgICB9O1xuICAgICAgICBpZiAobXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldICsgdGV4dC5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgdmFyIGJyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnInLCB7XG4gICAgICAgIG1vbnRocyA6ICdHZW52ZXJfQ1xcJ2h3ZXZyZXJfTWV1cnpoX0VicmVsX01hZV9NZXpoZXZlbl9Hb3VlcmVfRW9zdF9Hd2VuZ29sb19IZXJlX0R1X0tlcnp1Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdHZW5fQ1xcJ2h3ZV9NZXVfRWJyX01hZV9FdmVfR291X0Vvc19Hd2VfSGVyX0R1X0tlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VsX0x1bl9NZXVyemhfTWVyY1xcJ2hlcl9ZYW91X0d3ZW5lcl9TYWRvcm4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VsX0x1bl9NZXVfTWVyX1lhb19Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9MdV9NZV9NZXJfWWFfR3dfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaFtlXW1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2hbZV1tbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFthIHZpel0gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFthIHZpel0gTU1NTSBZWVlZIGhbZV1tbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tIaXppdiBkYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbV2FyY1xcJ2hvYXpoIGRhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbRGVjXFwnaCBkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbcGFzZXQgZGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdhLWJlbm4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBcXCd6bycsXG4gICAgICAgICAgICBzIDogJ3VuIG5lYmV1ZCBzZWdvbmRlbm5vw7knLFxuICAgICAgICAgICAgc3MgOiAnJWQgZWlsZW5uJyxcbiAgICAgICAgICAgIG0gOiAndXIgdnVudXRlbm4nLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBoIDogJ3VuIGV1cicsXG4gICAgICAgICAgICBoaCA6ICclZCBldXInLFxuICAgICAgICAgICAgZCA6ICd1biBkZXZlemgnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBNIDogJ3VyIG1peicsXG4gICAgICAgICAgICBNTSA6IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIHkgOiAndXIgYmxvYXonLFxuICAgICAgICAgICAgeXkgOiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFyc1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oYcOxfHZldCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IChudW1iZXIgPT09IDEpID8gJ2HDsScgOiAndmV0JztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYnMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdicycsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgIDogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5ICA6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzICAgICAgOiAncGFyIHNla3VuZGknLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgICAgICBkZCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXkgICAgIDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBjYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NhJywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAnZ2VuZXJfZmVicmVyX21hcsOnX2FicmlsX21haWdfanVueV9qdWxpb2xfYWdvc3Rfc2V0ZW1icmVfb2N0dWJyZV9ub3ZlbWJyZV9kZXNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ2RlIGdlbmVyX2RlIGZlYnJlcl9kZSBtYXLDp19kXFwnYWJyaWxfZGUgbWFpZ19kZSBqdW55X2RlIGp1bGlvbF9kXFwnYWdvc3RfZGUgc2V0ZW1icmVfZFxcJ29jdHVicmVfZGUgbm92ZW1icmVfZGUgZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXHMpK01NTU0vXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlnX2p1bnlfanVsLl9hZy5fc2V0Ll9vY3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpdW1lbmdlX2RpbGx1bnNfZGltYXJ0c19kaW1lY3Jlc19kaWpvdXNfZGl2ZW5kcmVzX2Rpc3NhYnRlJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RnLl9kbC5fZHQuX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGdfZGxfZHRfZGNfZGpfZHZfZHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBsbCA6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gW2RlXSBZWVlZIFthIGxlc10gSDptbScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdkZGQgRCBNTU0gWVlZWSwgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F2dWkgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2RlbcOgIGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYWhpciBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNzYXQgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZFxcJ2FxdcOtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnZmEgJXMnLFxuICAgICAgICAgICAgcyA6ICd1bnMgc2Vnb25zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ29ucycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0cycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmVzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZGlhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRpZXMnLFxuICAgICAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzb3MnLFxuICAgICAgICAgICAgeSA6ICd1biBhbnknLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW55cydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IChudW1iZXIgPT09IDEpID8gJ3InIDpcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAyKSA/ICduJyA6XG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMykgPyAncicgOlxuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDQpID8gJ3QnIDogJ8OoJztcbiAgICAgICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gJ2xlZGVuX8O6bm9yX2LFmWV6ZW5fZHViZW5fa3bEm3Rlbl/EjWVydmVuX8SNZXJ2ZW5lY19zcnBlbl96w6HFmcOtX8WZw61qZW5fbGlzdG9wYWRfcHJvc2luZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2xlZF/Dum5vX2LFmWVfZHViX2t2xJtfxI12bl/EjXZjX3NycF96w6HFmV/FmcOtal9saXNfcHJvJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiAobiA+IDEpICYmIChuIDwgNSkgJiYgKH5+KG4gLyAxMCkgIT09IDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzogIC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3DDoXIgc2VrdW5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6IC8vIDkgc2Vjb25kcyAvIGluIDkgc2Vjb25kcyAvIDkgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2VrdW5kYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzogIC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogKGlzRnV0dXJlID8gJ21pbnV0dScgOiAnbWludXRvdScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW51dHknIDogJ21pbnV0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6ICAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnaG9kaW5hJyA6IChpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2RpbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnaG9kaW5hbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiAgLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnZGVuJyA6ICdkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG55JyA6ICdkbsOtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkbnknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ00nOiAgLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnbcSbc8OtYycgOiAnbcSbc8OtY2VtJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbcSbc8OtY2UnIDogJ23Em3PDrWPFrycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcSbc8OtY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOiAgLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAncm9rJyA6ICdyb2tlbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Jva3knIDogJ2xldCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbGV0eSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3MnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2UgOiAoZnVuY3Rpb24gKG1vbnRocywgbW9udGhzU2hvcnQpIHtcbiAgICAgICAgICAgIHZhciBpLCBfbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gdXNlIGN1c3RvbSBwYXJzZXIgdG8gc29sdmUgcHJvYmxlbSB3aXRoIEp1bHkgKMSNZXJ2ZW5lYylcbiAgICAgICAgICAgICAgICBfbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIG1vbnRoc1tpXSArICckfF4nICsgbW9udGhzU2hvcnRbaV0gKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX21vbnRoc1BhcnNlO1xuICAgICAgICB9KG1vbnRocywgbW9udGhzU2hvcnQpKSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IChmdW5jdGlvbiAobW9udGhzU2hvcnQpIHtcbiAgICAgICAgICAgIHZhciBpLCBfc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgbW9udGhzU2hvcnRbaV0gKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3Nob3J0TW9udGhzUGFyc2U7XG4gICAgICAgIH0obW9udGhzU2hvcnQpKSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlIDogKGZ1bmN0aW9uIChtb250aHMpIHtcbiAgICAgICAgICAgIHZhciBpLCBfbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgICAgIF9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIG1vbnRoc1tpXSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfbG9uZ01vbnRoc1BhcnNlO1xuICAgICAgICB9KG1vbnRocykpLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWTEm2xlX3BvbmTEm2zDrV/DunRlcsO9X3N0xZllZGFfxI10dnJ0ZWtfcMOhdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZV9wb1/DunRfc3RfxI10X3DDoV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBsIDogJ0QuIE0uIFlZWVknXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIHZdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbesOtdHJhIHZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgxI10dnJ0ZWsgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHDDoXRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgdl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMOpXSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAncMWZZWQgJXMnLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgY3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjdicsIHtcbiAgICAgICAgbW9udGhzIDogJ9C605HRgNC70LDRh1/QvdCw0YDTkdGBX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgNGC0LzQtV/Rg9GC05Ff0qvRg9GA0LvQsF/QsNCy05HQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiNGC0LDQsicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0LrTkdGAX9C90LDRgF/Qv9GD0Yhf0LDQutCwX9C80LDQuV/Sq9OX0YBf0YPRgtORX9Kr0YPRgF/QsNCy0L1f0Y7Qv9CwX9GH07PQul/RgNCw0YgnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9Cy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRi9GAX9GC0YPQvV/Ri9GC0Ltf0Y7QvV/QutOX0qtf0Y3RgNC9X9GI05HQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0LLRgF/RgtC9X9GL0YJf0Y7QvV/QutKrX9GN0YBf0YjQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQn9Cw0Y/QvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cr0YDQsNC9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb05bQvdC10YBdIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0qrQuNGC0LXRgV0gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9CY0YDRgtC905ddIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWZmaXggPSAv0YHQtdGF0LXRgiQvaS5leGVjKG91dHB1dCkgPyAn0YDQtdC9JyA6IC/Sq9GD0LskL2kuZXhlYyhvdXRwdXQpID8gJ9GC0LDQvScgOiAn0YDQsNC9JztcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0ICsgYWZmaXg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQutCw0Y/Qu9C70LAnLFxuICAgICAgICAgICAgcyA6ICfQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBzcyA6ICclZCDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBtIDogJ9C/05fRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaCA6ICfQv9OX0YAg0YHQtdGF0LXRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGQgOiAn0L/Tl9GAINC60YPQvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutGD0L0nLFxuICAgICAgICAgICAgTSA6ICfQv9OX0YAg0YPQudOR0YUnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0YPQudOR0YUnLFxuICAgICAgICAgICAgeSA6ICfQv9OX0YAg0qvRg9C7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINKr0YPQuydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LdC805fRiC8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQt0LzTl9GIJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBjeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2N5Jywge1xuICAgICAgICBtb250aHM6ICdJb25hd3JfQ2h3ZWZyb3JfTWF3cnRoX0VicmlsbF9NYWlfTWVoZWZpbl9Hb3JmZmVubmFmX0F3c3RfTWVkaV9IeWRyZWZfVGFjaHdlZGRfUmhhZ2Z5cicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdEeWRkIFN1bF9EeWRkIExsdW5fRHlkZCBNYXdydGhfRHlkZCBNZXJjaGVyX0R5ZGQgSWF1X0R5ZGQgR3dlbmVyX0R5ZGQgU2Fkd3JuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VsX0xsdW5fTWF3X01lcl9JYXVfR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9MbF9NYV9NZV9JYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgLy8gdGltZSBmb3JtYXRzIGFyZSB0aGUgc2FtZSBhcyBlbi1nYlxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hlZGRpdyBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tZZm9yeSBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEZG9lIGFtXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rpd2V0aGFmIGFtXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbWV3biAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeW4gw7RsJyxcbiAgICAgICAgICAgIHM6ICd5Y2h5ZGlnIGVpbGlhZGF1JyxcbiAgICAgICAgICAgIHNzOiAnJWQgZWlsaWFkJyxcbiAgICAgICAgICAgIG06ICdtdW51ZCcsXG4gICAgICAgICAgICBtbTogJyVkIG11bnVkJyxcbiAgICAgICAgICAgIGg6ICdhd3InLFxuICAgICAgICAgICAgaGg6ICclZCBhd3InLFxuICAgICAgICAgICAgZDogJ2Rpd3Jub2QnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaXdybm9kJyxcbiAgICAgICAgICAgIE06ICdtaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtaXMnLFxuICAgICAgICAgICAgeTogJ2Jsd3lkZHluJyxcbiAgICAgICAgICAgIHl5OiAnJWQgZmx5bmVkZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGZlZHxhaW58YWZ8aWx8eWRkfGVkfGVnKS8sXG4gICAgICAgIC8vIHRyYWRpdGlvbmFsIG9yZGluYWwgbnVtYmVycyBhYm92ZSAzMSBhcmUgbm90IGNvbW1vbmx5IHVzZWQgaW4gY29sbG9xdWlhbCBXZWxzaFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlcixcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgICAgICcnLCAnYWYnLCAnaWwnLCAneWRkJywgJ3lkZCcsICdlZCcsICdlZCcsICdlZCcsICdmZWQnLCAnZmVkJywgJ2ZlZCcsIC8vIDFhZiB0byAxMGZlZFxuICAgICAgICAgICAgICAgICAgICAnZWcnLCAnZmVkJywgJ2VnJywgJ2VnJywgJ2ZlZCcsICdlZycsICdlZycsICdmZWQnLCAnZWcnLCAnZmVkJyAvLyAxMWVnIHRvIDIwZmVkXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChiID4gMjApIHtcbiAgICAgICAgICAgICAgICBpZiAoYiA9PT0gNDAgfHwgYiA9PT0gNTAgfHwgYiA9PT0gNjAgfHwgYiA9PT0gODAgfHwgYiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICdmZWQnOyAvLyBub3QgMzBhaW4sIDcwYWluIG9yIDkwYWluXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2Fpbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiID4gMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IGxvb2t1cFtiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGN5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkYScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc8O4X21hX3RpX29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAncMOlIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2ldIGRkZGRbcyBrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHMgOiAnZsOlIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG0gOiAnZXQgbWludXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0ZXInLFxuICAgICAgICAgICAgaCA6ICdlbiB0aW1lJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2UnLFxuICAgICAgICAgICAgTSA6ICdlbiBtw6VuZWQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeSA6ICdldCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ20nOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgJ2gnOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgJ00nOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICAneSc6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGVBdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWF0Jywge1xuICAgICAgICBtb250aHMgOiAnSsOkbm5lcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKw6RuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3ZvciAlcycsXG4gICAgICAgICAgICBzIDogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gOiAnJWQgTWludXRlbicsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogJyVkIFN0dW5kZW4nLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVBdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtJzogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgICdkJzogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgJ2RkJzogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgJ3knOiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1jaCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICAnZCc6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICAnTSc6IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn3pberN6C3qreh96m3oPeqScsXG4gICAgICAgICfeit6s3oTesN6D3qreh96m3oPeqScsXG4gICAgICAgICfeid6n3oPeqN6X3qonLFxuICAgICAgICAn3oferd6V3rDeg96p3o3eqicsXG4gICAgICAgICfeid6tJyxcbiAgICAgICAgJ96W3qvegt6wJyxcbiAgICAgICAgJ96W3qrejd6m3ofeqCcsXG4gICAgICAgICfeh96v3o7ept6Q3rDek96qJyxcbiAgICAgICAgJ96Q3qzeld6w3pPerN6J3rDehN6m3oPeqicsXG4gICAgICAgICfeh96u3obesN6T3q/ehN6m3oPeqicsXG4gICAgICAgICfegt6u3ojerN6J3rDehN6m3oPeqicsXG4gICAgICAgICfekd6o3pDerN6J3rDehN6m3oPeqidcbiAgICBdLCB3ZWVrZGF5cyA9IFtcbiAgICAgICAgJ96H3qfei96o3ofesN6M3qYnLFxuICAgICAgICAn3oDer96J3qYnLFxuICAgICAgICAn3ofept6C3rDejt6n3oPepicsXG4gICAgICAgICfehN6q3ovepicsXG4gICAgICAgICfehN6q3oPep96Q3rDeit6m3ozeqCcsXG4gICAgICAgICfegN6q3obeqt6D3qonLFxuICAgICAgICAn3oDert6C3qjegN6o3oPeqidcbiAgICBdO1xuXG4gICAgdmFyIGR2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZHYnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn3ofep96L3qhf3oDer96J3qZf3ofept6C3rBf3oTeqt6L3qZf3oTeqt6D3qdf3oDeqt6G3qpf3oDert6C3qgnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuXG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv3onehnzeid6KLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfeid6KJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3onehic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3oneiic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb3oneqN6H3qbei96qXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1veid6n3ovept6J3qddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb3ofeqN6H3rDelN6sXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb3orep96H3qjejN6q3ojeqF0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn3ozerN6D3q3ejt6m3ofeqCAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ96G3qreg96o3oLesCAlcycsXG4gICAgICAgICAgICBzIDogJ96Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAnLFxuICAgICAgICAgICAgc3MgOiAnZCUg3pDeqN6G3qregt6w3ozeqicsXG4gICAgICAgICAgICBtIDogJ96J3qjegt6o3pPerN6H3rAnLFxuICAgICAgICAgICAgbW0gOiAn3oneqN6C3qjek96qICVkJyxcbiAgICAgICAgICAgIGggOiAn3o7ept6R3qjeh96o3oPerN6H3rAnLFxuICAgICAgICAgICAgaGggOiAn3o7ept6R3qjeh96o3oPeqiAlZCcsXG4gICAgICAgICAgICBkIDogJ96L3qreiN6m3oDerN6H3rAnLFxuICAgICAgICAgICAgZGQgOiAn3oveqt6I3qbekN6wICVkJyxcbiAgICAgICAgICAgIE0gOiAn3onept6A3qzeh96wJyxcbiAgICAgICAgICAgIE1NIDogJ96J3qbekN6wICVkJyxcbiAgICAgICAgICAgIHkgOiAn3ofept6A3qbeg96s3ofesCcsXG4gICAgICAgICAgICB5eSA6ICfeh96m3oDept6D3qogJWQnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDcsICAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cblxuICAgIHZhciBlbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VsJywge1xuICAgICAgICBtb250aHNOb21pbmF0aXZlRWwgOiAnzpnOsc69zr/Phc6sz4HOuc6/z4JfzqbOtc6yz4HOv8+FzqzPgc65zr/Pgl/OnM6sz4HPhM65zr/Pgl/Okc+Az4HOr867zrnOv8+CX86czqzOuc6/z4JfzpnOv8+Nzr3Ouc6/z4JfzpnOv8+NzrvOuc6/z4JfzpHPjc6zzr/Phc+Dz4TOv8+CX86jzrXPgM+Ezq3OvM6yz4HOuc6/z4Jfzp/Ous+Ez47Oss+BzrnOv8+CX86dzr/Orc68zrLPgc65zr/Pgl/OlM61zrrOrc68zrLPgc65zr/Pgicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzR2VuaXRpdmVFbCA6ICfOmc6xzr3Ov8+FzrHPgc6vzr/PhV/Ops61zrLPgc6/z4XOsc+Bzq/Ov8+FX86czrHPgc+Ezq/Ov8+FX86Rz4DPgc65zrvOr86/z4VfzpzOsc6Qzr/PhV/Omc6/z4XOvc6vzr/PhV/Omc6/z4XOu86vzr/PhV/Okc+FzrPOv8+Nz4PPhM6/z4VfzqPOtc+Az4TOtc68zrLPgc6vzr/PhV/On866z4TPic6yz4HOr86/z4Vfzp3Ov861zrzOss+Bzq/Ov8+FX86UzrXOus61zrzOss+Bzq/Ov8+FJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHMgOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnICYmIC9ELy50ZXN0KGZvcm1hdC5zdWJzdHJpbmcoMCwgZm9ybWF0LmluZGV4T2YoJ01NTU0nKSkpKSB7IC8vIGlmIHRoZXJlIGlzIGEgZGF5IG51bWJlciBiZWZvcmUgJ01NTU0nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc0dlbml0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ86ZzrHOvV/Ops61zrJfzpzOsc+BX86Rz4DPgV/OnM6xz4pfzpnOv8+Fzr1fzpnOv8+FzrtfzpHPhc6zX86jzrXPgF/On866z4Rfzp3Ov861X86UzrXOuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnzprPhc+BzrnOsc66zq5fzpTOtc+Fz4TOrc+BzrFfzqTPgc6vz4TOt1/OpM61z4TOrM+Bz4TOt1/OoM6tzrzPgM+EzrdfzqDOsc+BzrHPg866zrXPhc6uX86jzqzOss6yzrHPhM6/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ86az4XPgV/OlM61z4VfzqTPgc65X86kzrXPhF/OoM61zrxfzqDOsc+BX86jzrHOsicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnzprPhV/OlM61X86kz4FfzqTOtV/OoM61X86gzrFfzqPOsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnzrzOvCcgOiAnzpzOnCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8+AzrwnIDogJ86gzpwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpWzBdID09PSAnzrwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZSA6IC9bzqDOnF1cXC4/zpw/XFwuPy9pLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhckVsIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbzqPOrs68zrXPgc6xIHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vOkc+Nz4HOuc6/IHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFt7fV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbzqfOuM61z4Ige31dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM6/IM+Az4HOv863zrPOv8+NzrzOtc69zr9dIGRkZGQgW3t9XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM63zr0gz4DPgc6/zrfOs86/z43OvM61zr3Ot10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiBmdW5jdGlvbiAoa2V5LCBtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhckVsW2tleV0sXG4gICAgICAgICAgICAgICAgaG91cnMgPSBtb20gJiYgbW9tLmhvdXJzKCk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvdXRwdXQpKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LmFwcGx5KG1vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoJ3t9JywgKGhvdXJzICUgMTIgPT09IDEgPyAnz4PPhM63JyA6ICfPg8+EzrnPgicpKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ8+DzrUgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDPgM+BzrnOvScsXG4gICAgICAgICAgICBzIDogJ867zq/Os86xIM60zrXPhc+EzrXPgc+MzrvOtc+Az4TOsScsXG4gICAgICAgICAgICBzcyA6ICclZCDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgbSA6ICfOrc69zrEgzrvOtc+Az4TPjCcsXG4gICAgICAgICAgICBtbSA6ICclZCDOu861z4DPhM6sJyxcbiAgICAgICAgICAgIGggOiAnzrzOr86xIM+Oz4HOsScsXG4gICAgICAgICAgICBoaCA6ICclZCDPjs+BzrXPgicsXG4gICAgICAgICAgICBkIDogJ868zq/OsSDOvM6tz4HOsScsXG4gICAgICAgICAgICBkZCA6ICclZCDOvM6tz4HOtc+CJyxcbiAgICAgICAgICAgIE0gOiAnzq3Ovc6xz4IgzrzOrs69zrHPgicsXG4gICAgICAgICAgICBNTSA6ICclZCDOvM6uzr3Otc+CJyxcbiAgICAgICAgICAgIHkgOiAnzq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CJyxcbiAgICAgICAgICAgIHl5IDogJyVkIM+Hz4HPjM69zrnOsSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9zrcvLFxuICAgICAgICBvcmRpbmFsOiAnJWTOtycsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDRzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5BdSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWF1Jywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuQXU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbkNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tY2EnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuQ2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbkdiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tZ2InLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbkdiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5JZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWllJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbkllO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5JbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWlsJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbklsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5OeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLW56Jywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuTno7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VvJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyb19mZWJydWFyb19tYXJ0b19hcHJpbG9fbWFqb19qdW5pb19qdWxpb19hxa1ndXN0b19zZXB0ZW1icm9fb2t0b2Jyb19ub3ZlbWJyb19kZWNlbWJybycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2HFrWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaW1hbsSJb19sdW5kb19tYXJkb19tZXJrcmVkb1/EtWHFrWRvX3ZlbmRyZWRvX3NhYmF0bycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkaW1fbHVuX21hcmRfbWVya1/EtWHFrV92ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkaV9sdV9tYV9tZV/EtWFfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdEWy1hIGRlXSBNTU1NLCBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEWy1hIGRlXSBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgW2xhXSBEWy1hIGRlXSBNTU1NLCBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvW2FwXVxcLnRcXC5tL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpID09PSAncCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3AudC5tLicgOiAnUC5ULk0uJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYS50Lm0uJyA6ICdBLlQuTS4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0hvZGlhxa0gamVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW01vcmdhxa0gamVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2plXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tIaWVyYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbcGFzaW50YV0gZGRkZCBbamVdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdwb3N0ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnYW50YcWtICVzJyxcbiAgICAgICAgICAgIHMgOiAnc2VrdW5kb2onLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kb2onLFxuICAgICAgICAgICAgbSA6ICdtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvaicsXG4gICAgICAgICAgICBoIDogJ2hvcm8nLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yb2onLFxuICAgICAgICAgICAgZCA6ICd0YWdvJywvL25lICdkaXVybm8nLCDEiWFyIGVzdGFzIHV6aXRhIHBvciBwcm9rc2ltdW1vXG4gICAgICAgICAgICBkZCA6ICclZCB0YWdvaicsXG4gICAgICAgICAgICBNIDogJ21vbmF0bycsXG4gICAgICAgICAgICBNTSA6ICclZCBtb25hdG9qJyxcbiAgICAgICAgICAgIHkgOiAnamFybycsXG4gICAgICAgICAgICB5eSA6ICclZCBqYXJvaidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9YS8sXG4gICAgICAgIG9yZGluYWwgOiAnJWRhJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNTaG9ydERvdCA9ICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbL15lbmUvaSwgL15mZWIvaSwgL15tYXIvaSwgL15hYnIvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hZ28vaSwgL15zZXAvaSwgL15vY3QvaSwgL15ub3YvaSwgL15kaWMvaV07XG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxuICAgIHZhciBlc0RvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMtZG8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgcyA6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkIDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGHDsW9zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsIDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlc0RvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIGVzVXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy11cycsIHtcbiAgICAgICAgbW9udGhzIDogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ01NL0REL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBbZGVdIEQgW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdNTU1NIFtkZV0gRCBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBbZGVdIEQgW2RlXSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNVcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmVuZS9pLCAvXmZlYi9pLCAvXm1hci9pLCAvXmFici9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmFnby9pLCAvXnNlcC9pLCAvXm9jdC9pLCAvXm5vdi9pLCAvXmRpYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4IDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXggOiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4IDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYcOxb3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3MnIDogWydtw7VuZSBzZWt1bmRpJywgJ23DtW5pIHNla3VuZCcsICdwYWFyIHNla3VuZGl0J10sXG4gICAgICAgICAgICAnc3MnOiBbbnVtYmVyICsgJ3Nla3VuZGknLCBudW1iZXIgKyAnc2VrdW5kaXQnXSxcbiAgICAgICAgICAgICdtJyA6IFsnw7xoZSBtaW51dGknLCAnw7xrcyBtaW51dCddLFxuICAgICAgICAgICAgJ21tJzogW251bWJlciArICcgbWludXRpJywgbnVtYmVyICsgJyBtaW51dGl0J10sXG4gICAgICAgICAgICAnaCcgOiBbJ8O8aGUgdHVubmknLCAndHVuZCBhZWdhJywgJ8O8a3MgdHVuZCddLFxuICAgICAgICAgICAgJ2hoJzogW251bWJlciArICcgdHVubmknLCBudW1iZXIgKyAnIHR1bmRpJ10sXG4gICAgICAgICAgICAnZCcgOiBbJ8O8aGUgcMOkZXZhJywgJ8O8a3MgcMOkZXYnXSxcbiAgICAgICAgICAgICdNJyA6IFsna3V1IGFqYScsICdrdXUgYWVnYScsICfDvGtzIGt1dSddLFxuICAgICAgICAgICAgJ01NJzogW251bWJlciArICcga3V1JywgbnVtYmVyICsgJyBrdXVkJ10sXG4gICAgICAgICAgICAneScgOiBbJ8O8aGUgYWFzdGEnLCAnYWFzdGEnLCAnw7xrcyBhYXN0YSddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgYWFzdGEnLCBudW1iZXIgKyAnIGFhc3RhdCddXG4gICAgICAgIH07XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0W2tleV1bMl0gPyBmb3JtYXRba2V5XVsyXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXQnLCB7XG4gICAgICAgIG1vbnRocyAgICAgICAgOiAnamFhbnVhcl92ZWVicnVhcl9tw6RydHNfYXByaWxsX21haV9qdXVuaV9qdXVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9vYmVyX25vdmVtYmVyX2RldHNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgICA6ICdqYWFuX3ZlZWJyX23DpHJ0c19hcHJfbWFpX2p1dW5pX2p1dWxpX2F1Z19zZXB0X29rdF9ub3ZfZGV0cycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgICAgICA6ICdww7xoYXDDpGV2X2VzbWFzcMOkZXZfdGVpc2lww6Rldl9rb2xtYXDDpGV2X25lbGphcMOkZXZfcmVlZGVfbGF1cMOkZXYnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gICA6ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUICAgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMICAgIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgICA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMICA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgIDogJ1tUw6RuYSxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgIDogJ1tIb21tZSxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1tKw6RyZ21pbmVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW0VpbGUsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbRWVsbWluZV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgcMOkcmFzdCcsXG4gICAgICAgICAgICBwYXN0ICAgOiAnJXMgdGFnYXNpJyxcbiAgICAgICAgICAgIHMgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzcyAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCAgICAgOiAnJWQgcMOkZXZhJyxcbiAgICAgICAgICAgIE0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5ICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGV1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXUnLCB7XG4gICAgICAgIG1vbnRocyA6ICd1cnRhcnJpbGFfb3RzYWlsYV9tYXJ0eG9hX2FwaXJpbGFfbWFpYXR6YV9la2FpbmFfdXp0YWlsYV9hYnV6dHVhX2lyYWlsYV91cnJpYV9hemFyb2FfYWJlbmR1YScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAndXJ0Ll9vdHMuX21hci5fYXBpLl9tYWkuX2VrYS5fdXp0Ll9hYnUuX2lyYS5fdXJyLl9hemEuX2FiZS4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdpZ2FuZGVhX2FzdGVsZWhlbmFfYXN0ZWFydGVhX2FzdGVhemtlbmFfb3N0ZWd1bmFfb3N0aXJhbGFfbGFydW5iYXRhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2lnLl9hbC5fYXIuX2F6Ll9vZy5fb2wuX2xyLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnaWdfYWxfYXJfYXpfb2dfb2xfbHInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXScsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgICAgICBsIDogJ1lZWVktTS1EJyxcbiAgICAgICAgICAgIGxsIDogJ1lZWVlba29dIE1NTSBEW2FdJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZW2tvXSBNTU0gRFthXSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbZ2F1cl0gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbYmloYXJdIExUW2V0YW5dJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFRbZXRhbl0nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbYXR6b10gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2F1cnJla29dIGRkZGQgTFRbZXRhbl0nLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIGJhcnJ1JyxcbiAgICAgICAgICAgIHBhc3QgOiAnZHVlbGEgJXMnLFxuICAgICAgICAgICAgcyA6ICdzZWd1bmRvIGJhdHp1aycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvJyxcbiAgICAgICAgICAgIG0gOiAnbWludXR1IGJhdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHUnLFxuICAgICAgICAgICAgaCA6ICdvcmR1IGJhdCcsXG4gICAgICAgICAgICBoaCA6ICclZCBvcmR1JyxcbiAgICAgICAgICAgIGQgOiAnZWd1biBiYXQnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZWd1bicsXG4gICAgICAgICAgICBNIDogJ2hpbGFiZXRlIGJhdCcsXG4gICAgICAgICAgICBNTSA6ICclZCBoaWxhYmV0ZScsXG4gICAgICAgICAgICB5IDogJ3VydGUgYmF0JyxcbiAgICAgICAgICAgIHl5IDogJyVkIHVydGUnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ9uxJyxcbiAgICAgICAgJzInOiAn27InLFxuICAgICAgICAnMyc6ICfbsycsXG4gICAgICAgICc0JzogJ9u0JyxcbiAgICAgICAgJzUnOiAn27UnLFxuICAgICAgICAnNic6ICfbticsXG4gICAgICAgICc3JzogJ9u3JyxcbiAgICAgICAgJzgnOiAn27gnLFxuICAgICAgICAnOSc6ICfbuScsXG4gICAgICAgICcwJzogJ9uwJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ9uxJzogJzEnLFxuICAgICAgICAn27InOiAnMicsXG4gICAgICAgICfbsyc6ICczJyxcbiAgICAgICAgJ9u0JzogJzQnLFxuICAgICAgICAn27UnOiAnNScsXG4gICAgICAgICfbtic6ICc2JyxcbiAgICAgICAgJ9u3JzogJzcnLFxuICAgICAgICAn27gnOiAnOCcsXG4gICAgICAgICfbuSc6ICc5JyxcbiAgICAgICAgJ9uwJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBmYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZhJywge1xuICAgICAgICBtb250aHMgOiAn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfbjF/Yr1/Ys1/ahl/Zvl/YrF/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2YLYqNmEINin2LIg2LjZh9ixfNio2LnYryDYp9iyINi42YfYsS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC/YqNi52K8g2KfYsiDYuNmH2LEvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mC2KjZhCDYp9iyINi42YfYsSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2KjYudivINin2LIg2LjZh9ixJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vYp9mF2LHZiNiyINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vZgdix2K/YpyDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9iv24zYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW9m+24zYtF0gW9iz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2K/YsSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINm+24zYtCcsXG4gICAgICAgICAgICBzIDogJ9qG2YbYryDYq9in2YbbjNmHJyxcbiAgICAgICAgICAgIHNzIDogJ9ir2KfZhtuM2YcgZCUnLFxuICAgICAgICAgICAgbSA6ICfbjNqpINiv2YLbjNmC2YcnLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/ZgtuM2YLZhycsXG4gICAgICAgICAgICBoIDogJ9uM2qkg2LPYp9i52KonLFxuICAgICAgICAgICAgaGggOiAnJWQg2LPYp9i52KonLFxuICAgICAgICAgICAgZCA6ICfbjNqpINix2YjYsicsXG4gICAgICAgICAgICBkZCA6ICclZCDYsdmI2LInLFxuICAgICAgICAgICAgTSA6ICfbjNqpINmF2KfZhycsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdin2YcnLFxuICAgICAgICAgICAgeSA6ICfbjNqpINiz2KfZhCcsXG4gICAgICAgICAgICB5eSA6ICclZCDYs9in2YQnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vbsC3buV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfdmFLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZNmFJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiAxMiAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG51bWJlcnNQYXN0ID0gJ25vbGxhIHlrc2kga2Frc2kga29sbWUgbmVsasOkIHZpaXNpIGt1dXNpIHNlaXRzZW3DpG4ga2FoZGVrc2FuIHloZGVrc8Okbicuc3BsaXQoJyAnKSxcbiAgICAgICAgbnVtYmVyc0Z1dHVyZSA9IFtcbiAgICAgICAgICAgICdub2xsYScsICd5aGRlbicsICdrYWhkZW4nLCAna29sbWVuJywgJ25lbGrDpG4nLCAndmlpZGVuJywgJ2t1dWRlbicsXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs3XSwgbnVtYmVyc1Bhc3RbOF0sIG51bWJlcnNQYXN0WzldXG4gICAgICAgIF07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbXV1dGFtYW4gc2VrdW5uaW4nIDogJ211dXRhbWEgc2VrdW50aSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3Nla3VubmluJyA6ICdzZWt1bnRpYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbWludXV0aW4nIDogJ21pbnV1dHRpJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6QnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkw6QnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1c2knO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3R0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpICsgJyAnICsgcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAoaXNGdXR1cmUgPyBudW1iZXJzRnV0dXJlW251bWJlcl0gOiBudW1iZXJzUGFzdFtudW1iZXJdKSA6IG51bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmaScsIHtcbiAgICAgICAgbW9udGhzIDogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3RhbW1pX2hlbG1pX21hYWxpc19odWh0aV90b3Vrb19rZXPDpF9oZWluw6RfZWxvX3N5eXNfbG9rYV9tYXJyYXNfam91bHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bm51bnRhaV9tYWFuYW50YWlfdGlpc3RhaV9rZXNraXZpaWtrb190b3JzdGFpX3BlcmphbnRhaV9sYXVhbnRhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc3VfbWFfdGlfa2VfdG9fcGVfbGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIERvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC5NLllZWVknLFxuICAgICAgICAgICAgbGwgOiAnRG8gTU1NIFlZWVknLFxuICAgICAgICAgICAgbGxsIDogJ0RvIE1NTSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW3TDpG7DpMOkbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbaHVvbWVubmFdIFtrbG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZWlsZW5dIFtrbG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1t2aWltZV0gZGRkZFtuYV0gW2tsb10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHDDpMOkc3TDpCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpdHRlbicsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZm8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcsOtbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bm51ZGFndXJfbcOhbmFkYWd1cl90w71zZGFndXJfbWlrdWRhZ3VyX2jDs3NkYWd1cl9mcsOtZ2dqYWRhZ3VyX2xleWdhcmRhZ3VyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1bl9tw6FuX3TDvXNfbWlrX2jDs3NfZnLDrV9sZXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3N1X23DoV90w71fbWlfaMOzX2ZyX2xlJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NLCBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW8ONIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW8ONIG1vcmdpbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbw40gZ2rDoXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbc8Otw7BzdHVdIGRkZGQgW2tsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAndW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBzw63DsGFuaScsXG4gICAgICAgICAgICBzIDogJ2bDoSBzZWt1bmQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kaXInLFxuICAgICAgICAgICAgbSA6ICdlaW4gbWludXR0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0dGlyJyxcbiAgICAgICAgICAgIGggOiAnZWluIHTDrW1pJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHTDrW1hcicsXG4gICAgICAgICAgICBkIDogJ2VpbiBkYWd1cicsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNIDogJ2VpbiBtw6FuYcOwaScsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6FuYcOwaXInLFxuICAgICAgICAgICAgeSA6ICdlaXR0IMOhcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDoXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBmckNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2EnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG0gOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkIDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTSA6ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgICAgICB5eSA6ICclZCBhbnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJDYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZyQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jaCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHMgOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQgOiAndW4gam91cicsXG4gICAgICAgICAgICBkZCA6ICclZCBqb3VycycsXG4gICAgICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFucydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBmciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyJywge1xuICAgICAgICBtb250aHMgOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgcyA6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtIDogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8KS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuICdlJyB3aGVuIGRheSBvZiBtb250aCA+IDEuIE1vdmUgdGhpcyBjYXNlIGluc2lkZVxuICAgICAgICAgICAgICAgIC8vIGJsb2NrIGZvciBtYXNjdWxpbmUgd29yZHMgYmVsb3cuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8zMzc1XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWFpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgZnkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmeScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbm5ld2FyaXNfZmVicmV3YXJpc19tYWFydF9hcHJpbF9tYWFpZV9qdW55X2p1bHlfYXVndXN0dXNfc2VwdGltYmVyX29rdG9iZXJfbm92aW1iZXJfZGVzaW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ3NuZWluX21vYW5kZWlfdGlpc2RlaV93b2Fuc2RlaV90b25nZXJzZGVpX2ZyZWVkX3NuZW9uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3NpLl9tby5fdGkuX3dvLl90by5fZnIuX3NvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU2lfTW9fVGlfV29fVG9fRnJfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGpvZWQgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9hcm4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanVzdGVyIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vDtGZyw7tuZV0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29lciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGx5bicsXG4gICAgICAgICAgICBzIDogJ2luIHBlYXIgc2Vrb25kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vrb25kZW4nLFxuICAgICAgICAgICAgbSA6ICdpZW4gbWluw7p0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6ICdpZW4gb2VyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBvZXJlbicsXG4gICAgICAgICAgICBkIDogJ2llbiBkZWknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTSA6ICdpZW4gbW9hbm5lJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vYW5uZW4nLFxuICAgICAgICAgICAgeSA6ICdpZW4gamllcicsXG4gICAgICAgICAgICB5eSA6ICclZCBqaWVycmVuJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgJ0FtIEZhb2lsbGVhY2gnLCAnQW4gR2VhcnJhbicsICdBbSBNw6BydCcsICdBbiBHaWJsZWFuJywgJ0FuIEPDqGl0ZWFuJywgJ0FuIHQtw5JnbWhpb3MnLCAnQW4gdC1JdWNoYXInLCAnQW4gTMO5bmFzdGFsJywgJ0FuIHQtU3VsdGFpbicsICdBbiBEw6BtaGFpcicsICdBbiB0LVNhbWhhaW4nLCAnQW4gRMO5YmhsYWNoZCdcbiAgICBdO1xuXG4gICAgdmFyIG1vbnRoc1Nob3J0ID0gWydGYW9pJywgJ0dlYXInLCAnTcOgcnQnLCAnR2libCcsICdDw6hpdCcsICfDkmdtaCcsICdJdWNoJywgJ0zDuW4nLCAnU3VsdCcsICdEw6BtaCcsICdTYW1oJywgJ0TDuWJoJ107XG5cbiAgICB2YXIgd2Vla2RheXMgPSBbJ0RpZMOybWhuYWljaCcsICdEaWx1YWluJywgJ0RpbcOgaXJ0JywgJ0RpY2lhZGFpbicsICdEaWFyZGFvaW4nLCAnRGloYW9pbmUnLCAnRGlzYXRoYWlybmUnXTtcblxuICAgIHZhciB3ZWVrZGF5c1Nob3J0ID0gWydEaWQnLCAnRGlsJywgJ0RpbScsICdEaWMnLCAnRGlhJywgJ0RpaCcsICdEaXMnXTtcblxuICAgIHZhciB3ZWVrZGF5c01pbiA9IFsnRMOyJywgJ0x1JywgJ03DoCcsICdDaScsICdBcicsICdIYScsICdTYSddO1xuXG4gICAgdmFyIGdkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2QnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbiA6IHdlZWtkYXlzTWluLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tBLW3DoGlyZWFjaCBhaWddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2FpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbc2VvIGNoYWlkaF0gW2FpZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2FubiBhbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2JobyBjaGlvbm4gJXMnLFxuICAgICAgICAgICAgcyA6ICdiZWFnYW4gZGlvZ2FuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRpb2dhbicsXG4gICAgICAgICAgICBtIDogJ21pb25haWQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWlvbmFpZGVhbicsXG4gICAgICAgICAgICBoIDogJ3VhaXInLFxuICAgICAgICAgICAgaGggOiAnJWQgdWFpcmVhbicsXG4gICAgICAgICAgICBkIDogJ2xhdGhhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGxhdGhhJyxcbiAgICAgICAgICAgIE0gOiAnbcOsb3MnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOsb3NhbicsXG4gICAgICAgICAgICB5IDogJ2JsaWFkaG5hJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGJsaWFkaG5hJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnZCcgOiBudW1iZXIgJSAxMCA9PT0gMiA/ICduYScgOiAnbWgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBnbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dsJywge1xuICAgICAgICBtb250aHMgOiAneGFuZWlyb19mZWJyZWlyb19tYXJ6b19hYnJpbF9tYWlvX3h1w7FvX3h1bGxvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd4YW4uX2ZlYi5fbWFyLl9hYnIuX21haS5feHXDsS5feHVsLl9hZ28uX3NldC5fb3V0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuc19tYXJ0ZXNfbcOpcmNvcmVzX3hvdmVzX3ZlbnJlc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX23DqXIuX3hvdi5fdmVuLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbcOpX3hvX3ZlX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3hlICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDscOhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29udGUgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoScgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29dIGRkZGQgW3Bhc2FkbyAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJ3VuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICduJyArIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbiAnICsgc3RyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFpICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bmhhIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5vJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3MnOiBbJ3Rob2RkZSBzZWNvbmRhbmltJywgJ3Rob2RkZSBzZWNvbmQnXSxcbiAgICAgICAgICAgICdzcyc6IFtudW1iZXIgKyAnIHNlY29uZGFuaW0nLCBudW1iZXIgKyAnIHNlY29uZCddLFxuICAgICAgICAgICAgJ20nOiBbJ2VrYSBtaW50YW4nLCAnZWsgbWludXRlJ10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW50YW5pbScsIG51bWJlciArICcgbWludGFtJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWthIGhvcmFuJywgJ2VrIGhvciddLFxuICAgICAgICAgICAgJ2hoJzogW251bWJlciArICcgaG9yYW5pbScsIG51bWJlciArICcgaG9yYW0nXSxcbiAgICAgICAgICAgICdkJzogWydla2EgZGlzYW4nLCAnZWsgZGlzJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBkaXNhbmltJywgbnVtYmVyICsgJyBkaXMnXSxcbiAgICAgICAgICAgICdNJzogWydla2EgbWhvaW5lYW4nLCAnZWsgbWhvaW5vJ10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBtaG9pbmVhbmltJywgbnVtYmVyICsgJyBtaG9pbmUnXSxcbiAgICAgICAgICAgICd5JzogWydla2Egdm9yc2FuJywgJ2VrIHZvcm9zJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyB2b3JzYW5pbScsIG51bWJlciArICcgdm9yc2FtJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBnb21MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ29tLWxhdG4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTWFyc19BYnIuX01haV9KdW5fSnVsLl9BZ28uX1NldC5fT3R1Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaXRhcl9Tb21hcl9Nb25nbGxhcl9CdWR2YXJfQnJlc3Rhcl9TdWtyYXJfU29uXFwndmFyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0FpdC5fU29tLl9Nb24uX0J1ZC5fQnJlLl9TdWsuX1Nvbi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0FpX1NtX01vX0J1X0JyX1N1X1NuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MgW3ZhenRhXScsXG4gICAgICAgICAgICBMIDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTVthY2hlYV0gRG8sIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBbdmF6dGFdJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQWl6XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ZhbGVhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbSWV0YSB0b10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0thbF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRmF0bG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZGltJyxcbiAgICAgICAgICAgIHMgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3MgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGVyKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ2VyJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ2VyJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3JhdGl8c29rYWxsaXxkb25wYXJhbXxzYW5qZS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdyYXRpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29rYWxsaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdkb25wYXJhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzYW5qZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmF0aSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29rYWxsaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9ucGFyYW0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NhbmplJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvbUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAnMSc6ICfgq6cnLFxuICAgICAgICAgICAgJzInOiAn4KuoJyxcbiAgICAgICAgICAgICczJzogJ+CrqScsXG4gICAgICAgICAgICAnNCc6ICfgq6onLFxuICAgICAgICAgICAgJzUnOiAn4KurJyxcbiAgICAgICAgICAgICc2JzogJ+CrrCcsXG4gICAgICAgICAgICAnNyc6ICfgq60nLFxuICAgICAgICAgICAgJzgnOiAn4KuuJyxcbiAgICAgICAgICAgICc5JzogJ+CrrycsXG4gICAgICAgICAgICAnMCc6ICfgq6YnXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgq6cnOiAnMScsXG4gICAgICAgICAgICAn4KuoJzogJzInLFxuICAgICAgICAgICAgJ+CrqSc6ICczJyxcbiAgICAgICAgICAgICfgq6onOiAnNCcsXG4gICAgICAgICAgICAn4KurJzogJzUnLFxuICAgICAgICAgICAgJ+CrrCc6ICc2JyxcbiAgICAgICAgICAgICfgq60nOiAnNycsXG4gICAgICAgICAgICAn4KuuJzogJzgnLFxuICAgICAgICAgICAgJ+Crryc6ICc5JyxcbiAgICAgICAgICAgICfgq6YnOiAnMCdcbiAgICAgICAgfTtcblxuICAgIHZhciBndSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2d1Jywge1xuICAgICAgICBtb250aHM6ICfgqpzgqr7gqqjgq43gqq/gq4HgqobgqrDgq4Bf4Kqr4KuH4Kqs4KuN4Kqw4KuB4KqG4Kqw4KuAX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr/gqrJf4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr7gqohf4KqR4KqX4Kq44KuN4KqfX+CquOCqquCrjeCqn+Crh+CqruCrjeCqrOCqsF/gqpHgqpXgq43gqp/gq43gqqzgqrBf4Kqo4Kq14KuH4Kqu4KuN4Kqs4KqwX+CqoeCqv+CquOCrh+CqruCrjeCqrOCqsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgqpzgqr7gqqjgq43gqq/gq4EuX+Cqq+Crh+CqrOCrjeCqsOCrgS5f4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqvy5f4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr4uX+CqkeCqly5f4Kq44Kqq4KuN4Kqf4KuHLl/gqpHgqpXgq43gqp/gq40uX+CqqOCqteCrhy5f4Kqh4Kq/4Kq44KuHLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgqrDgqrXgqr/gqrXgqr7gqrBf4Kq44KuL4Kqu4Kq14Kq+4KqwX+CqruCqguCql+Cqs+CqteCqvuCqsF/gqqzgq4Hgqqfgq43gqrXgqr7gqrBf4KqX4KuB4Kqw4KuB4Kq14Kq+4KqwX+CqtuCrgeCqleCrjeCqsOCqteCqvuCqsF/gqrbgqqjgqr/gqrXgqr7gqrAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgqrDgqrXgqr9f4Kq44KuL4KquX+CqruCqguCql+Cqs1/gqqzgq4Hgqqfgq41f4KqX4KuB4Kqw4KuBX+CqtuCrgeCqleCrjeCqsF/gqrbgqqjgqr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KqwX+CquOCri1/gqq7gqoJf4Kqs4KuBX+Cql+CrgV/gqrbgq4Ff4Kq2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CqhuCqnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgqpfgqofgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CqquCqvuCqm+CqsuCqvl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCqruCqvicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4Kqq4KuH4Kq54Kqy4Kq+JyxcbiAgICAgICAgICAgIHM6ICfgqoXgqq7gq4HgqpUg4Kqq4Kqz4KuLJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Kq44KuH4KqV4KqC4KqhJyxcbiAgICAgICAgICAgIG06ICfgqo/gqpUg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIGg6ICfgqo/gqpUg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGQ6ICfgqo/gqpUg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIE06ICfgqo/gqpUg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIHk6ICfgqo/gqpUg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kq14Kqw4KuN4Kq3J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kun4Kuo4Kup4Kuq4Kur4Kus4Kut4Kuu4Kuv4KumXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHdWphcmF0aSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBHdWphcmF0aS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CqsOCqvuCqpHzgqqzgqqrgq4vgqrB84Kq44Kq14Kq+4KqwfOCquOCqvuCqguCqnC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CqsOCqvuCqpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqteCqvuCqsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqqzgqqrgq4vgqrAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqvuCqguCqnCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrDgqr7gqqQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CquOCqteCqvuCqsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqs4Kqq4KuL4KqwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrjgqr7gqoLgqpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBoZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hlJywge1xuICAgICAgICBtb250aHMgOiAn15nXoNeV15DXqF/XpNeR16jXldeQ16hf157XqNelX9eQ16TXqNeZ15xf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXkteV16HXmF/Xodek15jXnteR16hf15DXlden15jXldeR16hf16DXldeR157XkdeoX9eT16bXnteR16gnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9eZ16DXldezX9ek15HXqNezX9ee16jXpV/XkNek16jXs1/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS17Nf16HXpNeY17Nf15DXlden17Nf16DXldeR17Nf15PXptee17MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9eo15DXqdeV159f16nXoNeZX9ep15zXmdep15lf16jXkdeZ16LXmV/Xl9ee15nXqdeZX9ep15nXqdeZX9ep15HXqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfXkNezX9eR17Nf15LXs1/Xk9ezX9eU17Nf15XXs1/XqdezJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfXkF/XkV/Xkl/Xk1/XlF/XlV/XqScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW9eRXU1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vXlNeZ15XXnSDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9ee15fXqCDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9eR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vXkNeq157XldecINeR1r5dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9eR15nXldedXSBkZGRkIFvXlNeQ15fXqNeV158g15HXqdei15RdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfXkdei15XXkyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9ec16TXoNeZICVzJyxcbiAgICAgICAgICAgIHMgOiAn157Xodek16gg16nXoNeZ15XXqicsXG4gICAgICAgICAgICBzcyA6ICclZCDXqdeg15nXldeqJyxcbiAgICAgICAgICAgIG0gOiAn15PXp9eUJyxcbiAgICAgICAgICAgIG1tIDogJyVkINeT16fXldeqJyxcbiAgICAgICAgICAgIGggOiAn16nXoteUJyxcbiAgICAgICAgICAgIGhoIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXqdei16rXmdeZ150nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdei15XXqic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZCA6ICfXmdeV150nLFxuICAgICAgICAgICAgZGQgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9eZ15XXnteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeZ157XmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBNIDogJ9eX15XXk9epJyxcbiAgICAgICAgICAgIE1NIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXl9eV15PXqdeZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeX15XXk9ep15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeSA6ICfXqdeg15QnLFxuICAgICAgICAgICAgeXkgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16DXqteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgJSAxMCA9PT0gMCAmJiBudW1iZXIgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXlCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXmdedJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9eQ15fXlFwi16Z815zXpNeg15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNec16TXoNeZINeU16bXlNeo15nXmdedfNec16TXoNeV16og15HXlden16h815HXkdeV16fXqHzXkdei16jXkS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o15DXl9eUXCLXpnzXkNeX16jXmSDXlNem15TXqNeZ15nXnXzXkdei16jXkSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9ec16TXoNeV16og15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXnNek16DXlFwi16YnIDogJ9ec16TXoNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15DXl9eUXCLXpicgOiAn15DXl9eo15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR16LXqNeRJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgpacnLFxuICAgICAgICAnMic6ICfgpagnLFxuICAgICAgICAnMyc6ICfgpaknLFxuICAgICAgICAnNCc6ICfgpaonLFxuICAgICAgICAnNSc6ICfgpasnLFxuICAgICAgICAnNic6ICfgpawnLFxuICAgICAgICAnNyc6ICfgpa0nLFxuICAgICAgICAnOCc6ICfgpa4nLFxuICAgICAgICAnOSc6ICfgpa8nLFxuICAgICAgICAnMCc6ICfgpaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICfgpaYnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGhpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGknLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KS84KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSu4KWN4KSs4KSwX+CkpuCkv+CkuOCkruCljeCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4KSc4KSoLl/gpKvgpLzgpLAuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYguX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpIXgpJcuX+CkuOCkv+CkpC5f4KSF4KSV4KWN4KSf4KWCLl/gpKjgpLUuX+CkpuCkv+CkuC4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSy4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cksl/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkleCksl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4KSq4KS/4KSb4KSy4KWHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4KSu4KWH4KSCJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KSq4KS54KSy4KWHJyxcbiAgICAgICAgICAgIHMgOiAn4KSV4KWB4KSbIOCkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4KS44KWH4KSV4KSC4KShJyxcbiAgICAgICAgICAgIG0gOiAn4KSP4KSVIOCkruCkv+CkqOCknycsXG4gICAgICAgICAgICBtbSA6ICclZCDgpK7gpL/gpKjgpJ8nLFxuICAgICAgICAgICAgaCA6ICfgpI/gpJUg4KSY4KSC4KSf4KS+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCkmOCkguCkn+ClhycsXG4gICAgICAgICAgICBkIDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE0gOiAn4KSP4KSVIOCkruCkueClgOCkqOClhycsXG4gICAgICAgICAgICBNTSA6ICclZCDgpK7gpLngpYDgpKjgpYcnLFxuICAgICAgICAgICAgeSA6ICfgpI/gpJUg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCkteCksOCljeCktydcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSGluZGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gSGluZGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKR84KS44KWB4KSs4KS5fOCkpuCli+CkquCkueCksHzgpLbgpL7gpK4vLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KWB4KSs4KS5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCli+CkquCkueCksCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS24KS+4KSuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOClgeCkrOCkuSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWL4KSq4KS54KSwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLbgpL7gpK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdocicsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2lqZcSNbmphX3ZlbGphxI1lX2/FvnVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzaWplxI1hbmpfdmVsamHEjWFfb8W+dWpha190cmF2YW5qX3N2aWJhbmpfbGlwYW5qX3NycGFual9rb2xvdm96X3J1amFuX2xpc3RvcGFkX3N0dWRlbmlfcHJvc2luYWMnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnc2lqLl92ZWxqLl9vxb51Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgd2Vla0VuZGluZ3MgPSAndmFzw6FybmFwIGjDqXRmxZFuIGtlZGRlbiBzemVyZMOhbiBjc8O8dMO2cnTDtmvDtm4gcMOpbnRla2VuIHN6b21iYXRvbicuc3BsaXQoJyAnKTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW0gPSBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpID8gJ27DqWjDoW55IG3DoXNvZHBlcmMnIDogJ27DqWjDoW55IG3DoXNvZHBlcmNlJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpID8gJyBtw6Fzb2RwZXJjJyA6ICcgbcOhc29kcGVyY2UnO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIHBlcmMnIDogJyBwZXJjZScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgcGVyYycgOiAnIHBlcmNlJyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOzcmEnIDogJyDDs3LDoWphJyk7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgbmFwJyA6ICcgbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gKGlzRnV0dXJlID8gJycgOiAnW23Dumx0XSAnKSArICdbJyArIHdlZWtFbmRpbmdzW3RoaXMuZGF5KCldICsgJ10gTFRbLWtvcl0nO1xuICAgIH1cblxuICAgIHZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgICAgICBtb250aHMgOiAnamFudcOhcl9mZWJydcOhcl9tw6FyY2l1c1/DoXByaWxpc19tw6FqdXNfasO6bml1c19qw7psaXVzX2F1Z3VzenR1c19zemVwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX23DoXJjX8OhcHJfbcOhal9qw7puX2rDumxfYXVnX3N6ZXB0X29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3Zhc19ow6l0X2tlZGRfc3plX2Nzw7x0X3DDqW5fc3pvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd2X2hfa19zemVfY3NfcF9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkuIE1NTU0gRC4nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkuIE1NTU0gRC4gSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RlfGR1L2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgxKS50b0xvd2VyQ2FzZSgpID09PSAndSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2RlJyA6ICdERSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2R1JyA6ICdEVSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbbWFdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWsuY2FsbCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1t0ZWduYXBdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBtw7psdmEnLFxuICAgICAgICAgICAgcGFzdCA6ICclcycsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBodTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGh5QW0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoeS1hbScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn1bDVuNaC1bbVvtWh1oDVq1/Wg9Wl1b/WgNW+1aHWgNWrX9W01aHWgNW/1atf1aHVutaA1avVrNWrX9W01aHVtdWr1b3Vq1/VsNW41oLVttWr1b3Vq1/VsNW41oLVrNWr1b3Vq1/WhdWj1bjVvdW/1bjVvdWrX9W91aXVutW/1aXVtNWi1aXWgNWrX9Ww1bjVr9W/1aXVtNWi1aXWgNWrX9W21bjVtdWl1bTVotWl1oDVq1/VpNWl1a/Vv9Wl1bTVotWl1oDVqycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfVsNW41oLVttW+1aHWgF/Wg9Wl1b/WgNW+1aHWgF/VtNWh1oDVv1/VodW61oDVq9WsX9W01aHVtdWr1b1f1bDVuNaC1bbVq9W9X9Ww1bjWgtWs1avVvV/WhdWj1bjVvdW/1bjVvV/VvdWl1brVv9Wl1bTVotWl1oBf1bDVuNWv1b/VpdW01aLVpdaAX9W21bjVtdWl1bTVotWl1oBf1aTVpdWv1b/VpdW01aLVpdaAJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9Ww1bbVvl/Wg9W/1oBf1bTWgNW/X9Wh1brWgF/VtNW11b1f1bDVttW9X9Ww1azVvV/WhdWj1b1f1b3VutW/X9Ww1a/Vv1/VttW01aJf1aTVr9W/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfVr9Wr1oDVodWv1atf1aXWgNWv1bjWgtW31aHVotWp1atf1aXWgNWl1oTVt9Wh1aLVqdWrX9W51bjWgNWl1oTVt9Wh1aLVqdWrX9Ww1avVttWj1bfVodWi1anVq1/VuNaC1oDVotWh1alf1bfVodWi1aHVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDVqS4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDVqS4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb1aHVtdW91oXWgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vVvtWh1bLVqF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vVpdaA1aXVr10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdb1aHVttaB1aHVrl0gZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg1bDVpdW/1bgnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDVodW81aHVuycsXG4gICAgICAgICAgICBzIDogJ9W01asg1oTVodW21asg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgICAgICBzcyA6ICclZCDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIG0gOiAn1oDVuNW61aUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg1oDVuNW61aUnLFxuICAgICAgICAgICAgaCA6ICfVqtWh1bQnLFxuICAgICAgICAgICAgaGggOiAnJWQg1arVodW0JyxcbiAgICAgICAgICAgIGQgOiAn1oXWgCcsXG4gICAgICAgICAgICBkZCA6ICclZCDWhdaAJyxcbiAgICAgICAgICAgIE0gOiAn1aHVtNWr1b0nLFxuICAgICAgICAgICAgTU0gOiAnJWQg1aHVtNWr1b0nLFxuICAgICAgICAgICAgeSA6ICfVv9Wh1oDVqycsXG4gICAgICAgICAgICB5eSA6ICclZCDVv9Wh1oDVqydcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9Wj1avVt9Wl1oDVvtWhfNWh1bzVodW+1bjVv9W+1aF81oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVti8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYpJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aPVq9W31aXWgNW+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wh1bzVodW+1bjVv9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9aB1aXWgNWl1a/VvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVpdaA1aXVr9W41bXVodW2JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9fFxcZHsxLDJ9LSjVq9W2fNaA1aQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREbyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdWr1bYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdaA1aQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGh5QW07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBpZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lkJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyaV9GZWJydWFyaV9NYXJldF9BcHJpbF9NZWlfSnVuaV9KdWxpX0FndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3RfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdNaW5nZ3VfU2VuaW5fU2VsYXNhX1JhYnVfS2FtaXNfSnVtYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTWluX1Nlbl9TZWxfUmFiX0thbV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpYW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb3JlJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NpYW5nJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29yZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tCZXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2xhbHUgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGFsdScsXG4gICAgICAgICAgICBzIDogJ2JlYmVyYXBhIGRldGlrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG0gOiAnc2VtZW5pdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoIDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGphbScsXG4gICAgICAgICAgICBkIDogJ3NlaGFyaScsXG4gICAgICAgICAgICBkZCA6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE0gOiAnc2VidWxhbicsXG4gICAgICAgICAgICBNTSA6ICclZCBidWxhbicsXG4gICAgICAgICAgICB5IDogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgdGFodW4nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICBpZiAobiAlIDEwMCA9PT0gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG4gJSAxMCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdub2trcmFyIHNla8O6bmR1cicgOiAnbm9ra3J1bSBzZWvDum5kdW0nO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2Vrw7puZHVyJyA6ICdzZWvDum5kdW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWvDum5kYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtw61uw7p0YScgOiAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbcOtbsO6dHVyJyA6ICdtw61uw7p0dW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAna2x1a2t1c3R1bmRpcicgOiAna2x1a2t1c3R1bmR1bScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2tsdWtrdXN0dW5kJztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFnYXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnYScgOiAnZMO2Z3VtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ2RhZycgOiAnZGVnaScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtw6FudcOwdXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwaXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsGknIDogJ23DoW51w7B1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7B1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcnVtJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcmknKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lzJywge1xuICAgICAgICBtb250aHMgOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWHDrV9qw7puX2rDumxfw6Fnw7pfc2VwX29rdF9uw7N2X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3VubnVkYWd1cl9tw6FudWRhZ3VyX8O+cmnDsGp1ZGFndXJfbWnDsHZpa3VkYWd1cl9maW1tdHVkYWd1cl9mw7ZzdHVkYWd1cl9sYXVnYXJkYWd1cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nw6Ffw55yX01pX0ZpX0bDtl9MYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbw60gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbw6EgbW9yZ3VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vDrSBnw6ZyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3PDrcOwYXN0YV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZWZ0aXIgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdmeXJpciAlcyBzw63DsGFuJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiAna2x1a2t1c3R1bmQnLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGl0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoL15bMC05XS4rJC8pLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0IDogJyVzIGZhJyxcbiAgICAgICAgICAgIHMgOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaCA6ICd1blxcJ29yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBvcmUnLFxuICAgICAgICAgICAgZCA6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzZScsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm5pJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgamEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqYScsIHtcbiAgICAgICAgbW9udGhzIDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pel5puc5pelX+aciOabnOaXpV/ngavmm5zml6Vf5rC05puc5pelX+acqOabnOaXpV/ph5Hmm5zml6Vf5Zyf5puc5pelJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6UgZGRkZCBISDptbScsXG4gICAgICAgICAgICBsIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TeaciETml6UoZGRkKSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WNiOWJjXzljYjlvowvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn5Y2I5b6MJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfljYjliY0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOW+jCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb5LuK5pelXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vmmI7ml6VdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpIDwgdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5p2l6YCxXWRkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOaXpV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2VlaygpIDwgbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vlhYjpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfeaXpS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5pWw56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVk56eSJyxcbiAgICAgICAgICAgIG0gOiAnMeWIhicsXG4gICAgICAgICAgICBtbSA6ICclZOWIhicsXG4gICAgICAgICAgICBoIDogJzHmmYLplpMnLFxuICAgICAgICAgICAgaGggOiAnJWTmmYLplpMnLFxuICAgICAgICAgICAgZCA6ICcx5pelJyxcbiAgICAgICAgICAgIGRkIDogJyVk5pelJyxcbiAgICAgICAgICAgIE0gOiAnMeODtuaciCcsXG4gICAgICAgICAgICBNTSA6ICclZOODtuaciCcsXG4gICAgICAgICAgICB5IDogJzHlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWTlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGp2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnanYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0Fnc19TZXBfT2t0X05vcF9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ01pbmdndV9TZW5lbl9TZWxvc29fUmVidV9LZW1pc19KZW11d2FoX1NlcHR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTWdfU25fU2xfUmJfS21fSm1fU3AnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9lbmppbmd8c2l5YW5nfHNvbnRlbnxuZGFsdS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdlbmppbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2l5YW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb250ZW4nIHx8IG1lcmlkaWVtID09PSAnbmRhbHUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbmppbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb250ZW4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25kYWx1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tEaW50ZW4gcHVuaWtvIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0thbGEgd2luZ2kgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3dvbnRlbiBpbmcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBpbmdrYW5nIGtlcGVuZ2tlcicsXG4gICAgICAgICAgICBzIDogJ3Nhd2V0YXdpcyBkZXRpaycsXG4gICAgICAgICAgICBzcyA6ICclZCBkZXRpaycsXG4gICAgICAgICAgICBtIDogJ3NldHVuZ2dhbCBtZW5pdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoIDogJ3NldHVuZ2dhbCBqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VkaW50ZW4nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGludGVuJyxcbiAgICAgICAgICAgIE0gOiAnc2V3dWxhbicsXG4gICAgICAgICAgICBNTSA6ICclZCB3dWxhbicsXG4gICAgICAgICAgICB5IDogJ3NldGF1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YXVuJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGthID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2EnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg5hf4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOYX+GDm+GDkOGDoOGDouGDmF/hg5Dhg57hg6Dhg5jhg5rhg5hf4YOb4YOQ4YOY4YOh4YOYX+GDmOGDleGDnOGDmOGDoeGDmF/hg5jhg5Xhg5rhg5jhg6Hhg5hf4YOQ4YOS4YOV4YOY4YOh4YOi4YOdX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDmF/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg5hf4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOYX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDmCcuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ+GDmOGDkOGDnOGDleGDkOGDoOGDoV/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg6Ff4YOb4YOQ4YOg4YOi4YOhX+GDkOGDnuGDoOGDmOGDmuGDmOGDoV/hg5vhg5Dhg5jhg6Hhg6Ff4YOY4YOV4YOc4YOY4YOh4YOhX+GDmOGDleGDmuGDmOGDoeGDoV/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg6Ff4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOhX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDoV/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg6Ff4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOhJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+GDmOGDkOGDnF/hg5fhg5Thg5Ff4YOb4YOQ4YOgX+GDkOGDnuGDoF/hg5vhg5Dhg5hf4YOY4YOV4YOcX+GDmOGDleGDml/hg5Dhg5Lhg5Vf4YOh4YOU4YOlX+GDneGDpeGDol/hg5zhg53hg5Rf4YOT4YOU4YOZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfhg5nhg5Xhg5jhg6Dhg5Bf4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDmF/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDmF/hg6jhg5Dhg5Hhg5Dhg5fhg5gnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICfhg5nhg5Xhg5jhg6Dhg5Dhg6Ff4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDoV/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDoV/hg6jhg5Dhg5Hhg5Dhg5fhg6EnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogLyjhg6zhg5jhg5zhg5B84YOo4YOU4YOb4YOT4YOU4YOSKS9cbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+GDmeGDlV/hg53hg6Bf4YOh4YOQX+GDneGDl1/hg67hg6Nf4YOe4YOQX+GDqOGDkCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vhg5Phg6bhg5Thg6FdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+GDruGDleGDkOGDml0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4YOS4YOj4YOo4YOY4YOcXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4YOo4YOU4YOb4YOT4YOU4YOSXSBkZGRkIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vhg6zhg5jhg5zhg5BdIGRkZGQgTFQt4YOW4YOUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDrOGDlOGDmuGDmCkvKS50ZXN0KHMpID9cbiAgICAgICAgICAgICAgICAgICAgcy5yZXBsYWNlKC/hg5gkLywgJ+GDqOGDmCcpIDpcbiAgICAgICAgICAgICAgICAgICAgcyArICfhg6jhg5gnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIGlmICgoLyjhg6zhg5Dhg5vhg5h84YOs4YOj4YOX4YOYfOGDoeGDkOGDkOGDl+GDmHzhg5Phg6bhg5R84YOX4YOV4YOUKS8pLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKOGDmHzhg5QpJC8sICfhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoL+GDrOGDlOGDmuGDmC8pLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgv4YOs4YOU4YOa4YOYJC8sICfhg6zhg5rhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHMgOiAn4YOg4YOQ4YOb4YOT4YOU4YOc4YOY4YOb4YOUIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBzcyA6ICclZCDhg6zhg5Dhg5vhg5gnLFxuICAgICAgICAgICAgbSA6ICfhg6zhg6Phg5fhg5gnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIGggOiAn4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOGDoeGDkOGDkOGDl+GDmCcsXG4gICAgICAgICAgICBkIDogJ+GDk+GDpuGDlCcsXG4gICAgICAgICAgICBkZCA6ICclZCDhg5Phg6bhg5QnLFxuICAgICAgICAgICAgTSA6ICfhg5fhg5Xhg5QnLFxuICAgICAgICAgICAgTU0gOiAnJWQg4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIHkgOiAn4YOs4YOU4YOa4YOYJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOGDrOGDlOGDmuGDmCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLzB8MS3hg5rhg5h84YOb4YOULVxcZHsxLDJ9fFxcZHsxLDJ9LeGDlC8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5rhg5gnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChudW1iZXIgPCAyMCkgfHwgKG51bWJlciA8PSAxMDAgJiYgKG51bWJlciAlIDIwID09PSAwKSkgfHwgKG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GDm+GDlC0nICsgbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOUJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsXG4gICAgICAgICAgICBkb3kgOiA3XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGI0ZYnLFxuICAgICAgICAxOiAnLdGI0ZYnLFxuICAgICAgICAyOiAnLdGI0ZYnLFxuICAgICAgICAzOiAnLdGI0ZYnLFxuICAgICAgICA0OiAnLdGI0ZYnLFxuICAgICAgICA1OiAnLdGI0ZYnLFxuICAgICAgICA2OiAnLdGI0YsnLFxuICAgICAgICA3OiAnLdGI0ZYnLFxuICAgICAgICA4OiAnLdGI0ZYnLFxuICAgICAgICA5OiAnLdGI0YsnLFxuICAgICAgICAxMDogJy3RiNGLJyxcbiAgICAgICAgMjA6ICct0YjRiycsXG4gICAgICAgIDMwOiAnLdGI0YsnLFxuICAgICAgICA0MDogJy3RiNGLJyxcbiAgICAgICAgNTA6ICct0YjRlicsXG4gICAgICAgIDYwOiAnLdGI0YsnLFxuICAgICAgICA3MDogJy3RiNGWJyxcbiAgICAgICAgODA6ICct0YjRlicsXG4gICAgICAgIDkwOiAnLdGI0YsnLFxuICAgICAgICAxMDA6ICct0YjRlidcbiAgICB9O1xuXG4gICAgdmFyIGtrID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2snLCB7XG4gICAgICAgIG1vbnRocyA6ICfSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9Kb0LDSo1/QsNKb0L9f0L3QsNGDX9GB05nRg1/QvNCw0Lxf0LzQsNGDX9GI0ZbQu1/RgtCw0Lxf0pvRi9GAX9Kb0LDQt1/Sm9Cw0YBf0LbQtdC7Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQttC10LrRgdC10L3QsdGWX9C00q/QudGB0LXQvdCx0ZZf0YHQtdC50YHQtdC90LHRll/RgdOZ0YDRgdC10L3QsdGWX9Cx0LXQudGB0LXQvdCx0ZZf0LbSsdC80LBf0YHQtdC90LHRlicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C20Lpf0LTQuV/RgdC5X9GB0YBf0LHQuV/QttC8X9GB0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9CV0YDRgtC10qMg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0qNdIGRkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDRltGI0ZbQvdC00LUnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQsdKx0YDRi9C9JyxcbiAgICAgICAgICAgIHMgOiAn0LHRltGA0L3QtdGI0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtIDogJ9Cx0ZbRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaCA6ICfQsdGW0YAg0YHQsNKT0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdCw0pPQsNGCJyxcbiAgICAgICAgICAgIGQgOiAn0LHRltGAINC60q/QvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTSA6ICfQsdGW0YAg0LDQuScsXG4gICAgICAgICAgICBNTSA6ICclZCDQsNC5JyxcbiAgICAgICAgICAgIHkgOiAn0LHRltGAINC20YvQuycsXG4gICAgICAgICAgICB5eSA6ICclZCDQttGL0LsnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YjRlnzRiNGLKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfhn6EnLFxuICAgICAgICAnMic6ICfhn6InLFxuICAgICAgICAnMyc6ICfhn6MnLFxuICAgICAgICAnNCc6ICfhn6QnLFxuICAgICAgICAnNSc6ICfhn6UnLFxuICAgICAgICAnNic6ICfhn6YnLFxuICAgICAgICAnNyc6ICfhn6cnLFxuICAgICAgICAnOCc6ICfhn6gnLFxuICAgICAgICAnOSc6ICfhn6knLFxuICAgICAgICAnMCc6ICfhn6AnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4Z+hJzogJzEnLFxuICAgICAgICAn4Z+iJzogJzInLFxuICAgICAgICAn4Z+jJzogJzMnLFxuICAgICAgICAn4Z+kJzogJzQnLFxuICAgICAgICAn4Z+lJzogJzUnLFxuICAgICAgICAn4Z+mJzogJzYnLFxuICAgICAgICAn4Z+nJzogJzcnLFxuICAgICAgICAn4Z+oJzogJzgnLFxuICAgICAgICAn4Z+pJzogJzknLFxuICAgICAgICAn4Z+gJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgICAgICBtb250aHM6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Z6i4Z62X+GehV/hnqJf4Z6WX+GeluGfkuGeml/hnp/hnrtf4Z6fJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Z6W4Z+S4Z6a4Z654Z6AfOGem+GfkuGehOGetuGehS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GeluGfkuGemuGeueGegCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Z6Q4Z+S4Z6E4Z+D4Z6T4Z+B4Z+HIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhnpjhn5Lhnp/hnrfhnpvhnpjhnrfhnokg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4Z6R4Z+A4Z6PJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+GemOGeu+GekycsXG4gICAgICAgICAgICBzOiAn4Z6U4Z+J4Z674Z6T4Z+S4Z6Y4Z624Z6T4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIG06ICfhnpjhnr3hnpnhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbW06ICclZCDhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgaDogJ+GemOGeveGemeGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBoaDogJyVkIOGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBkOiAn4Z6Y4Z694Z6Z4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIE06ICfhnpjhnr3hnpnhnoHhn4InLFxuICAgICAgICAgICAgTU06ICclZCDhnoHhn4InLFxuICAgICAgICAgICAgeTogJ+GemOGeveGemeGehuGfkuGek+GetuGfhicsXG4gICAgICAgICAgICB5eTogJyVkIOGehuGfkuGek+GetuGfhidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hnpHhnrhcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAn4Z6R4Z64JWQnLFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Z+h4Z+i4Z+j4Z+k4Z+l4Z+m4Z+n4Z+o4Z+p4Z+gXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGttO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgs6cnLFxuICAgICAgICAnMic6ICfgs6gnLFxuICAgICAgICAnMyc6ICfgs6knLFxuICAgICAgICAnNCc6ICfgs6onLFxuICAgICAgICAnNSc6ICfgs6snLFxuICAgICAgICAnNic6ICfgs6wnLFxuICAgICAgICAnNyc6ICfgs60nLFxuICAgICAgICAnOCc6ICfgs64nLFxuICAgICAgICAnOSc6ICfgs68nLFxuICAgICAgICAnMCc6ICfgs6YnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgs6cnOiAnMScsXG4gICAgICAgICfgs6gnOiAnMicsXG4gICAgICAgICfgs6knOiAnMycsXG4gICAgICAgICfgs6onOiAnNCcsXG4gICAgICAgICfgs6snOiAnNScsXG4gICAgICAgICfgs6wnOiAnNicsXG4gICAgICAgICfgs60nOiAnNycsXG4gICAgICAgICfgs64nOiAnOCcsXG4gICAgICAgICfgs68nOiAnOScsXG4gICAgICAgICfgs6YnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGtuID0gbW9tZW50LmRlZmluZUxvY2FsZSgna24nLCB7XG4gICAgICAgIG1vbnRocyA6ICfgspzgsqjgsrXgsrDgsr9f4LKr4LOG4LKs4LON4LKw4LK14LKw4LK/X+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrOCysOCzjV/gsoXgspXgs43gsp/gs4bgs4Lgs5XgsqzgsrDgs41f4LKo4LK14LOG4LKC4LKs4LKw4LONX+CyoeCyv+CyuOCzhuCyguCyrOCysOCzjScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LKc4LKoX+Cyq+CzhuCyrOCzjeCysF/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoJf4LKF4LKV4LON4LKf4LOG4LOC4LOVX+CyqOCyteCzhuCygl/gsqHgsr/gsrjgs4bgsoInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CyreCyvuCyqOCzgeCyteCyvuCysF/gsrjgs4bgs4Lgs5Xgsq7gsrXgsr7gsrBf4LKu4LKC4LKX4LKz4LK14LK+4LKwX+CyrOCzgeCyp+CyteCyvuCysF/gspfgs4HgsrDgs4HgsrXgsr7gsrBf4LK24LOB4LKV4LON4LKw4LK14LK+4LKwX+CytuCyqOCyv+CyteCyvuCysCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgsq3gsr7gsqjgs4Ff4LK44LOG4LOC4LOV4LKuX+CyruCyguCyl+Cys1/gsqzgs4Hgsqdf4LKX4LOB4LKw4LOBX+CytuCzgeCyleCzjeCysF/gsrbgsqjgsr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CyreCyvl/gsrjgs4bgs4Lgs5Vf4LKu4LKCX+CyrOCzgV/gspfgs4Ff4LK24LOBX+Cyticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+Cyh+CyguCypuCzgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LKo4LK+4LKz4LOGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgsqjgsr/gsqjgs43gsqjgs4ZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgspXgs4bgs4Lgsqjgs4bgsq9dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgsqjgsoLgsqTgsrAnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgsrngsr/gsoLgsqbgs4YnLFxuICAgICAgICAgICAgcyA6ICfgspXgs4bgsrLgsrXgs4Eg4LKV4LON4LK34LKj4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCyuOCzhuCyleCzhuCyguCyoeCzgeCyl+Cys+CzgScsXG4gICAgICAgICAgICBtIDogJ+CykuCyguCypuCzgSDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIGggOiAn4LKS4LKC4LKm4LOBIOCyl+CyguCyn+CzhicsXG4gICAgICAgICAgICBoaCA6ICclZCDgspfgsoLgsp/gs4YnLFxuICAgICAgICAgICAgZCA6ICfgspLgsoLgsqbgs4Eg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCypuCyv+CyqCcsXG4gICAgICAgICAgICBNIDogJ+CykuCyguCypuCzgSDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHkgOiAn4LKS4LKC4LKm4LOBIOCyteCysOCzjeCytycsXG4gICAgICAgICAgICB5eSA6ICclZCDgsrXgsrDgs43gsrcnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgs6fgs6jgs6ngs6rgs6vgs6zgs63gs67gs6/gs6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gsrDgsr7gsqTgs43gsrDgsr984LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGfOCyruCyp+CzjeCyr+CyvuCyueCzjeCyqHzgsrjgsoLgspzgs4YvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LKw4LK+4LKk4LON4LKw4LK/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LK44LKC4LKc4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrDgsr7gsqTgs43gsrDgsr8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrjgsoLgspzgs4YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgsqjgs4bgs5UpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4LKo4LOG4LOVJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBrbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tvJywge1xuICAgICAgICBtb250aHMgOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfsnbzsmpTsnbxf7JuU7JqU7J28X+2ZlOyalOydvF/siJjsmpTsnbxf66qp7JqU7J28X+q4iOyalOydvF/thqDsmpTsnbwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICfsmKTripggTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICfrgrTsnbwgTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ+yWtOygnCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICfsp4Drgpzso7wgZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg7ZuEJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg7KCEJyxcbiAgICAgICAgICAgIHMgOiAn66qHIOy0iCcsXG4gICAgICAgICAgICBzcyA6ICclZOy0iCcsXG4gICAgICAgICAgICBtIDogJzHrtoQnLFxuICAgICAgICAgICAgbW0gOiAnJWTrtoQnLFxuICAgICAgICAgICAgaCA6ICftlZwg7Iuc6rCEJyxcbiAgICAgICAgICAgIGhoIDogJyVk7Iuc6rCEJyxcbiAgICAgICAgICAgIGQgOiAn7ZWY66OoJyxcbiAgICAgICAgICAgIGRkIDogJyVk7J28JyxcbiAgICAgICAgICAgIE0gOiAn7ZWcIOuLrCcsXG4gICAgICAgICAgICBNTSA6ICclZOuLrCcsXG4gICAgICAgICAgICB5IDogJ+ydvCDrhYQnLFxuICAgICAgICAgICAgeXkgOiAnJWTrhYQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn0o7J28fOyblHzso7wpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+ydvCc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7JuUJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfso7wnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2UgOiAv7Jik7KCEfOyYpO2bhC8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbiA9PT0gJ+yYpO2bhCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICfsmKTsoIQnIDogJ+yYpO2bhCc7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGH0q8nLFxuICAgICAgICAxOiAnLdGH0LgnLFxuICAgICAgICAyOiAnLdGH0LgnLFxuICAgICAgICAzOiAnLdGH0q8nLFxuICAgICAgICA0OiAnLdGH0q8nLFxuICAgICAgICA1OiAnLdGH0LgnLFxuICAgICAgICA2OiAnLdGH0YsnLFxuICAgICAgICA3OiAnLdGH0LgnLFxuICAgICAgICA4OiAnLdGH0LgnLFxuICAgICAgICA5OiAnLdGH0YMnLFxuICAgICAgICAxMDogJy3Rh9GDJyxcbiAgICAgICAgMjA6ICct0YfRiycsXG4gICAgICAgIDMwOiAnLdGH0YMnLFxuICAgICAgICA0MDogJy3Rh9GLJyxcbiAgICAgICAgNTA6ICct0YfSrycsXG4gICAgICAgIDYwOiAnLdGH0YsnLFxuICAgICAgICA3MDogJy3Rh9C4JyxcbiAgICAgICAgODA6ICct0YfQuCcsXG4gICAgICAgIDkwOiAnLdGH0YMnLFxuICAgICAgICAxMDA6ICct0YfSrydcbiAgICB9O1xuXG4gICAgdmFyIGt5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3knLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGA0YJf0LDQv9GAX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQltC10LrRiNC10LzQsdC4X9CU0q/QudGI06nQvNCx0q9f0KjQtdC50YjQtdC80LHQuF/QqNCw0YDRiNC10LzQsdC4X9CR0LXQudGI0LXQvNCx0Lhf0JbRg9C80LBf0JjRiNC10LzQsdC4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9CW0LXQul/QlNKv0Llf0KjQtdC5X9Co0LDRgF/QkdC10Llf0JbRg9C8X9CY0YjQtScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0JbQul/QlNC5X9Co0Llf0KjRgF/QkdC5X9CW0Lxf0JjRiCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CR0q/Qs9Kv0L0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Ct0YDRgtC10qMg0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfQtSDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0L1dIGRkZGQgW9C60q/QvdKvXSBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDQuNGH0LjQvdC00LUnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQvNGD0YDRg9C9JyxcbiAgICAgICAgICAgIHMgOiAn0LHQuNGA0L3QtdGH0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtIDogJ9Cx0LjRgCDQvNKv0L3TqdGCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80q/QvdOp0YInLFxuICAgICAgICAgICAgaCA6ICfQsdC40YAg0YHQsNCw0YInLFxuICAgICAgICAgICAgaGggOiAnJWQg0YHQsNCw0YInLFxuICAgICAgICAgICAgZCA6ICfQsdC40YAg0LrSr9C9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC60q/QvScsXG4gICAgICAgICAgICBNIDogJ9Cx0LjRgCDQsNC5JyxcbiAgICAgICAgICAgIE1NIDogJyVkINCw0LknLFxuICAgICAgICAgICAgeSA6ICfQsdC40YAg0LbRi9C7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINC20YvQuydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRh9C4fNGH0Yt80YfSr3zRh9GDKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGt5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ20nOiBbJ2VuZyBNaW51dHQnLCAnZW5nZXIgTWludXR0J10sXG4gICAgICAgICAgICAnaCc6IFsnZW5nIFN0b25uJywgJ2VuZ2VyIFN0b25uJ10sXG4gICAgICAgICAgICAnZCc6IFsnZWVuIERhZycsICdlbmdlbSBEYWcnXSxcbiAgICAgICAgICAgICdNJzogWydlZSBNb3VudCcsICdlbmdlbSBNb3VudCddLFxuICAgICAgICAgICAgJ3knOiBbJ2VlIEpvZXInLCAnZW5nZW0gSm9lciddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc0Z1dHVyZVRpbWUoc3RyaW5nKSB7XG4gICAgICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgICAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiAnYSAnICsgc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnYW4gJyArIHN0cmluZztcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc1Bhc3RUaW1lKHN0cmluZykge1xuICAgICAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICAgICAgaWYgKGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3ZpcnUgJyArIHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3ZpcnVuICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgd29yZCBiZWZvcmUgdGhlIGdpdmVuIG51bWJlciBsb3NlcyB0aGUgJy1uJyBlbmRpbmcuXG4gICAgICogZS5nLiAnYW4gMTAgRGVlZycgYnV0ICdhIDUgRGVlZydcbiAgICAgKlxuICAgICAqIEBwYXJhbSBudW1iZXIge2ludGVnZXJ9XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikge1xuICAgICAgICBudW1iZXIgPSBwYXJzZUludChudW1iZXIsIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gTmVnYXRpdmUgTnVtYmVyIC0tPiBhbHdheXMgdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTApIHtcbiAgICAgICAgICAgIC8vIE9ubHkgMSBkaWdpdFxuICAgICAgICAgICAgaWYgKDQgPD0gbnVtYmVyICYmIG51bWJlciA8PSA3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTAwKSB7XG4gICAgICAgICAgICAvLyAyIGRpZ2l0c1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLCBmaXJzdERpZ2l0ID0gbnVtYmVyIC8gMTA7XG4gICAgICAgICAgICBpZiAobGFzdERpZ2l0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihmaXJzdERpZ2l0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobGFzdERpZ2l0KTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDAwMCkge1xuICAgICAgICAgICAgLy8gMyBvciA0IGRpZ2l0cyAtLT4gcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3QgZGlnaXRcbiAgICAgICAgICAgIHdoaWxlIChudW1iZXIgPj0gMTApIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFueXRoaW5nIGxhcmdlciB0aGFuIDQgZGlnaXRzOiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBuLTMgZGlnaXRzXG4gICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDAwO1xuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbGInLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZWJydWFyX03DpGVyel9BYnLDq2xsX01lZV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbi5fRmVici5fTXJ6Ll9BYnIuX01lZV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnU29ubmRlZ19Nw6lpbmRlZ19Ew6tuc2NoZGVnX03Dq3R0d29jaF9Eb25uZXNjaGRlZ19GcmVpZGVnX1NhbXNjaGRlZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nw6kuX0TDqy5fTcOrLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nw6lfRMOrX03Dq19Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbSBbQXVlcl0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcyBbQXVlcl0nLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSBbQXVlcl0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhdXQgdW1dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW011ZXIgdW1dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbR8Orc2NodGVyIHVtXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIERpZmZlcmVudCBkYXRlIHN0cmluZyBmb3IgJ0TDq25zY2hkZWcnIChUdWVzZGF5KSBhbmQgJ0Rvbm5lc2NoZGVnJyAoVGh1cnNkYXkpIGR1ZSB0byBwaG9ub2xvZ2ljYWwgcnVsZVxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW0xlc2NodGVuXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZV0gZGRkZCBbdW1dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IHByb2Nlc3NGdXR1cmVUaW1lLFxuICAgICAgICAgICAgcGFzdCA6IHByb2Nlc3NQYXN0VGltZSxcbiAgICAgICAgICAgIHMgOiAnZSBwdWVyIFNla29ubmVuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIFNla29ubmVuJyxcbiAgICAgICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gOiAnJWQgTWludXR0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdG9ubmVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiAnJWQgRGVlZycsXG4gICAgICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NIDogJyVkIE3DqWludCcsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogJyVkIEpvZXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGxvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbG8nLCB7XG4gICAgICAgIG1vbnRocyA6ICfguqHgurHguofguoHguq3guplf4LqB4Lq44Lqh4Lqe4LqyX+C6oeC6teC6meC6sl/gu4DguqHguqrgurJf4Lqe4Lq24LqU4Lqq4Lqw4Lqe4LqyX+C6oeC6tOC6luC6uOC6meC6sl/guoHgu43guqXgurDguoHgurvgupRf4Lqq4Lq04LqH4Lqr4LqyX+C6geC6seC6meC6jeC6sl/gupXgurjguqXgurJf4Lqe4Lqw4LqI4Lq04LqBX+C6l+C6seC6meC6p+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+C6reC6suC6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgupfgurTgupRf4LqI4Lqx4LqZX+C6reC6seC6h+C6hOC6suC6mV/gup7gurjgupRf4Lqe4Lqw4Lqr4Lqx4LqUX+C6quC6uOC6gV/gu4DguqrgurvgurInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+C6l1/guohf4Lqt4LqEX+C6nl/gup7guqtf4Lqq4LqBX+C6qicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ+C6p+C6seC6mWRkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gupXguq3gupngu4Dguorgurvgu4ngurJ84LqV4Lqt4LqZ4LuB4Lql4LqHLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C6leC6reC6meC7gOC6iuC6u+C7ieC6sic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuB4Lql4LqHJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vguqHgurfgu4ngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+C6oeC6t+C7ieC6reC6t+C7iOC6meC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+C6p+C6seC6mV1kZGRkW+C7nOC7ieC6suC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4Lqh4Lq34LuJ4Lqn4Lqy4LqZ4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4Lqn4Lqx4LqZXWRkZGRb4LuB4Lql4LuJ4Lqn4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn4Lqt4Lq14LqBICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPgupzgu4jgurLgupnguqHgurInLFxuICAgICAgICAgICAgcyA6ICfguprgu43gu4jgu4Dgupfgurvgu4jgurLgu4PgupTguqfgurTgupngurLgupfgurUnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyAsXG4gICAgICAgICAgICBtIDogJzEg4LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIG1tIDogJyVkIOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBoIDogJzEg4LqK4Lq74LuI4Lqn4LuC4Lqh4LqHJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOC6iuC6u+C7iOC6p+C7guC6oeC6hycsXG4gICAgICAgICAgICBkIDogJzEg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOC6oeC6t+C7iScsXG4gICAgICAgICAgICBNIDogJzEg4LuA4LqU4Lq34Lqt4LqZJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgICAgICB5IDogJzEg4Lqb4Lq1JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOC6m+C6tSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLyjgupfgurXgu4gpXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuICfgupfgurXgu4gnICsgbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB1bml0cyA9IHtcbiAgICAgICAgJ3NzJyA6ICdzZWt1bmTEl19zZWt1bmTFvmnFs19zZWt1bmRlcycsXG4gICAgICAgICdtJyA6ICdtaW51dMSXX21pbnV0xJdzX21pbnV0xJknLFxuICAgICAgICAnbW0nOiAnbWludXTEl3NfbWludcSNacWzX21pbnV0ZXMnLFxuICAgICAgICAnaCcgOiAndmFsYW5kYV92YWxhbmRvc192YWxhbmTEhScsXG4gICAgICAgICdoaCc6ICd2YWxhbmRvc192YWxhbmTFs192YWxhbmRhcycsXG4gICAgICAgICdkJyA6ICdkaWVuYV9kaWVub3NfZGllbsSFJyxcbiAgICAgICAgJ2RkJzogJ2RpZW5vc19kaWVuxbNfZGllbmFzJyxcbiAgICAgICAgJ00nIDogJ23El251b19txJduZXNpb19txJduZXPErycsXG4gICAgICAgICdNTSc6ICdtxJduZXNpYWlfbcSXbmVzacWzX23El25lc2l1cycsXG4gICAgICAgICd5JyA6ICdtZXRhaV9tZXTFs19tZXR1cycsXG4gICAgICAgICd5eSc6ICdtZXRhaV9tZXTFs19tZXR1cydcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVNlY29uZHMobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2tlbGlvcyBzZWt1bmTEl3MnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2tlbGnFsyBzZWt1bmTFvmnFsycgOiAna2VsaWFzIHNla3VuZGVzJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtcyhrZXkpWzBdIDogKGlzRnV0dXJlID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMl0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzcGVjaWFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDAgfHwgKG51bWJlciA+IDEwICYmIG51bWJlciA8IDIwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB1bml0c1trZXldLnNwbGl0KCdfJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5WzBdLCBpc0Z1dHVyZSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgZm9ybXMoa2V5KVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGx0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHQnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3NhdXNpb192YXNhcmlvX2tvdm9fYmFsYW5kxb5pb19nZWd1xb7El3NfYmlyxb5lbGlvX2xpZXBvc19ydWdwasWrxI1pb19ydWdzxJdqb19zcGFsaW9fbGFwa3JpxI1pb19ncnVvZMW+aW8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAnc2F1c2lzX3Zhc2FyaXNfa292YXNfYmFsYW5kaXNfZ2VndcW+xJdfYmlyxb5lbGlzX2xpZXBhX3J1Z3Bqxat0aXNfcnVnc8SXamlzX3NwYWxpc19sYXBrcml0aXNfZ3J1b2Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NP3xNTU1NPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrRFtvRF0/L1xuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICdzYXVfdmFzX2tvdl9iYWxfZ2VnX2Jpcl9saWVfcmdwX3Jnc19zcGFfbGFwX2dyZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdzZWttYWRpZW7Er19waXJtYWRpZW7Er19hbnRyYWRpZW7Er190cmXEjWlhZGllbsSvX2tldHZpcnRhZGllbsSvX3Blbmt0YWRpZW7Er1/FoWXFoXRhZGllbsSvJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ3Nla21hZGllbmlzX3Bpcm1hZGllbmlzX2FudHJhZGllbmlzX3RyZcSNaWFkaWVuaXNfa2V0dmlydGFkaWVuaXNfcGVua3RhZGllbmlzX8WhZcWhdGFkaWVuaXMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL2RkZGQgSEg6bW0vXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU2VrX1Bpcl9BbnRfVHJlX0tldF9QZW5fxaBlxaEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1NfUF9BX1RfS19Qbl/FoCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBISDptbSBbdmFsLl0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIGRkZGQsIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBsIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkLCBISDptbSBbdmFsLl0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbxaBpYW5kaWVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tSeXRval0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tWYWthcl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW1ByYcSXanVzxK9dIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3BvICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAncHJpZcWhICVzJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGVTZWNvbmRzLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS1vamkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICctb2ppJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbHQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB1bml0cyA9IHtcbiAgICAgICAgJ3NzJzogJ3Nla3VuZGVzX3Nla3VuZMSTbV9zZWt1bmRlX3Nla3VuZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICAnbSc6ICdtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ21tJzogJ21pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzJy5zcGxpdCgnXycpLFxuICAgICAgICAnaCc6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICAgICAnaGgnOiAnc3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ2QnOiAnZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzJy5zcGxpdCgnXycpLFxuICAgICAgICAnZGQnOiAnZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzJy5zcGxpdCgnXycpLFxuICAgICAgICAnTSc6ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICAgICAnTU0nOiAnbcSTbmXFoWFfbcSTbmXFoWllbV9txJNuZXNpc19txJNuZcWhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3knOiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpLFxuICAgICAgICAneXknOiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gd2l0aG91dFN1ZmZpeCBib29sZWFuIHRydWUgPSBhIGxlbmd0aCBvZiB0aW1lOyBmYWxzZSA9IGJlZm9yZS9hZnRlciBhIHBlcmlvZCBvZiB0aW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvcm1hdChmb3JtcywgbnVtYmVyLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAvLyBFLmcuIFwiMjEgbWluxat0ZVwiLCBcIjMgbWluxat0ZXNcIi5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMl0gOiBmb3Jtc1szXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3Rlc1wiIGFzIGluIFwicMSTYyAyMSBtaW7Fq3Rlc1wiLlxuICAgICAgICAgICAgLy8gRS5nLiBcIjMgbWluxat0xJNtXCIgYXMgaW4gXCJwxJNjIDMgbWluxat0xJNtXCIuXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgJiYgbnVtYmVyICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogZm9ybXNbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgZm9ybWF0KHVuaXRzW2tleV0sIG51bWJlciwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0KHVuaXRzW2tleV0sIG51bWJlciwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlU2Vjb25kcyhudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZGHFvmFzIHNla3VuZGVzJyA6ICdkYcW+xIFtIHNla3VuZMSTbSc7XG4gICAgfVxuXG4gICAgdmFyIGx2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW52xIFyaXNfZmVicnXEgXJpc19tYXJ0c19hcHLEq2xpc19tYWlqc19qxatuaWpzX2rFq2xpanNfYXVndXN0c19zZXB0ZW1icmlzX29rdG9icmlzX25vdmVtYnJpc19kZWNlbWJyaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfasWrbl9qxatsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N2xJN0ZGllbmFfcGlybWRpZW5hX290cmRpZW5hX3RyZcWhZGllbmFfY2V0dXJ0ZGllbmFfcGlla3RkaWVuYV9zZXN0ZGllbmEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3ZfUF9PX1RfQ19Qa19TJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWS4nLFxuICAgICAgICAgICAgTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NLCBkZGRkLCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vFoG9kaWVuIHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tSxKt0IHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbVmFrYXIgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tQYWfEgWp1xaHEgV0gZGRkZCBbcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdwxJNjICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAncGlybXMgJXMnLFxuICAgICAgICAgICAgcyA6IHJlbGF0aXZlU2Vjb25kcyxcbiAgICAgICAgICAgIHNzIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZCA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE0gOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBNTSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5IDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbHY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0cmFuc2xhdG9yID0ge1xuICAgICAgICB3b3JkczogeyAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsnc2VrdW5kJywgJ3Nla3VuZGEnLCAnc2VrdW5kaSddLFxuICAgICAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRub2cgbWludXRhJ10sXG4gICAgICAgICAgICBtbTogWydtaW51dCcsICdtaW51dGEnLCAnbWludXRhJ10sXG4gICAgICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICAgICAgaGg6IFsnc2F0JywgJ3NhdGEnLCAnc2F0aSddLFxuICAgICAgICAgICAgZGQ6IFsnZGFuJywgJ2RhbmEnLCAnZGFuYSddLFxuICAgICAgICAgICAgTU06IFsnbWplc2VjJywgJ21qZXNlY2EnLCAnbWplc2VjaSddLFxuICAgICAgICAgICAgeXk6IFsnZ29kaW5hJywgJ2dvZGluZScsICdnb2RpbmEnXVxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gd29yZEtleVswXSA6IChudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNCA/IHdvcmRLZXlbMV0gOiB3b3JkS2V5WzJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG1lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWUnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bl9qdWxfYXZndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqX2p1bl9qdWxfYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzanV0cmEgdV0gTFQnLFxuXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRqZWxqZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BvbmVkamVsamthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzcmlqZWRlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbxI1ldHZydGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcGV0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJ1xuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdCAgIDogJ3ByaWplICVzJyxcbiAgICAgICAgICAgIHMgICAgICA6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkICAgICAgOiAnZGFuJyxcbiAgICAgICAgICAgIGRkICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXkgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1pID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWknLCB7XG4gICAgICAgIG1vbnRoczogJ0tvaGktdMSBdGVfSHVpLXRhbmd1cnVfUG91dMWrLXRlLXJhbmdpX1BhZW5nYS13aMSBd2jEgV9IYXJhdHVhX1BpcGlyaV9IxY1uZ29pbmdvaV9IZXJlLXR1cmkta8WNa8SBX01haHVydV9XaGlyaW5nYS3EgS1udWt1X1doaXJpbmdhLcSBLXJhbmdpX0hha2loZWEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnS29oaV9IdWlfUG91X1BhZV9IYXJhX1BpcGlfSMWNbmdvaV9IZXJlX01haHVfV2hpLW51X1doaS1yYV9IYWtpJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwyfS9pLFxuICAgICAgICB3ZWVrZGF5czogJ1LEgXRhcHVfTWFuZV9UxatyZWlfV2VuZXJlaV9UxIFpdGVfUGFyYWlyZV9IxIF0YXJlaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdUYV9NYV9UxatfV2VfVMSBaV9QYV9IxIEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW2ldIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbaV0gSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2kgdGVpZSBtYWhhbmEsIGldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbYXBvcG8gaV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtpXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2luYW5haGkgaV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt3aGFrYW11dHVuZ2EgaV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2kgcm90byBpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpIG11YScsXG4gICAgICAgICAgICBzOiAndGUgaMSTa29uYSBydWFydWEnLFxuICAgICAgICAgICAgc3M6ICclZCBoxJNrb25hJyxcbiAgICAgICAgICAgIG06ICdoZSBtZW5ldGknLFxuICAgICAgICAgICAgbW06ICclZCBtZW5ldGknLFxuICAgICAgICAgICAgaDogJ3RlIGhhb3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGFvcmEnLFxuICAgICAgICAgICAgZDogJ2hlIHJhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgcmEnLFxuICAgICAgICAgICAgTTogJ2hlIG1hcmFtYScsXG4gICAgICAgICAgICBNTTogJyVkIG1hcmFtYScsXG4gICAgICAgICAgICB5OiAnaGUgdGF1JyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGF1J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21rJywge1xuICAgICAgICBtb250aHMgOiAn0ZjQsNC90YPQsNGA0Lhf0YTQtdCy0YDRg9Cw0YDQuF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDRmF/RmNGD0L3QuF/RmNGD0LvQuF/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LLRgNC4X9C+0LrRgtC+0LzQstGA0Lhf0L3QvtC10LzQstGA0Lhf0LTQtdC60LXQvNCy0YDQuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0ZjQsNC9X9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9C90LXQtNC10LvQsF/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNCwX9GH0LXRgtCy0YDRgtC+0Lpf0L/QtdGC0L7Qul/RgdCw0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNC1X9GH0LXRgl/Qv9C10YJf0YHQsNCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQvWVf0L9vX9Cy0YJf0YHRgF/Rh9C1X9C/0LVf0YFhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CU0LXQvdC10YEg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0KPRgtGA0LUg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW9CS0L5dIGRkZGQgW9Cy0L5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9CS0YfQtdGA0LAg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtCw0YLQsF0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtC40L7Rgl0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0L/QvtGB0LvQtSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9C/0YDQtdC0ICVzJyxcbiAgICAgICAgICAgIHMgOiAn0L3QtdC60L7Qu9C60YMg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgbSA6ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgtC4JyxcbiAgICAgICAgICAgIGggOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC00LXQvdCwJyxcbiAgICAgICAgICAgIE0gOiAn0LzQtdGB0LXRhicsXG4gICAgICAgICAgICBNTSA6ICclZCDQvNC10YHQtdGG0LgnLFxuICAgICAgICAgICAgeSA6ICfQs9C+0LTQuNC90LAnLFxuICAgICAgICAgICAgeXkgOiAnJWQg0LPQvtC00LjQvdC4J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC10LJ80LXQvXzRgtC4fNCy0Lh80YDQuHzQvNC4KS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgbGFzdDJEaWdpdHMgPSBudW1iZXIgJSAxMDA7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQvSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YDQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QvNC4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1rO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbCcsIHtcbiAgICAgICAgbW9udGhzIDogJ+C0nOC0qOC1geC0teC0sOC0v1/gtKvgtYbgtKzgtY3gtLDgtYHgtLXgtLDgtL9f4LSu4LS+4LW84LSa4LWN4LSa4LWNX+C0j+C0quC1jeC0sOC0v+C1vV/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iF/gtJPgtJfgtLjgtY3gtLHgtY3gtLHgtY1f4LS44LWG4LSq4LWN4LSx4LWN4LSx4LSC4LSs4LW8X+C0kuC0leC1jeC0n+C1i+C0rOC1vF/gtKjgtLXgtILgtKzgtbxf4LSh4LS/4LS44LSC4LSs4LW8Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgtJzgtKjgtYEuX+C0q+C1huC0rOC1jeC0sOC1gS5f4LSu4LS+4LW8Ll/gtI/gtKrgtY3gtLDgtL8uX+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWILl/gtJPgtJcuX+C0uOC1huC0quC1jeC0seC1jeC0sS5f4LSS4LSV4LWN4LSf4LWLLl/gtKjgtLXgtIIuX+C0oeC0v+C0uOC0gi4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgtJ7gtL7gtK/gtLHgtL7gtLTgtY3gtJpf4LSk4LS/4LSZ4LWN4LSV4LSz4LS+4LS04LWN4LSaX+C0muC1iuC0teC1jeC0teC0vuC0tOC1jeC0ml/gtKzgtYHgtKfgtKjgtL7gtLTgtY3gtJpf4LS14LWN4LSv4LS+4LS04LS+4LS04LWN4LSaX+C0teC1huC0s+C1jeC0s+C0v+C0r+C0vuC0tOC1jeC0ml/gtLbgtKjgtL/gtK/gtL7gtLTgtY3gtJonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4LSe4LS+4LSv4LW8X+C0pOC0v+C0meC1jeC0leC1vl/gtJrgtYrgtLXgtY3gtLVf4LSs4LWB4LSn4LW7X+C0teC1jeC0r+C0vuC0tOC0gl/gtLXgtYbgtLPgtY3gtLPgtL9f4LS24LSo4LS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgtJ7gtL5f4LSk4LS/X+C0muC1il/gtKzgtYFf4LS14LWN4LSv4LS+X+C0teC1hl/gtLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcyAt4LSo4LWBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+C0h+C0qOC1jeC0qOC1jV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LSo4LS+4LSz4LWGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgtIfgtKjgtY3gtKjgtLLgtYZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgtJXgtLTgtL/gtJ7gtY3gtJ5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgtK7gtYHgtbvgtKrgtY0nLFxuICAgICAgICAgICAgcyA6ICfgtIXgtb3gtKog4LSo4LS/4LSu4LS/4LS34LSZ4LWN4LSZ4LW+JyxcbiAgICAgICAgICAgIHNzIDogJyVkIOC0uOC1huC0leC1jeC0leC1u+C0oeC1jScsXG4gICAgICAgICAgICBtIDogJ+C0kuC0sOC1gSDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LSu4LS/4LSo4LS/4LSx4LWN4LSx4LWNJyxcbiAgICAgICAgICAgIGggOiAn4LSS4LSw4LWBIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgICAgICBoaCA6ICclZCDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbwnLFxuICAgICAgICAgICAgZCA6ICfgtJLgtLDgtYEg4LSm4LS/4LS14LS44LSCJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgICAgICBNIDogJ+C0kuC0sOC1gSDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LSu4LS+4LS44LSCJyxcbiAgICAgICAgICAgIHkgOiAn4LSS4LSw4LWBIOC0teC1vOC0t+C0gicsXG4gICAgICAgICAgICB5eSA6ICclZCDgtLXgtbzgtLfgtIInXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gtLDgtL7gtKTgtY3gtLDgtL984LSw4LS+4LS14LS/4LSy4LWGfOC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY184LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCfOC0sOC0vuC0pOC1jeC0sOC0vy9pLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChtZXJpZGllbSA9PT0gJ+C0sOC0vuC0pOC1jeC0sOC0vycgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LSk4LWN4LSw4LS/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtLXgtL/gtLLgtYYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LSk4LWN4LSw4LS/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdGN0LTRhdGN0L0g0YHQtdC60YPQvdC0JyA6ICfRhdGN0LTRhdGN0L0g0YHQtdC60YPQvdC00YvQvSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRgdC10LrRg9C90LQnIDogJyDRgdC10LrRg9C90LTRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINC80LjQvdGD0YInIDogJyDQvNC40L3Rg9GC0YvQvScpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRhtCw0LMnIDogJyDRhtCw0LPQuNC50L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg06nQtNOp0YAnIDogJyDTqdC00YDQuNC50L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0YHQsNGAJyA6ICcg0YHQsNGA0YvQvScpO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDQttC40LsnIDogJyDQttC40LvQuNC50L0nKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21uJywge1xuICAgICAgICBtb250aHMgOiAn0J3RjdCz0LTSr9Cz0Y3RjdGAINGB0LDRgF/QpdC+0ZHRgNC00YPQs9Cw0LDRgCDRgdCw0YBf0JPRg9GA0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JTTqdGA06nQstC00q/Qs9GN0Y3RgCDRgdCw0YBf0KLQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/Ql9GD0YDQs9Cw0LTRg9Cz0LDQsNGAINGB0LDRgF/QlNC+0LvQtNGD0LPQsNCw0YAg0YHQsNGAX9Cd0LDQudC80LTRg9Cz0LDQsNGAINGB0LDRgF/QldGB0LTSr9Cz0Y3RjdGAINGB0LDRgF/QkNGA0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JDRgNCy0LDQvSDQvdGN0LPQtNKv0LPRjdGN0YAg0YHQsNGAX9CQ0YDQstCw0L0g0YXQvtGR0YDQtNGD0LPQsNCw0YAg0YHQsNGAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcxINGB0LDRgF8yINGB0LDRgF8zINGB0LDRgF80INGB0LDRgF81INGB0LDRgF82INGB0LDRgF83INGB0LDRgF84INGB0LDRgF85INGB0LDRgF8xMCDRgdCw0YBfMTEg0YHQsNGAXzEyINGB0LDRgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ9Cd0Y/QvF/QlNCw0LLQsNCwX9Cc0Y/Qs9C80LDRgF/Qm9GF0LDQs9Cy0LBf0J/Sr9GA0Y3Qsl/QkdCw0LDRgdCw0L1f0JHRj9C80LHQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQndGP0Lxf0JTQsNCyX9Cc0Y/Qs1/Qm9GF0LBf0J/Sr9GAX9CR0LDQsF/QkdGP0LwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cd0Y9f0JTQsF/QnNGPX9Cb0YVf0J/Sr1/QkdCwX9CR0Y8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZINC+0L3RiyBNTU1N0YvQvSBEJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZINC+0L3RiyBNTU1N0YvQvSBEIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgWVlZWSDQvtC90YsgTU1NTdGL0L0gRCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9Ku06h80q7QpS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfSrtClJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfSrtOoJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfSrtClJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vTqNC906nTqdC006nRgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0JzQsNGA0LPQsNCw0YhdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vQmNGA0Y3RhV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vTqNGH0LjQs9C006nRgF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0L3Qs9Op0YDRgdOp0L1dIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINC00LDRgNCw0LAnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDTqdC80L3TqScsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9INOp0LTTqdGALyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDTqdC006nRgCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1uO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgpacnLFxuICAgICAgICAnMic6ICfgpagnLFxuICAgICAgICAnMyc6ICfgpaknLFxuICAgICAgICAnNCc6ICfgpaonLFxuICAgICAgICAnNSc6ICfgpasnLFxuICAgICAgICAnNic6ICfgpawnLFxuICAgICAgICAnNyc6ICfgpa0nLFxuICAgICAgICAnOCc6ICfgpa4nLFxuICAgICAgICAnOSc6ICfgpa8nLFxuICAgICAgICAnMCc6ICfgpaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICfgpaYnOiAnMCdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lTXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKVxuICAgIHtcbiAgICAgICAgdmFyIG91dHB1dCA9ICcnO1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzogb3V0cHV0ID0gJ+CkleCkvuCkueClgCDgpLjgpYfgpJXgpILgpKYnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcyc6IG91dHB1dCA9ICclZCDgpLjgpYfgpJXgpILgpKYnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzogb3V0cHV0ID0gJ+Ckj+CklSDgpK7gpL/gpKjgpL/gpJ8nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtbSc6IG91dHB1dCA9ICclZCDgpK7gpL/gpKjgpL/gpJ/gpYcnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzogb3V0cHV0ID0gJ+Ckj+CklSDgpKTgpL7gpLgnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoaCc6IG91dHB1dCA9ICclZCDgpKTgpL7gpLgnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzogb3V0cHV0ID0gJ+Ckj+CklSDgpKbgpL/gpLXgpLgnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkZCc6IG91dHB1dCA9ICclZCDgpKbgpL/gpLXgpLgnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzogb3V0cHV0ID0gJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNTSc6IG91dHB1dCA9ICclZCDgpK7gpLngpL/gpKjgpYcnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5Jzogb3V0cHV0ID0gJ+Ckj+CklSDgpLXgpLDgpY3gpLcnOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5eSc6IG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpYcnOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6IG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSm4KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3MnOiBvdXRwdXQgPSAnJWQg4KS44KWH4KSV4KSC4KSm4KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSu4KS/4KSo4KS/4KSf4KS+JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW0nOiBvdXRwdXQgPSAnJWQg4KSu4KS/4KSo4KS/4KSf4KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSk4KS+4KS44KS+JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGgnOiBvdXRwdXQgPSAnJWQg4KSk4KS+4KS44KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSm4KS/4KS14KS44KS+JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGQnOiBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS44KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSu4KS54KS/4KSo4KWN4KSv4KS+JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTU0nOiBvdXRwdXQgPSAnJWQg4KSu4KS54KS/4KSo4KWN4KSv4KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneSc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KS14KSw4KWN4KS34KS+JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneXknOiBvdXRwdXQgPSAnJWQg4KS14KSw4KWN4KS34KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBtciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21yJywge1xuICAgICAgICBtb250aHMgOiAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KS/4KSyX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSy4KWIX+CkkeCkl+CkuOCljeCkn1/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLBf4KSR4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkteCljeCkueClh+CkguCkrOCksF/gpKHgpL/gpLjgpYfgpILgpKzgpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4KSc4KS+4KSo4KWHLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkmi5f4KSP4KSq4KWN4KSw4KS/Ll/gpK7gpYcuX+CknOClguCkqC5f4KSc4KWB4KSy4KWILl/gpJHgpJcuX+CkuOCkquCljeCkn+Clh+Ckgi5f4KSR4KSV4KWN4KSf4KWLLl/gpKjgpYvgpLXgpY3gpLngpYfgpIIuX+CkoeCkv+CkuOClh+Ckgi4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgpLDgpLXgpL/gpLXgpL7gpLBf4KS44KWL4KSu4KS14KS+4KSwX+CkruCkguCkl+Cks+CkteCkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSX4KWB4KSw4KWC4KS14KS+4KSwX+CktuClgeCkleCljeCksOCkteCkvuCksF/gpLbgpKjgpL/gpLXgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLNf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgpLBf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSX4KWBX+CktuClgV/gpLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgpIngpKbgpY3gpK/gpL5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+CkleCkvuCksl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSu4KS+4KSX4KWA4KSyXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+CkruCkp+CljeCkr+ClhycsXG4gICAgICAgICAgICBwYXN0OiAnJXPgpKrgpYLgpLDgpY3gpLXgpYAnLFxuICAgICAgICAgICAgczogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGg6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgZDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBNOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHk6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZU1yXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpY3gpLDgpYB84KS44KSV4KS+4KSz4KWAfOCkpuClgeCkquCkvuCksOClgHzgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSk4KWN4KSw4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KSV4KS+4KSz4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuClgeCkquCkvuCksOClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCljeCksOClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KSV4KS+4KSz4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpYHgpKrgpL7gpLDgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkvuCkr+CkguCkleCkvuCks+ClgCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWN4KSw4KWAJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtc015ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMtbXknLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXNNeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1zID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ210Jywge1xuICAgICAgICBtb250aHMgOiAnSmFubmFyX0ZyYXJfTWFyenVfQXByaWxfTWVqanVfxKB1bmp1X0x1bGp1X0F3d2lzc3VfU2V0dGVtYnJ1X090dHVicnVfTm92ZW1icnVfRGnEi2VtYnJ1Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRnJhX01hcl9BcHJfTWVqX8SgdW5fTHVsX0F3d19TZXRfT3R0X05vdl9EacSLJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdJbC3EpmFkZF9JdC1UbmVqbl9JdC1UbGlldGFfTC1FcmJnxKdhX0lsLcSmYW1pc19JbC3EoGltZ8SnYV9Jcy1TaWJ0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ8SmYWRfVG5lX1RsaV9FcmJfxKZhbV/EoGltX1NpYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnxKZhX1RuX1RsX0VyX8SmYV/EoGlfU2knLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tJbGx1bSBmaWwtXUxUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0fEp2FkYSBmaWwtXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2ZpbC1dTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSWwtYmllcmHEpyBmaWwtXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2xpIGfEp2FkZGFdIFtmaWwtXUxUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdm4oCZICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgaWx1JyxcbiAgICAgICAgICAgIHMgOiAnZnRpdCBzZWtvbmRpJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla29uZGknLFxuICAgICAgICAgICAgbSA6ICdtaW51dGEnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGggOiAnc2llZ8SnYScsXG4gICAgICAgICAgICBoaCA6ICclZCBzaWVnxKdhdCcsXG4gICAgICAgICAgICBkIDogJ8ShdXJuYXRhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIMShcmFuZXQnLFxuICAgICAgICAgICAgTSA6ICd4YWhhcicsXG4gICAgICAgICAgICBNTSA6ICclZCB4aHVyJyxcbiAgICAgICAgICAgIHkgOiAnc2VuYScsXG4gICAgICAgICAgICB5eSA6ICclZCBzbmknXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+GBgScsXG4gICAgICAgICcyJzogJ+GBgicsXG4gICAgICAgICczJzogJ+GBgycsXG4gICAgICAgICc0JzogJ+GBhCcsXG4gICAgICAgICc1JzogJ+GBhScsXG4gICAgICAgICc2JzogJ+GBhicsXG4gICAgICAgICc3JzogJ+GBhycsXG4gICAgICAgICc4JzogJ+GBiCcsXG4gICAgICAgICc5JzogJ+GBiScsXG4gICAgICAgICcwJzogJ+GBgCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfhgYEnOiAnMScsXG4gICAgICAgICfhgYInOiAnMicsXG4gICAgICAgICfhgYMnOiAnMycsXG4gICAgICAgICfhgYQnOiAnNCcsXG4gICAgICAgICfhgYUnOiAnNScsXG4gICAgICAgICfhgYYnOiAnNicsXG4gICAgICAgICfhgYcnOiAnNycsXG4gICAgICAgICfhgYgnOiAnOCcsXG4gICAgICAgICfhgYknOiAnOScsXG4gICAgICAgICfhgYAnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIG15ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXknLCB7XG4gICAgICAgIG1vbnRoczogJ+GAh+GAlOGAuuGAlOGAneGAq+GAm+GArl/hgJbhgLHhgJbhgLHhgKzhgLrhgJ3hgKvhgJvhgK5f4YCZ4YCQ4YC6X+GAp+GAleGAvOGArl/hgJnhgLFf4YCH4YC94YCU4YC6X+GAh+GAsOGAnOGAreGAr+GAhOGAul/hgJ7hgLzhgILhgK/hgJDhgLpf4YCF4YCA4YC64YCQ4YCE4YC64YCY4YCsX+GAoeGAseGArOGAgOGAuuGAkOGAreGAr+GAmOGArF/hgJThgK3hgK/hgJ3hgIThgLrhgJjhgKxf4YCS4YCu4YCH4YCE4YC64YCY4YCsJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ+GAh+GAlOGAul/hgJbhgLFf4YCZ4YCQ4YC6X+GAleGAvOGArl/hgJnhgLFf4YCH4YC94YCU4YC6X+GAnOGAreGAr+GAhOGAul/hgJ7hgLxf4YCF4YCA4YC6X+GAoeGAseGArOGAgOGAul/hgJThgK3hgK9f4YCS4YCuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ+GAkOGAlOGAhOGAuuGAueGAguGAlOGAveGAsV/hgJDhgJThgIThgLrhgLnhgJzhgKxf4YCh4YCE4YC64YC54YCC4YCrX+GAl+GAr+GAkuGAueGAk+GAn+GAsOGAuF/hgIDhgLzhgKzhgJ7hgJXhgJDhgLHhgLhf4YCe4YCx4YCs4YCA4YC84YCsX+GAheGAlOGAsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+GAlOGAveGAsV/hgJzhgKxf4YCC4YCrX+GAn+GAsOGAuF/hgIDhgLzhgKxf4YCe4YCx4YCsX+GAlOGAsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfhgJThgL3hgLFf4YCc4YCsX+GAguGAq1/hgJ/hgLDhgLhf4YCA4YC84YCsX+GAnuGAseGArF/hgJThgLEnLnNwbGl0KCdfJyksXG5cbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4YCa4YCU4YCxLl0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhgJnhgJThgIDhgLrhgJbhgLzhgJThgLpdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+GAmeGAlOGAsS7hgIBdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+GAleGAvOGAruGAuOGAgeGAsuGAt+GAnuGAseGArF0gZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn4YCc4YCs4YCZ4YCK4YC64YC3ICVzIOGAmeGAvuGArCcsXG4gICAgICAgICAgICBwYXN0OiAn4YCc4YC94YCU4YC64YCB4YCy4YC34YCe4YCx4YCsICVzIOGAgCcsXG4gICAgICAgICAgICBzOiAn4YCF4YCA4YC54YCA4YCU4YC6LuGAoeGAlOGAiuGAuuGAuOGAhOGAmuGAuicsXG4gICAgICAgICAgICBzcyA6ICclZCDhgIXhgIDhgLnhgIDhgJThgLfhgLonLFxuICAgICAgICAgICAgbTogJ+GAkOGAheGAuuGAmeGAreGAlOGAheGAuicsXG4gICAgICAgICAgICBtbTogJyVkIOGAmeGAreGAlOGAheGAuicsXG4gICAgICAgICAgICBoOiAn4YCQ4YCF4YC64YCU4YCs4YCb4YCuJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4YCU4YCs4YCb4YCuJyxcbiAgICAgICAgICAgIGQ6ICfhgJDhgIXhgLrhgJvhgIDhgLonLFxuICAgICAgICAgICAgZGQ6ICclZCDhgJvhgIDhgLonLFxuICAgICAgICAgICAgTTogJ+GAkOGAheGAuuGAnCcsXG4gICAgICAgICAgICBNTTogJyVkIOGAnCcsXG4gICAgICAgICAgICB5OiAn4YCQ4YCF4YC64YCU4YC+4YCF4YC6JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4YCU4YC+4YCF4YC6J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4YGB4YGC4YGD4YGE4YGF4YGG4YGH4YGI4YGJ4YGAXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG15O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbmIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCduYicsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzw7guX21hLl90aS5fb24uX3RvLl9mci5fbMO4Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc8O4X21hX3RpX29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpIGfDpXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tmb3JyaWdlXSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgc2lkZW4nLFxuICAgICAgICAgICAgcyA6ICdub2VuIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG0gOiAnZXR0IG1pbnV0dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHRlcicsXG4gICAgICAgICAgICBoIDogJ2VuIHRpbWUnLFxuICAgICAgICAgICAgaGggOiAnJWQgdGltZXInLFxuICAgICAgICAgICAgZCA6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZXInLFxuICAgICAgICAgICAgTSA6ICdlbiBtw6VuZWQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeSA6ICdldHQgw6VyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMOlcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4KWnJyxcbiAgICAgICAgJzInOiAn4KWoJyxcbiAgICAgICAgJzMnOiAn4KWpJyxcbiAgICAgICAgJzQnOiAn4KWqJyxcbiAgICAgICAgJzUnOiAn4KWrJyxcbiAgICAgICAgJzYnOiAn4KWsJyxcbiAgICAgICAgJzcnOiAn4KWtJyxcbiAgICAgICAgJzgnOiAn4KWuJyxcbiAgICAgICAgJzknOiAn4KWvJyxcbiAgICAgICAgJzAnOiAn4KWmJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAn4KWoJzogJzInLFxuICAgICAgICAn4KWpJzogJzMnLFxuICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAn4KWrJzogJzUnLFxuICAgICAgICAn4KWsJzogJzYnLFxuICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAn4KWuJzogJzgnLFxuICAgICAgICAn4KWvJzogJzknLFxuICAgICAgICAn4KWmJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBuZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25lJywge1xuICAgICAgICBtb250aHMgOiAn4KSc4KSo4KS14KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/4KSyX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSIX+CkheCkl+Ckt+CljeCkn1/gpLjgpYfgpKrgpY3gpJ/gpYfgpK7gpY3gpKzgpLBf4KSF4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkreClh+CkruCljeCkrOCksF/gpKHgpL/gpLjgpYfgpK7gpY3gpKzgpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+CknOCkqC5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/Ll/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiC5f4KSF4KSXLl/gpLjgpYfgpKrgpY3gpJ8uX+CkheCkleCljeCkn+Cliy5f4KSo4KWL4KSt4KWHLl/gpKHgpL/gpLjgpYcuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4KSG4KSH4KSk4KSs4KS+4KSwX+CkuOCli+CkruCkrOCkvuCksF/gpK7gpJngpY3gpJfgpLLgpKzgpL7gpLBf4KSs4KWB4KSn4KSs4KS+4KSwX+CkrOCkv+CkueCkv+CkrOCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpKzgpL7gpLBf4KS24KSo4KS/4KSs4KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CkhuCkh+CkpC5f4KS44KWL4KSuLl/gpK7gpJngpY3gpJfgpLIuX+CkrOClgeCkpy5f4KSs4KS/4KS54KS/Ll/gpLbgpYHgpJXgpY3gpLAuX+CktuCkqOCkvy4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+Ckhi5f4KS44KWLLl/gpK7gpIIuX+CkrOClgS5f4KSs4KS/Ll/gpLbgpYEuX+Ckti4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMVFMgOiAnQeCkleCliyBoOm1tOnNzIOCkrOCknOClhycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSk4KS/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSs4KS/4KS54KS+4KSoJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCkv+CkieCkgeCkuOCliycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KS+4KSB4KSdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkrOCkv+CkueCkvuCkqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KS/4KSJ4KSB4KS44KWLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpIHgpJ0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCkvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgpK3gpYvgpLLgpL9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vgpIbgpIngpIHgpKbgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KS54KS/4KSc4KWLXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4KSX4KSP4KSV4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+CkruCkvicsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCkheCkl+CkvuCkoeCkvycsXG4gICAgICAgICAgICBzIDogJ+CkleClh+CkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4KS44KWH4KSV4KWH4KSj4KWN4KShJyxcbiAgICAgICAgICAgIG0gOiAn4KSP4KSVIOCkruCkv+CkqOClh+CknycsXG4gICAgICAgICAgICBtbSA6ICclZCDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICAgICAgaCA6ICfgpI/gpJUg4KSY4KSj4KWN4KSf4KS+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCkmOCko+CljeCkn+CkvicsXG4gICAgICAgICAgICBkIDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE0gOiAn4KSP4KSVIOCkruCkueCkv+CkqOCkvicsXG4gICAgICAgICAgICBNTSA6ICclZCDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICAgICAgeSA6ICfgpI/gpJUg4KSs4KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCkrOCksOCljeCktydcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbL15qYW4vaSwgL15mZWIvaSwgL15tYWFydHxtcnQuPyQvaSwgL15hcHIvaSwgL15tZWkkL2ksIC9eanVuW2kuXT8kL2ksIC9eanVsW2kuXT8kL2ksIC9eYXVnL2ksIC9ec2VwL2ksIC9eb2t0L2ksIC9ebm92L2ksIC9eZGVjL2ldO1xuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGFwcmlsfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXJ8amFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaTtcblxuICAgIHZhciBubEJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwtYmUnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxtZWl8anVbbmxdaXxhcHJpbHxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcblxuICAgICAgICB3ZWVrZGF5cyA6ICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ292ZXIgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBnZWxlZGVuJyxcbiAgICAgICAgICAgIHMgOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZW4nLFxuICAgICAgICAgICAgbSA6ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoIDogJ8Opw6luIHV1cicsXG4gICAgICAgICAgICBoaCA6ICclZCB1dXInLFxuICAgICAgICAgICAgZCA6ICfDqcOpbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTSA6ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHkgOiAnw6nDqW4gamFhcicsXG4gICAgICAgICAgICB5eSA6ICclZCBqYWFyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBubEJlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9ICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eamFuL2ksIC9eZmViL2ksIC9ebWFhcnR8bXJ0Lj8kL2ksIC9eYXByL2ksIC9ebWVpJC9pLCAvXmp1bltpLl0/JC9pLCAvXmp1bFtpLl0/JC9pLCAvXmF1Zy9pLCAvXnNlcC9pLCAvXm9rdC9pLCAvXm5vdi9pLCAvXmRlYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxhcHJpbHxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fG1laXxqdVtubF1pfGFwcmlsfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzIDogJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgcyA6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtIDogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGggOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHV1cicsXG4gICAgICAgICAgICBkIDogJ8Opw6luIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNIDogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1hYW5kZW4nLFxuICAgICAgICAgICAgeSA6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbm4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubicsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzdW5kYWdfbcOlbmRhZ190eXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2xhdXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnc3VuX23DpW5fdHlzX29uc190b3JfZnJlX2xhdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc3VfbcOlX3R5X29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0kgZGFnIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tJIG1vcmdvbiBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0kgZ8OlciBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0bDuHJlZ8OlYW5kZV0gZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpZGFuJyxcbiAgICAgICAgICAgIHMgOiAnbm9rcmUgc2VrdW5kJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZCcsXG4gICAgICAgICAgICBtIDogJ2VpdCBtaW51dHQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0JyxcbiAgICAgICAgICAgIGggOiAnZWluIHRpbWUnLFxuICAgICAgICAgICAgaGggOiAnJWQgdGltYXInLFxuICAgICAgICAgICAgZCA6ICdlaW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE0gOiAnZWluIG3DpW5hZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6VuYWRlcicsXG4gICAgICAgICAgICB5IDogJ2VpdCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5uO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgqacnLFxuICAgICAgICAnMic6ICfgqagnLFxuICAgICAgICAnMyc6ICfgqaknLFxuICAgICAgICAnNCc6ICfgqaonLFxuICAgICAgICAnNSc6ICfgqasnLFxuICAgICAgICAnNic6ICfgqawnLFxuICAgICAgICAnNyc6ICfgqa0nLFxuICAgICAgICAnOCc6ICfgqa4nLFxuICAgICAgICAnOSc6ICfgqa8nLFxuICAgICAgICAnMCc6ICfgqaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgqacnOiAnMScsXG4gICAgICAgICfgqagnOiAnMicsXG4gICAgICAgICfgqaknOiAnMycsXG4gICAgICAgICfgqaonOiAnNCcsXG4gICAgICAgICfgqasnOiAnNScsXG4gICAgICAgICfgqawnOiAnNicsXG4gICAgICAgICfgqa0nOiAnNycsXG4gICAgICAgICfgqa4nOiAnOCcsXG4gICAgICAgICfgqa8nOiAnOScsXG4gICAgICAgICfgqaYnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIHBhSW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwYS1pbicsIHtcbiAgICAgICAgLy8gVGhlcmUgYXJlIG1vbnRocyBuYW1lIGFzIHBlciBOYW5ha3NoYWhpIENhbGVuZGVyIGJ1dCB0aGV5IGFyZSBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxuICAgICAgICBtb250aHMgOiAn4Kic4Kio4Ki14Kiw4KmAX+Coq+CovOCosOCoteCosOCpgF/gqK7gqL7gqLDgqJpf4KiF4Kiq4KmN4Kiw4KmI4KiyX+CoruCoiF/gqJzgqYLgqKhf4Kic4KmB4Kiy4Ki+4KiIX+CoheCol+CouOCopF/gqLjgqKTgqbDgqKzgqLBf4KiF4KiV4Kik4KmC4Kis4KiwX+CoqOCoteCpsOCorOCosF/gqKbgqLjgqbDgqKzgqLAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+ConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgqJDgqKTgqLXgqL7gqLBf4Ki44KmL4Kiu4Ki14Ki+4KiwX+CoruCpsOCol+CosuCoteCovuCosF/gqKzgqYHgqKfgqLXgqL7gqLBf4Ki14KmA4Kiw4Ki14Ki+4KiwX+CouOCovOCpgeCpseColeCosOCoteCovuCosF/gqLjgqLzgqKjgqYDgqJrgqLDgqLXgqL7gqLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tIOCoteConOCphycsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCoteConOCphycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4KiF4KicXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgqJXgqLJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vgqIXgqJfgqLLgqL5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+ColeCosl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+CoquCov+Com+CosuCph10gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCoteCov+CpseComicsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCoquCov+Com+CosuCphycsXG4gICAgICAgICAgICBzIDogJ+ColeCpgeConSDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgc3MgOiAnJWQg4Ki44KiV4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIG0gOiAn4KiH4KiVIOCoruCov+CpsOConycsXG4gICAgICAgICAgICBtbSA6ICclZCDgqK7gqL/gqbDgqJ8nLFxuICAgICAgICAgICAgaCA6ICfgqIfgqbHgqJUg4KiY4Kmw4Kif4Ki+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOComOCpsOCon+CphycsXG4gICAgICAgICAgICBkIDogJ+Coh+CpseColSDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Kim4Ki/4KioJyxcbiAgICAgICAgICAgIE0gOiAn4KiH4Kmx4KiVIOCoruCoueCpgOCoqOCovicsXG4gICAgICAgICAgICBNTSA6ICclZCDgqK7gqLngqYDgqKjgqYcnLFxuICAgICAgICAgICAgeSA6ICfgqIfgqbHgqJUg4Ki44Ki+4KiyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCouOCovuCosidcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cpp+CpqOCpqeCpquCpq+CprOCpreCpruCpr+Cppl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUHVuamFiaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kiw4Ki+4KikfOCouOCoteCph+CosHzgqKbgqYHgqKrgqLngqL/gqLB84Ki44Ki84Ki+4KiuLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CosOCovuCopCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CouOCoteCph+CosCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqKbgqYHgqKrgqLngqL/gqLAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CouOCovOCovuCoricpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kiw4Ki+4KikJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLjgqLXgqYfgqLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CopuCpgeCoquCoueCov+CosCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ki44Ki84Ki+4KiuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwYUluO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzTm9taW5hdGl2ZSA9ICdzdHljemXFhF9sdXR5X21hcnplY19rd2llY2llxYRfbWFqX2N6ZXJ3aWVjX2xpcGllY19zaWVycGllxYRfd3J6ZXNpZcWEX3Bhxbpkemllcm5pa19saXN0b3BhZF9ncnVkemllxYQnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1N1YmplY3RpdmUgPSAnc3R5Y3puaWFfbHV0ZWdvX21hcmNhX2t3aWV0bmlhX21hamFfY3plcndjYV9saXBjYV9zaWVycG5pYV93cnplxZtuaWFfcGHFumR6aWVybmlrYV9saXN0b3BhZGFfZ3J1ZG5pYScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gKG4gJSAxMCA8IDUpICYmIChuICUgMTAgPiAxKSAmJiAoKH5+KG4gLyAxMCkgJSAxMCkgIT09IDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla3VuZCcpO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6ICdtaW51dMSZJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbnV0eScgOiAnbWludXQnKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ICA/ICdnb2R6aW5hJyAgOiAnZ29kemluxJknO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZ29kemlueScgOiAnZ29kemluJyk7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaWVzacSFY2UnIDogJ21pZXNpxJljeScpO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbGF0YScgOiAnbGF0Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwbCcsIHtcbiAgICAgICAgbW9udGhzIDogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnJykge1xuICAgICAgICAgICAgICAgIC8vIEhhY2s6IGlmIGZvcm1hdCBlbXB0eSB3ZSBrbm93IHRoaXMgaXMgdXNlZCB0byBnZW5lcmF0ZVxuICAgICAgICAgICAgICAgIC8vIFJlZ0V4cCBieSBtb21lbnQuIEdpdmUgdGhlbiBiYWNrIGJvdGggdmFsaWQgZm9ybXMgb2YgbW9udGhzXG4gICAgICAgICAgICAgICAgLy8gaW4gUmVnRXhwIHJlYWR5IGZvcm1hdC5cbiAgICAgICAgICAgICAgICByZXR1cm4gJygnICsgbW9udGhzU3ViamVjdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXSArICd8JyArIG1vbnRoc05vbWluYXRpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV0gKyAnKSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9EIE1NTU0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTdWJqZWN0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnc3R5X2x1dF9tYXJfa3dpX21hal9jemVfbGlwX3NpZV93cnpfcGHFul9saXNfZ3J1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICduaWVkemllbGFfcG9uaWVkemlhxYJla193dG9yZWtfxZtyb2RhX2N6d2FydGVrX3BpxIV0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25kel9wb25fd3RfxZtyX2N6d19wdF9zb2InLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ05kX1BuX1d0X8Wacl9Del9QdF9Tbycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRHppxZsgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tKdXRybyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIG5pZWR6aWVsxJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1dlIHd0b3JlayBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyDFm3JvZMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHNvYm90xJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXXSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbV2N6b3JhaiBvXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIG5pZWR6aWVsxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIMWbcm9kxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIHNvYm90xJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYJ5XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgdGVtdScsXG4gICAgICAgICAgICBzIDogJ2tpbGthIHNla3VuZCcsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiAnMSBkemllxYQnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZG5pJyxcbiAgICAgICAgICAgIE0gOiAnbWllc2nEhWMnLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogJ3JvaycsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgcHRCciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0LWJyJywge1xuICAgICAgICBtb250aHMgOiAnamFuZWlyb19mZXZlcmVpcm9fbWFyw6dvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZXZfbWFyX2Ficl9tYWlfanVuX2p1bF9hZ29fc2V0X291dF9ub3ZfZGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICAgICAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIDogLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdow6EgJXMnLFxuICAgICAgICAgICAgcyA6ICdwb3Vjb3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1bSBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VtYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW0gZGlhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRpYXMnLFxuICAgICAgICAgICAgTSA6ICd1bSBtw6pzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW0gYW5vJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6J1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHB0QnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBwdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0Jywge1xuICAgICAgICBtb250aHMgOiAnamFuZWlyb19mZXZlcmVpcm9fbWFyw6dvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZXZfbWFyX2Ficl9tYWlfanVuX2p1bF9hZ29fc2V0X291dF9ub3ZfZGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICAgICAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIDogLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdow6EgJXMnLFxuICAgICAgICAgICAgcyA6ICdzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VtIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW1hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1bSBkaWEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGlhcycsXG4gICAgICAgICAgICBNIDogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeSA6ICd1bSBhbm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5vcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsIDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgICAgICdzcyc6ICdzZWN1bmRlJyxcbiAgICAgICAgICAgICAgICAnbW0nOiAnbWludXRlJyxcbiAgICAgICAgICAgICAgICAnaGgnOiAnb3JlJyxcbiAgICAgICAgICAgICAgICAnZGQnOiAnemlsZScsXG4gICAgICAgICAgICAgICAgJ01NJzogJ2x1bmknLFxuICAgICAgICAgICAgICAgICd5eSc6ICdhbmknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VwYXJhdG9yID0gJyAnO1xuICAgICAgICBpZiAobnVtYmVyICUgMTAwID49IDIwIHx8IChudW1iZXIgPj0gMTAwICYmIG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9ICcgZGUgJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtYmVyICsgc2VwYXJhdG9yICsgZm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIHJvID0gbW9tZW50LmRlZmluZUxvY2FsZSgncm8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdpYW51YXJpZV9mZWJydWFyaWVfbWFydGllX2FwcmlsaWVfbWFpX2l1bmllX2l1bGllX2F1Z3VzdF9zZXB0ZW1icmllX29jdG9tYnJpZV9ub2llbWJyaWVfZGVjZW1icmllJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdpYW4uX2ZlYnIuX21hcnQuX2Fwci5fbWFpX2l1bi5faXVsLl9hdWcuX3NlcHQuX29jdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkdW1pbmljxINfbHVuaV9tYXLIm2lfbWllcmN1cmlfam9pX3ZpbmVyaV9zw6JtYsSDdMSDJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0R1bV9MdW5fTWFyX01pZV9Kb2lfVmluX1PDom0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0R1X0x1X01hX01pX0pvX1ZpX1PDoicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1themkgbGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbcOiaW5lIGxhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2xhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2llcmkgbGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2Zvc3RhXSBkZGRkIFtsYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAncGVzdGUgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDDrm4gdXJtxIMnLFxuICAgICAgICAgICAgcyA6ICdjw6J0ZXZhIHNlY3VuZGUnLFxuICAgICAgICAgICAgc3MgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dCcsXG4gICAgICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoIDogJ28gb3LEgycsXG4gICAgICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkIDogJ28gemknLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICdvIGx1bsSDJyxcbiAgICAgICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHkgOiAndW4gYW4nLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3NzJzogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicgOiAn0LzQuNC90YPRgtGDX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyxcbiAgICAgICAgICAgICdoaCc6ICfRh9Cw0YFf0YfQsNGB0LBf0YfQsNGB0L7QsicsXG4gICAgICAgICAgICAnZGQnOiAn0LTQtdC90Yxf0LTQvdGPX9C00L3QtdC5JyxcbiAgICAgICAgICAgICdNTSc6ICfQvNC10YHRj9GGX9C80LXRgdGP0YbQsF/QvNC10YHRj9GG0LXQsicsXG4gICAgICAgICAgICAneXknOiAn0LPQvtC0X9Cz0L7QtNCwX9C70LXRgidcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LAnIDogJ9C80LjQvdGD0YLRgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbL17Rj9C90LIvaSwgL17RhNC10LIvaSwgL17QvNCw0YAvaSwgL17QsNC/0YAvaSwgL17QvNCwW9C50Y9dL2ksIC9e0LjRjtC9L2ksIC9e0LjRjtC7L2ksIC9e0LDQstCzL2ksIC9e0YHQtdC9L2ksIC9e0L7QutGCL2ksIC9e0L3QvtGPL2ksIC9e0LTQtdC6L2ldO1xuXG4gICAgLy8gaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvcnVsZXMvMTM5LXByb3AgOiDCpyAxMDNcbiAgICAvLyDQodC+0LrRgNCw0YnQtdC90LjRjyDQvNC10YHRj9GG0LXQsjogaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvYnVyby9zZWFyY2gtYW5zd2VyP3M9MjQyNjM3XG4gICAgLy8gQ0xEUiBkYXRhOiAgICAgICAgICBodHRwOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzI4L3N1bW1hcnkvcnUuaHRtbCMxNzUzXG4gICAgdmFyIHJ1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgncnUnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3QstCw0YDRj1/RhNC10LLRgNCw0LvRj1/QvNCw0YDRgtCwX9Cw0L/RgNC10LvRj1/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCz0YPRgdGC0LBf0YHQtdC90YLRj9Cx0YDRj1/QvtC60YLRj9Cx0YDRj1/QvdC+0Y/QsdGA0Y9f0LTQtdC60LDQsdGA0Y8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDoge1xuICAgICAgICAgICAgLy8g0L/QviBDTERSINC40LzQtdC90L3QviBcItC40Y7Quy5cIiDQuCBcItC40Y7QvS5cIiwg0L3QviDQutCw0LrQvtC5INGB0LzRi9GB0Lsg0LzQtdC90Y/RgtGMINCx0YPQutCy0YMg0L3QsCDRgtC+0YfQutGDID9cbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgC5f0LDQv9GALl/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YDRgl/QsNC/0YAuX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzIDoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNCwX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtCwX9GB0YPQsdCx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgZm9ybWF0OiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00YNf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0YNf0YHRg9Cx0LHQvtGC0YMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP1xcXSA/ZGRkZC9cbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LgsINC/0L4g0YLRgNC4INCx0YPQutCy0YssINC00LvRjyDQvdC10LrQvtGC0L7RgNGL0YUsINC/0L4gNCDQsdGD0LrQstGLLCDRgdC+0LrRgNCw0YnQtdC90LjRjyDRgSDRgtC+0YfQutC+0Lkg0Lgg0LHQtdC3INGC0L7Rh9C60LhcbiAgICAgICAgbW9udGhzUmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC60L7Qv9C40Y8g0L/RgNC10LTRi9C00YPRidC10LPQvlxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4XG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXijRj9C90LLQsNGAW9GP0YxdfNGE0LXQstGA0LDQu1vRj9GMXXzQvNCw0YDRgtCwP3zQsNC/0YDQtdC7W9GP0YxdfNC80LBb0Y/QuV180LjRjtC9W9GP0YxdfNC40Y7Qu1vRj9GMXXzQsNCy0LPRg9GB0YLQsD980YHQtdC90YLRj9Cx0YBb0Y/RjF180L7QutGC0Y/QsdGAW9GP0YxdfNC90L7Rj9Cx0YBb0Y/RjF180LTQtdC60LDQsdGAW9GP0YxdKS9pLFxuXG4gICAgICAgIC8vINCS0YvRgNCw0LbQtdC90LjQtSwg0LrQvtGC0L7RgNC+0LUg0YHQvtC+0YLQstC10YHRgtCy0YPQtdGCINGC0L7Qu9GM0LrQviDRgdC+0LrRgNCw0YnRkdC90L3Ri9C8INGE0L7RgNC80LDQvFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXijRj9C90LJcXC580YTQtdCy0YA/XFwufNC80LDRgFvRgi5dfNCw0L/RgFxcLnzQvNCwW9GP0LldfNC40Y7QvVvRjNGPLl180LjRjtC7W9GM0Y8uXXzQsNCy0LNcXC580YHQtdC90YI/XFwufNC+0LrRglxcLnzQvdC+0Y/QsT9cXC580LTQtdC6XFwuKS9pLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0LMuLCBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHQtdCz0L7QtNC90Y8sINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CX0LDQstGC0YDQsCwg0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCwg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LXQtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQuNC5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidGD0Y5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF5KCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvQvtC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YvQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GD0Y5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF5KCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9GH0LXRgNC10LcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQvdCw0LfQsNC0JyxcbiAgICAgICAgICAgIHMgOiAn0L3QtdGB0LrQvtC70YzQutC+INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHkgOiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Lh80YPRgtGA0LB80LTQvdGPfNCy0LXRh9C10YDQsC9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C10YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9C4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRg9GC0YDQsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQtdGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC5fNCz0L580Y8pLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC5JztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGPJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBydTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgJ9is2YbZiNix2YonLFxuICAgICAgICAn2YHZitio2LHZiNix2YonLFxuICAgICAgICAn2YXYp9ix2oYnLFxuICAgICAgICAn2KfZvtix2YrZhCcsXG4gICAgICAgICfZhdim2YonLFxuICAgICAgICAn2KzZiNmGJyxcbiAgICAgICAgJ9is2YjZhNin2KHZkCcsXG4gICAgICAgICfYotqv2LPZvScsXG4gICAgICAgICfYs9mK2b7ZvdmF2KjYsScsXG4gICAgICAgICfYotqq2b3ZiNio2LEnLFxuICAgICAgICAn2YbZiNmF2KjYsScsXG4gICAgICAgICfaitiz2YXYqNixJ1xuICAgIF07XG4gICAgdmFyIGRheXMgPSBbXG4gICAgICAgICfYotqG2LEnLFxuICAgICAgICAn2LPZiNmF2LEnLFxuICAgICAgICAn2Kfasdin2LHZiCcsXG4gICAgICAgICfYp9ix2KjYuScsXG4gICAgICAgICfYrtmF2YrYsycsXG4gICAgICAgICfYrNmF2LknLFxuICAgICAgICAn2ofZhtqH2LEnXG4gICAgXTtcblxuICAgIHZhciBzZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NkJywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbiA6IGRheXMsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRk2IwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Ytdio2K182LTYp9mFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9in2oRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9iz2oDYp9q72YpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9in2rPZitmGINmH2YHYqtmKINiq2YpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9qq2KfZhNmH2YddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1var9iy2LHZitmEINmH2YHYqtmKXSBkZGRkIFvYqtmKXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg2b7ZiNihJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg2KfasycsXG4gICAgICAgICAgICBzIDogJ9qG2YbYryDYs9mK2qrZhtqKJyxcbiAgICAgICAgICAgIHNzIDogJyVkINiz2YraqtmG2oonLFxuICAgICAgICAgICAgbSA6ICfZh9qqINmF2YbZvScsXG4gICAgICAgICAgICBtbSA6ICclZCDZhdmG2b0nLFxuICAgICAgICAgICAgaCA6ICfZh9qqINqq2YTYp9qqJyxcbiAgICAgICAgICAgIGhoIDogJyVkINqq2YTYp9qqJyxcbiAgICAgICAgICAgIGQgOiAn2YfaqiDaj9mK2YbZh9mGJyxcbiAgICAgICAgICAgIGRkIDogJyVkINqP2YrZhtmH2YYnLFxuICAgICAgICAgICAgTSA6ICfZh9qqINmF2YfZitmG2YgnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2YXZh9mK2YbYpycsXG4gICAgICAgICAgICB5IDogJ9mH2qog2LPYp9mEJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHNlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2UnLCB7XG4gICAgICAgIG1vbnRocyA6ICdvxJHEkWFqYWdlbcOhbm51X2d1b3Z2YW3DoW5udV9uanVrxI1hbcOhbm51X2N1b8WLb23DoW5udV9taWVzc2Vtw6FubnVfZ2Vhc3NlbcOhbm51X3N1b2lkbmVtw6FubnVfYm9yZ2Vtw6FubnVfxI1ha8SNYW3DoW5udV9nb2xnZ290bcOhbm51X3Nrw6FibWFtw6FubnVfanVvdmxhbcOhbm51Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdvxJHEkWpfZ3Vvdl9uanVrX2N1b19taWVzX2dlYXNfc3VvaV9ib3JnX8SNYWvEjV9nb2xnX3Nrw6FiX2p1b3YnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3NvdG5hYmVhaXZpX3Z1b3Nzw6FyZ2FfbWHFi8WLZWLDoXJnYV9nYXNrYXZhaGtrdV9kdW9yYXN0YXRfYmVhcmphZGF0X2zDoXZ2YXJkYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnc290bl92dW9zX21hxYtfZ2Fza19kdW9yX2JlYXJfbMOhdicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc192X21fZ19kX2JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ01NTU0gRC4gW2IuXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbb3RuZSB0aV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpaHR0aW4gdGldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdGldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWt0ZSB0aV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbb3ZkZGl0XSBkZGRkIFt0aV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgZ2Vhxb5lcycsXG4gICAgICAgICAgICBwYXN0IDogJ21hxYtpdCAlcycsXG4gICAgICAgICAgICBzIDogJ21vYWRkZSBzZWt1bmRkYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRkYXQnLFxuICAgICAgICAgICAgbSA6ICdva3RhIG1pbnVodGEnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludWh0YXQnLFxuICAgICAgICAgICAgaCA6ICdva3RhIGRpaW1tdScsXG4gICAgICAgICAgICBoaCA6ICclZCBkaWltbXV0JyxcbiAgICAgICAgICAgIGQgOiAnb2t0YSBiZWFpdmknLFxuICAgICAgICAgICAgZGQgOiAnJWQgYmVhaXZ2aXQnLFxuICAgICAgICAgICAgTSA6ICdva3RhIG3DoW5udScsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6FudXQnLFxuICAgICAgICAgICAgeSA6ICdva3RhIGphaGtpJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphZ2l0J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICAvKmpzaGludCAtVzEwMCovXG4gICAgdmFyIHNpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2knLCB7XG4gICAgICAgIG1vbnRocyA6ICfgtqLgtrHgt4Dgt4/gtrvgt5Jf4La04LeZ4La24La74LeA4LeP4La74LeSX+C2uOC3j+C2u+C3iuC2reC3lF/gtoXgtrTgt4rigI3gtrvgt5rgtr3gt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4Led4LeD4LeK4Lat4LeUX+C3g+C3kOC2tOC3iuC2reC3kOC2uOC3iuC2tuC2u+C3il/gtpTgtprgt4rgtq3gt53gtrbgtrvgt4pf4Lax4Lec4LeA4LeQ4La44LeK4La24La74LeKX+C2r+C3meC3g+C3kOC2uOC3iuC2tuC2u+C3iicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4Lai4LaxX+C2tOC3meC2tl/gtrjgt4/gtrvgt4pf4LaF4La04LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3nV/gt4Pgt5DgtrTgt4pf4LaU4Laa4LeKX+C2seC3nOC3gOC3kF/gtq/gt5ngt4Pgt5AnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+C2ieC2u+C3kuC2r+C3j1/gt4PgtrPgt5Tgtq/gt49f4LaF4Laf4LeE4La74LeU4LeA4LeP4Lav4LePX+C2tuC2r+C3j+C2r+C3j1/gtrbgt4rigI3gtrvgt4Tgt4Pgt4rgtrTgtq3gt5LgtrHgt4rgtq/gt49f4LeD4LeS4Laa4LeU4La74LeP4Lav4LePX+C3g+C3meC2seC3g+C3lOC2u+C3j+C2r+C3jycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgtongtrvgt5Jf4LeD4Laz4LeUX+C2heC2n1/gtrbgtq/gt49f4La24LeK4oCN4La74LeEX+C3g+C3kuC2muC3lF/gt4Pgt5ngtrEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+C2iV/gt4Nf4LaFX+C2tl/gtrbgt4rigI3gtrtf4LeD4LeSX+C3g+C3mScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdhIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ2EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWSBNTU1NIEQnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkgTU1NTSBELCBhIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZIE1NTU0gRCBb4LeA4LeQ4Lax4LeSXSBkZGRkLCBhIGg6bW06c3MnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4LaF4LavXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+C3hOC3meC2p10gTFRb4LanXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUW+C2p10nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4LaK4La64LeaXSBMVFvgtqddJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgtrTgt4Pgt5Tgtpzgt5LgtrpdIGRkZGQgTFRb4LanXScsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXPgtprgt5LgtrHgt4onLFxuICAgICAgICAgICAgcGFzdCA6ICclc+C2muC2pyDgtrTgt5ngtrsnLFxuICAgICAgICAgICAgcyA6ICfgtq3gtq3gt4rgtrTgtrsg4Laa4LeS4LeE4LeS4La04La6JyxcbiAgICAgICAgICAgIHNzIDogJ+C2reC2reC3iuC2tOC2uyAlZCcsXG4gICAgICAgICAgICBtIDogJ+C2uOC3kuC2seC3kuC2reC3iuC2reC3lOC3gCcsXG4gICAgICAgICAgICBtbSA6ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5QgJWQnLFxuICAgICAgICAgICAgaCA6ICfgtrTgt5DgtronLFxuICAgICAgICAgICAgaGggOiAn4La04LeQ4La6ICVkJyxcbiAgICAgICAgICAgIGQgOiAn4Lav4LeS4Lax4La6JyxcbiAgICAgICAgICAgIGRkIDogJ+C2r+C3kuC2sSAlZCcsXG4gICAgICAgICAgICBNIDogJ+C2uOC3j+C3g+C2uicsXG4gICAgICAgICAgICBNTSA6ICfgtrjgt4/gt4MgJWQnLFxuICAgICAgICAgICAgeSA6ICfgt4Dgt4PgtrsnLFxuICAgICAgICAgICAgeXkgOiAn4LeA4LeD4La7ICVkJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0g4LeA4LeQ4Lax4LeSLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIOC3gOC3kOC2seC3kic7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2UgOiAv4La04LeZ4La7IOC3gOC2u+C3lHzgtrTgt4Pgt4og4LeA4La74LeUfOC2tOC3mS7gt4B84La0LuC3gC4vLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgtrQu4LeALicgfHwgaW5wdXQgPT09ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn4La0LuC3gC4nIDogJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfgtrTgt5ku4LeALicgOiAn4La04LeZ4La7IOC3gOC2u+C3lCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9ICdqYW51w6FyX2ZlYnJ1w6FyX21hcmVjX2FwcsOtbF9tw6FqX2rDum5fasO6bF9hdWd1c3Rfc2VwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdqYW5fZmViX21hcl9hcHJfbcOhal9qw7puX2rDumxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gKG4gPiAxKSAmJiAobiA8IDUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzogIC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3DDoXIgc2Vrw7puZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOiAvLyA5IHNlY29uZHMgLyBpbiA5IHNlY29uZHMgLyA5IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWvDum5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWt1bmRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ20nOiAgLy8gYSBtaW51dGUgLyBpbiBhIG1pbnV0ZSAvIGEgbWludXRlIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbsO6dGEnIDogKGlzRnV0dXJlID8gJ21pbsO6dHUnIDogJ21pbsO6dG91Jyk7XG4gICAgICAgICAgICBjYXNlICdtbSc6IC8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbsO6dHknIDogJ21pbsO6dCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWluw7p0YW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoJzogIC8vIGFuIGhvdXIgLyBpbiBhbiBob3VyIC8gYW4gaG91ciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogKGlzRnV0dXJlID8gJ2hvZGludScgOiAnaG9kaW5vdScpO1xuICAgICAgICAgICAgY2FzZSAnaGgnOiAvLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdob2RpbnknIDogJ2hvZMOtbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnaG9kaW5hbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiAgLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnZGXFiCcgOiAnZMWIb20nO1xuICAgICAgICAgICAgY2FzZSAnZGQnOiAvLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdkbmknIDogJ2Ruw60nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2TFiGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6ICAvLyBhIG1vbnRoIC8gaW4gYSBtb250aCAvIGEgbW9udGggYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdtZXNpYWMnIDogJ21lc2lhY29tJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWVzaWFjZScgOiAnbWVzaWFjb3YnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21lc2lhY21pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5JzogIC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3JvaycgOiAncm9rb20nO1xuICAgICAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdyb2tvdicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAncm9rbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NrJywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzIDogJ25lZGXEvmFfcG9uZGVsb2tfdXRvcm9rX3N0cmVkYV/FoXR2cnRva19waWF0b2tfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIG9dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbemFqdHJhIG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkZcS+dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHN0cmVkdSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZvIMWhdHZydG9rIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBwaWF0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHNvYm90dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbdsSNZXJhIG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogbmVkZcS+dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHN0cmVkdSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHNvYm90dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAncHJlZCAlcycsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ25la2FqIHNla3VuZCcgOiAnbmVrYWogc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3Nla3VuZG8nIDogJ3Nla3VuZGknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3Nla3VuZGknIDogJ3Nla3VuZGFoJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2VrdW5kZScgOiAnc2VrdW5kYWgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3Nla3VuZCcgOiAnc2VrdW5kJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2VuYSBtaW51dGEnIDogJ2VubyBtaW51dG8nO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6ICdtaW51dG8nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0aScgOiAnbWludXRhbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dGUnIDogJ21pbnV0YW1pJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dCcgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIHVyYScgOiAnZW5vIHVybyc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICd1cmEnIDogJ3Vybyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJpJyA6ICd1cmFtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyZScgOiAndXJhbWknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbiBkYW4nIDogJ2VuaW0gZG5lbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkYW4nIDogJ2RuZW0nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RuaScgOiAnZG5ldm9tYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbiBtZXNlYycgOiAnZW5pbSBtZXNlY2VtJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjJyA6ICdtZXNlY2VtJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2EnIDogJ21lc2VjZW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNlJyA6ICdtZXNlY2knO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjZXYnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbm8gbGV0bycgOiAnZW5pbSBsZXRvbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRvJyA6ICdsZXRvbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0aScgOiAnbGV0b21hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0YScgOiAnbGV0aSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0JyA6ICdsZXRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NsJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFyZWNfYXByaWxfbWFqX2p1bmlqX2p1bGlqX2F2Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ25lZGVsamFfcG9uZWRlbGpla190b3Jla19zcmVkYV/EjWV0cnRla19wZXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVkLl9wb24uX3Rvci5fc3JlLl/EjWV0Ll9wZXQuX3NvYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ25lX3BvX3RvX3NyX8SNZV9wZV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSAgOiAnW2RhbmVzIG9iXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5ICA6ICdbanV0cmkgb2JdIExUJyxcblxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtuZWRlbGpvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW3NyZWRvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW3NvYm90b10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIGRkZGQgW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1t2xI1lcmFqIG9iXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW3NyZWRvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc29ib3RvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmppXSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnxI1leiAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJlZCAlcycsXG4gICAgICAgICAgICBzICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3MgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5ICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHNxID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3EnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5hcl9TaGt1cnRfTWFyc19QcmlsbF9NYWpfUWVyc2hvcl9Lb3JyaWtfR3VzaHRfU2h0YXRvcl9UZXRvcl9Ow6tudG9yX0RoamV0b3InLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9TaGtfTWFyX1ByaV9NYWpfUWVyX0tvcl9HdXNfU2h0X1RldF9Ow6tuX0Roaicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnRSBEaWVsX0UgSMOrbsOrX0UgTWFydMOrX0UgTcOrcmt1csOrX0UgRW5qdGVfRSBQcmVtdGVfRSBTaHR1bsOrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0RpZV9Iw6tuX01hcl9Nw6tyX0Vual9QcmVfU2h0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEX0hfTWFfTcOrX0VfUF9TaCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL1BEfE1ELyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDApID09PSAnTSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cnMgPCAxMiA/ICdQRCcgOiAnTUQnO1xuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbU290IG7Dq10gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbTmVzw6tyIG7Dq10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbbsOrXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tEamUgbsOrXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtlIGthbHVhciBuw6tdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICduw6sgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBtw6sgcGFyw6snLFxuICAgICAgICAgICAgcyA6ICdkaXNhIHNla29uZGEnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vrb25kYScsXG4gICAgICAgICAgICBtIDogJ25qw6sgbWludXTDqycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGEnLFxuICAgICAgICAgICAgaCA6ICduasOrIG9yw6snLFxuICAgICAgICAgICAgaGggOiAnJWQgb3LDqycsXG4gICAgICAgICAgICBkIDogJ25qw6sgZGl0w6snLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGl0w6snLFxuICAgICAgICAgICAgTSA6ICduasOrIG11YWonLFxuICAgICAgICAgICAgTU0gOiAnJWQgbXVhaicsXG4gICAgICAgICAgICB5IDogJ25qw6sgdml0JyxcbiAgICAgICAgICAgIHl5IDogJyVkIHZpdGUnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0cmFuc2xhdG9yID0ge1xuICAgICAgICB3b3JkczogeyAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsn0YHQtdC60YPQvdC00LAnLCAn0YHQtdC60YPQvdC00LUnLCAn0YHQtdC60YPQvdC00LgnXSxcbiAgICAgICAgICAgIG06IFsn0ZjQtdC00LDQvSDQvNC40L3Rg9GCJywgJ9GY0LXQtNC90LUg0LzQuNC90YPRgtC1J10sXG4gICAgICAgICAgICBtbTogWyfQvNC40L3Rg9GCJywgJ9C80LjQvdGD0YLQtScsICfQvNC40L3Rg9GC0LAnXSxcbiAgICAgICAgICAgIGg6IFsn0ZjQtdC00LDQvSDRgdCw0YInLCAn0ZjQtdC00L3QvtCzINGB0LDRgtCwJ10sXG4gICAgICAgICAgICBoaDogWyfRgdCw0YInLCAn0YHQsNGC0LAnLCAn0YHQsNGC0LgnXSxcbiAgICAgICAgICAgIGRkOiBbJ9C00LDQvScsICfQtNCw0L3QsCcsICfQtNCw0L3QsCddLFxuICAgICAgICAgICAgTU06IFsn0LzQtdGB0LXRhicsICfQvNC10YHQtdGG0LAnLCAn0LzQtdGB0LXRhtC4J10sXG4gICAgICAgICAgICB5eTogWyfQs9C+0LTQuNC90LAnLCAn0LPQvtC00LjQvdC1JywgJ9Cz0L7QtNC40L3QsCddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3JDeXJsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3ItY3lybCcsIHtcbiAgICAgICAgbW9udGhzOiAn0ZjQsNC90YPQsNGAX9GE0LXQsdGA0YPQsNGAX9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCx0LDRgF/QvtC60YLQvtCx0LDRgF/QvdC+0LLQtdC80LHQsNGAX9C00LXRhtC10LzQsdCw0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0ZjQsNC9Ll/RhNC10LEuX9C80LDRgC5f0LDQv9GALl/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LMuX9GB0LXQvy5f0L7QutGCLl/QvdC+0LIuX9C00LXRhi4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn0L3QtdC00LXRmdCwX9C/0L7QvdC10LTQtdGZ0LDQul/Rg9GC0L7RgNCw0Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQsNC6X9C/0LXRgtCw0Lpf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtdC0Ll/Qv9C+0L0uX9GD0YLQvi5f0YHRgNC1Ll/Rh9C10YIuX9C/0LXRgi5f0YHRg9CxLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC1X9C/0L5f0YPRgl/RgdGAX9GH0LVf0L/QtV/RgdGDJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0LTQsNC90LDRgSDRg10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vRgdGD0YLRgNCwINGDXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9C90LXQtNC10ZnRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRgNC10LTRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRg9Cx0L7RgtGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIGRkZGQgW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1vRmNGD0YfQtSDRg10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvQvdC10LTQtdGZ0LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0L/QvtC90LXQtNC10ZnQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GD0YLQvtGA0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRgNC10LTQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRh9C10YLQstGA0YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0LXRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YPQsdC+0YLQtV0gW9GDXSBMVCdcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdCAgIDogJ9C/0YDQtSAlcycsXG4gICAgICAgICAgICBzICAgICAgOiAn0L3QtdC60L7Qu9C40LrQviDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzcyAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZCAgICAgIDogJ9C00LDQvScsXG4gICAgICAgICAgICBkZCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gICAgICA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ9Cz0L7QtNC40L3RgycsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyQ3lybDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmRhJywgJ3Nla3VuZGUnLCAnc2VrdW5kaSddLFxuICAgICAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRuZSBtaW51dGUnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0ZScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtZXNlYycsICdtZXNlY2EnLCAnbWVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JlLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JlZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJlICVzJyxcbiAgICAgICAgICAgIHMgICAgICA6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkICAgICAgOiAnZGFuJyxcbiAgICAgICAgICAgIGRkICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21lc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ2dvZGludScsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3MgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcycsIHtcbiAgICAgICAgbW9udGhzIDogXCJCaGltYmlkdndhbmVfSW5kbG92YW5hX0luZGxvdidsZW5raHVsdV9NYWJhc2FfSW5raHdla2h3ZXRpX0luaGxhYmFfS2hvbHdhbmVfSW5nY2lfSW55b25pX0ltcGhhbGFfTHdldGlfSW5nb25nb25pXCIuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnQmhpX0luYV9JbnVfTWFiX0lua19JbmhfS2hvX0lnY19JbnlfSW1wX0x3ZV9JZ28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0xpc29udGZvX1Vtc29tYnVsdWtvX0xlc2liaWxpX0xlc2l0c2F0ZnVfTGVzaW5lX0xlc2lobGFudV9VbWdjaWJlbG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTGlzX1VtYl9Mc2JfTGVzX0xzaV9Mc2hfVW1nJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdMaV9Vc19MYl9MdF9Mc19MaF9VZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tOYW11aGxhIG5nYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbS3VzYXNhIG5nYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbbmdhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tJdG9sbyBuZ2FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2xlbGlwaGVsaWxlXSBbbmdhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnbmdhICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnd2VudGVrYSBuZ2EgJXMnLFxuICAgICAgICAgICAgcyA6ICdlbWl6dXp3YW5hIGxvbWNhbmUnLFxuICAgICAgICAgICAgc3MgOiAnJWQgbXp1endhbmEnLFxuICAgICAgICAgICAgbSA6ICd1bXp1enUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgZW1penV6dScsXG4gICAgICAgICAgICBoIDogJ2xpaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBlbWFob3JhJyxcbiAgICAgICAgICAgIGQgOiAnbGlsYW5nYScsXG4gICAgICAgICAgICBkZCA6ICclZCBlbWFsYW5nYScsXG4gICAgICAgICAgICBNIDogJ2lueWFuZ2EnLFxuICAgICAgICAgICAgTU0gOiAnJWQgdGlueWFuZ2EnLFxuICAgICAgICAgICAgeSA6ICd1bW55YWthJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGltaW55YWthJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZWt1c2VuaXxlbWluaXxlbnRzYW1iYW1hfGVidXN1a3UvLFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VrdXNlbmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbWluaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VudHNhbWJhbWEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VidXN1a3UnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAnZWt1c2VuaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbWluaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW50c2FtYmFtYScgfHwgbWVyaWRpZW0gPT09ICdlYnVzdWt1Jykge1xuICAgICAgICAgICAgICAgIGlmIChob3VyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsIDogJyVkJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3M7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N2Jywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyaV9mZWJydWFyaV9tYXJzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0aV9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnc8O2bl9tw6VuX3Rpc19vbnNfdG9yX2ZyZV9sw7ZyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzw7ZfbcOlX3RpX29uX3RvX2ZyX2zDticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsIDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdkZGQgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0lkYWddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSW1vcmdvbl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJZ8Olcl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbUMOlXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0ldIGRkZGRbc10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdmw7ZyICVzIHNlZGFuJyxcbiAgICAgICAgICAgIHMgOiAnbsOlZ3JhIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG0gOiAnZW4gbWludXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcicsXG4gICAgICAgICAgICBoIDogJ2VuIHRpbW1lJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRpbW1hcicsXG4gICAgICAgICAgICBkIDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNIDogJ2VuIG3DpW5hZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6VuYWRlcicsXG4gICAgICAgICAgICB5IDogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXxhKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ2UnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnYScgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICdhJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ2UnIDogJ2UnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N3Jywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyaV9GZWJydWFyaV9NYWNoaV9BcHJpbGlfTWVpX0p1bmlfSnVsYWlfQWdvc3RpX1NlcHRlbWJhX09rdG9iYV9Ob3ZlbWJhX0Rlc2VtYmEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9BZ29fU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdKdW1hcGlsaV9KdW1hdGF0dV9KdW1hbm5lX0p1bWF0YW5vX0FsaGFtaXNpX0lqdW1hYV9KdW1hbW9zaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdKcGxfSnRhdF9Kbm5lX0p0YW5fQWxoX0lqbV9KbW9zJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdKMl9KM19KNF9KNV9BbF9Jal9KMScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW2xlbyBzYWFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2tlc2hvIHNhYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW3dpa2kgaWpheW9dIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW2phbmFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1t3aWtpIGlsaXlvcGl0YV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIGJhYWRheWUnLFxuICAgICAgICAgICAgcGFzdCA6ICd0b2tlYSAlcycsXG4gICAgICAgICAgICBzIDogJ2hpdmkgcHVuZGUnLFxuICAgICAgICAgICAgc3MgOiAnc2VrdW5kZSAlZCcsXG4gICAgICAgICAgICBtIDogJ2Rha2lrYSBtb2phJyxcbiAgICAgICAgICAgIG1tIDogJ2Rha2lrYSAlZCcsXG4gICAgICAgICAgICBoIDogJ3NhYSBsaW1vamEnLFxuICAgICAgICAgICAgaGggOiAnbWFzYWEgJWQnLFxuICAgICAgICAgICAgZCA6ICdzaWt1IG1vamEnLFxuICAgICAgICAgICAgZGQgOiAnbWFzaWt1ICVkJyxcbiAgICAgICAgICAgIE0gOiAnbXdlemkgbW1vamEnLFxuICAgICAgICAgICAgTU0gOiAnbWllemkgJWQnLFxuICAgICAgICAgICAgeSA6ICdtd2FrYSBtbW9qYScsXG4gICAgICAgICAgICB5eSA6ICdtaWFrYSAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+CvpycsXG4gICAgICAgICcyJzogJ+CvqCcsXG4gICAgICAgICczJzogJ+CvqScsXG4gICAgICAgICc0JzogJ+CvqicsXG4gICAgICAgICc1JzogJ+CvqycsXG4gICAgICAgICc2JzogJ+CvrCcsXG4gICAgICAgICc3JzogJ+CvrScsXG4gICAgICAgICc4JzogJ+CvricsXG4gICAgICAgICc5JzogJ+CvrycsXG4gICAgICAgICcwJzogJ+CvpidcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgr6cnOiAnMScsXG4gICAgICAgICfgr6gnOiAnMicsXG4gICAgICAgICfgr6knOiAnMycsXG4gICAgICAgICfgr6onOiAnNCcsXG4gICAgICAgICfgr6snOiAnNScsXG4gICAgICAgICfgr6wnOiAnNicsXG4gICAgICAgICfgr60nOiAnNycsXG4gICAgICAgICfgr64nOiAnOCcsXG4gICAgICAgICfgr68nOiAnOScsXG4gICAgICAgICfgr6YnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIHRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGEnLCB7XG4gICAgICAgIG1vbnRocyA6ICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4K6c4K6p4K614K6w4K6/X+CuquCuv+CuquCvjeCusOCuteCusOCuv1/grq7grr7grrDgr43grprgr41f4K6P4K6q4K+N4K6w4K6y4K+NX+CuruCvh1/grpzgr4Lgrqngr41f4K6c4K+C4K6y4K+IX+CuhuCuleCuuOCvjeCun+CvjV/grprgr4bgrqrgr43grp/gr4bgrq7gr43grqrgrrDgr41f4K6F4K6V4K+N4K6f4K+H4K6+4K6q4K6w4K+NX+CuqOCuteCuruCvjeCuquCusOCvjV/grp/grr/grprgrq7gr43grqrgrrDgr40nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+CunuCuvuCur+Cuv+CuseCvjeCuseCvgeCuleCvjeCuleCuv+CutOCuruCviF/grqTgrr/grpngr43grpXgrp/gr43grpXgrr/grrTgrq7gr4hf4K6a4K+G4K614K+N4K614K6+4K6v4K+N4K6V4K6/4K604K6u4K+IX+CuquCvgeCupOCuqeCvjeCuleCuv+CutOCuruCviF/grrXgrr/grq/grr7grrTgrpXgr43grpXgrr/grrTgrq7gr4hf4K614K+G4K6z4K+N4K6z4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IX+CumuCuqeCuv+CuleCvjeCuleCuv+CutOCuruCviCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgrp7grr7grq/grr/grrHgr4Ff4K6k4K6/4K6Z4K+N4K6V4K6z4K+NX+CumuCvhuCuteCvjeCuteCuvuCur+CvjV/grqrgr4HgrqTgrqngr41f4K614K6/4K6v4K6+4K604K6p4K+NX+CuteCvhuCus+CvjeCus+Cuv1/grprgrqngrr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CunuCuvl/grqTgrr9f4K6a4K+GX+CuquCvgV/grrXgrr9f4K614K+GX+Cumicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4K6H4K6p4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgrqjgrr7grrPgr4hdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+CuqOCvh+CuseCvjeCuseCvgV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+CuleCun+CuqOCvjeCupCDgrrXgrr7grrDgrq7gr41dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgrofgrrLgr40nLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgrq7gr4Hgrqngr40nLFxuICAgICAgICAgICAgcyA6ICfgrpLgrrDgr4Eg4K6a4K6/4K6yIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBzcyA6ICclZCDgrrXgrr/grqjgrr7grp/grr/grpXgrrPgr40nLFxuICAgICAgICAgICAgbSA6ICfgrpLgrrDgr4Eg4K6o4K6/4K6u4K6/4K6f4K6u4K+NJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCuqOCuv+CuruCuv+Cun+CumeCvjeCuleCus+CvjScsXG4gICAgICAgICAgICBoIDogJ+CukuCusOCvgSDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICAgICAgZCA6ICfgrpLgrrDgr4Eg4K6o4K6+4K6z4K+NJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCuqOCuvuCun+CvjeCuleCus+CvjScsXG4gICAgICAgICAgICBNIDogJ+CukuCusOCvgSDgrq7grr7grqTgrq7gr40nLFxuICAgICAgICAgICAgTU0gOiAnJWQg4K6u4K6+4K6k4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIHkgOiAn4K6S4K6w4K+BIOCuteCusOCvgeCun+CuruCvjScsXG4gICAgICAgICAgICB5eSA6ICclZCDgrobgrqPgr43grp/gr4HgrpXgrrPgr40nXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfeCuteCupOCvgS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+CuteCupOCvgSc7XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgr6fgr6jgr6ngr6rgr6vgr6zgr63gr67gr6/gr6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHJlZmVyIGh0dHA6Ly90YS53aWtpcGVkaWEub3JnL3MvMWVyMVxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4K6v4K6+4K6u4K6u4K+NfOCuteCviOCuleCuseCviHzgrpXgrr7grrLgr4h84K6o4K6j4K+N4K6q4K6V4K6y4K+NfOCujuCuseCvjeCuquCuvuCun+CvgXzgrq7grr7grrLgr4gvLFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCur+CuvuCuruCuruCvjSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K614K+I4K6V4K6x4K+IJzsgIC8vIOCuteCviOCuleCuseCviFxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrpXgrr7grrLgr4gnOyAvLyDgrpXgrr7grrLgr4hcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6o4K6j4K+N4K6q4K6V4K6y4K+NJzsgLy8g4K6o4K6j4K+N4K6q4K6V4K6y4K+NXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCujuCuseCvjeCuquCuvuCun+CvgSc7IC8vIOCujuCuseCvjeCuquCuvuCun+CvgVxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq7grr7grrLgr4gnOyAvLyDgrq7grr7grrLgr4hcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6v4K6+4K6u4K6u4K+NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+Cur+CuvuCuruCuruCvjScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CuteCviOCuleCuseCviCcgfHwgbWVyaWRpZW0gPT09ICfgrpXgrr7grrLgr4gnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K6o4K6j4K+N4K6q4K6V4K6y4K+NJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0ZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RlJywge1xuICAgICAgICBtb250aHMgOiAn4LCc4LCo4LC14LCw4LC/X+Cwq+Cwv+CwrOCxjeCwsOCwteCwsOCwv1/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/4LCy4LGNX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGC4LCy4LGG4LGWX+CwhuCwl+CwuOCxjeCwn+CxgV/gsLjgsYbgsKrgsY3gsJ/gsYbgsILgsKzgsLDgsY1f4LCF4LCV4LGN4LCf4LGL4LCs4LCw4LGNX+CwqOCwteCwguCwrOCwsOCxjV/gsKHgsL/gsLjgsYbgsILgsKzgsLDgsY0nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+CwnOCwqC5f4LCr4LC/4LCs4LGN4LCwLl/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/Ll/gsK7gsYdf4LCc4LGC4LCo4LGNX+CwnOCxguCwsuCxhuCxll/gsIbgsJcuX+CwuOCxhuCwquCxjS5f4LCF4LCV4LGN4LCf4LGLLl/gsKjgsLUuX+CwoeCwv+CwuOCxhi4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgsIbgsKbgsL/gsLXgsL7gsLDgsIJf4LC44LGL4LCu4LC14LC+4LCw4LCCX+CwruCwguCwl+Cws+CwteCwvuCwsOCwgl/gsKzgsYHgsKfgsLXgsL7gsLDgsIJf4LCX4LGB4LCw4LGB4LC14LC+4LCw4LCCX+CwtuCxgeCwleCxjeCwsOCwteCwvuCwsOCwgl/gsLbgsKjgsL/gsLXgsL7gsLDgsIInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4LCG4LCm4LC/X+CwuOCxi+Cwrl/gsK7gsILgsJfgsLNf4LCs4LGB4LCnX+Cwl+CxgeCwsOCxgV/gsLbgsYHgsJXgsY3gsLBf4LC24LCo4LC/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgsIZf4LC44LGLX+CwruCwgl/gsKzgsYFf4LCX4LGBX+CwtuCxgV/gsLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgsKjgsYfgsKHgsYFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CwsOCxh+CwquCxgV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4LCo4LC/4LCo4LGN4LCoXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4LCX4LCkXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4LCy4LGLJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4LCV4LGN4LCw4LC/4LCk4LCCJyxcbiAgICAgICAgICAgIHMgOiAn4LCV4LGK4LCo4LGN4LCo4LC/IOCwleCxjeCwt+Cwo+CwvuCwsuCxgScsXG4gICAgICAgICAgICBzcyA6ICclZCDgsLjgsYbgsJXgsKjgsY3gsLLgsYEnLFxuICAgICAgICAgICAgbSA6ICfgsJLgsJUg4LCo4LC/4LCu4LC/4LC34LCCJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCwqOCwv+CwruCwv+Cwt+CwvuCwsuCxgScsXG4gICAgICAgICAgICBoIDogJ+CwkuCwlSDgsJfgsILgsJ8nLFxuICAgICAgICAgICAgaGggOiAnJWQg4LCX4LCC4LCf4LCy4LGBJyxcbiAgICAgICAgICAgIGQgOiAn4LCS4LCVIOCwsOCxi+CwnOCxgScsXG4gICAgICAgICAgICBkZCA6ICclZCDgsLDgsYvgsJzgsYHgsLLgsYEnLFxuICAgICAgICAgICAgTSA6ICfgsJLgsJUg4LCo4LGG4LCyJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCwqOCxhuCwsuCwsuCxgScsXG4gICAgICAgICAgICB5IDogJ+CwkuCwlSDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsIInLFxuICAgICAgICAgICAgeXkgOiAnJWQg4LC44LCC4LC14LCk4LGN4LC44LCw4LC+4LCy4LGBJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ94LC1LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZOCwtScsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gsLDgsL7gsKTgsY3gsLDgsL984LCJ4LCm4LCv4LCCfOCwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgnzgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIIvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LCw4LC+4LCk4LGN4LCw4LC/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCJ4LCm4LCv4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwieCwpuCwr+Cwgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGV0Jywge1xuICAgICAgICBtb250aHMgOiAnSmFuZWlydV9GZXZlcmVpcnVfTWFyc3VfQWJyaWxfTWFpdV9KdcOxdV9KdWxsdV9BZ3VzdHVfU2V0ZW1icnVfT3V0dWJydV9Ob3ZlbWJydV9EZXplbWJydScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0Zldl9NYXJfQWJyX01haV9KdW5fSnVsX0Fnb19TZXRfT3V0X05vdl9EZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0RvbWluZ3VfU2VndW5kYV9UZXJzYV9LdWFydGFfS2ludGFfU2VzdGFfU2FiYWR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0RvbV9TZWdfVGVyc19LdWFfS2ludF9TZXN0X1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnRG9fU2VnX1RlX0t1X0tpX1Nlc19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2hpbiBpaGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQWJhbiBpaGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaWhhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hvcmlzZWlrIGloYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW1hbmEga290dWtdIFtpaGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2loYSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGxpdWJhJyxcbiAgICAgICAgICAgIHMgOiAnbWludXR1IGJhbHVuJyxcbiAgICAgICAgICAgIHNzIDogJ21pbnV0dSAlZCcsXG4gICAgICAgICAgICBtIDogJ21pbnV0dSBpZGEnLFxuICAgICAgICAgICAgbW0gOiAnbWludXR1ICVkJyxcbiAgICAgICAgICAgIGggOiAnb3JhcyBpZGEnLFxuICAgICAgICAgICAgaGggOiAnb3JhcyAlZCcsXG4gICAgICAgICAgICBkIDogJ2xvcm9uIGlkYScsXG4gICAgICAgICAgICBkZCA6ICdsb3JvbiAlZCcsXG4gICAgICAgICAgICBNIDogJ2Z1bGFuIGlkYScsXG4gICAgICAgICAgICBNTSA6ICdmdWxhbiAlZCcsXG4gICAgICAgICAgICB5IDogJ3RpbmFuIGlkYScsXG4gICAgICAgICAgICB5eSA6ICd0aW5hbiAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMDogJy3Rg9C8JyxcbiAgICAgICAgMTogJy3Rg9C8JyxcbiAgICAgICAgMjogJy3RjtC8JyxcbiAgICAgICAgMzogJy3RjtC8JyxcbiAgICAgICAgNDogJy3Rg9C8JyxcbiAgICAgICAgNTogJy3Rg9C8JyxcbiAgICAgICAgNjogJy3Rg9C8JyxcbiAgICAgICAgNzogJy3Rg9C8JyxcbiAgICAgICAgODogJy3Rg9C8JyxcbiAgICAgICAgOTogJy3Rg9C8JyxcbiAgICAgICAgMTA6ICct0YPQvCcsXG4gICAgICAgIDEyOiAnLdGD0LwnLFxuICAgICAgICAxMzogJy3Rg9C8JyxcbiAgICAgICAgMjA6ICct0YPQvCcsXG4gICAgICAgIDMwOiAnLdGO0LwnLFxuICAgICAgICA0MDogJy3Rg9C8JyxcbiAgICAgICAgNTA6ICct0YPQvCcsXG4gICAgICAgIDYwOiAnLdGD0LwnLFxuICAgICAgICA3MDogJy3Rg9C8JyxcbiAgICAgICAgODA6ICct0YPQvCcsXG4gICAgICAgIDkwOiAnLdGD0LwnLFxuICAgICAgICAxMDA6ICct0YPQvCdcbiAgICB9O1xuXG4gICAgdmFyIHRnID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGcnLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfRj9C60YjQsNC90LHQtV/QtNGD0YjQsNC90LHQtV/RgdC10YjQsNC90LHQtV/Rh9C+0YDRiNCw0L3QsdC1X9C/0LDQvdK30YjQsNC90LHQtV/St9GD0LzRitCwX9GI0LDQvdCx0LUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0Y/RiNCxX9C00YjQsV/RgdGI0LFf0YfRiNCxX9C/0YjQsV/St9GD0Lxf0YjQvdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfRj9GIX9C00Yhf0YHRiF/Rh9GIX9C/0Yhf0rfQvF/RiNCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb0JjQvNGA06/QtyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQn9Cw0LPQvtKzINGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9CU0LjRgNOv0Lcg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZFvQuF0gW9Kz0LDRhNGC0LDQuCDQvtGP0L3QtNCwINGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGRb0LhdIFvSs9Cw0YTRgtCw0Lgg0LPRg9C30LDRiNGC0LAg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9Cx0LDRitC00LggJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQv9C10YgnLFxuICAgICAgICAgICAgcyA6ICfRj9C60YfQsNC90LQg0YHQvtC90LjRjycsXG4gICAgICAgICAgICBtIDogJ9GP0Log0LTQsNKb0LjSm9CwJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC00LDSm9C40pvQsCcsXG4gICAgICAgICAgICBoIDogJ9GP0Log0YHQvtCw0YInLFxuICAgICAgICAgICAgaGggOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZCA6ICfRj9C6INGA06/QtycsXG4gICAgICAgICAgICBkZCA6ICclZCDRgNOv0LcnLFxuICAgICAgICAgICAgTSA6ICfRj9C6INC80L7SsycsXG4gICAgICAgICAgICBNTSA6ICclZCDQvNC+0rMnLFxuICAgICAgICAgICAgeSA6ICfRj9C6INGB0L7QuycsXG4gICAgICAgICAgICB5eSA6ICclZCDRgdC+0LsnXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/RiNCw0LF80YHRg9Cx0rN80YDTr9C3fNCx0LXQs9C+0rMvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfRiNCw0LEnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfRgdGD0LHSsycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfRgNOv0LcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9Cx0LXQs9C+0rMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YjQsNCxJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgdGD0LHSsyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDTr9C3JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQsdC10LPQvtKzJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRiNCw0LEnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGD0Lx80Y7QvCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDF0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRnO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0aCcsIHtcbiAgICAgICAgbW9udGhzIDogJ+C4oeC4geC4o+C4suC4hOC4oV/guIHguLjguKHguKDguLLguJ7guLHguJnguJjguYxf4Lih4Li14LiZ4Liy4LiE4LihX+C5gOC4oeC4qeC4suC4ouC4mV/guJ7guKTguKnguKDguLLguITguKFf4Lih4Li04LiW4Li44LiZ4Liy4Lii4LiZX+C4geC4o+C4geC4juC4suC4hOC4oV/guKrguLTguIfguKvguLLguITguKFf4LiB4Lix4LiZ4Lii4Liy4Lii4LiZX+C4leC4uOC4peC4suC4hOC4oV/guJ7guKTguKjguIjguLTguIHguLLguKLguJlf4LiY4Lix4LiZ4Lin4Liy4LiE4LihJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfguKEu4LiELl/guIEu4LieLl/guKHguLUu4LiELl/guYDguKEu4LiiLl/guJ4u4LiELl/guKHguLQu4LiiLl/guIEu4LiELl/guKou4LiELl/guIEu4LiiLl/guJUu4LiELl/guJ4u4LiiLl/guJgu4LiELicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4quC4muC4lOC4tV/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C4reC4suC4l+C4tOC4leC4ouC5jF/guIjguLHguJnguJfguKPguYxf4Lit4Lix4LiH4LiE4Liy4LijX+C4nuC4uOC4mF/guJ7guKTguKvguLHguKpf4Lio4Li44LiB4Lij4LmMX+C5gOC4quC4suC4o+C5jCcuc3BsaXQoJ18nKSwgLy8geWVzLCB0aHJlZSBjaGFyYWN0ZXJzIGRpZmZlcmVuY2VcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4Lit4LiyLl/guIguX+C4rS5f4LieLl/guJ7guKQuX+C4qC5f4LiqLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICfguKfguLHguJlkZGRk4LiX4Li14LmIIEQgTU1NTSBZWVlZIOC5gOC4p+C4peC4siBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfguIHguYjguK3guJnguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4Lin4Lix4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4Lie4Lij4Li44LmI4LiH4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZFvguKvguJnguYnguLIg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4Lin4Lix4LiZXWRkZGRb4LiX4Li14LmI4LmB4Lil4LmJ4LinIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ+C4reC4teC4gSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVz4LiX4Li14LmI4LmB4Lil4LmJ4LinJyxcbiAgICAgICAgICAgIHMgOiAn4LmE4Lih4LmI4LiB4Li14LmI4Lin4Li04LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIHNzIDogJyVkIOC4p+C4tOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBtIDogJzEg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIG1tIDogJyVkIOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBoIDogJzEg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgICAgICBkIDogJzEg4Lin4Lix4LiZJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOC4p+C4seC4mScsXG4gICAgICAgICAgICBNIDogJzEg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOC5gOC4lOC4t+C4reC4mScsXG4gICAgICAgICAgICB5IDogJzEg4Lib4Li1JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOC4m+C4tSdcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdGxQaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsLXBoJywge1xuICAgICAgICBtb250aHMgOiAnRW5lcm9fUGVicmVyb19NYXJzb19BYnJpbF9NYXlvX0h1bnlvX0h1bHlvX0Fnb3N0b19TZXR5ZW1icmVfT2t0dWJyZV9Ob2J5ZW1icmVfRGlzeWVtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdFbmVfUGViX01hcl9BYnJfTWF5X0h1bl9IdWxfQWdvX1NldF9Pa3RfTm9iX0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnTGluZ2dvX0x1bmVzX01hcnRlc19NaXllcmt1bGVzX0h1d2ViZXNfQml5ZXJuZXNfU2FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0xpbl9MdW5fTWFyX01peV9IdXdfQml5X1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTGlfTHVfTWFfTWlfSHVfQmlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ01NL0QvWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gRCwgWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gREQsIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ0xUIFtuZ2F5b25nIGFyYXddJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQnVrYXMgbmddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTFQgW3NhIHN1c3Vub2QgbmFdIGRkZGQnLFxuICAgICAgICAgICAgbGFzdERheTogJ0xUIFtrYWhhcG9uXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xUIFtub29uZyBuYWthcmFhbmddIGRkZGQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnc2EgbG9vYiBuZyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFuZyBuYWthbGlwYXMnLFxuICAgICAgICAgICAgcyA6ICdpbGFuZyBzZWd1bmRvJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbSA6ICdpc2FuZyBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvJyxcbiAgICAgICAgICAgIGggOiAnaXNhbmcgb3JhcycsXG4gICAgICAgICAgICBoaCA6ICclZCBvcmFzJyxcbiAgICAgICAgICAgIGQgOiAnaXNhbmcgYXJhdycsXG4gICAgICAgICAgICBkZCA6ICclZCBhcmF3JyxcbiAgICAgICAgICAgIE0gOiAnaXNhbmcgYnV3YW4nLFxuICAgICAgICAgICAgTU0gOiAnJWQgYnV3YW4nLFxuICAgICAgICAgICAgeSA6ICdpc2FuZyB0YW9uJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHRhb24nXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0bFBoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbnVtYmVyc05vdW5zID0gJ3BhZ2hfd2HigJlfY2hh4oCZX3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0Jy5zcGxpdCgnXycpO1xuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlRnV0dXJlKG91dHB1dCkge1xuICAgICAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICAgICAgdGltZSA9IChvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ2xlUycgOlxuICAgICAgICAob3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICd3YVEnIDpcbiAgICAgICAgKG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnbmVtJyA6XG4gICAgICAgIHRpbWUgKyAnIHBJcSc7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVBhc3Qob3V0cHV0KSB7XG4gICAgICAgIHZhciB0aW1lID0gb3V0cHV0O1xuICAgICAgICB0aW1lID0gKG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnSHXigJknIDpcbiAgICAgICAgKG91dHB1dC5pbmRleE9mKCdqYXInKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnd2VuJyA6XG4gICAgICAgIChvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ2JlbicgOlxuICAgICAgICB0aW1lICsgJyByZXQnO1xuICAgICAgICByZXR1cm4gdGltZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW1iZXJOb3VuID0gbnVtYmVyQXNOb3VuKG51bWJlcik7XG4gICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGx1cCc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIHR1cCc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIHJlcCc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGphaic7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGphcic7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIERJUyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBudW1iZXJBc05vdW4obnVtYmVyKSB7XG4gICAgICAgIHZhciBodW5kcmVkID0gTWF0aC5mbG9vcigobnVtYmVyICUgMTAwMCkgLyAxMDApLFxuICAgICAgICB0ZW4gPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDApIC8gMTApLFxuICAgICAgICBvbmUgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgd29yZCA9ICcnO1xuICAgICAgICBpZiAoaHVuZHJlZCA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gbnVtYmVyc05vdW5zW2h1bmRyZWRdICsgJ3ZhdGxoJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVuID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSAoKHdvcmQgIT09ICcnKSA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1t0ZW5dICsgJ21hSCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZSA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gKCh3b3JkICE9PSAnJykgPyAnICcgOiAnJykgKyBudW1iZXJzTm91bnNbb25lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHdvcmQgPT09ICcnKSA/ICdwYWdoJyA6IHdvcmQ7XG4gICAgfVxuXG4gICAgdmFyIHRsaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsaCcsIHtcbiAgICAgICAgbW9udGhzIDogJ3RlcmHigJkgamFyIHdh4oCZX3RlcmHigJkgamFyIGNoYeKAmV90ZXJh4oCZIGphciB3ZWpfdGVyYeKAmSBqYXIgbG9TX3RlcmHigJkgamFyIHZhZ2hfdGVyYeKAmSBqYXIgamF2X3RlcmHigJkgamFyIFNvY2hfdGVyYeKAmSBqYXIgY2hvcmdoX3RlcmHigJkgamFyIEh1dF90ZXJh4oCZIGphciB3YeKAmW1hSF90ZXJh4oCZIGphciB3YeKAmW1hSCB3YeKAmV90ZXJh4oCZIGphciB3YeKAmW1hSCBjaGHigJknLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phciB3YeKAmV9qYXIgY2hh4oCZX2phciB3ZWpfamFyIGxvU19qYXIgdmFnaF9qYXIgamF2X2phciBTb2NoX2phciBjaG9yZ2hfamFyIEh1dF9qYXIgd2HigJltYUhfamFyIHdh4oCZbWFIIHdh4oCZX2phciB3YeKAmW1hSCBjaGHigJknLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0RhSGphal0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t3YeKAmWxlU10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdMTEwnLFxuICAgICAgICAgICAgbGFzdERheTogJ1t3YeKAmUh14oCZXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xMTCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IHRyYW5zbGF0ZUZ1dHVyZSxcbiAgICAgICAgICAgIHBhc3QgOiB0cmFuc2xhdGVQYXN0LFxuICAgICAgICAgICAgcyA6ICdwdVMgbHVwJyxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6ICd3YeKAmSB0dXAnLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogJ3dh4oCZIHJlcCcsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiAnd2HigJkgamFqJyxcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6ICd3YeKAmSBqYXInLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogJ3dh4oCZIERJUycsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsaDtcblxufSkpKTtcbiIsIlxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogJ1xcJ2luY2knLFxuICAgICAgICA1OiAnXFwnaW5jaScsXG4gICAgICAgIDg6ICdcXCdpbmNpJyxcbiAgICAgICAgNzA6ICdcXCdpbmNpJyxcbiAgICAgICAgODA6ICdcXCdpbmNpJyxcbiAgICAgICAgMjogJ1xcJ25jaScsXG4gICAgICAgIDc6ICdcXCduY2knLFxuICAgICAgICAyMDogJ1xcJ25jaScsXG4gICAgICAgIDUwOiAnXFwnbmNpJyxcbiAgICAgICAgMzogJ1xcJ8O8bmPDvCcsXG4gICAgICAgIDQ6ICdcXCfDvG5jw7wnLFxuICAgICAgICAxMDA6ICdcXCfDvG5jw7wnLFxuICAgICAgICA2OiAnXFwnbmPEsScsXG4gICAgICAgIDk6ICdcXCd1bmN1JyxcbiAgICAgICAgMTA6ICdcXCd1bmN1JyxcbiAgICAgICAgMzA6ICdcXCd1bmN1JyxcbiAgICAgICAgNjA6ICdcXCfEsW5jxLEnLFxuICAgICAgICA5MDogJ1xcJ8SxbmPEsSdcbiAgICB9O1xuXG4gICAgdmFyIHRyID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHInLCB7XG4gICAgICAgIG1vbnRocyA6ICdPY2FrX8WedWJhdF9NYXJ0X05pc2FuX01hecSxc19IYXppcmFuX1RlbW11el9BxJ91c3Rvc19FeWzDvGxfRWtpbV9LYXPEsW1fQXJhbMSxaycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnT2NhX8WedWJfTWFyX05pc19NYXlfSGF6X1RlbV9BxJ91X0V5bF9Fa2lfS2FzX0FyYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnUGF6YXJfUGF6YXJ0ZXNpX1NhbMSxX8OHYXLFn2FtYmFfUGVyxZ9lbWJlX0N1bWFfQ3VtYXJ0ZXNpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1Bhel9QdHNfU2FsX8OHYXJfUGVyX0N1bV9DdHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1B6X1B0X1NhX8OHYV9QZV9DdV9DdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW2J1Z8O8biBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1t5YXLEsW4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW2dlbGVjZWtdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW2TDvG5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tnZcOnZW5dIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBzb25yYScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIMO2bmNlJyxcbiAgICAgICAgICAgIHMgOiAnYmlya2HDpyBzYW5peWUnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2FuaXllJyxcbiAgICAgICAgICAgIG0gOiAnYmlyIGRha2lrYScsXG4gICAgICAgICAgICBtbSA6ICclZCBkYWtpa2EnLFxuICAgICAgICAgICAgaCA6ICdiaXIgc2FhdCcsXG4gICAgICAgICAgICBoaCA6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIGQgOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICBNIDogJ2JpciBheScsXG4gICAgICAgICAgICBNTSA6ICclZCBheScsXG4gICAgICAgICAgICB5IDogJ2JpciB5xLFsJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHnEsWwnXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHsgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICdcXCfEsW5jxLEnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gbnVtYmVyICUgMTAwIC0gYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICAvLyBBZnRlciB0aGUgeWVhciB0aGVyZSBzaG91bGQgYmUgYSBzbGFzaCBhbmQgdGhlIGFtb3VudCBvZiB5ZWFycyBzaW5jZSBEZWNlbWJlciAyNiwgMTk3OSBpbiBSb21hbiBudW1lcmFscy5cbiAgICAvLyBUaGlzIGlzIGN1cnJlbnRseSB0b28gZGlmZmljdWx0IChtYXliZSBldmVuIGltcG9zc2libGUpIHRvIGFkZC5cbiAgICB2YXIgdHpsID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHpsJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyX0ZldnJhZ2xoX01hcsOnX0F2csOvdV9NYWlfR8O8bl9KdWxpYV9HdXNjaHRfU2V0ZW12YXJfTGlzdG9ww6R0c19Ob2VtdmFyX1plY2VtdmFyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmV2X01hcl9BdnJfTWFpX0fDvG5fSnVsX0d1c19TZXRfTGlzX05vZV9aZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1PDumxhZGlfTMO6bmXDp2lfTWFpdHppX03DoXJjdXJpX1how7phZGlfVmnDqW5lcsOnaV9Tw6F0dXJpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1PDumxfTMO6bl9NYWlfTcOhcl9YaMO6X1Zpw6lfU8OhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU8O6X0zDul9NYV9Nw6FfWGhfVmlfU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBbZGFsbGFzXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBbbGldIEQuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RcXCdvfGRcXCdhL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAnZFxcJ28nID09PSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdkXFwnbycgOiAnRFxcJ08nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdkXFwnYScgOiAnRFxcJ0EnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW294aGkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2RlbcOgIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbaWVpcmkgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tzw7xyIGVsXSBkZGRkIFtsYXN0ZXUgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvc3ByZWkgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdqYSVzJyxcbiAgICAgICAgICAgIHMgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3MgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdzJzogWyd2aWVuc2FzIHNlY3VuZHMnLCAnXFwnaWVuc2FzIHNlY3VuZHMnXSxcbiAgICAgICAgICAgICdzcyc6IFtudW1iZXIgKyAnIHNlY3VuZHMnLCAnJyArIG51bWJlciArICcgc2VjdW5kcyddLFxuICAgICAgICAgICAgJ20nOiBbJ1xcJ24gbcOtdXQnLCAnXFwnaWVucyBtw611dCddLFxuICAgICAgICAgICAgJ21tJzogW251bWJlciArICcgbcOtdXRzJywgJycgKyBudW1iZXIgKyAnIG3DrXV0cyddLFxuICAgICAgICAgICAgJ2gnOiBbJ1xcJ24gw75vcmEnLCAnXFwnaWVuc2Egw75vcmEnXSxcbiAgICAgICAgICAgICdoaCc6IFtudW1iZXIgKyAnIMO+b3JhcycsICcnICsgbnVtYmVyICsgJyDDvm9yYXMnXSxcbiAgICAgICAgICAgICdkJzogWydcXCduIHppdWEnLCAnXFwnaWVuc2Egeml1YSddLFxuICAgICAgICAgICAgJ2RkJzogW251bWJlciArICcgeml1YXMnLCAnJyArIG51bWJlciArICcgeml1YXMnXSxcbiAgICAgICAgICAgICdNJzogWydcXCduIG1lcycsICdcXCdpZW5zIG1lcyddLFxuICAgICAgICAgICAgJ01NJzogW251bWJlciArICcgbWVzZW4nLCAnJyArIG51bWJlciArICcgbWVzZW4nXSxcbiAgICAgICAgICAgICd5JzogWydcXCduIGFyJywgJ1xcJ2llbnMgYXInXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIGFycycsICcnICsgbnVtYmVyICsgJyBhcnMnXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyBmb3JtYXRba2V5XVswXSA6ICh3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR6bDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHR6bUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0tbGF0bicsIHtcbiAgICAgICAgbW9udGhzIDogJ2lubmF5cl9icsukYXlyy6RfbWFyy6Rzy6RfaWJyaXJfbWF5eXdfeXdueXdfeXdseXd6X8mjd8WhdF/FoXd0YW5iaXJfa3TLpHdicsukX253d2FuYmlyX2R3am5iaXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2lubmF5cl9icsukYXlyy6RfbWFyy6Rzy6RfaWJyaXJfbWF5eXdfeXdueXdfeXdseXd6X8mjd8WhdF/FoXd0YW5iaXJfa3TLpHdicsukX253d2FuYmlyX2R3am5iaXInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1thc2RraCBnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2Fza2EgZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2Fzc2FudCBnXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2ddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhZGtoIHMgeWFuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAneWFuICVzJyxcbiAgICAgICAgICAgIHMgOiAnaW1paycsXG4gICAgICAgICAgICBzcyA6ICclZCBpbWlrJyxcbiAgICAgICAgICAgIG0gOiAnbWludeG4jScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW514biNJyxcbiAgICAgICAgICAgIGggOiAnc2HJm2EnLFxuICAgICAgICAgICAgaGggOiAnJWQgdGFzc2HJm2luJyxcbiAgICAgICAgICAgIGQgOiAnYXNzJyxcbiAgICAgICAgICAgIGRkIDogJyVkIG9zc2FuJyxcbiAgICAgICAgICAgIE0gOiAnYXlvd3InLFxuICAgICAgICAgICAgTU0gOiAnJWQgaXl5aXJuJyxcbiAgICAgICAgICAgIHkgOiAnYXNnYXMnLFxuICAgICAgICAgICAgeXkgOiAnJWQgaXNnYXNuJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0em1MYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHptID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptJywge1xuICAgICAgICBtb250aHMgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+K1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vitLDitZnitLfitYUg4rS0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+K0sOK1meK0veK0sCDitLRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+K0sOK1muK0sOK1j+K1nCDitLRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfitLfitLDitLfitYUg4rWZIOK1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ+K1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBzIDogJ+K1ieK1juK1ieK0vScsXG4gICAgICAgICAgICBzcyA6ICclZCDitYnitY7itYnitL0nLFxuICAgICAgICAgICAgbSA6ICfitY7itYnitY/itZPitLonLFxuICAgICAgICAgICAgbW0gOiAnJWQg4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgICAgIGggOiAn4rWZ4rSw4rWE4rSwJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOK1nOK0sOK1meK1meK0sOK1hOK1ieK1jycsXG4gICAgICAgICAgICBkIDogJ+K0sOK1meK1mScsXG4gICAgICAgICAgICBkZCA6ICclZCBv4rWZ4rWZ4rSw4rWPJyxcbiAgICAgICAgICAgIE0gOiAn4rSw4rWib+K1k+K1lCcsXG4gICAgICAgICAgICBNTSA6ICclZCDitYnitaLitaLitYnitZTitY8nLFxuICAgICAgICAgICAgeSA6ICfitLDitZnitLPitLDitZknLFxuICAgICAgICAgICAgeXkgOiAnJWQg4rWJ4rWZ4rSz4rSw4rWZ4rWPJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0em07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHVnQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1Zy1jbicsIHtcbiAgICAgICAgbW9udGhzOiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2YrbldmD2LTbldmG2KjblV/Yr9uI2LTbldmG2KjblV/Ys9uV2YrYtNuV2YbYqNuVX9qG2KfYsdi025XZhtio25Vf2b7bldmK2LTbldmG2KjblV/YrNuI2YXblV/YtNuV2YbYqNuVJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfZituVX9iv24hf2LPblV/ahtinX9m+25Vf2KzbiF/YtNuVJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YknLFxuICAgICAgICAgICAgTExMOiAnWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRk2IwgWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2YrbkNix2YnZhSDZg9uQ2obblXzYs9uV2r7bldixfNqG24jYtNiq2YnZhiDYqNuH2LHbh9mGfNqG24jYtHzahtuI2LTYqtmJ2YYg2YPbkNmK2YnZhnzZg9uV2oYvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfZituQ2LHZidmFINmD25DahtuVJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2LPbldq+25XYsScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn2obbiNi02KrZidmGINmD25DZitmJ2YYnIHx8IG1lcmlkaWVtID09PSAn2YPbldqGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mK25DYsdmJ2YUg2YPbkNqG25UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LPbldq+25XYsSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi02KrZidmGINio24fYsduH2YYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi02KrZidmGINmD25DZitmJ2YYnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mD25Xahic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9io24jar9uI2YYg2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYptuV2KrblSDYs9in2KbbldiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vZg9uQ2YTbldix2YPZiV0gZGRkZCBb2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYqtuG2YbbiNqv24jZhl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb2KbYp9mE2K/ZidmG2YLZiV0gZGRkZCBb2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINmD25DZitmJ2YYnLFxuICAgICAgICAgICAgcGFzdDogJyVzINio24fYsduH2YYnLFxuICAgICAgICAgICAgczogJ9mG25XahtqG25Ug2LPbkNmD2YjZhtiqJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2LPbkNmD2YjZhtiqJyxcbiAgICAgICAgICAgIG06ICfYqNmJ2LEg2YXZidmG24fYqicsXG4gICAgICAgICAgICBtbTogJyVkINmF2YnZhtuH2KonLFxuICAgICAgICAgICAgaDogJ9io2YnYsSDYs9in2KbbldiqJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9im25XYqicsXG4gICAgICAgICAgICBkOiAn2KjZidixINmD24jZhicsXG4gICAgICAgICAgICBkZDogJyVkINmD24jZhicsXG4gICAgICAgICAgICBNOiAn2KjZidixINim2KfZiicsXG4gICAgICAgICAgICBNTTogJyVkINim2KfZiicsXG4gICAgICAgICAgICB5OiAn2KjZidixINmK2YnZhCcsXG4gICAgICAgICAgICB5eTogJyVkINmK2YnZhCdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oLdmD24jZhtmJfC3Yptin2Yp8Ldq+25XZvtiq25UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdmD24jZhtmJJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct2r7bldm+2KrblSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVnQ247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogKG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKSA/IGZvcm1zWzFdIDogZm9ybXNbMl0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnc3MnOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Lhf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgICdtbSc6IHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LBf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyA6ICfRhdCy0LjQu9C40L3Rg1/RhdCy0LjQu9C40L3QuF/RhdCy0LjQu9C40L0nLFxuICAgICAgICAgICAgJ2hoJzogd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LBf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nIDogJ9Cz0L7QtNC40L3Rg1/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvScsXG4gICAgICAgICAgICAnZGQnOiAn0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyJyxcbiAgICAgICAgICAgICdNTSc6ICfQvNGW0YHRj9GG0Yxf0LzRltGB0Y/RhtGWX9C80ZbRgdGP0YbRltCyJyxcbiAgICAgICAgICAgICd5eSc6ICfRgNGW0Lpf0YDQvtC60Lhf0YDQvtC60ZbQsidcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsCcgOiAn0YXQstC40LvQuNC90YMnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LAnIDogJ9Cz0L7QtNC40L3Rgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c0Nhc2VSZXBsYWNlKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSB7XG4gICAgICAgICAgICAnbm9taW5hdGl2ZSc6ICfQvdC10LTRltC70Y9f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNCwX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRj1/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnYWNjdXNhdGl2ZSc6ICfQvdC10LTRltC70Y5f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNGDX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRjl/RgdGD0LHQvtGC0YMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnZ2VuaXRpdmUnOiAn0L3QtdC00ZbQu9GWX9C/0L7QvdC10LTRltC70LrQsF/QstGW0LLRgtC+0YDQutCwX9GB0LXRgNC10LTQuF/Rh9C10YLQstC10YDQs9CwX9C/4oCZ0Y/RgtC90LjRhtGWX9GB0YPQsdC+0YLQuCcuc3BsaXQoJ18nKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbm91bkNhc2UgPSAoLyhcXFtb0JLQstCj0YNdXFxdKSA/ZGRkZC8pLnRlc3QoZm9ybWF0KSA/XG4gICAgICAgICAgICAnYWNjdXNhdGl2ZScgOlxuICAgICAgICAgICAgKCgvXFxbPyg/OtC80LjQvdGD0LvQvtGXfNC90LDRgdGC0YPQv9C90L7Rlyk/ID9cXF0gP2RkZGQvKS50ZXN0KGZvcm1hdCkgP1xuICAgICAgICAgICAgICAgICdnZW5pdGl2ZScgOlxuICAgICAgICAgICAgICAgICdub21pbmF0aXZlJyk7XG4gICAgICAgIHJldHVybiB3ZWVrZGF5c1tub3VuQ2FzZV1bbS5kYXkoKV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArICfQvicgKyAodGhpcy5ob3VycygpID09PSAxMSA/ICfQsScgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHVrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWsnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgICdmb3JtYXQnOiAn0YHRltGH0L3Rj1/Qu9GO0YLQvtCz0L5f0LHQtdGA0LXQt9C90Y9f0LrQstGW0YLQvdGPX9GC0YDQsNCy0L3Rj1/Rh9C10YDQstC90Y9f0LvQuNC/0L3Rj1/RgdC10YDQv9C90Y9f0LLQtdGA0LXRgdC90Y9f0LbQvtCy0YLQvdGPX9C70LjRgdGC0L7Qv9Cw0LTQsF/Qs9GA0YPQtNC90Y8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnc3RhbmRhbG9uZSc6ICfRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0YHRltGHX9C70Y7Rgl/QsdC10YBf0LrQstGW0YJf0YLRgNCw0LJf0YfQtdGA0LJf0LvQuNC/X9GB0LXRgNC/X9Cy0LXRgF/QttC+0LLRgl/Qu9C40YHRgl/Qs9GA0YPQtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiB3ZWVrZGF5c0Nhc2VSZXBsYWNlLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDRgC4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINGALiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KHRjNC+0LPQvtC00L3RliAnKSxcbiAgICAgICAgICAgIG5leHREYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JfQsNCy0YLRgNCwICcpLFxuICAgICAgICAgICAgbGFzdERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQktGH0L7RgNCwICcpLFxuICAgICAgICAgICAgbmV4dFdlZWs6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KNdIGRkZGQgWycpLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0ZddIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Qs9C+XSBkZGRkIFsnKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg0YLQvtC80YMnLFxuICAgICAgICAgICAgcyA6ICfQtNC10LrRltC70YzQutCwINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiAn0LPQvtC00LjQvdGDJyxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICfQvNGW0YHRj9GG0YwnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfRgNGW0LonLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRlnzRgNCw0L3QutGDfNC00L3Rj3zQstC10YfQvtGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0ZYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdC60YMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0L7RgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn2KzZhtmI2LHbjCcsXG4gICAgICAgICfZgdix2YjYsduMJyxcbiAgICAgICAgJ9mF2KfYsdqGJyxcbiAgICAgICAgJ9in2b7YsduM2YQnLFxuICAgICAgICAn2YXYptuMJyxcbiAgICAgICAgJ9is2YjZhicsXG4gICAgICAgICfYrNmI2YTYp9im24wnLFxuICAgICAgICAn2Kfar9iz2KonLFxuICAgICAgICAn2LPYqtmF2KjYsScsXG4gICAgICAgICfYp9qp2KrZiNio2LEnLFxuICAgICAgICAn2YbZiNmF2KjYsScsXG4gICAgICAgICfYr9iz2YXYqNixJ1xuICAgIF07XG4gICAgdmFyIGRheXMgPSBbXG4gICAgICAgICfYp9iq2YjYp9ixJyxcbiAgICAgICAgJ9m+24zYsScsXG4gICAgICAgICfZhdmG2q/ZhCcsXG4gICAgICAgICfYqNiv2r4nLFxuICAgICAgICAn2KzZhdi52LHYp9iqJyxcbiAgICAgICAgJ9is2YXYuduBJyxcbiAgICAgICAgJ9uB2YHYqtuBJ1xuICAgIF07XG5cbiAgICB2YXIgdXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1cicsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiBkYXlzLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vYotisINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vaqdmEINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2q/YsNi02KrbgSDYsdmI2LIg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1var9iw2LTYqtuBXSBkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINio2LnYrycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINmC2KjZhCcsXG4gICAgICAgICAgICBzIDogJ9qG2YbYryDYs9uM2qnZhtqIJyxcbiAgICAgICAgICAgIHNzIDogJyVkINiz24zaqdmG2ognLFxuICAgICAgICAgICAgbSA6ICfYp9uM2qkg2YXZhtm5JyxcbiAgICAgICAgICAgIG1tIDogJyVkINmF2YbZuScsXG4gICAgICAgICAgICBoIDogJ9in24zaqSDar9q+2YbZuduBJyxcbiAgICAgICAgICAgIGhoIDogJyVkINqv2r7Zhtm525InLFxuICAgICAgICAgICAgZCA6ICfYp9uM2qkg2K/ZhicsXG4gICAgICAgICAgICBkZCA6ICclZCDYr9mGJyxcbiAgICAgICAgICAgIE0gOiAn2KfbjNqpINmF2KfbgScsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdin24EnLFxuICAgICAgICAgICAgeSA6ICfYp9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1cjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHV6TGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3V6LWxhdG4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdZYW52YXJfRmV2cmFsX01hcnRfQXByZWxfTWF5X0l5dW5fSXl1bF9Bdmd1c3RfU2VudGFicl9Pa3RhYnJfTm95YWJyX0Rla2Ficicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnWWFuX0Zldl9NYXJfQXByX01heV9JeXVuX0l5dWxfQXZnX1Nlbl9Pa3RfTm95X0Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnWWFrc2hhbmJhX0R1c2hhbmJhX1Nlc2hhbmJhX0Nob3JzaGFuYmFfUGF5c2hhbmJhX0p1bWFfU2hhbmJhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1lha19EdXNoX1Nlc2hfQ2hvcl9QYXlfSnVtX1NoYW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1lhX0R1X1NlX0Nob19QYV9KdV9TaGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tCdWd1biBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0VydGFnYV0gTFQgW2RhXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbS2VjaGEgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbT1xcJ3RnYW5dIGRkZGQgW2t1bmkgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnWWFxaW4gJXMgaWNoaWRhJyxcbiAgICAgICAgICAgIHBhc3QgOiAnQmlyIG5lY2hhICVzIG9sZGluJyxcbiAgICAgICAgICAgIHMgOiAnc29uaXlhJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNvbml5YScsXG4gICAgICAgICAgICBtIDogJ2JpciBkYXFpcWEnLFxuICAgICAgICAgICAgbW0gOiAnJWQgZGFxaXFhJyxcbiAgICAgICAgICAgIGggOiAnYmlyIHNvYXQnLFxuICAgICAgICAgICAgaGggOiAnJWQgc29hdCcsXG4gICAgICAgICAgICBkIDogJ2JpciBrdW4nLFxuICAgICAgICAgICAgZGQgOiAnJWQga3VuJyxcbiAgICAgICAgICAgIE0gOiAnYmlyIG95JyxcbiAgICAgICAgICAgIE1NIDogJyVkIG95JyxcbiAgICAgICAgICAgIHkgOiAnYmlyIHlpbCcsXG4gICAgICAgICAgICB5eSA6ICclZCB5aWwnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHV6TGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHV6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXonLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQr9C60Yhf0JTRg9GIX9Ch0LXRiF/Qp9C+0YBf0J/QsNC5X9CW0YPQvF/QqNCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cv0Lpf0JTRg1/QodC1X9Cn0L5f0J/QsF/QltGDX9Co0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQkdGD0LPRg9C9INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0K3RgNGC0LDQs9CwXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0LrRg9C90Lgg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfQsCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vQo9GC0LPQsNC9XSBkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQr9C60LjQvSAlcyDQuNGH0LjQtNCwJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICAgICAgcyA6ICfRhNGD0YDRgdCw0YInLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YTRg9GA0YHQsNGCJyxcbiAgICAgICAgICAgIG0gOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBtbSA6ICclZCDQtNCw0LrQuNC60LAnLFxuICAgICAgICAgICAgaCA6ICfQsdC40YAg0YHQvtCw0YInLFxuICAgICAgICAgICAgaGggOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZCA6ICfQsdC40YAg0LrRg9C9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNIDogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgICAgIE1NIDogJyVkINC+0LknLFxuICAgICAgICAgICAgeSA6ICfQsdC40YAg0LnQuNC7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINC50LjQuydcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB2aSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3ZpJywge1xuICAgICAgICBtb250aHMgOiAndGjDoW5nIDFfdGjDoW5nIDJfdGjDoW5nIDNfdGjDoW5nIDRfdGjDoW5nIDVfdGjDoW5nIDZfdGjDoW5nIDdfdGjDoW5nIDhfdGjDoW5nIDlfdGjDoW5nIDEwX3Row6FuZyAxMV90aMOhbmcgMTInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1RoMDFfVGgwMl9UaDAzX1RoMDRfVGgwNV9UaDA2X1RoMDdfVGgwOF9UaDA5X1RoMTBfVGgxMV9UaDEyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdDTl9UMl9UM19UNF9UNV9UNl9UNycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3NhfGNoL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdzYScgOiAnU0EnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdjaCcgOiAnQ0gnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFtuxINtXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdERC9NL1lZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0jDtG0gbmF5IGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmfDoHkgbWFpIGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSMO0bSBxdWEgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0deG6p24gcuG7k2kgbMO6Y10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgdOG7m2knLFxuICAgICAgICAgICAgcGFzdCA6ICclcyB0csaw4bubYycsXG4gICAgICAgICAgICBzIDogJ3bDoGkgZ2nDonknLFxuICAgICAgICAgICAgc3MgOiAnJWQgZ2nDonknICxcbiAgICAgICAgICAgIG0gOiAnbeG7mXQgcGjDunQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgcGjDunQnLFxuICAgICAgICAgICAgaCA6ICdt4buZdCBnaeG7nScsXG4gICAgICAgICAgICBoaCA6ICclZCBnaeG7nScsXG4gICAgICAgICAgICBkIDogJ23hu5l0IG5nw6B5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIG5nw6B5JyxcbiAgICAgICAgICAgIE0gOiAnbeG7mXQgdGjDoW5nJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHRow6FuZycsXG4gICAgICAgICAgICB5IDogJ23hu5l0IG7Eg20nLFxuICAgICAgICAgICAgeXkgOiAnJWQgbsSDbSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgeFBzZXVkbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3gtcHNldWRvJywge1xuICAgICAgICBtb250aHMgOiAnSn7DocOxw7rDoX5yw71fRn7DqWJyw7p+w6Fyw71ffk3DoXJjfmhfw4FwfnLDrWxffk3DocO9X35Kw7rDscOpfl9Kw7psfsO9X8OBw7p+Z8O6c3R+X1PDqXB+dMOpbWJ+w6lyX8OTfmN0w7NifsOpcl/DkX7Ds3bDqW1+YsOpcl9+RMOpY8Opfm1iw6lyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKfsOhw7FffkbDqWJffk3DoXJffsOBcHJffk3DocO9X35Kw7rDsV9+SsO6bF9+w4HDumdfflPDqXBffsOTY3RffsORw7N2X35Ew6ljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU37DusOxZMOhfsO9X03Ds37DsWTDocO9fl9Uw7rDqX5zZMOhw71+X1fDqWR+w7HDqXNkfsOhw71fVH5ow7pyc35kw6HDvV9+RnLDrWR+w6HDvV9TfsOhdMO6cn5kw6HDvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTfsO6w7Fffk3Ds8OxX35Uw7rDqV9+V8OpZF9+VGjDul9+RnLDrV9+U8OhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU37Dul9Nw7N+X1TDul9+V8OpX1R+aF9Gcn5fU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUfsOzZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVH7Ds23Ds35ycsOzfncgw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW8OdfsOpc3R+w6lyZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0x+w6FzdF0gZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnw61+w7EgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDDoX5nw7MnLFxuICAgICAgICAgICAgcyA6ICfDoSB+ZsOpdyB+c8OpY8OzfsOxZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc37DqWPDs8OxfmRzJyxcbiAgICAgICAgICAgIG0gOiAnw6Egfm3DrcOxfsO6dMOpJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1+w63DscO6fnTDqXMnLFxuICAgICAgICAgICAgaCA6ICfDoX7DsSBow7N+w7pyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGh+w7PDunJzJyxcbiAgICAgICAgICAgIGQgOiAnw6EgfmTDocO9JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGR+w6HDvXMnLFxuICAgICAgICAgICAgTSA6ICfDoSB+bcOzw7F+dGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbX7Ds8OxdH5ocycsXG4gICAgICAgICAgICB5IDogJ8OhIH7DvcOpw6FyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMO9fsOpw6FycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB4UHNldWRvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgeW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd5bycsIHtcbiAgICAgICAgbW9udGhzIDogJ1PhurnMgXLhurnMgV9FzIByZcyAbGXMgF/hurhy4bq5zIBuYcyAX0nMgGdiZcyBX0XMgGJpYmlfT8yAa3XMgGR1X0Fn4bq5bW9fT8yAZ3XMgW5fT3dld2Vf4buMzIB3YcyAcmHMgF9CZcyBbHXMgV/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdT4bq5zIFyX0XMgHJsX+G6uHJuX0nMgGdiX0XMgGJpX0/MgGt1zIBfQWfhurlfT8yAZ3XMgV9Pd2Vf4buMzIB3YcyAX0JlzIFsX+G7jMyAcOG6ucyAzIAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0HMgGnMgGt1zIFfQWplzIFfScyAc+G6ucyBZ3VuX+G7jGrhu43MgXJ1zIFf4buMauG7jcyBYuG7jV/hurh0acyAX0HMgGJhzIFt4bq5zIF0YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdBzIBpzIBrX0FqZcyBX0nMgHPhurnMgV/hu4xqcl/hu4xqYl/hurh0acyAX0HMgGJhzIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0HMgGnMgF9Bal9JzIBzX+G7jHJf4buMYl/hurh0X0HMgGInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbT8yAbmnMgCBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4buMzIBsYSBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFuXFwnYuG7jV0gW25pXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tBzIBuYSBuaV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFs4buNzIFdIFtuaV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ25pzIEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBr4buNamHMgScsXG4gICAgICAgICAgICBzIDogJ2nMgHPhurlqdcyBIGFheWHMgSBkaWUnLFxuICAgICAgICAgICAgc3MgOidhYXlhzIEgJWQnLFxuICAgICAgICAgICAgbSA6ICdpzIBz4bq5anXMgSBrYW4nLFxuICAgICAgICAgICAgbW0gOiAnacyAc+G6uWp1zIEgJWQnLFxuICAgICAgICAgICAgaCA6ICd3YcyBa2F0aSBrYW4nLFxuICAgICAgICAgICAgaGggOiAnd2HMgWthdGkgJWQnLFxuICAgICAgICAgICAgZCA6ICfhu41q4buNzIEga2FuJyxcbiAgICAgICAgICAgIGRkIDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgICAgICBNIDogJ29zdcyAIGthbicsXG4gICAgICAgICAgICBNTSA6ICdvc3XMgCAlZCcsXG4gICAgICAgICAgICB5IDogJ+G7jWR1zIFuIGthbicsXG4gICAgICAgICAgICB5eSA6ICfhu41kdcyBbiAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hu41q4buNzIFcXHNcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB5bztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+WRqOaXpV/lkajkuIBf5ZGo5LqMX+WRqOS4iV/lkajlm5tf5ZGo5LqUX+WRqOWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6VBaOeCuW1t5YiGJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeW5tE3mnIhE5pelZGRkZEFo54K5bW3liIYnLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gJ+S4reWNiCdcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzlkagpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICflkagnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+WGhScsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5Yeg56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOenkicsXG4gICAgICAgICAgICBtIDogJzEg5YiG6ZKfJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOWIhumSnycsXG4gICAgICAgICAgICBoIDogJzEg5bCP5pe2JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOWwj+aXticsXG4gICAgICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOWkqScsXG4gICAgICAgICAgICBNIDogJzEg5Liq5pyIJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOS4quaciCcsXG4gICAgICAgICAgICB5IDogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOW5tCdcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIC8vIEdCL1QgNzQwOC0xOTk044CK5pWw5o2u5YWD5ZKM5Lqk5o2i5qC85byPwrfkv6Hmga/kuqTmjaLCt+aXpeacn+WSjOaXtumXtOihqOekuuazleOAi+S4jklTTyA4NjAxOjE5ODjnrYnmlYhcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhDbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHpoSGsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1oaycsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS9NL0QnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJyA6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCcgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTScgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndycgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXPlhacnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgICAgICBzIDogJ+W5vuenkicsXG4gICAgICAgICAgICBzcyA6ICclZCDnp5InLFxuICAgICAgICAgICAgbSA6ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbSA6ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaCA6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaCA6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZCA6ICcxIOWkqScsXG4gICAgICAgICAgICBkZCA6ICclZCDlpKknLFxuICAgICAgICAgICAgTSA6ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTSA6ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeSA6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB6aEhrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgemhUdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLXR3Jywge1xuICAgICAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdXJyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz5YWnJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICAgICAgcyA6ICflub7np5InLFxuICAgICAgICAgICAgc3MgOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG0gOiAnMSDliIbpkJgnLFxuICAgICAgICAgICAgbW0gOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgICAgIGggOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGggOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgICAgIGQgOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE0gOiAnMSDlgIvmnIgnLFxuICAgICAgICAgICAgTU0gOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg5bm0J1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhUdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MgKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zICAgIDogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciAgIDogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQgICA6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0cyA6IFtdLFxuICAgICAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgdmFyIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaXNOb3dWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhcmc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICsgKC9cXGR7MSwyfS8pLnNvdXJjZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSwgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQgICA6ICdoOm1tIEEnLFxuICAgICAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xuICAgIHZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICAgICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoICA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkICA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNICA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSAgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgICAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgdW5pdHMucHVzaCh7dW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV19KTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbiAgICB2YXIgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZztcblxuICAgIHZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxuICAgIHZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0b2tlbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG4gICAgdmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxuICAgIHZhciBtYXRjaDMgICAgICAgICA9IC9cXGR7M30vOyAgICAgICAgIC8vICAgICAwMDAgLSA5OTlcbiAgICB2YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8yICAgICAgPSAvXFxkXFxkPy87ICAgICAgICAgLy8gICAgICAgMCAtIDk5XG4gICAgdmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbiAgICB2YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG4gICAgdmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbiAgICB2YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG4gICAgdmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG4gICAgdmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICB2YXIgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpOyAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG4gICAgdmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICB2YXIgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7XG5cbiAgICB2YXIgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwO1xuICAgIHZhciBNT05USCA9IDE7XG4gICAgdmFyIERBVEUgPSAyO1xuICAgIHZhciBIT1VSID0gMztcbiAgICB2YXIgTUlOVVRFID0gNDtcbiAgICB2YXIgU0VDT05EID0gNTtcbiAgICB2YXIgTUlMTElTRUNPTkQgPSA2O1xuICAgIHZhciBXRUVLID0gNztcbiAgICB2YXIgV0VFS0RBWSA9IDg7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gJ0Z1bGxZZWFyJyAmJiBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmIG1vbS5tb250aCgpID09PSAxICYmIG1vbS5kYXRlKCkgPT09IDI5KSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlLCBtb20ubW9udGgoKSwgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmlvcml0aXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxID8gKGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSA6ICgzMSAtIG1vZE1vbnRoICUgNyAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LztcbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1sodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGggKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG5cbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlaywgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXMgOlxuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXNbbS5kYXkoKV0gOlxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20uZGF5KCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgICAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgICAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGRkJyAmJiB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBsb3dlcmNhc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgIC8vIHRoaXMgcnVsZS5cbiAgICB2YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9O1xuICAgIHZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xuICAgIHZhciBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZSAoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdMb2NhbGUgJyArIGtleSArICAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKCdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHRtcExvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93O1xuICAgICAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheSAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgZXhwZWN0ZWRXZWVrZGF5LCB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQyA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKSA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICB2YXIgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG4gICAgdmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG4gICAgdmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbiAgICB2YXIgaXNvRGF0ZXMgPSBbXG4gICAgICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgICAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbiAgICBdO1xuXG4gICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgIHZhciBpc29UaW1lcyA9IFtcbiAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIJywgL1xcZFxcZC9dXG4gICAgXTtcblxuICAgIHZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSwgbCxcbiAgICAgICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgdmFyIHJmYzI4MjIgPSAvXig/OihNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGR7MSwyfSlcXHMoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKFxcZHsyLDR9KVxccyhcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKT9cXHMoPzooVVR8R01UfFtFQ01QXVtTRF1UKXwoW1p6XSl8KFsrLV1cXGR7NH0pKSQvO1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyh5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgdW50cnVuY2F0ZVllYXIoeWVhclN0ciksXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGhvdXJTdHIsIDEwKSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCAnICcpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbnRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUocGFyc2VkSW5wdXRbMF0sIHBhcnNlZElucHV0WzFdLCBwYXJzZWRJbnB1dFsyXSkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG9ic09mZnNldHMgPSB7XG4gICAgICAgIFVUOiAwLFxuICAgICAgICBHTVQ6IDAsXG4gICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICBDRFQ6IC01ICogNjAsXG4gICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICBNU1Q6IC03ICogNjAsXG4gICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgUFNUOiAtOCAqIDYwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApO1xuICAgICAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKG1hdGNoWzRdLCBtYXRjaFszXSwgbWF0Y2hbMl0sIG1hdGNoWzVdLCBtYXRjaFs2XSwgbWF0Y2hbN10pO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICdkaXNjb3VyYWdlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIG1ham9yIHJlbGVhc2UuIFBsZWFzZSByZWZlciB0byAnICtcbiAgICAgICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMDtcblxuICAgICAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICAvLyAgICAgICAgICdyZWdleCcsIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9IHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQodGVtcENvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW55IGlucHV0IHRoYXQgd2FzIG5vdCBwYXJzZWQgYWRkIGEgcGVuYWx0eSBmb3IgdGhhdCBmb3JtYXRcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykudW51c2VkVG9rZW5zLmxlbmd0aCAqIDEwO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICAgICAgaWYgKHJlcy5fbmV4dERheSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgICAgICByZXMuX25leHREYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9ICBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IG1hcChpbnB1dC5zbGljZSgwKSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGlucHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMTQyM1xuICAgICAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgICAgICBjLl9sID0gbG9jYWxlO1xuICAgICAgICBjLl9pID0gaW5wdXQ7XG4gICAgICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDtcblxuICAgICAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbCAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgdmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXggKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFsneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG0pIHtcbiAgICAgICAgICAgIGlmICghKGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiYgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlcmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICAgICAgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICtcbiAgICAgICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCAodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2h1bmsgICA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgP1xuICAgICAgICAgIDAgOlxuICAgICAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID0gKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpID8gaW5wdXQudmFsdWVPZigpIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQgKG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUgKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQgKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICB2YXIgaXNvUmVnZXggPSAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IChtYXRjaFsxXSA9PT0gJysnKSA/IDEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHcgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyAoaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgICAgIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDsgdmFsID0gcGVyaW9kOyBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkICAgICAgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyk7XG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDAgPyAnbGFzdERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDcgPyAnbmV4dFdlZWsnIDogJ3NhbWVFbHNlJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZSc7XG5cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyghaXNVbmRlZmluZWQodW5pdHMpID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJyA/IHRoaXMuaXNBZnRlcihmcm9tLCB1bml0cykgOiAhdGhpcy5pc0JlZm9yZShmcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIodG8sIHVuaXRzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMgfHwgJ21pbGxpc2Vjb25kJyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCx1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LFxuICAgICAgICAgICAgem9uZURlbHRhLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMzsgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OiBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYgKGEsIGIpIHtcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWU7XG4gICAgICAgIHZhciBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JztcbiAgICAgICAgdmFyIHpvbmUgPSAnJztcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICB2YXIgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0IChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzXG4gICAgICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGhpcy5tb250aCgwKTtcbiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUoMSk7XG4gICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzKDApO1xuICAgICAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRoaXMubWludXRlcygwKTtcbiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kcygwKTtcbiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmRzKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2Vla3MgYXJlIGEgc3BlY2lhbCBjYXNlXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuaXRzID09PSAnaXNvV2VlaycpIHtcbiAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHF1YXJ0ZXJzIGFyZSBhbHNvIHNwZWNpYWxcbiAgICAgICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgICAgIHRoaXMubW9udGgoTWF0aC5mbG9vcih0aGlzLm1vbnRoKCkgLyAzKSAqIDMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAnZGF0ZScgaXMgYW4gYWxpYXMgZm9yICdkYXknLCBzbyBpdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBzdWNoLlxuICAgICAgICBpZiAodW5pdHMgPT09ICdkYXRlJykge1xuICAgICAgICAgICAgdW5pdHMgPSAnZGF5JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodW5pdHMpLmFkZCgxLCAodW5pdHMgPT09ICdpc29XZWVrJyA/ICd3ZWVrJyA6IHVuaXRzKSkuc3VidHJhY3QoMSwgJ21zJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kLnZhbHVlT2YoKSAtICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXggKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKSAvIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3F1YXJ0ZXInLCA3KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1EnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdEbycsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgICAgICAobG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlKSA6XG4gICAgICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID0gTWF0aC5yb3VuZCgodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNSkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIGRheU9mWWVhciksICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWludXRlJywgJ20nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdzZWNvbmQnLCAncycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbWlsbGlzZWNvbmQnLCAnbXMnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTUycsICBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW47XG4gICAgZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRSZWdleFRva2VuKHRva2VuLCBtYXRjaFVuc2lnbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNSUxMSVNFQ09ORF0gPSB0b0ludCgoJzAuJyArIGlucHV0KSAqIDEwMDApO1xuICAgIH1cblxuICAgIGZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgcGFyc2VNcyk7XG4gICAgfVxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd6eicsIDAsIDAsICd6b25lTmFtZScpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgICAgICAgICAgICAgICA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciAgICAgICAgICA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmICAgICAgICAgICAgICA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tICAgICAgICAgICAgICA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xuICAgIHByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG4gICAgcHJvdG8udG9Ob3cgICAgICAgICAgICAgPSB0b05vdztcbiAgICBwcm90by5nZXQgICAgICAgICAgICAgICA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyICAgICAgICAgICA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgICAgICAgICAgICA9IGlzU2FtZTtcbiAgICBwcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkICAgICAgICAgICA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG4gICAgcHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSAgICAgICAgPSBsb2NhbGVEYXRhO1xuICAgIHByb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyAgICAgID0gcGFyc2luZ0ZsYWdzO1xuICAgIHByb3RvLnNldCAgICAgICAgICAgICAgID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbiAgICBwcm90by5zdWJ0cmFjdCAgICAgICAgICA9IHN1YnRyYWN0O1xuICAgIHByb3RvLnRvQXJyYXkgICAgICAgICAgID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSAgICAgICAgICAgID0gdG9EYXRlO1xuICAgIHByb3RvLnRvSVNPU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmc7XG4gICAgcHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xuICAgIHByb3RvLnRvSlNPTiAgICAgICAgICAgID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nICAgICAgICAgID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgICAgICAgICAgID0gdmFsdWVPZjtcbiAgICBwcm90by5jcmVhdGlvbkRhdGEgICAgICA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by55ZWFyICAgICAgID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xuICAgIHByb3RvLmlzb1dlZWsgICAgICAgID0gcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciAgICA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG4gICAgcHJvdG8uZGF5ICAgICAgICA9IHByb3RvLmRheXMgICAgICAgICAgICAgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSAgICA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciAgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgICAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvVVRDO1xuICAgIHByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbiAgICBwcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG4gICAgcHJvdG8uaXNVdGNPZmZzZXQgICAgICAgICAgPSBpc1V0Y09mZnNldDtcbiAgICBwcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uem9uZUFiYnIgPSBnZXRab25lQWJicjtcbiAgICBwcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuICAgIHByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbiAgICBwcm90by5tb250aHMgPSBkZXByZWNhdGUoJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsIGdldFNldE1vbnRoKTtcbiAgICBwcm90by55ZWFycyAgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLCBnZXRTZXRZZWFyKTtcbiAgICBwcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG4gICAgcHJvdG8uaXNEU1RTaGlmdGVkID0gZGVwcmVjYXRlKCdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJywgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXggKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluWm9uZSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdCAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbiAgICBwcm90byQxLmxvbmdEYXRlRm9ybWF0ICA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgICAgID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgICAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCAgICAgID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSAgICAgID0gcGFzdEZ1dHVyZTtcbiAgICBwcm90byQxLnNldCAgICAgICAgICAgICA9IHNldDtcblxuICAgIHByb3RvJDEubW9udGhzICAgICAgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xuICAgIHByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrID0gbG9jYWxlV2VlaztcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG4gICAgcHJvdG8kMS5maXJzdERheU9mV2VlayA9IGxvY2FsZUZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5cyAgICAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzUGFyc2U7XG5cbiAgICBwcm90byQxLndlZWtkYXlzUmVnZXggICAgICAgPSAgICAgICAgd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNNaW5SZWdleCAgICA9ICAgICAgICB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG4gICAgICAgIHZhciB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbCAoZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgaSwgZmllbGQsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLy8gKClcbiAgICAvLyAoNSlcbiAgICAvLyAoZm10LCA1KVxuICAgIC8vIChmbXQpXG4gICAgLy8gKHRydWUpXG4gICAgLy8gKHRydWUsIDUpXG4gICAgLy8gKHRydWUsIGZtdCwgNSlcbiAgICAvLyAodHJ1ZSwgZm10KVxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c0ltcGwgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBvdXQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXMgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0IChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbiAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzTWluJyk7XG4gICAgfVxuXG4gICAgZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0b0ludChudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4nLCBnZXRMb2NhbGUpO1xuXG4gICAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgICA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgICAgICAgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyAgICAgICAgID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxIChkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICAgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgICAgICAgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAtMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzQ2VpbCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlICgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IHRoaXMuX2RheXM7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSB0aGlzLl9tb250aHM7XG4gICAgICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgICAgICB2YXIgc2Vjb25kcywgbWludXRlcywgaG91cnMsIHllYXJzLCBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoISgobWlsbGlzZWNvbmRzID49IDAgJiYgZGF5cyA+PSAwICYmIG1vbnRocyA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPD0gMCAmJiBkYXlzIDw9IDAgJiYgbW9udGhzIDw9IDApKSkge1xuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICAgICAgZGF5cyA9IDA7XG4gICAgICAgICAgICBtb250aHMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvclxuICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgICAgICBzZWNvbmRzICAgICAgICAgICA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICA9IHNlY29uZHMgJSA2MDtcblxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgID0gbWludXRlcyAlIDYwO1xuXG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgICAgIGRhdGEubW9udGhzID0gbW9udGhzO1xuICAgICAgICBkYXRhLnllYXJzICA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyAoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gZGF5cyAqIDQ4MDAgLyAxNDYwOTc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzVG9EYXlzIChtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzICh1bml0cykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXlzO1xuICAgICAgICB2YXIgbW9udGhzO1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuXG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzICAgPSB0aGlzLl9kYXlzICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHJldHVybiB1bml0cyA9PT0gJ21vbnRoJyA/IG1vbnRocyA6IG1vbnRocyAvIDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknICAgIDogcmV0dXJuIGRheXMgICAgICAgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInICAgOiByZXR1cm4gZGF5cyAqIDI0ICAgICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnIDogcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbiAgICBmdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyAoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyk7XG4gICAgdmFyIGFzU2Vjb25kcyAgICAgID0gbWFrZUFzKCdzJyk7XG4gICAgdmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG4gICAgdmFyIGFzSG91cnMgICAgICAgID0gbWFrZUFzKCdoJyk7XG4gICAgdmFyIGFzRGF5cyAgICAgICAgID0gbWFrZUFzKCdkJyk7XG4gICAgdmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG4gICAgdmFyIGFzTW9udGhzICAgICAgID0gbWFrZUFzKCdNJyk7XG4gICAgdmFyIGFzWWVhcnMgICAgICAgID0gbWFrZUFzKCd5Jyk7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xuICAgIHZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG4gICAgdmFyIG1pbnV0ZXMgICAgICA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKTtcbiAgICB2YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xuICAgIHZhciBtb250aHMgICAgICAgPSBtYWtlR2V0dGVyKCdtb250aHMnKTtcbiAgICB2YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbiAgICB2YXIgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICBzIDogNDUsICAgICAgICAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgbSA6IDQ1LCAgICAgICAgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQgOiAyNiwgICAgICAgICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgICAgIE0gOiAxMSAgICAgICAgICAvLyBtb250aHMgdG8geWVhclxuICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxIChwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgICAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICAgICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgICAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgICAgICB2YXIgYSA9IHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgICAgICBzZWNvbmRzIDwgdGhyZXNob2xkcy5zICAgJiYgWydzcycsIHNlY29uZHNdIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gICAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDw9IDEgICAgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDwgdGhyZXNob2xkcy5kICAgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gICAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgICAgICB5ZWFycyAgIDw9IDEgICAgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mKHJvdW5kaW5nRnVuY3Rpb24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkICh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIHZhciBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKCh4ID4gMCkgLSAoeCA8IDApKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSBhYnMkMSh0aGlzLl9tb250aHMpO1xuICAgICAgICB2YXIgbWludXRlcywgaG91cnMsIHllYXJzO1xuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgdmFyIFkgPSB5ZWFycztcbiAgICAgICAgdmFyIE0gPSBtb250aHM7XG4gICAgICAgIHZhciBEID0gZGF5cztcbiAgICAgICAgdmFyIGggPSBob3VycztcbiAgICAgICAgdmFyIG0gPSBtaW51dGVzO1xuICAgICAgICB2YXIgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIHRvdGFsU2lnbiArICdQJyArXG4gICAgICAgICAgICAoWSA/IHltU2lnbiArIFkgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChEID8gZGF5c1NpZ24gKyBEICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgICgoaCB8fCBtIHx8IHMpID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG0gPyBobXNTaWduICsgbSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAocyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkICAgICAgICA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xuICAgIHByb3RvJDIuYWRkICAgICAgICAgICAgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ICAgICAgID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzICAgICAgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgICAgICAgID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyAgICAgICAgID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgICAgICAgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzWWVhcnMgICAgICAgID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSAgICAgICAgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSAgICAgICAgICA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzICAgICAgICA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyAgICAgICAgICA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyAgICAgICAgICAgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgICAgICAgICAgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgICAgID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0LCAxMCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4yMi4yJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbiAgICBob29rcy5taW4gICAgICAgICAgICAgICAgICAgPSBtaW47XG4gICAgaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuICAgIGhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbiAgICBob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiAgICAgICAgICAgICAgPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lICAgICAgICAgICAgID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ICAgICAgICAgICA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSAgICAgICAgICA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyAgICAgICAgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgICAgICAgID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdZWVlZLVtXXVdXJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL2FzbjEuanNcbi8vIEZlZG9yLCB5b3UgYXJlIGFtYXppbmcuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xLmpzJylcblxuZXhwb3J0cy5jZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4vY2VydGlmaWNhdGUnKVxuXG52YXIgUlNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdSU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MScpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnY29lZmZpY2llbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQcml2YXRlS2V5ID0gUlNBUHJpdmF0ZUtleVxuXG52YXIgUlNBUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVB1YmxpY0tleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQdWJsaWNLZXkgPSBSU0FQdWJsaWNLZXlcblxudmFyIFB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlB1YmxpY0tleSA9IFB1YmxpY0tleVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbjEuZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnbm9uZScpLm51bGxfKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ2cnKS5pbnQoKVxuICAgICkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuZXhwb3J0cy5Qcml2YXRlS2V5ID0gUHJpdmF0ZUtleUluZm9cbnZhciBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICB0aGlzLmtleSgnZGVjcnlwdCcpLnNlcSgpLm9iaihcbiAgICAgICAgdGhpcy5rZXkoJ2tkZScpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdrZGVwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICAgICAgICB0aGlzLmtleSgnc2FsdCcpLm9jdHN0cigpLFxuICAgICAgICAgICAgdGhpcy5rZXkoJ2l0ZXJzJykuaW50KClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIHRoaXMua2V5KCdjaXBoZXInKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2FsZ28nKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdpdicpLm9jdHN0cigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5cbmV4cG9ydHMuRW5jcnlwdGVkUHJpdmF0ZUtleSA9IEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvXG5cbnZhciBEU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0RTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgIHRoaXMua2V5KCdnJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1Yl9rZXknKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdl9rZXknKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5EU0FQcml2YXRlS2V5ID0gRFNBUHJpdmF0ZUtleVxuXG5leHBvcnRzLkRTQXBhcmFtID0gYXNuMS5kZWZpbmUoJ0RTQXBhcmFtJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmludCgpXG59KVxuXG52YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKS5leHBsaWNpdCgwKS51c2UoRUNQYXJhbWV0ZXJzKSxcbiAgICB0aGlzLmtleSgncHVibGljS2V5Jykub3B0aW9uYWwoKS5leHBsaWNpdCgxKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5FQ1ByaXZhdGVLZXkgPSBFQ1ByaXZhdGVLZXlcblxudmFyIEVDUGFyYW1ldGVycyA9IGFzbjEuZGVmaW5lKCdFQ1BhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3InKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncycpLmludCgpXG4gIClcbn0pXG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW50YW5lbi9ub2RlLWR0bHMvYmxvYi8yNWE3ZGM4NjFiZGEzOGNmZWFjOTNhNzIzNTAwZWVhNGYwYWMyZTg2L0NlcnRpZmljYXRlLmpzXG4vLyB0aGFua3MgdG8gQFJhbnRhbmVuXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbnZhciBUaW1lID0gYXNuLmRlZmluZSgnVGltZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHV0Y1RpbWU6IHRoaXMudXRjdGltZSgpLFxuICAgIGdlbmVyYWxUaW1lOiB0aGlzLmdlbnRpbWUoKVxuICB9KVxufSlcblxudmFyIEF0dHJpYnV0ZVR5cGVWYWx1ZSA9IGFzbi5kZWZpbmUoJ0F0dHJpYnV0ZVR5cGVWYWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3R5cGUnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCd2YWx1ZScpLmFueSgpXG4gIClcbn0pXG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBTdWJqZWN0UHVibGljS2V5SW5mbyA9IGFzbi5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcblxudmFyIFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUgPSBhc24uZGVmaW5lKCdSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldG9mKEF0dHJpYnV0ZVR5cGVWYWx1ZSlcbn0pXG5cbnZhciBSRE5TZXF1ZW5jZSA9IGFzbi5kZWZpbmUoJ1JETlNlcXVlbmNlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcW9mKFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUpXG59KVxuXG52YXIgTmFtZSA9IGFzbi5kZWZpbmUoJ05hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICByZG5TZXF1ZW5jZTogdGhpcy51c2UoUkROU2VxdWVuY2UpXG4gIH0pXG59KVxuXG52YXIgVmFsaWRpdHkgPSBhc24uZGVmaW5lKCdWYWxpZGl0eScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ25vdEJlZm9yZScpLnVzZShUaW1lKSxcbiAgICB0aGlzLmtleSgnbm90QWZ0ZXInKS51c2UoVGltZSlcbiAgKVxufSlcblxudmFyIEV4dGVuc2lvbiA9IGFzbi5kZWZpbmUoJ0V4dGVuc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2V4dG5JRCcpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ2NyaXRpY2FsJykuYm9vbCgpLmRlZihmYWxzZSksXG4gICAgdGhpcy5rZXkoJ2V4dG5WYWx1ZScpLm9jdHN0cigpXG4gIClcbn0pXG5cbnZhciBUQlNDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1RCU0NlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmV4cGxpY2l0KDApLmludCgpLFxuICAgIHRoaXMua2V5KCdzZXJpYWxOdW1iZXInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdpc3N1ZXInKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3ZhbGlkaXR5JykudXNlKFZhbGlkaXR5KSxcbiAgICB0aGlzLmtleSgnc3ViamVjdCcpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleUluZm8nKS51c2UoU3ViamVjdFB1YmxpY0tleUluZm8pLFxuICAgIHRoaXMua2V5KCdpc3N1ZXJVbmlxdWVJRCcpLmltcGxpY2l0KDEpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RVbmlxdWVJRCcpLmltcGxpY2l0KDIpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2V4dGVuc2lvbnMnKS5leHBsaWNpdCgzKS5zZXFvZihFeHRlbnNpb24pLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFg1MDlDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1g1MDlDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3Ric0NlcnRpZmljYXRlJykudXNlKFRCU0NlcnRpZmljYXRlKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlQWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVWYWx1ZScpLmJpdHN0cigpXG4gIClcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gWDUwOUNlcnRpZmljYXRlXG4iLCIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURbXFxuXFxyXStERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspW1xcblxccl0rKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylbXFxuXFxyXSsvbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qIEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86LiogS0VZKXxDRVJUSUZJQ0FURSktLS0tLShbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspLS0tLS1FTkQgXFwxLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBuZXcgQnVmZmVyKG1hdGNoWzJdLCAnaGV4JylcbiAgICB2YXIgY2lwaGVyVGV4dCA9IG5ldyBCdWZmZXIobWF0Y2hbM10ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV1cbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuIiwidmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKVxudmFyIGFlc2lkID0gcmVxdWlyZSgnLi9hZXNpZC5qc29uJylcbnZhciBmaXhQcm9jID0gcmVxdWlyZSgnLi9maXhQcm9jJylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIGNvbXBhdCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gbmV3IEJ1ZmZlcihidWZmZXIpXG4gIH1cblxuICB2YXIgc3RyaXBwZWQgPSBmaXhQcm9jKGJ1ZmZlciwgcGFzc3dvcmQpXG5cbiAgdmFyIHR5cGUgPSBzdHJpcHBlZC50YWdcbiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhXG4gIHZhciBzdWJ0eXBlLCBuZGF0YVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdDRVJUSUZJQ0FURSc6XG4gICAgICBuZGF0YSA9IGFzbjEuY2VydGlmaWNhdGUuZGVjb2RlKGRhdGEsICdkZXInKS50YnNDZXJ0aWZpY2F0ZS5zdWJqZWN0UHVibGljS2V5SW5mb1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BVQkxJQyBLRVknOlxuICAgICAgaWYgKCFuZGF0YSkge1xuICAgICAgICBuZGF0YSA9IGFzbjEuUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5kYXRhLnN1YmplY3RQdWJsaWNLZXlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2VjJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhXG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FbmNyeXB0ZWRQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIGRhdGEgPSBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5Qcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpLnByaXZhdGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnByaXZfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIHBhcmFtczogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdSU0EgUFVCTElDIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ1JTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdEU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgIHBhcmFtczogYXNuMS5EU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICBjYXNlICdFQyBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VydmU6IGRhdGEucGFyYW1ldGVycy52YWx1ZSxcbiAgICAgICAgcHJpdmF0ZUtleTogZGF0YS5wcml2YXRlS2V5XG4gICAgICB9XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICB9XG59XG5wYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmVcbmZ1bmN0aW9uIGRlY3J5cHQgKGRhdGEsIHBhc3N3b3JkKSB7XG4gIHZhciBzYWx0ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLnNhbHRcbiAgdmFyIGl0ZXJzID0gcGFyc2VJbnQoZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLml0ZXJzLnRvU3RyaW5nKCksIDEwKVxuICB2YXIgYWxnbyA9IGFlc2lkW2RhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLmFsZ28uam9pbignLicpXVxuICB2YXIgaXYgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdlxuICB2YXIgY2lwaGVyVGV4dCA9IGRhdGEuc3ViamVjdFByaXZhdGVLZXlcbiAgdmFyIGtleWxlbiA9IHBhcnNlSW50KGFsZ28uc3BsaXQoJy0nKVsxXSwgMTApIC8gOFxuICB2YXIga2V5ID0gY29tcGF0LnBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJzLCBrZXlsZW4pXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG4iLCJleHBvcnRzLnBia2RmMiA9IHJlcXVpcmUoJy4vbGliL2FzeW5jJylcbmV4cG9ydHMucGJrZGYyU3luYyA9IHJlcXVpcmUoJy4vbGliL3N5bmMnKVxuIiwidmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIHN5bmMgPSByZXF1aXJlKCcuL3N5bmMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBaRVJPX0JVRlxudmFyIHN1YnRsZSA9IGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5zdWJ0bGVcbnZhciB0b0Jyb3dzZXIgPSB7XG4gICdzaGEnOiAnU0hBLTEnLFxuICAnc2hhLTEnOiAnU0hBLTEnLFxuICAnc2hhMSc6ICdTSEEtMScsXG4gICdzaGEyNTYnOiAnU0hBLTI1NicsXG4gICdzaGEtMjU2JzogJ1NIQS0yNTYnLFxuICAnc2hhMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTM4NCc6ICdTSEEtMzg0JyxcbiAgJ3NoYS01MTInOiAnU0hBLTUxMicsXG4gICdzaGE1MTInOiAnU0hBLTUxMidcbn1cbnZhciBjaGVja3MgPSBbXVxuZnVuY3Rpb24gY2hlY2tOYXRpdmUgKGFsZ28pIHtcbiAgaWYgKGdsb2JhbC5wcm9jZXNzICYmICFnbG9iYWwucHJvY2Vzcy5icm93c2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuICBpZiAoIXN1YnRsZSB8fCAhc3VidGxlLmltcG9ydEtleSB8fCAhc3VidGxlLmRlcml2ZUJpdHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmIChjaGVja3NbYWxnb10gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjaGVja3NbYWxnb11cbiAgfVxuICBaRVJPX0JVRiA9IFpFUk9fQlVGIHx8IEJ1ZmZlci5hbGxvYyg4KVxuICB2YXIgcHJvbSA9IGJyb3dzZXJQYmtkZjIoWkVST19CVUYsIFpFUk9fQlVGLCAxMCwgMTI4LCBhbGdvKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgY2hlY2tzW2FsZ29dID0gcHJvbVxuICByZXR1cm4gcHJvbVxufVxuXG5mdW5jdGlvbiBicm93c2VyUGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7XG4gIHJldHVybiBzdWJ0bGUuaW1wb3J0S2V5KFxuICAgICdyYXcnLCBwYXNzd29yZCwge25hbWU6ICdQQktERjInfSwgZmFsc2UsIFsnZGVyaXZlQml0cyddXG4gICkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgc2FsdDogc2FsdCxcbiAgICAgIGl0ZXJhdGlvbnM6IGl0ZXJhdGlvbnMsXG4gICAgICBoYXNoOiB7XG4gICAgICAgIG5hbWU6IGFsZ29cbiAgICAgIH1cbiAgICB9LCBrZXksIGxlbmd0aCA8PCAzKVxuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChvdXQpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZSlcbiAgICB9KVxuICB9KVxufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG4gIHZhciBhbGdvID0gdG9Ccm93c2VyW2RpZ2VzdC50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghYWxnbyB8fCB0eXBlb2YgZ2xvYmFsLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3V0XG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfVxuXG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICByZXNvbHZlUHJvbWlzZShjaGVja05hdGl2ZShhbGdvKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgaWYgKHJlc3ApIHJldHVybiBicm93c2VyUGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pXG5cbiAgICByZXR1cm4gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gIH0pLCBjYWxsYmFjaylcbn1cbiIsInZhciBkZWZhdWx0RW5jb2Rpbmdcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gIGRlZmF1bHRFbmNvZGluZyA9ICd1dGYtOCdcbn0gZWxzZSB7XG4gIHZhciBwVmVyc2lvbk1ham9yID0gcGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9uLnNwbGl0KCcuJylbMF0uc2xpY2UoMSksIDEwKVxuXG4gIGRlZmF1bHRFbmNvZGluZyA9IHBWZXJzaW9uTWFqb3IgPj0gNiA/ICd1dGYtOCcgOiAnYmluYXJ5J1xufVxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0RW5jb2RpbmdcbiIsInZhciBNQVhfQUxMT0MgPSBNYXRoLnBvdygyLCAzMCkgLSAxIC8vIGRlZmF1bHQgaW4gaW9qc1xuXG5mdW5jdGlvbiBjaGVja0J1ZmZlciAoYnVmLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgYnVmICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG5hbWUgKyAnIG11c3QgYmUgYSBidWZmZXIgb3Igc3RyaW5nJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKSB7XG4gIGNoZWNrQnVmZmVyKHBhc3N3b3JkLCAnUGFzc3dvcmQnKVxuICBjaGVja0J1ZmZlcihzYWx0LCAnU2FsdCcpXG5cbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgeyAvKiBlc2xpbnQgbm8tc2VsZi1jb21wYXJlOiAwICovXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuICB9XG59XG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBybWQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpXG52YXIgZGVmYXVsdEVuY29kaW5nID0gcmVxdWlyZSgnLi9kZWZhdWx0LWVuY29kaW5nJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBzaXplcyA9IHtcbiAgbWQ1OiAxNixcbiAgc2hhMTogMjAsXG4gIHNoYTIyNDogMjgsXG4gIHNoYTI1NjogMzIsXG4gIHNoYTM4NDogNDgsXG4gIHNoYTUxMjogNjQsXG4gIHJtZDE2MDogMjAsXG4gIHJpcGVtZDE2MDogMjBcbn1cblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXksIHNhbHRMZW4pIHtcbiAgdmFyIGhhc2ggPSBnZXREaWdlc3QoYWxnKVxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gaGFzaChrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICB2YXIgb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdmFyIGlwYWQxID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNhbHRMZW4gKyA0KVxuICBpcGFkLmNvcHkoaXBhZDEsIDAsIDAsIGJsb2Nrc2l6ZSlcbiAgdGhpcy5pcGFkMSA9IGlwYWQxXG4gIHRoaXMuaXBhZDIgPSBpcGFkXG4gIHRoaXMub3BhZCA9IG9wYWRcbiAgdGhpcy5hbGcgPSBhbGdcbiAgdGhpcy5ibG9ja3NpemUgPSBibG9ja3NpemVcbiAgdGhpcy5oYXNoID0gaGFzaFxuICB0aGlzLnNpemUgPSBzaXplc1thbGddXG59XG5cbkhtYWMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChkYXRhLCBpcGFkKSB7XG4gIGRhdGEuY29weShpcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgdmFyIGggPSB0aGlzLmhhc2goaXBhZClcbiAgaC5jb3B5KHRoaXMub3BhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHJldHVybiB0aGlzLmhhc2godGhpcy5vcGFkKVxufVxuXG5mdW5jdGlvbiBnZXREaWdlc3QgKGFsZykge1xuICBmdW5jdGlvbiBzaGFGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIHNoYShhbGcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG5cbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIHJtZDE2MFxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG1kNVxuICByZXR1cm4gc2hhRnVuY1xufVxuXG5mdW5jdGlvbiBwYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCkge1xuICBjaGVja1BhcmFtZXRlcnMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbilcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCBkZWZhdWx0RW5jb2RpbmcpXG5cbiAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuXG4gIHZhciBobWFjID0gbmV3IEhtYWMoZGlnZXN0LCBwYXNzd29yZCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIERLID0gQnVmZmVyLmFsbG9jVW5zYWZlKGtleWxlbilcbiAgdmFyIGJsb2NrMSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzYWx0Lmxlbmd0aCArIDQpXG4gIHNhbHQuY29weShibG9jazEsIDAsIDAsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciBkZXN0UG9zID0gMFxuICB2YXIgaExlbiA9IHNpemVzW2RpZ2VzdF1cbiAgdmFyIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICBibG9jazEud3JpdGVVSW50MzJCRShpLCBzYWx0Lmxlbmd0aClcblxuICAgIHZhciBUID0gaG1hYy5ydW4oYmxvY2sxLCBobWFjLmlwYWQxKVxuICAgIHZhciBVID0gVFxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgIFUgPSBobWFjLnJ1bihVLCBobWFjLmlwYWQyKVxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBoTGVuOyBrKyspIFRba10gXj0gVVtrXVxuICAgIH1cblxuICAgIFQuY29weShESywgZGVzdFBvcylcbiAgICBkZXN0UG9zICs9IGhMZW5cbiAgfVxuXG4gIHJldHVybiBES1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBia2RmMlxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAoIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgnLi9wdWJsaWNFbmNyeXB0Jyk7XG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcmVxdWlyZSgnLi9wcml2YXRlRGVjcnlwdCcpO1xuXG5leHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gZnVuY3Rpb24gcHJpdmF0ZUVuY3J5cHQoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHVibGljRW5jcnlwdChrZXksIGJ1ZiwgdHJ1ZSk7XG59O1xuXG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBmdW5jdGlvbiBwdWJsaWNEZWNyeXB0KGtleSwgYnVmKSB7XG4gIHJldHVybiBleHBvcnRzLnByaXZhdGVEZWNyeXB0KGtleSwgYnVmLCB0cnVlKTtcbn07IiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gbmV3IEJ1ZmZlcignJyk7XG4gIHZhciAgaSA9IDAsIGM7XG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspO1xuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pO1xuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbik7XG59O1xuXG5mdW5jdGlvbiBpMm9wcyhjKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKDQpO1xuICBvdXQud3JpdGVVSW50MzJCRShjLDApO1xuICByZXR1cm4gb3V0O1xufSIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJyk7XG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKTtcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpO1xudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJpdmF0ZURlY3J5cHQocHJpdmF0ZV9rZXksIGVuYywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZztcbiAgaWYgKHByaXZhdGVfa2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHJpdmF0ZV9rZXkucGFkZGluZztcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDQ7XG4gIH1cbiAgXG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHJpdmF0ZV9rZXkpO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgaWYgKGVuYy5sZW5ndGggPiBrIHx8IG5ldyBibihlbmMpLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHZhciBtc2c7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgbXNnID0gd2l0aFB1YmxpYyhuZXcgYm4oZW5jKSwga2V5KTtcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBjcnQoZW5jLCBrZXkpO1xuICB9XG4gIHZhciB6QnVmZmVyID0gbmV3IEJ1ZmZlcihrIC0gbXNnLmxlbmd0aCk7XG4gIHpCdWZmZXIuZmlsbCgwKTtcbiAgbXNnID0gQnVmZmVyLmNvbmNhdChbekJ1ZmZlciwgbXNnXSwgayk7XG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcmV0dXJuIG9hZXAoa2V5LCBtc2cpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICByZXR1cm4gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICByZXR1cm4gbXNnO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9hZXAoa2V5LCBtc2cpe1xuICB2YXIgbiA9IGtleS5tb2R1bHVzO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKG5ldyBCdWZmZXIoJycpKS5kaWdlc3QoKTtcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7XG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuO1xuICBpZiAobXNnWzBdICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIG1hc2tlZFNlZWQgPSBtc2cuc2xpY2UoMSwgaExlbiArIDEpO1xuICB2YXIgbWFza2VkRGIgPSAgbXNnLnNsaWNlKGhMZW4gKyAxKTtcbiAgdmFyIHNlZWQgPSB4b3IobWFza2VkU2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSk7XG4gIHZhciBkYiA9IHhvcihtYXNrZWREYiwgbWdmKHNlZWQsIGsgLSBoTGVuIC0gMSkpO1xuICBpZiAoY29tcGFyZShpSGFzaCwgZGIuc2xpY2UoMCwgaExlbikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIGkgPSBoTGVuO1xuICB3aGlsZSAoZGJbaV0gPT09IDApIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGRiW2krK10gIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICByZXR1cm4gZGIuc2xpY2UoaSk7XG59XG5cbmZ1bmN0aW9uIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKXtcbiAgdmFyIHAxID0gbXNnLnNsaWNlKDAsIDIpO1xuICB2YXIgaSA9IDI7XG4gIHZhciBzdGF0dXMgPSAwO1xuICB3aGlsZSAobXNnW2krK10gIT09IDApIHtcbiAgICBpZiAoaSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgICBzdGF0dXMrKztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgcHMgPSBtc2cuc2xpY2UoMiwgaSAtIDEpO1xuICB2YXIgcDIgPSBtc2cuc2xpY2UoaSAtIDEsIGkpO1xuXG4gIGlmICgocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMicgJiYgIXJldmVyc2UpIHx8IChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAxJyAmJiByZXZlcnNlKSl7XG4gICAgc3RhdHVzKys7XG4gIH1cbiAgaWYgKHBzLmxlbmd0aCA8IDgpIHtcbiAgICBzdGF0dXMrKztcbiAgfVxuICBpZiAoc3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuICBtc2cuc2xpY2UoaSk7XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpe1xuICBhID0gbmV3IEJ1ZmZlcihhKTtcbiAgYiA9IG5ldyBCdWZmZXIoYik7XG4gIHZhciBkaWYgPSAwO1xuICB2YXIgbGVuID0gYS5sZW5ndGg7XG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBkaWYrKztcbiAgICBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICB9XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBkaWYgKz0gKGFbaV0gXiBiW2ldKTtcbiAgfVxuICByZXR1cm4gZGlmO1xufSIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJyk7XG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG5cbnZhciBjb25zdGFudHMgPSB7XG4gIFJTQV9QS0NTMV9PQUVQX1BBRERJTkc6IDQsXG4gIFJTQV9QS0NTMV9QQURESU46IDEsXG4gIFJTQV9OT19QQURESU5HOiAzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHB1YmxpY0VuY3J5cHQocHVibGljX2tleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHVibGljX2tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHB1YmxpY19rZXkucGFkZGluZztcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDQ7XG4gIH1cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNfa2V5KTtcbiAgdmFyIHBhZGRlZE1zZztcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAxKSB7XG4gICAgcGFkZGVkTXNnID0gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICBwYWRkZWRNc2cgPSBuZXcgYm4obXNnKTtcbiAgICBpZiAocGFkZGVkTXNnLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJyk7XG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICByZXR1cm4gY3J0KHBhZGRlZE1zZywga2V5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9hZXAoa2V5LCBtc2cpe1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKG5ldyBCdWZmZXIoJycpKS5kaWdlc3QoKTtcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7XG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuO1xuICBpZiAobUxlbiA+IGsgLSBoTGVuMiAtIDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgcHMgPSBuZXcgQnVmZmVyKGsgLSBtTGVuIC0gaExlbjIgLSAyKTtcbiAgcHMuZmlsbCgwKTtcbiAgdmFyIGRibGVuID0gayAtIGhMZW4gLSAxO1xuICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pO1xuICB2YXIgbWFza2VkRGIgPSB4b3IoQnVmZmVyLmNvbmNhdChbaUhhc2gsIHBzLCBuZXcgQnVmZmVyKFsxXSksIG1zZ10sIGRibGVuKSwgbWdmKHNlZWQsIGRibGVuKSk7XG4gIHZhciBtYXNrZWRTZWVkID0geG9yKHNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpO1xuICByZXR1cm4gbmV3IGJuKEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzBdKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSk7XG59XG5mdW5jdGlvbiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSl7XG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aDtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIGlmIChtTGVuID4gayAtIDExKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJyk7XG4gIH1cbiAgdmFyIHBzO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIHBzID0gbmV3IEJ1ZmZlcihrIC0gbUxlbiAtIDMpO1xuICAgIHBzLmZpbGwoMHhmZik7XG4gIH0gZWxzZSB7XG4gICAgcHMgPSBub25aZXJvKGsgLSBtTGVuIC0gMyk7XG4gIH1cbiAgcmV0dXJuIG5ldyBibihCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFswLCByZXZlcnNlPzE6Ml0pLCBwcywgbmV3IEJ1ZmZlcihbMF0pLCBtc2ddLCBrKSk7XG59XG5mdW5jdGlvbiBub25aZXJvKGxlbiwgY3J5cHRvKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbik7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuKjIpO1xuICB2YXIgY3VyID0gMDtcbiAgdmFyIG51bTtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoY3VyID09PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuKjIpO1xuICAgICAgY3VyID0gMDtcbiAgICB9XG4gICAgbnVtID0gY2FjaGVbY3VyKytdO1xuICAgIGlmIChudW0pIHtcbiAgICAgIG91dFtpKytdID0gbnVtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufSIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5mdW5jdGlvbiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHBhZGRlZE1zZ1xuICAgIC50b1JlZChibi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBibihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yKGEsIGIpIHtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYVtpXSBePSBiW2ldO1xuICB9XG4gIHJldHVybiBhXG59OyIsIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBvbGRCcm93c2VyICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlxcblVzZSBDaHJvbWUsIEZpcmVmb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0b1xuXG5pZiAoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByYW5kb21CeXRlc1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBvbGRCcm93c2VyXG59XG5cbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzIChzaXplLCBjYikge1xuICAvLyBwaGFudG9tanMgbmVlZHMgdG8gdGhyb3dcbiAgaWYgKHNpemUgPiA2NTUzNikgdGhyb3cgbmV3IEVycm9yKCdyZXF1ZXN0ZWQgdG9vIG1hbnkgcmFuZG9tIGJ5dGVzJylcbiAgLy8gaW4gY2FzZSBicm93c2VyaWZ5ICBpc24ndCB1c2luZyB0aGUgVWludDhBcnJheSB2ZXJzaW9uXG4gIHZhciByYXdCeXRlcyA9IG5ldyBnbG9iYWwuVWludDhBcnJheShzaXplKVxuXG4gIC8vIFRoaXMgd2lsbCBub3Qgd29yayBpbiBvbGRlciBicm93c2Vycy5cbiAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICBpZiAoc2l6ZSA+IDApIHsgIC8vIGdldFJhbmRvbVZhbHVlcyBmYWlscyBvbiBJRSBpZiBzaXplID09IDBcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJhd0J5dGVzKVxuICB9XG5cbiAgLy8gWFhYOiBwaGFudG9tanMgZG9lc24ndCBsaWtlIGEgYnVmZmVyIGJlaW5nIHBhc3NlZCBoZXJlXG4gIHZhciBieXRlcyA9IEJ1ZmZlci5mcm9tKHJhd0J5dGVzLmJ1ZmZlcilcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2IobnVsbCwgYnl0ZXMpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG51c2UgY2hyb21lLCBGaXJlRm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cbnZhciBzYWZlQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKVxudmFyIHJhbmRvbWJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxudmFyIEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyXG52YXIga0J1ZmZlck1heExlbmd0aCA9IHNhZmVCdWZmZXIua01heExlbmd0aFxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG52YXIga01heFVpbnQzMiA9IE1hdGgucG93KDIsIDMyKSAtIDFcbmZ1bmN0aW9uIGFzc2VydE9mZnNldCAob2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAhPT0gb2Zmc2V0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+IGtNYXhVaW50MzIgfHwgb2Zmc2V0IDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgdWludDMyJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPiBrQnVmZmVyTWF4TGVuZ3RoIHx8IG9mZnNldCA+IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgb3V0IG9mIHJhbmdlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplLCBvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInIHx8IHNpemUgIT09IHNpemUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHNpemUgPiBrTWF4VWludDMyIHx8IHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgdWludDMyJylcbiAgfVxuXG4gIGlmIChzaXplICsgb2Zmc2V0ID4gbGVuZ3RoIHx8IHNpemUgPiBrQnVmZmVyTWF4TGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2J1ZmZlciB0b28gc21hbGwnKVxuICB9XG59XG5pZiAoKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB8fCAhcHJvY2Vzcy5icm93c2VyKSB7XG4gIGV4cG9ydHMucmFuZG9tRmlsbCA9IHJhbmRvbUZpbGxcbiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJhbmRvbUZpbGxTeW5jXG59IGVsc2Uge1xuICBleHBvcnRzLnJhbmRvbUZpbGwgPSBvbGRCcm93c2VyXG4gIGV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSBvbGRCcm93c2VyXG59XG5mdW5jdGlvbiByYW5kb21GaWxsIChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5JylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSAwXG4gICAgc2l6ZSA9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gc2l6ZVxuICAgIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYlwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpXG4gIH1cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aClcbiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpXG4gIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYilcbn1cblxuZnVuY3Rpb24gYWN0dWFsRmlsbCAoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7XG4gIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICB2YXIgb3VyQnVmID0gYnVmLmJ1ZmZlclxuICAgIHZhciB1aW50ID0gbmV3IFVpbnQ4QXJyYXkob3VyQnVmLCBvZmZzZXQsIHNpemUpXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1aW50KVxuICAgIGlmIChjYikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNiKG51bGwsIGJ1ZilcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG4gIGlmIChjYikge1xuICAgIHJhbmRvbWJ5dGVzKHNpemUsIGZ1bmN0aW9uIChlcnIsIGJ5dGVzKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYihlcnIpXG4gICAgICB9XG4gICAgICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KVxuICAgICAgY2IobnVsbCwgYnVmKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGJ5dGVzID0gcmFuZG9tYnl0ZXMoc2l6ZSlcbiAgYnl0ZXMuY29weShidWYsIG9mZnNldClcbiAgcmV0dXJuIGJ1ZlxufVxuZnVuY3Rpb24gcmFuZG9tRmlsbFN5bmMgKGJ1Ziwgb2Zmc2V0LCBzaXplKSB7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgIG9mZnNldCA9IDBcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpICYmICEoYnVmIGluc3RhbmNlb2YgZ2xvYmFsLlVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKVxuICB9XG5cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aClcblxuICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkKSBzaXplID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKVxuXG4gIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZV1cbnZhciBociA9IFsweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBSSVBFTUQxNjAgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG59XG5cbmluaGVyaXRzKFJJUEVNRDE2MCwgSGFzaEJhc2UpXG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdvcmRzID0gQVJSQVkxNlxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHdvcmRzW2pdID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaiAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNsID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZSB8IDBcblxuICB2YXIgYXIgPSB0aGlzLl9hIHwgMFxuICB2YXIgYnIgPSB0aGlzLl9iIHwgMFxuICB2YXIgY3IgPSB0aGlzLl9jIHwgMFxuICB2YXIgZHIgPSB0aGlzLl9kIHwgMFxuICB2YXIgZXIgPSB0aGlzLl9lIHwgMFxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHZhciB0bFxuICAgIHZhciB0clxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0bCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMV0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzFdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdGwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzJdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4zKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsyXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ldKVxuICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XG4gICAgICB0bCA9IGZuNShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbNF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzRdLCBzcltpXSlcbiAgICB9XG5cbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdGxcblxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0clxuICB9XG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHZhciB0ID0gKHRoaXMuX2IgKyBjbCArIGRyKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9jICsgZGwgKyBlcikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fZCArIGVsICsgYXIpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2UgKyBhbCArIGJyKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9hICsgYmwgKyBjcikgfCAwXG4gIHRoaXMuX2EgPSB0XG59XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jID8gQnVmZmVyLmFsbG9jKDIwKSA6IG5ldyBCdWZmZXIoMjApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZSwgMTYpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuMSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMiAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4zIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiB8ICh+YykpIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjQgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIChjIHwgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSSVBFTUQxNjBcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuLy8gcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuZnVuY3Rpb24gSGFzaCAoYmxvY2tTaXplLCBmaW5hbFNpemUpIHtcbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2MoYmxvY2tTaXplKVxuICB0aGlzLl9maW5hbFNpemUgPSBmaW5hbFNpemVcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2xlbiA9IDBcbn1cblxuSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpXG4gIH1cblxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgYmxvY2tTaXplID0gdGhpcy5fYmxvY2tTaXplXG4gIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aFxuICB2YXIgYWNjdW0gPSB0aGlzLl9sZW5cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBsZW5ndGg7KSB7XG4gICAgdmFyIGFzc2lnbmVkID0gYWNjdW0gJSBibG9ja1NpemVcbiAgICB2YXIgcmVtYWluZGVyID0gTWF0aC5taW4obGVuZ3RoIC0gb2Zmc2V0LCBibG9ja1NpemUgLSBhc3NpZ25lZClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtYWluZGVyOyBpKyspIHtcbiAgICAgIGJsb2NrW2Fzc2lnbmVkICsgaV0gPSBkYXRhW29mZnNldCArIGldXG4gICAgfVxuXG4gICAgYWNjdW0gKz0gcmVtYWluZGVyXG4gICAgb2Zmc2V0ICs9IHJlbWFpbmRlclxuXG4gICAgaWYgKChhY2N1bSAlIGJsb2NrU2l6ZSkgPT09IDApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShibG9jaylcbiAgICB9XG4gIH1cblxuICB0aGlzLl9sZW4gKz0gbGVuZ3RoXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIHJlbSA9IHRoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZVxuXG4gIHRoaXMuX2Jsb2NrW3JlbV0gPSAweDgwXG5cbiAgLy8gemVybyAocmVtICsgMSkgdHJhaWxpbmcgYml0cywgd2hlcmUgKHJlbSArIDEpIGlzIHRoZSBzbWFsbGVzdFxuICAvLyBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsZW5ndGggKyAxICsgKHJlbSArIDEpKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2suZmlsbCgwLCByZW0gKyAxKVxuXG4gIGlmIChyZW0gPj0gdGhpcy5fZmluYWxTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgfVxuXG4gIHZhciBiaXRzID0gdGhpcy5fbGVuICogOFxuXG4gIC8vIHVpbnQzMlxuICBpZiAoYml0cyA8PSAweGZmZmZmZmZmKSB7XG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShiaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gIC8vIHVpbnQ2NFxuICB9IGVsc2Uge1xuICAgIHZhciBsb3dCaXRzID0gKGJpdHMgJiAweGZmZmZmZmZmKSA+Pj4gMFxuICAgIHZhciBoaWdoQml0cyA9IChiaXRzIC0gbG93Qml0cykgLyAweDEwMDAwMDAwMFxuXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShoaWdoQml0cywgdGhpcy5fYmxvY2tTaXplIC0gOClcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGxvd0JpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG4gIH1cblxuICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaCgpXG5cbiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbn1cblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcbiIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kID0gMHhhNTRmZjUzYVxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9mID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9nID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oID0gMHg1YmUwY2QxOVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGNoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA2NDsgKytpKSBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDBcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyArK2opIHtcbiAgICB2YXIgVDEgPSAoaCArIHNpZ21hMShlKSArIGNoKGUsIGYsIGcpICsgS1tqXSArIFdbal0pIHwgMFxuICAgIHZhciBUMiA9IChzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykpIHwgMFxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IChkICsgVDEpIHwgMFxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSAoVDEgKyBUMikgfCAwXG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4Y2JiYjlkNWRcbiAgdGhpcy5fYmggPSAweDYyOWEyOTJhXG4gIHRoaXMuX2NoID0gMHg5MTU5MDE1YVxuICB0aGlzLl9kaCA9IDB4MTUyZmVjZDhcbiAgdGhpcy5fZWggPSAweDY3MzMyNjY3XG4gIHRoaXMuX2ZoID0gMHg4ZWI0NGE4N1xuICB0aGlzLl9naCA9IDB4ZGIwYzJlMGRcbiAgdGhpcy5faGggPSAweDQ3YjU0ODFkXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQ4KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTM4NFxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhNTEyICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYmggPSAweGJiNjdhZTg1XG4gIHRoaXMuX2NoID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kaCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZWggPSAweDUxMGU1MjdmXG4gIHRoaXMuX2ZoID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9naCA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faGggPSAweDViZTBjZDE5XG5cbiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4XG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYlxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmJcbiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMVxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWZcbiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuZnVuY3Rpb24gZ2V0Q2FycnkgKGEsIGIpIHtcbiAgcmV0dXJuIChhID4+PiAwKSA8IChiID4+PiAwKSA/IDEgOiAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhaCA9IHRoaXMuX2FoIHwgMFxuICB2YXIgYmggPSB0aGlzLl9iaCB8IDBcbiAgdmFyIGNoID0gdGhpcy5fY2ggfCAwXG4gIHZhciBkaCA9IHRoaXMuX2RoIHwgMFxuICB2YXIgZWggPSB0aGlzLl9laCB8IDBcbiAgdmFyIGZoID0gdGhpcy5fZmggfCAwXG4gIHZhciBnaCA9IHRoaXMuX2doIHwgMFxuICB2YXIgaGggPSB0aGlzLl9oaCB8IDBcblxuICB2YXIgYWwgPSB0aGlzLl9hbCB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYmwgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2NsIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kbCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZWwgfCAwXG4gIHZhciBmbCA9IHRoaXMuX2ZsIHwgMFxuICB2YXIgZ2wgPSB0aGlzLl9nbCB8IDBcbiAgdmFyIGhsID0gdGhpcy5faGwgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSArPSAyKSB7XG4gICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNClcbiAgfVxuICBmb3IgKDsgaSA8IDE2MDsgaSArPSAyKSB7XG4gICAgdmFyIHhoID0gV1tpIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaSAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4aClcblxuICAgIHhoID0gV1tpIC0gMiAqIDJdXG4gICAgeGwgPSBXW2kgLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aClcblxuICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNmggPSBXW2kgLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tpIC0gMTYgKiAyICsgMV1cblxuICAgIHZhciBXaWwgPSAoZ2FtbWEwbCArIFdpN2wpIHwgMFxuICAgIHZhciBXaWggPSAoZ2FtbWEwICsgV2k3aCArIGdldENhcnJ5KFdpbCwgZ2FtbWEwbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBnYW1tYTFsKSB8IDBcbiAgICBXaWggPSAoV2loICsgZ2FtbWExICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTFsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIFdpMTZsKSB8IDBcbiAgICBXaWggPSAoV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSkgfCAwXG5cbiAgICBXW2ldID0gV2loXG4gICAgV1tpICsgMV0gPSBXaWxcbiAgfVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTYwOyBqICs9IDIpIHtcbiAgICBXaWggPSBXW2pdXG4gICAgV2lsID0gV1tqICsgMV1cblxuICAgIHZhciBtYWpoID0gbWFqKGFoLCBiaCwgY2gpXG4gICAgdmFyIG1hamwgPSBtYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gc2lnbWEwKGFoLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IHNpZ21hMChhbCwgYWgpXG4gICAgdmFyIHNpZ21hMWggPSBzaWdtYTEoZWgsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gc2lnbWExKGVsLCBlaClcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tqXSArIFdbal1cbiAgICB2YXIgS2loID0gS1tqXVxuICAgIHZhciBLaWwgPSBLW2ogKyAxXVxuXG4gICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gKGhsICsgc2lnbWExbCkgfCAwXG4gICAgdmFyIHQxaCA9IChoaCArIHNpZ21hMWggKyBnZXRDYXJyeSh0MWwsIGhsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIGNobCkgfCAwXG4gICAgdDFoID0gKHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIEtpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIEtpaCArIGdldENhcnJ5KHQxbCwgS2lsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIFdpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIFdpaCArIGdldENhcnJ5KHQxbCwgV2lsKSkgfCAwXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSAoc2lnbWEwbCArIG1hamwpIHwgMFxuICAgIHZhciB0MmggPSAoc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpKSB8IDBcblxuICAgIGhoID0gZ2hcbiAgICBobCA9IGdsXG4gICAgZ2ggPSBmaFxuICAgIGdsID0gZmxcbiAgICBmaCA9IGVoXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlaCA9IChkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkpIHwgMFxuICAgIGRoID0gY2hcbiAgICBkbCA9IGNsXG4gICAgY2ggPSBiaFxuICAgIGNsID0gYmxcbiAgICBiaCA9IGFoXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYWggPSAodDFoICsgdDJoICsgZ2V0Q2FycnkoYWwsIHQxbCkpIHwgMFxuICB9XG5cbiAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gIHRoaXMuX2JsID0gKHRoaXMuX2JsICsgYmwpIHwgMFxuICB0aGlzLl9jbCA9ICh0aGlzLl9jbCArIGNsKSB8IDBcbiAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gIHRoaXMuX2VsID0gKHRoaXMuX2VsICsgZWwpIHwgMFxuICB0aGlzLl9mbCA9ICh0aGlzLl9mbCArIGZsKSB8IDBcbiAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gIHRoaXMuX2hsID0gKHRoaXMuX2hsICsgaGwpIHwgMFxuXG4gIHRoaXMuX2FoID0gKHRoaXMuX2FoICsgYWggKyBnZXRDYXJyeSh0aGlzLl9hbCwgYWwpKSB8IDBcbiAgdGhpcy5fYmggPSAodGhpcy5fYmggKyBiaCArIGdldENhcnJ5KHRoaXMuX2JsLCBibCkpIHwgMFxuICB0aGlzLl9jaCA9ICh0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSkgfCAwXG4gIHRoaXMuX2RoID0gKHRoaXMuX2RoICsgZGggKyBnZXRDYXJyeSh0aGlzLl9kbCwgZGwpKSB8IDBcbiAgdGhpcy5fZWggPSAodGhpcy5fZWggKyBlaCArIGdldENhcnJ5KHRoaXMuX2VsLCBlbCkpIHwgMFxuICB0aGlzLl9maCA9ICh0aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSkgfCAwXG4gIHRoaXMuX2doID0gKHRoaXMuX2doICsgZ2ggKyBnZXRDYXJyeSh0aGlzLl9nbCwgZ2wpKSB8IDBcbiAgdGhpcy5faGggPSAodGhpcy5faGggKyBoaCArIGdldENhcnJ5KHRoaXMuX2hsLCBobCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCJ2YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcblxudmFyIE9iamVjdF9rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChPYmplY3Qua2V5cykgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSByZXMucHVzaChrZXkpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoeHMsIGZuKSB7XG4gICAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuKVxuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbih4c1tpXSwgaSwgeHMpO1xuICAgIH1cbn07XG5cbnZhciBkZWZpbmVQcm9wID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ18nLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIG9ialtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cbn0oKSk7XG5cbnZhciBnbG9iYWxzID0gWydBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRXZhbEVycm9yJywgJ0Z1bmN0aW9uJyxcbidJbmZpbml0eScsICdKU09OJywgJ01hdGgnLCAnTmFOJywgJ051bWJlcicsICdPYmplY3QnLCAnUmFuZ2VFcnJvcicsXG4nUmVmZXJlbmNlRXJyb3InLCAnUmVnRXhwJywgJ1N0cmluZycsICdTeW50YXhFcnJvcicsICdUeXBlRXJyb3InLCAnVVJJRXJyb3InLFxuJ2RlY29kZVVSSScsICdkZWNvZGVVUklDb21wb25lbnQnLCAnZW5jb2RlVVJJJywgJ2VuY29kZVVSSUNvbXBvbmVudCcsICdlc2NhcGUnLFxuJ2V2YWwnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLCAncGFyc2VGbG9hdCcsICdwYXJzZUludCcsICd1bmRlZmluZWQnLCAndW5lc2NhcGUnXTtcblxuZnVuY3Rpb24gQ29udGV4dCgpIHt9XG5Db250ZXh0LnByb3RvdHlwZSA9IHt9O1xuXG52YXIgU2NyaXB0ID0gZXhwb3J0cy5TY3JpcHQgPSBmdW5jdGlvbiBOb2RlU2NyaXB0IChjb2RlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjcmlwdCkpIHJldHVybiBuZXcgU2NyaXB0KGNvZGUpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKCEoY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZWVkcyBhICdjb250ZXh0JyBhcmd1bWVudC5cIik7XG4gICAgfVxuICAgIFxuICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZiAoIWlmcmFtZS5zdHlsZSkgaWZyYW1lLnN0eWxlID0ge307XG4gICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICB2YXIgd0V2YWwgPSB3aW4uZXZhbCwgd0V4ZWNTY3JpcHQgPSB3aW4uZXhlY1NjcmlwdDtcblxuICAgIGlmICghd0V2YWwgJiYgd0V4ZWNTY3JpcHQpIHtcbiAgICAgICAgLy8gd2luLmV2YWwoKSBtYWdpY2FsbHkgYXBwZWFycyB3aGVuIHRoaXMgaXMgY2FsbGVkIGluIElFOlxuICAgICAgICB3RXhlY1NjcmlwdC5jYWxsKHdpbiwgJ251bGwnKTtcbiAgICAgICAgd0V2YWwgPSB3aW4uZXZhbDtcbiAgICB9XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGNvbnRleHRba2V5XSkge1xuICAgICAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB2YXIgd2luS2V5cyA9IE9iamVjdF9rZXlzKHdpbik7XG5cbiAgICB2YXIgcmVzID0gd0V2YWwuY2FsbCh3aW4sIHRoaXMuY29kZSk7XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyh3aW4pLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgY2lyY3VsYXIgb2JqZWN0cyBsaWtlIGB0b3BgIGFuZCBgd2luZG93YCBieSBvbmx5XG4gICAgICAgIC8vIHVwZGF0aW5nIGV4aXN0aW5nIGNvbnRleHQgcHJvcGVydGllcyBvciBuZXcgcHJvcGVydGllcyBpbiB0aGUgYHdpbmBcbiAgICAgICAgLy8gdGhhdCB3YXMgb25seSBpbnRyb2R1Y2VkIGFmdGVyIHRoZSBldmFsLlxuICAgICAgICBpZiAoa2V5IGluIGNvbnRleHQgfHwgaW5kZXhPZih3aW5LZXlzLCBrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gd2luW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gY29udGV4dCkpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3AoY29udGV4dCwga2V5LCB3aW5ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgcmV0dXJuIHJlcztcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5UaGlzQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXZhbCh0aGlzLmNvZGUpOyAvLyBtYXliZS4uLlxufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5Jbk5ld0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjdHggPSBTY3JpcHQuY3JlYXRlQ29udGV4dChjb250ZXh0KTtcbiAgICB2YXIgcmVzID0gdGhpcy5ydW5JbkNvbnRleHQoY3R4KTtcblxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY3R4KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBjb250ZXh0W2tleV0gPSBjdHhba2V5XTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXM7XG59O1xuXG5mb3JFYWNoKE9iamVjdF9rZXlzKFNjcmlwdC5wcm90b3R5cGUpLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGV4cG9ydHNbbmFtZV0gPSBTY3JpcHRbbmFtZV0gPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICB2YXIgcyA9IFNjcmlwdChjb2RlKTtcbiAgICAgICAgcmV0dXJuIHNbbmFtZV0uYXBwbHkocywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9O1xufSk7XG5cbmV4cG9ydHMuY3JlYXRlU2NyaXB0ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TY3JpcHQoY29kZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBTY3JpcHQuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgQ29udGV4dCgpO1xuICAgIGlmKHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXHJcbiAqIFRoaXMgY2xhc3MgZGVmaW5lcyB0aGUgYXV0aC10b2tlbiB0aGF0IGFsbCB0aGUgc2VydmljZXMgaW4gdGhlIFNlYXJjaENsaWVudCBpbnN0YW5jZSBwYXNzZXMgYWxvbmcgaXQncyBzZXJ2ZXJzaWRlIGxvb2t1cHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXV0aFRva2VuIHtcclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBkZWZpbmVkIHdpbGwgY29udGFpbiB0aGUgSnNvbiBXZWIgVG9rZW4gdGhhdCBpcyB0byBiZSB1c2VkIHRvIGF1dGhlbnRpY2F0ZSB0aGUgcmVzdC1jYWxscyB0byB0aGUgc2VhcmNoLXNlcnZpY2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhdXRoZW50aWNhdGlvblRva2VuPzogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIGp3dCBmcm9tIFwiand0LXNpbXBsZVwiO1xyXG5cclxuaW1wb3J0IHsgQmFzZUNhbGwsIEZldGNoLCBRdWVyeSB9IGZyb20gXCIuLi9Db21tb25cIjtcclxuaW1wb3J0IHtcclxuICAgIEF1dGhlbnRpY2F0aW9uU2V0dGluZ3MsXHJcbiAgICBJQXV0aGVudGljYXRpb25TZXR0aW5nc1xyXG59IGZyb20gXCIuL0F1dGhlbnRpY2F0aW9uU2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgQXV0aFRva2VuIH0gZnJvbSBcIi4vQXV0aFRva2VuXCI7XHJcblxyXG4vKipcclxuICogVGhlIEF1dGhlbnRpY2F0aW9uIHNlcnZpY2UgaXMgYSBzdXBwb3J0aW5nIGZlYXR1cmUgZm9yIHRoZSBvdGhlciBzZXJ2aWNlcy5cclxuICogVHlwaWNhbGx5IHVzZWQgdmlhIHRoZSBbW1NlYXJjaENsaWVudC5jb25zdHJ1Y3Rvcl1dIGFuZCBieSBwcm92aWRpbmcgW1tBdXRoZW50aWNhdGlvblNldHRpbmdzXV0gc2V0dGluZ3MgaW5cclxuICogdGhlIFtbU2V0dGluZ3MuYXV0aGVudGljYXRpb25dXSBwcm9wZXJ0eS5cclxuICpcclxuICogVGhlIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSBpcyBiYXNlZCBvbiBKV1QgYW5kIG5lZWRzIGFuIGVuZC1wb2ludCB0byBiZSBjb25maWd1cmVkIGZyb20gd2hlcmUgaXQgd2lsbCBnZXQgaXRzXHJcbiAqIGF1dGhlbnRpY2F0aW9uLXRva2VuLiBUaGlzIHNlcnZpY2Ugd2lsbCBiZSBtb25pdG9yaW5nIHRoZSB0b2tlbi12YWx1ZSB0byBzZWUgaWYgaXQgaXMgZWl0aGVyIG1pc3Npbmcgb3JcclxuICogZXhwaXJlZC4gV2hlbiB0aGF0IGhhcHBlbnMgYSBuZXcgdG9rZW4gd2lsbCBiZSBmZXRjaGVkIGZyb20gdGhlIGVuZC1wb2ludC4gVGhlIFtbQXV0aGVudGljYXRpb25TZXR0aW5ncy5leHBpcnlPdmVybGFwXV1cclxuICogb2JqZWN0IGNvbnRyb2xzIGhvdyBsb25nIGJlZm9yZSBleHBpcmF0aW9uIHRoZSBuZXcgdG9rZW4gaXMgdG8gYmUgZmV0Y2hlZC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvbiBleHRlbmRzIEJhc2VDYWxsPGFueT4ge1xyXG4gICAgcHVibGljIHNldHRpbmdzOiBJQXV0aGVudGljYXRpb25TZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gQXV0aGVudGljYXRpb24gb2JqZWN0IHRoYXQga25vd3Mgd2hlcmUgdG8gZ2V0IHRoZSBhdXRoLXRva2VuIGFuZCB3aGVuIHRvIHJlZnJlc2ggaXQuXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgc2V0dGluZ3MgZm9yIHRoZSBhdXRoZW50aWNhdGlvbiBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gYXV0aCAtIEFuIG9iamVjdCB0aGF0IGNvbnRyb2xzIHRoZSBhdXRoZW50aWNhdGlvbiBmb3IgdGhlIGxvb2t1cHMuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHNldHRpbmdzOiBJQXV0aGVudGljYXRpb25TZXR0aW5ncyB8IHN0cmluZyxcclxuICAgICAgICBhdXRoPzogQXV0aFRva2VuLFxyXG4gICAgICAgIGZldGNoTWV0aG9kPzogRmV0Y2hcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7IC8vIGR1bW15XHJcblxyXG4gICAgICAgIC8vIHByZXBhcmUgZm9yIHN1cGVyLmluaXRcclxuICAgICAgICBzZXR0aW5ncyA9IG5ldyBBdXRoZW50aWNhdGlvblNldHRpbmdzKHNldHRpbmdzKTtcclxuICAgICAgICBhdXRoID0gYXV0aCB8fCBuZXcgQXV0aFRva2VuKCk7XHJcbiAgICAgICAgc3VwZXIuaW5pdChzZXR0aW5ncywgYXV0aCwgZmV0Y2hNZXRob2QpO1xyXG5cclxuICAgICAgICAvLyBTZXQgb3duIHRoaXMgcHJvcHNcclxuICAgICAgICBpZiAoc2V0dGluZ3MudG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRoLmF1dGhlbnRpY2F0aW9uVG9rZW4gPSBzZXR0aW5ncy50b2tlbjtcclxuICAgICAgICAgICAgc2V0dGluZ3MudG9rZW4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBSZWZyZXNoKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIC8vIFdlIGF1dGhlbnRpY2F0ZSBpbW1lZGlhdGVseSBpbiBvcmRlciB0byBoYXZlIHRoZSB0b2tlbiBpbiBwbGFjZSB3aGVuIHRoZSBmaXJzdCBjYWxscyBjb21lIGluLlxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBhdXRoZW50aWNhdGlvbi10b2tlbiBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBGb3IgdGhlIEF1dGhlbnRpY2F0aW9uIHNlcnZpY2UgdGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZC5cclxuICAgICAqIEBwYXJhbSBzdXBwcmVzc0NhbGxiYWNrcyAtIFNldCB0byB0cnVlIGlmIHlvdSBoYXZlIGRlZmluZWQgY2FsbGJhY2tzLCBidXQgc29tZWhvdyBkb24ndCB3YW50IHRoZW0gdG8gYmUgY2FsbGVkLlxyXG4gICAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2hlbiByZXNvbHZlZCByZXR1cm5zIGEgand0IHRva2VuLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmV0Y2goXHJcbiAgICAgICAgcXVlcnk6IFF1ZXJ5ID0gbmV3IFF1ZXJ5KCksXHJcbiAgICAgICAgc3VwcHJlc3NDYWxsYmFja3M6IGJvb2xlYW4gPSBmYWxzZVxyXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBjb25zdCByZXFJbml0ID0gdGhpcy5yZXF1ZXN0T2JqZWN0KGZhbHNlKTtcclxuICAgICAgICBpZiAodGhpcy5jYlJlcXVlc3Qoc3VwcHJlc3NDYWxsYmFja3MsIHRoaXMuc2V0dGluZ3MudXJsLCByZXFJbml0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaE1ldGhvZCh0aGlzLnNldHRpbmdzLnVybCwgcmVxSW5pdClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTogUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7cmVzcG9uc2Uuc3RhdHVzfSAke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZm9yIHJlcXVlc3QgdXJsICcke3RoaXMuc2V0dGluZ3MudXJsfSdgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGF1dGggdG9rZW4gYnkgdXNpbmcgdGhlIHNldHRpbmdzIGZvciB3aGVyZSBpdCBpcyBpbiB0aGUgc3RydWN0dXJlLlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgb2YgdGhpcy5zZXR0aW5ncy50b2tlblBhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGFbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRva2VuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoLmF1dGhlbnRpY2F0aW9uVG9rZW4gPSBkYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdXAgYSB0aW1lciBmb3IgcmVmcmVzaGluZyB0aGUgdG9rZW4gYmVmb3JlL2lmIGl0IGV4cGlyZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR1cFJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYlN1Y2Nlc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cHByZXNzQ2FsbGJhY2tzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGguYXV0aGVudGljYXRpb25Ub2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcUluaXRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dGguYXV0aGVudGljYXRpb25Ub2tlbjtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwcHJlc3NDYWxsYmFja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxSW5pdFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGwgdGhlIHNlcnZpY2UsIGJ1dCB0YWtlIGludG8gYWNjb3VudCBkZWZlcnJlZFVwZGF0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHF1ZXJ5IFRoZSBxdWVyeSBvYmplY3QgdG8gY3JlYXRlIHRoZSBmZXRjaCBmb3IuXHJcbiAgICAgKiBAcGFyYW0gZGVsYXkgQSBkZWxheSBmb3Igd2hlbiB0byBleGVjdXRlIHRoZSB1cGRhdGUsIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gdW5kZWZpbmVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlKHF1ZXJ5OiBRdWVyeSwgZGVsYXk/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kZWZlclVwZGF0ZSkge1xyXG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBxdWVyeSwgc28gdGhhdCB3aGVuIHRoZSBkZWZlclVwZGF0ZSBpcyBhZ2FpbiBmYWxzZSB3ZSBjYW4gdGhlbiBleGVjdXRlIGl0LlxyXG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkUXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBJbiBjYXNlIHRoaXMgYWN0aW9uIGlzIHRyaWdnZXJlZCB3aGVuIGEgZGVsYXllZCBleGVjdXRpb24gaXMgYWxyZWFkeSBwZW5kaW5nLCBjbGVhciB0aGF0IHBlbmRpbmcgdGltZW91dC5cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIHRoZSBkZWxheVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxheSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmZXRjaFByb21pc2UgPSB0aGlzLmZldGNoKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmV0Y2hQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoUHJvbWlzZS5jYXRjaChlcnJvciA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGRlbGF5KSBhcyBhbnk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmV0Y2hQcm9taXNlID0gdGhpcy5mZXRjaChxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmV0Y2hQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hQcm9taXNlLmNhdGNoKGVycm9yID0+IFByb21pc2UucmVzb2x2ZShudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXR1cFJlZnJlc2goKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aCAmJiB0aGlzLmF1dGguYXV0aGVudGljYXRpb25Ub2tlbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRva2VuID0gand0LmRlY29kZShcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGguYXV0aGVudGljYXRpb25Ub2tlbixcclxuICAgICAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXhwaXJhdGlvbiA9IHRva2VuLmV4cFxyXG4gICAgICAgICAgICAgICAgICAgID8gbmV3IERhdGUodG9rZW4uZXhwICogMTAwMClcclxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChleHBpcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbmluZ1NlY29uZHMgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZXhwaXJhdGlvbi52YWx1ZU9mKCkgLSBuZXcgRGF0ZSgpLnZhbHVlT2YoKSkgLyAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ1NlY29uZHMgPSBNYXRoLm1heChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nU2Vjb25kcyAtIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMuZXhwaXJ5T3ZlcmxhcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBgU2V0dGluZyB1cCBKV1QtdG9rZW4gdG8gcmVmcmVzaCBpbiAke3JlbWFpbmluZ1NlY29uZHN9IHNlY29uZHMsIGF0ICR7ZXhwaXJhdGlvbn0uYCxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgXCJUb2tlbjpcIixcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdG9rZW5cclxuICAgICAgICAgICAgICAgICAgICAvLyApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCByZW1haW5pbmdTZWNvbmRzICogMTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcIlRoZSByZWNlaXZlZCBKV1QgdG9rZW4gZG9lcyBub3QgZXhwaXJlLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcIlRva2VuOlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0b2tlblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIHBhcnNlIHRoZSBwcm92aWRlZCB0b2tlbiAnJHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGguYXV0aGVudGljYXRpb25Ub2tlblxyXG4gICAgICAgICAgICAgICAgfSc6ICR7ZX1gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJhc2VTZXR0aW5ncywgSUJhc2VTZXR0aW5ncyB9IGZyb20gXCIuLi9Db21tb24vQmFzZVNldHRpbmdzXCI7XHJcblxyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblRyaWdnZXJzIH0gZnJvbSBcIi4vQXV0aGVudGljYXRpb25UcmlnZ2Vyc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQXV0aGVudGljYXRpb25TZXR0aW5ncyBleHRlbmRzIElCYXNlU2V0dGluZ3M8YW55PiB7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgdGhlIHRva2VuLCBpZiB5b3UgbmVlZCB0byBzZXQgYW4gaW5pdGlhbCB2YWx1ZSAoaS5lLiBpZiB5b3UgYWxyZWFkeSBoYXZlIHRoZSB0b2tlbilcclxuICAgICAqL1xyXG4gICAgdG9rZW4/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIHRoZSBwYXRoIHRvIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgYXV0aGVudGljYXRpb24tY2FsbC5cclxuICAgICAqIFNob3VsZCBiZSBhIG5hbWUtYmFzZWQgbG9va3VwIGFycmF5LCBwb2ludGluZyB0byB3aGVyZSB0aGUgcmVzdWx0aW5nIGF1dGgtdG9rZW4gaXMgdG8gYmUgZm91bmQuXHJcbiAgICAgKi9cclxuICAgIHRva2VuUGF0aD86IHN0cmluZ1tdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyaWdnZXItc2V0dGluZ3MgZm9yIHdoZW4gYSBuZXcgYXV0aC10b2tlbiBpcyB0byBiZSByZXF1ZXN0ZWQuXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXJzPzogQXV0aGVudGljYXRpb25UcmlnZ2VycztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHNldHRpbmdzIHRoYXQgY2FuIGFmZmVjdCB0aGUgdXNlIG9mIGp3dCBhdXRoZW50aWNhdGlvbiBpbiB0aGUgc2VhcmNoLWNsaWVudC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvblNldHRpbmdzIGV4dGVuZHMgQmFzZVNldHRpbmdzPGFueT4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIHRoZSB0b2tlbiwgaWYgeW91IG5lZWQgdG8gc2V0IGFuIGluaXRpYWwgdmFsdWUgKGkuZS4gaWYgeW91IGFscmVhZHkgaGF2ZSB0aGUgdG9rZW4pXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b2tlbj86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgdGhlIHBhdGggdG8gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBhdXRoZW50aWNhdGlvbi1jYWxsLlxyXG4gICAgICogU2hvdWxkIGJlIGEgbmFtZS1iYXNlZCBsb29rdXAgYXJyYXksIHBvaW50aW5nIHRvIHdoZXJlIHRoZSByZXN1bHRpbmcgYXV0aC10b2tlbiBpcyB0byBiZSBmb3VuZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHRva2VuUGF0aD86IHN0cmluZ1tdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyaWdnZXItc2V0dGluZ3MgZm9yIHdoZW4gYSBuZXcgYXV0aC10b2tlbiBpcyB0byBiZSByZXF1ZXN0ZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0cmlnZ2VyczogQXV0aGVudGljYXRpb25UcmlnZ2VycztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gQXV0aGVudGljYXRpb25TZXR0aW5ncyBvYmplY3QgZm9yIHlvdSwgYmFzZWQgb24gQXV0aGVudGljYXRpb25TZXR0aW5ncyBkZWZhdWx0cyBhbmQgdGhlIG92ZXJyaWRlcyBwcm92aWRlZCBhcyBhIHBhcmFtLlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIC0gVGhlIHNldHRpbmdzIGRlZmluZWQgaGVyZSB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IEF1dGhlbnRpY2F0aW9uU2V0dGluZ3MuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzOiBJQXV0aGVudGljYXRpb25TZXR0aW5ncyB8IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7IC8vIGR1bW15ICh1c2luZyBpbml0IGluc3RlYWQpXHJcblxyXG4gICAgICAgIC8vIFNldHVwIHNldHRpbmdzIG9iamVjdCBiZWZvcmUgY2FsbGluZyBzdXBlci5pbml0IHdpdGggaXQuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBzZXR0aW5ncyA9IHsgYmFzZVVybDogc2V0dGluZ3MgfSBhcyBJQXV0aGVudGljYXRpb25TZXR0aW5ncztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldHRpbmdzLmVuYWJsZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLmVuYWJsZWQgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgc2V0dGluZ3MuYmFzZVBhdGggPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuYmFzZVBhdGggIT09IFwidW5kZWZpbmVkXCIgPyBzZXR0aW5ncy5iYXNlUGF0aCA6IFwiXCI7XHJcblxyXG4gICAgICAgIHNldHRpbmdzLnNlcnZpY2VQYXRoID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLnNlcnZpY2VQYXRoICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHNldHRpbmdzLnNlcnZpY2VQYXRoXHJcbiAgICAgICAgICAgICAgICA6IFwiYXV0aC9sb2dpblwiO1xyXG5cclxuICAgICAgICBzdXBlci5pbml0KHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgLy8gU2V0dXAgb3VyIG93biBzdHVmZiAocHJvcHMgbm90IGluIHRoZSBiYXNlIGNsYXNzKS5cclxuICAgICAgICB0aGlzLnRva2VuID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLnRva2VuICE9PSBcInVuZGVmaW5lZFwiID8gc2V0dGluZ3MudG9rZW4gOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHRoaXMudG9rZW5QYXRoID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLnRva2VuUGF0aCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyBzZXR0aW5ncy50b2tlblBhdGhcclxuICAgICAgICAgICAgICAgIDogW1wiand0VG9rZW5cIl07XHJcblxyXG4gICAgICAgIHRoaXMudHJpZ2dlcnMgPSBuZXcgQXV0aGVudGljYXRpb25UcmlnZ2VycyhzZXR0aW5ncy50cmlnZ2Vycyk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZXNlIGFyZSB0aGUgdHJpZ2dlcnMgdGhhdCBkZWZpbmUgd2hlbiBhbmQgd2hlbiBub3QgdG8gdHJpZ2dlciBhbiBhdXRoZW50aWNhdGlvbiBsb29rdXAuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25UcmlnZ2VycyB7XHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgaG93IGxvbmcgaW4gc2Vjb25kcyBiZWZvcmUgZXhwaXJ5IHdlIHNob3VsZCByZXF1ZXN0IGEgbmV3IGF1dGggdG9rZW4uIERlZmF1bHRzIHRvIDYwIHNlY29uZHMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleHBpcnlPdmVybGFwPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBBdXRoZW50aWNhdGlvblRyaWdnZXIgb2JqZWN0IGZvciB5b3UuXHJcbiAgICAgKiBAcGFyYW0gdHJpZ2dlcnMgLSBUaGUgdHJpZ2dlciBkZWZpbmVkIGhlcmUgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBBdXRoZW50aWNhdGlvblRyaWdnZXIuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRyaWdnZXJzOiBBdXRoZW50aWNhdGlvblRyaWdnZXJzID0ge30pIHtcclxuICAgICAgICB0aGlzLmV4cGlyeU92ZXJsYXAgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuZXhwaXJ5T3ZlcmxhcCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5leHBpcnlPdmVybGFwXHJcbiAgICAgICAgICAgICAgICA6IDYwO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF1dGhUb2tlbiB9IGZyb20gXCIuLi9BdXRoZW50aWNhdGlvblwiO1xyXG5pbXBvcnQgeyBCYXNlQ2FsbCwgRmV0Y2gsIFF1ZXJ5IH0gZnJvbSBcIi4uL0NvbW1vblwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVRdWVyeUNvbnZlcnRlciB9IGZyb20gXCIuL0F1dG9jb21wbGV0ZVF1ZXJ5Q29udmVydGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBBdXRvY29tcGxldGVTZXR0aW5ncyxcclxuICAgIElBdXRvY29tcGxldGVTZXR0aW5nc1xyXG59IGZyb20gXCIuL0F1dG9jb21wbGV0ZVNldHRpbmdzXCI7XHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyBhbGxvd3MgeW91IHRvIGNyZWF0ZSBhIHNlcnZpY2UgdGhhdCBleGVjdXRlcyBhdXRvY29tcGxldGUgbG9va3VwZHMgZm9yIHRoZSBJbnRlbGxpU2VhcmNoIFNlYXJjaFNlcnZpY2UuXHJcbiAqXHJcbiAqIE5vdGU6IFR5cGljYWxseSB5b3Ugd2lsbCBub3QgaW5zdGFudGlhdGUgdGhpcyBjbGFzcy4gSW5zdGVhZCB5b3Ugd2lsbCB1c2UgaXQgaW5kaXJlY3RseSB2aWEgdGhlIFNlYXJjaENsaWVudCBjbGFzcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGUgZXh0ZW5kcyBCYXNlQ2FsbDxzdHJpbmdbXT4ge1xyXG4gICAgcHVibGljIHNldHRpbmdzOiBJQXV0b2NvbXBsZXRlU2V0dGluZ3M7XHJcblxyXG4gICAgcHJpdmF0ZSBxdWVyeUNvbnZlcnRlcjogQXV0b2NvbXBsZXRlUXVlcnlDb252ZXJ0ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIEF1dG9jb21wbGV0ZSBpbnN0YW5jZSB0aGF0IGtub3dzIGhvdyB0byBnZXQgcXVlcnktc3VnZ2VzdGlvbnMuXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgc2V0dGluZ3MgZm9yIGhvdyB0aGUgQXV0b2NvbXBsZXRlIGlzIHRvIG9wZXJhdGUuXHJcbiAgICAgKiBAcGFyYW0gYXV0aCAtIFRoZSBvYmplY3QgdGhhdCBoYW5kbGVzIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBzZXR0aW5nczogSUF1dG9jb21wbGV0ZVNldHRpbmdzIHwgc3RyaW5nLFxyXG4gICAgICAgIGF1dGg/OiBBdXRoVG9rZW4sXHJcbiAgICAgICAgZmV0Y2hNZXRob2Q/OiBGZXRjaFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoKTsgLy8gZHVtbXlcclxuICAgICAgICAvLyBwcmVwYXJlIGZvciBzdXBlci5pbml0XHJcbiAgICAgICAgc2V0dGluZ3MgPSBuZXcgQXV0b2NvbXBsZXRlU2V0dGluZ3Moc2V0dGluZ3MpO1xyXG4gICAgICAgIGF1dGggPSBhdXRoIHx8IG5ldyBBdXRoVG9rZW4oKTtcclxuICAgICAgICBzdXBlci5pbml0KHNldHRpbmdzLCBhdXRoLCBmZXRjaE1ldGhvZCk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbnZlcnRlciA9IG5ldyBBdXRvY29tcGxldGVRdWVyeUNvbnZlcnRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBjYWxsZWQgaXQgd2lsbCBleGVjdXRlIGEgcmVzdC1jYWxsIHRvIHRoZSBiYXNlLXVybCBhbmQgZmV0Y2ggYXV0b2NvbXBsZXRlIHN1Z2dlc3Rpb25zIGJhc2VkIG9uIHRoZSBxdWVyeSBwYXNzZWQuXHJcbiAgICAgKiBOb3RlIHRoYXQgaWYgYSByZXF1ZXN0IGNhbGxiYWNrIGhhcyBiZWVuIHNldHVwIHRoZW4gaWYgaXQgcmV0dXJucyBmYWxzZSB0aGUgcmVxdWVzdCBpcyBza2lwcGVkLlxyXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gSXMgdXNlZCB0byBmaW5kIG91dCB3aGljaCBhdXRvY29tcGxldGUgc3VnZ2VzdGlvbnMgYW5kIGZyb20gd2hhdCBzb3VyY2VzIHRoZXkgc2hvdWxkIGJlIHJldHJpZXZlZC5cclxuICAgICAqIEBwYXJhbSBzdXBwcmVzc0NhbGxiYWNrcyAtIFNldCB0byB0cnVlIGlmIHlvdSBoYXZlIGRlZmluZWQgY2FsbGJhY2tzLCBidXQgc29tZWhvdyBkb24ndCB3YW50IHRoZW0gdG8gYmUgY2FsbGVkLlxyXG4gICAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgd2hlbiByZXNvbHZlZCByZXR1cm5zIGEgc3RyaW5nIGFycmF5IG9mIHN1Z2dlc3Rpb25zIChvciB1bmRlZmluZWQgaWYgYSBjYWxsYmFjayBzdG9wcyB0aGUgcmVxdWVzdCkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmZXRjaChcclxuICAgICAgICBxdWVyeTogUXVlcnkgPSBuZXcgUXVlcnkoKSxcclxuICAgICAgICBzdXBwcmVzc0NhbGxiYWNrczogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICApOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMucXVlcnlDb252ZXJ0ZXIuZ2V0VXJsKFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnVybCxcclxuICAgICAgICAgICAgbmV3IFF1ZXJ5KHF1ZXJ5KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbGV0IHJlcUluaXQgPSB0aGlzLnJlcXVlc3RPYmplY3QoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2JSZXF1ZXN0KHN1cHByZXNzQ2FsbGJhY2tzLCB1cmwsIHJlcUluaXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoTWV0aG9kKHVybCwgcmVxSW5pdClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTogUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7cmVzcG9uc2Uuc3RhdHVzfSAke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZm9yIHJlcXVlc3QgdXJsICcke3VybH0nYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChzdWdnZXN0aW9uczogc3RyaW5nW10pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNiU3VjY2VzcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwcHJlc3NDYWxsYmFja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcUluaXRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWdnZXN0aW9ucztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JFcnJvcihzdXBwcmVzc0NhbGxiYWNrcywgZXJyb3IsIHVybCwgcmVxSW5pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBXaGVuIGEgZmV0Y2ggaXMgc3RvcHBlZCBkdWUgdG8gY2JSZXF1ZXN0IHJldHVybmluZyBmYWxzZSwgc2hvdWxkIHdlOlxyXG4gICAgICAgICAgICAvLyAxKSBSZWplY3QgdGhlIHByb21pc2UgKHdpbGwgdGhlbiBiZSByZXR1cm5lZCBhcyBhbiBlcnJvcikuXHJcbiAgICAgICAgICAgIC8vIG9yXHJcbiAgICAgICAgICAgIC8vIDIpIFJlc29sdmUgdGhlIHByb21pc2UgKHdpbGwgdGhlbiBiZSByZXR1cm5lZCBhcyBhIHN1Y2Nlc3MpLlxyXG4gICAgICAgICAgICAvLyBvclxyXG4gICAgICAgICAgICAvLyAzKSBzaG91bGQgd2UgZG8gc29tZXRoaW5nIGVsc2UgKG9sZCBjb2RlIHJldHVybmVkIHVuZGVmaW5lZC4uLilcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1heFN1Z2dlc3Rpb25zQ2hhbmdlZChvbGRWYWx1ZTogbnVtYmVyLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlKCkgJiZcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5tYXhTdWdnZXN0aW9uc0NoYW5nZWRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcXVlcnlUZXh0Q2hhbmdlZChvbGRWYWx1ZTogc3RyaW5nLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGUoKSAmJiB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LnF1ZXJ5VGV4dC5sZW5ndGggPlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5xdWVyeUNoYW5nZU1pbkxlbmd0aFxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5xdWVyeUNoYW5nZUluc3RhbnRSZWdleC50ZXN0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5xdWVyeVRleHRcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5xdWVyeUNoYW5nZURlbGF5ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMucXVlcnlDaGFuZ2VEZWxheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUXVlcnlDb252ZXJ0ZXIsIFF1ZXJ5IH0gZnJvbSBcIi4uL0NvbW1vblwiO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHRvIGhhbmRsZSBjcmVhdGluZyBhdXRvY29tcGxldGUgbG9va3Vwcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVRdWVyeUNvbnZlcnRlciBleHRlbmRzIEJhc2VRdWVyeUNvbnZlcnRlciB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBxdWVyeSBwYXJhbXMgdG8gYW4gYXJyYXkgb2Yga2V5PXZhbHVlIHNlZ21lbnRzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0VXJsUGFyYW1zKHF1ZXJ5OiBRdWVyeSk6IHN0cmluZ1tdIHtcclxuICAgICAgICBsZXQgcGFyYW1zOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBBZGQgY2xpZW50SWQgYWxzbyBmb3IgYXV0b2NvbXBsZXRlP1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwibFwiLCAxKTsgLy8gRm9yY2VzIHRoaXMgdG8gYWx3YXlzIGRvIHNlcnZlci1zaWRlIHdoZW4gY2FsbGVkLiBUaGUgY2xpZW50IHdpbGwgc2tpcCBjYWxsaW5nIHdoZW4gbm90IG5lZWRlZCBpbnN0ZWFkLlxyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwicVwiLCBxdWVyeS5xdWVyeVRleHQpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwic1wiLCBxdWVyeS5tYXhTdWdnZXN0aW9ucyk7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVNldHRpbmdzLCBJQmFzZVNldHRpbmdzIH0gZnJvbSBcIi4uL0NvbW1vblwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGVUcmlnZ2VycyB9IGZyb20gXCIuL0F1dG9jb21wbGV0ZVRyaWdnZXJzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBdXRvY29tcGxldGVTZXR0aW5ncyBleHRlbmRzIElCYXNlU2V0dGluZ3M8c3RyaW5nW10+IHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyaWdnZXItc2V0dGluZ3MgZm9yIHdoZW4gYXV0b21hdGljIG1hdGNoIHJlc3VsdC11cGRhdGVzIGFyZSB0byBiZSB0cmlnZ2VyZWQuXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXJzPzogQXV0b2NvbXBsZXRlVHJpZ2dlcnM7XHJcbn1cclxuLyoqXHJcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHNldHRpbmdzIHRoYXQgY2FuIGFmZmVjdCB0aGUgcmV0dXJuZWQgc3VnZ2VzdGlvbnMgZm9yIGF1dG9jb21wbGV0ZSgpIGxvb2t1cHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlU2V0dGluZ3MgZXh0ZW5kcyBCYXNlU2V0dGluZ3M8c3RyaW5nW10+IHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyaWdnZXItc2V0dGluZ3MgZm9yIHdoZW4gYXV0b21hdGljIHN1Z2dlc3Rpb24gdXBkYXRlcyBhcmUgdG8gYmUgdHJpZ2dlcmVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdHJpZ2dlcnM6IEF1dG9jb21wbGV0ZVRyaWdnZXJzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBBdXRvY29tcGxldGVTZXR0aW5ncyBvYmplY3QgZm9yIHlvdSwgYmFzZWQgb24gQXV0b2NvbXBsZXRlU2V0dGluZ3MgZGVmYXVsdHMgYW5kIHRoZSBvdmVycmlkZXMgcHJvdmlkZWQgYXMgYSBwYXJhbS5cclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyAtIFRoZSBzZXR0aW5ncyBkZWZpbmVkIGhlcmUgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBBdXRvY29tcGxldGVTZXR0aW5ncy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M6IElBdXRvY29tcGxldGVTZXR0aW5ncyB8IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7IC8vIGR1bW15ICh1c2luZyBpbml0IGluc3RlYWQpXHJcbiAgICAgICAgLy8gU2V0dXAgc2V0dGluZ3Mgb2JqZWN0IGJlZm9yZSBjYWxsaW5nIHN1cGVyLmluaXQgd2l0aCBpdC5cclxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzID0geyBiYXNlVXJsOiBzZXR0aW5ncyB9IGFzIElBdXRvY29tcGxldGVTZXR0aW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0dGluZ3Muc2VydmljZVBhdGggPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3Muc2VydmljZVBhdGggIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gc2V0dGluZ3Muc2VydmljZVBhdGhcclxuICAgICAgICAgICAgICAgIDogXCJhdXRvY29tcGxldGVcIjtcclxuICAgICAgICBzdXBlci5pbml0KHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgLy8gU2V0dXAgb3VyIG93biBzdHVmZiAocHJvcHMgbm90IGluIHRoZSBiYXNlIGNsYXNzKS5cclxuICAgICAgICB0aGlzLnRyaWdnZXJzID0gbmV3IEF1dG9jb21wbGV0ZVRyaWdnZXJzKHNldHRpbmdzLnRyaWdnZXJzKTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlc2UgYXJlIHRoZSB0cmlnZ2VycyB0aGF0IGRlZmluZSB3aGVuIGFuZCB3aGVuIG5vdCB0byB0cmlnZ2VyIGFuIGF1dG9jb21wbGV0ZSBsb29rdXAuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlVHJpZ2dlcnMge1xyXG4gICAgLy99IGltcGxlbWVudHMgSUF1dG9jb21wbGV0ZVRyaWdnZXJzIHtcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciBvciBub3QgYW4gYXV0b2NvbXBsZXRlIGxvb2t1cCBzaG91bGQgYmUgZG9uZSB3aGVuIHRoZSBtYXhTdWdnZXN0aW9ucyBzZXR0aW5nIGlzIGNoYW5nZWQuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogUmVxdWlyZXMgcXVlcnlDaGFuZ2VkIHRvIGJlIHRydWUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXhTdWdnZXN0aW9uc0NoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHVybnMgb24gb3Igb2ZmIGFsbCBxdWVyeS1yZWxhdGVkIHRyaWdnZXJzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2U/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsYXkgdHJpZ2dlcnMgdW50aWwgY2hhbmdlcyBoYXMgbm90IGJlZW4gbWFkZSB0byB0aGUgcXVlcnkgZm9yIGEgY2VydGFpbiB0aW1lIChtaWxsaXNlY29uZHMpLlxyXG4gICAgICogVGhpcyBpcyB0byBhdm9pZCBleGVjdXRpbmcgc2VhcmNoZXMgY29uc3RhbnRseSB3aGlsZSB0aGUgdXNlciBpcyB0eXBpbmcuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4IGhhcyBwcmVjZWRlbmNlLiBUaGlzIGRlbGF5IGlzIG9ubHkgY29uc2lkZXJlZCB3aGVuIHRoYXQgcmVnZXggZG9lc24ndCBtYXRjaC5cclxuICAgICAqIFNldCB2YWx1ZSB0byBsZXNzIHRoYW4gemVybyB0byBtYWtlIHN1cmUgd2Ugb25seSB0cmlnZ2VyIHdoZW4gdGhlIHF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4IG1hdGNoZXMuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogUmVxdWlyZXMgcXVlcnlDaGFuZ2VkIHRvIGJlIHRydWUuXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeSB0byBiZSBsb25nZXIgdGhhbiBxdWVyeU1pbkxlbmd0aC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHF1ZXJ5Q2hhbmdlRGVsYXk/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyBhY3Rpb24gaW1tZWRpYXRlbHkgaW5zdGVhZCBvZiBkZWxheWVkIHdoZW4gdGhlIHF1ZXJ5IG1hdGNoZXMgdGhlIHJlZ2V4LlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IFJlcXVpcmVzIHF1ZXJ5Q2hhbmdlIHRvIGJlIHRydWUuXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeSB0byBiZSBsb25nZXIgdGhhbiBxdWVyeUNoYW5nZU1pbkxlbmd0aC5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0OiBUcmlnZ2VyIG9uIGZpcnN0IHdoaXRlc3BhY2UgYWZ0ZXIgbm9uLXdoaXRlc3BhY2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4PzogUmVnRXhwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWluIGxlbmd0aCBiZWZvcmUgdHJpZ2dlcmluZy5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeUNoYW5nZSB0byBiZSB0cnVlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VNaW5MZW5ndGg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIEF1dG9jb21wbGV0ZVRyaWdnZXIgb2JqZWN0IGZvciB5b3UsIGJhc2VkIG9uIEF1dG9jb21wbGV0ZVRyaWdnZXIgZGVmYXVsdHMgYW5kIHRoZSBvdmVycmlkZXMgcHJvdmlkZWQgYXMgYSBwYXJhbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdHJpZ2dlcnMgLSBUaGUgdHJpZ2dlciBkZWZpbmVkIGhlcmUgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBBdXRvY29tcGxldGVUcmlnZ2VyLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0cmlnZ2VyczogQXV0b2NvbXBsZXRlVHJpZ2dlcnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMubWF4U3VnZ2VzdGlvbnNDaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLm1heFN1Z2dlc3Rpb25zQ2hhbmdlZCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5tYXhTdWdnZXN0aW9uc0NoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5xdWVyeUNoYW5nZSA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5xdWVyeUNoYW5nZSAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5xdWVyeUNoYW5nZVxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLnF1ZXJ5Q2hhbmdlRGVsYXkgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMucXVlcnlDaGFuZ2VEZWxheSAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5xdWVyeUNoYW5nZURlbGF5XHJcbiAgICAgICAgICAgICAgICA6IDIwMDtcclxuXHJcbiAgICAgICAgdGhpcy5xdWVyeUNoYW5nZUluc3RhbnRSZWdleCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5xdWVyeUNoYW5nZUluc3RhbnRSZWdleCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5xdWVyeUNoYW5nZUluc3RhbnRSZWdleFxyXG4gICAgICAgICAgICAgICAgOiAvXFxTXFxzJC87XHJcblxyXG4gICAgICAgIHRoaXMucXVlcnlDaGFuZ2VNaW5MZW5ndGggPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMucXVlcnlDaGFuZ2VNaW5MZW5ndGggIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMucXVlcnlDaGFuZ2VNaW5MZW5ndGhcclxuICAgICAgICAgICAgICAgIDogMztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBdXRoVG9rZW4gfSBmcm9tIFwiLi4vQXV0aGVudGljYXRpb25cIjtcclxuaW1wb3J0IHtcclxuICAgIEJhc2VDYWxsLFxyXG4gICAgRGF0ZVNwZWNpZmljYXRpb24sXHJcbiAgICBGZXRjaCxcclxuICAgIEZpbHRlcixcclxuICAgIFF1ZXJ5LFxyXG4gICAgU2VhcmNoVHlwZSxcclxuICAgIE1hdGNoTW9kZSxcclxuICAgIFNvcnRQYXJ0Q29uZmlndXJhdGlvbixcclxuICAgIFNvcnRNZXRob2QsXHJcbiAgICBMaW1pdFBhZ2VDb25maWd1cmF0aW9uLFxyXG4gICAgQ2F0ZWdvcnlQcmVzZW50YXRpb25cclxufSBmcm9tIFwiLi4vQ29tbW9uXCI7XHJcbmltcG9ydCB7IElDYXRlZ29yaWVzLCBJQ2F0ZWdvcnksIElHcm91cCB9IGZyb20gXCIuLi9EYXRhXCI7XHJcbmltcG9ydCB7IENhdGVnb3JpemVRdWVyeUNvbnZlcnRlciB9IGZyb20gXCIuL0NhdGVnb3JpemVRdWVyeUNvbnZlcnRlclwiO1xyXG5pbXBvcnQgeyBDYXRlZ29yaXplU2V0dGluZ3MsIElDYXRlZ29yaXplU2V0dGluZ3MgfSBmcm9tIFwiLi9DYXRlZ29yaXplU2V0dGluZ3NcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgQ2F0ZWdvcml6ZSBzZXJ2aWNlIHF1ZXJpZXMgdGhlIHNlYXJjaC1lbmdpbmUgZm9yIHdoaWNoIGNhdGVnb3JpZXMgdGhhdCBhbnlcclxuICogc2VhcmNoLW1hdGNoZXMgZm9yIHRoZSBzYW1lIHF1ZXJ5IHdpbGwgY29udGFpbi5cclxuICpcclxuICogSXQgaXMgbm9ybWFsbHkgdXNlZCBpbmRpcmVjdGx5IHZpYSB0aGUgU2VhcmNoQ2xpZW50IGNsYXNzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENhdGVnb3JpemUgZXh0ZW5kcyBCYXNlQ2FsbDxJQ2F0ZWdvcmllcz4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHJlcHJlc2VudHMgdGhlIGxhc3QgY2F0ZWdvcmllcyB0aGF0IHdhcyByZWNlaXZlZCBmcm9tIHRoZSBiYWNrZW5kLlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IE5vcm1hbGx5IHRoZXNlIGFyZSBvbmx5IHVzZWQgaW50ZXJuYWxseS4gWW91ICpjYW4qIGhvd2V2ZXJcclxuICAgICAqIHBvcHVsYXRlIHRoZXNlIHlvdXJzZWxmLCBidXQgaWYgeW91IGFyZSBhbHNvIGV4ZWN1dGluZyBmZXRjaGVzICh3aGljaFxyXG4gICAgICogdGhlIFNlYXJjaENsaWVudCBpcyBvZnRlbiBkb2luZyBpbiB0aGUgYXV0b21hdGljIG1vZGUpIHRoZW4gdGhlIGNvbnRlbnRzXHJcbiAgICAgKiBtYXkgYmUgb3ZlcndyaXR0ZW4gYXQgYW55IHRpbWUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYXRlZ29yaWVzOiBJQ2F0ZWdvcmllcztcclxuXHJcbiAgICBwdWJsaWMgc2V0dGluZ3M6IElDYXRlZ29yaXplU2V0dGluZ3M7XHJcblxyXG4gICAgcHJpdmF0ZSBxdWVyeUNvbnZlcnRlcjogQ2F0ZWdvcml6ZVF1ZXJ5Q29udmVydGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIENhdGVnb3JpemUgaW5zdGFuY2UgdGhhdCBoYW5kbGVzIGZldGNoaW5nIGNhdGVnb3JpZXMgZGVwZW5kZW50IG9uIHNldHRpbmdzIGFuZCBxdWVyeS5cclxuICAgICAqIFN1cHBvcnRzIHJlZ2lzdGVyaW5nIGEgY2FsbGJhY2sgaW4gb3JkZXIgdG8gcmVjZWl2ZSBjYXRlZ29yaWVzIHdoZW4gdGhleSBoYXZlIGJlZW4gcmVjZWl2ZWQuXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgc2V0dGluZ3MgdGhhdCBkZWZpbmUgaG93IHRoZSBDYXRlZ29yaXplIGluc3RhbmNlIGlzIHRvIG9wZXJhdGUuXHJcbiAgICAgKiBAcGFyYW0gYXV0aCAtIEFuIG9iamVjdCB0aGF0IGhhbmRsZXMgdGhlIGF1dGhlbnRpY2F0aW9uLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBzZXR0aW5ncz86IElDYXRlZ29yaXplU2V0dGluZ3MgfCBzdHJpbmcsXHJcbiAgICAgICAgYXV0aD86IEF1dGhUb2tlbixcclxuICAgICAgICBmZXRjaE1ldGhvZD86IEZldGNoXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcigpOyAvLyBkdW1teVxyXG4gICAgICAgIC8vIHByZXBhcmUgZm9yIHN1cGVyLmluaXRcclxuICAgICAgICBzZXR0aW5ncyA9IG5ldyBDYXRlZ29yaXplU2V0dGluZ3Moc2V0dGluZ3MpO1xyXG4gICAgICAgIGF1dGggPSBhdXRoIHx8IG5ldyBBdXRoVG9rZW4oKTtcclxuICAgICAgICBzdXBlci5pbml0KHNldHRpbmdzLCBhdXRoLCBmZXRjaE1ldGhvZCk7XHJcbiAgICAgICAgLy8gU2V0IG93biB0aGlzIHByb3BzXHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbnZlcnRlciA9IG5ldyBDYXRlZ29yaXplUXVlcnlDb252ZXJ0ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoZXMgdGhlIHNlYXJjaC1yZXN1bHQgY2F0ZWdvcmllcyBmcm9tIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnktb2JqZWN0IHRoYXQgY29udHJvbHMgd2hpY2ggcmVzdWx0cyB0aGF0IGFyZSB0byBiZSByZXR1cm5lZC5cclxuICAgICAqIEBwYXJhbSBzdXBwcmVzc0NhbGxiYWNrcyAtIFNldCB0byB0cnVlIGlmIHlvdSBoYXZlIGRlZmluZWQgY2FsbGJhY2tzLCBidXQgc29tZWhvdyBkb24ndCB3YW50IHRoZW0gdG8gYmUgY2FsbGVkLlxyXG4gICAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2hlbiByZXNvbHZlZCByZXR1cm5zIGEgQ2F0ZWdvcmllcyBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmZXRjaChcclxuICAgICAgICBxdWVyeTogUXVlcnkgPSBuZXcgUXVlcnkoKSxcclxuICAgICAgICBzdXBwcmVzc0NhbGxiYWNrczogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICApOiBQcm9taXNlPElDYXRlZ29yaWVzPiB7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMucXVlcnlDb252ZXJ0ZXIuZ2V0VXJsKHRoaXMuc2V0dGluZ3MudXJsLCBxdWVyeSk7XHJcbiAgICAgICAgbGV0IHJlcUluaXQgPSB0aGlzLnJlcXVlc3RPYmplY3QoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2JSZXF1ZXN0KHN1cHByZXNzQ2FsbGJhY2tzLCB1cmwsIHJlcUluaXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoTWV0aG9kKHVybCwgcmVxSW5pdClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTogUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7cmVzcG9uc2Uuc3RhdHVzfSAke1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZm9yIHJlcXVlc3QgdXJsICcke3VybH0nYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChjYXRlZ29yaWVzOiBJQ2F0ZWdvcmllcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcyA9IHRoaXMuZmlsdGVyQ2F0ZWdvcmllcyhjYXRlZ29yaWVzLCBxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYlN1Y2Nlc3Moc3VwcHJlc3NDYWxsYmFja3MsIGNhdGVnb3JpZXMsIHVybCwgcmVxSW5pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXM7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNiRXJyb3Ioc3VwcHJlc3NDYWxsYmFja3MsIGVycm9yLCB1cmwsIHJlcUluaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogV2hlbiBhIGZldGNoIGlzIHN0b3BwZWQgZHVlIHRvIGNiUmVxdWVzdCByZXR1cm5pbmcgZmFsc2UsIHNob3VsZCB3ZTpcclxuICAgICAgICAgICAgLy8gMSkgUmVqZWN0IHRoZSBwcm9taXNlICh3aWxsIHRoZW4gYmUgcmV0dXJuZWQgYXMgYW4gZXJyb3IpLlxyXG4gICAgICAgICAgICAvLyBvclxyXG4gICAgICAgICAgICAvLyAyKSBSZXNvbHZlIHRoZSBwcm9taXNlICh3aWxsIHRoZW4gYmUgcmV0dXJuZWQgYXMgYSBzdWNjZXNzKS5cclxuICAgICAgICAgICAgLy8gb3JcclxuICAgICAgICAgICAgLy8gMykgc2hvdWxkIHdlIGRvIHNvbWV0aGluZyBlbHNlIChvbGQgY29kZSByZXR1cm5lZCB1bmRlZmluZWQuLi4pXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGNsaWVudENhdGVnb3JpZXNVcGRhdGUocXVlcnk6IFF1ZXJ5KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jYlN1Y2Nlc3MoXHJcbiAgICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2F0ZWdvcmllcyh0aGlzLmNhdGVnb3JpZXMsIHF1ZXJ5KSxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICBudWxsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBjbGllbnRDYXRlZ29yeUZpbHRlckNoYW5nZWQoXHJcbiAgICAvLyAgICAgb2xkVmFsdWU6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgUmVnRXhwIH0sXHJcbiAgICAvLyAgICAgcXVlcnk6IFF1ZXJ5XHJcbiAgICAvLyApOiB2b2lkIHtcclxuICAgIC8vICAgICBpZiAoXHJcbiAgICAvLyAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlKCkgJiZcclxuICAgIC8vICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5jbGllbnRDYXRlZ29yeUZpbHRlckNoYW5nZWRcclxuICAgIC8vICAgICApIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5jYlN1Y2Nlc3MoXHJcbiAgICAvLyAgICAgICAgICAgICBmYWxzZSxcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2F0ZWdvcmllcyh0aGlzLmNhdGVnb3JpZXMsIHF1ZXJ5KSxcclxuICAgIC8vICAgICAgICAgICAgIG51bGwsXHJcbiAgICAvLyAgICAgICAgICAgICBudWxsXHJcbiAgICAvLyAgICAgICAgICk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBjbGllbnRJZENoYW5nZWQob2xkVmFsdWU6IHN0cmluZywgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKCkgJiYgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5jbGllbnRJZENoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGF0ZUZyb21DaGFuZ2VkKG9sZFZhbHVlOiBEYXRlU3BlY2lmaWNhdGlvbiwgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKCkgJiYgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5kYXRlRnJvbUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGF0ZVRvQ2hhbmdlZChvbGRWYWx1ZTogRGF0ZVNwZWNpZmljYXRpb24sIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMuZGF0ZVRvQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmaWx0ZXJzQ2hhbmdlZChvbGRWYWx1ZTogRmlsdGVyW10sIHF1ZXJ5OiBRdWVyeSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMuZmlsdGVyQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBxdWVyeVRleHRDaGFuZ2VkKG9sZFZhbHVlOiBzdHJpbmcsIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMucXVlcnlDaGFuZ2UpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcXVlcnkucXVlcnlUZXh0Lmxlbmd0aCA+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlTWluTGVuZ3RoXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMucXVlcnlDaGFuZ2VJbnN0YW50UmVnZXggJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4LnRlc3QoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnF1ZXJ5VGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlRGVsYXkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5xdWVyeUNoYW5nZURlbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZWFyY2hUeXBlQ2hhbmdlZChvbGRWYWx1ZTogU2VhcmNoVHlwZSwgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKCkgJiYgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5zZWFyY2hUeXBlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1aUxhbmd1YWdlQ29kZUNoYW5nZWQob2xkVmFsdWU6IHN0cmluZywgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZSgpICYmXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMudWlMYW5ndWFnZUNvZGVDaGFuZ2VkXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgRmlsdGVyIG9iamVjdCBiYXNlZCBvbiB0aGUgaW5wdXQgaWQgKHN0cmluZyBbXSBvciBDYXRlZ29yeSkuXHJcbiAgICAgKlxyXG4gICAgICogTkIhIFRoaXMgbWV0aG9kIGRvZXMgTk9UIGFwcGx5IHRoZSBmaWx0ZXIgaW4gdGhlIGZpbHRlcnMgY29sbGVjdGlvbi5cclxuICAgICAqIEl0IGlzIHVzZWQgYmVoaW5kIHRoZSBzY2VuZXMgYnkgdGhlIGZpbHRlciogbWV0aG9kcyBpbiBTZWFyY2hDbGllbnQuXHJcbiAgICAgKiBUbyBhcHBseSBhIGZpbHRlciB5b3UgbmVlZCB0byB1c2UgdGhlIGZpbHRlciogcHJvcGVydGllcy9tZXRob2RzIGluXHJcbiAgICAgKiBTZWFyY2hDbGllbnQuXHJcbiAgICAgKlxyXG4gICAgICogSWYgdGhlIGNhdGVnb3J5IGRvZXNuJ3QgZXhpc3QgdGhlbiB0aGUgZmlsdGVyXHJcbiAgICAgKiB3aWxsIG5vdCBiZSBjcmVhdGVkLlxyXG4gICAgICpcclxuICAgICAqIElmIHBhc3NpbmcgaW4gYSBzdHJpbmdbXSB0aGVuIHRoZSB2YWx1ZSBpcyBleHBlY3RlZCB0byBtYXRjaCB0aGUgY2F0ZWdvcnlOYW1lXHJcbiAgICAgKiBwcm9wZXJ0eSBvZiBhIGxpc3RlZCBjYXRlZ29yeS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2F0ZWdvcnlOYW1lIEEgc3RyaW5nIGFycmF5IG9yIGEgQ2F0ZWdvcnkgdGhhdCBkZW5vdGVzIHRoZSBjYXRlZ29yeSB0byBjcmVhdGUgYSBmaWx0ZXIgZm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3JlYXRlQ2F0ZWdvcnlGaWx0ZXIoY2F0ZWdvcnlOYW1lOiBzdHJpbmdbXSB8IElDYXRlZ29yeSk6IEZpbHRlciB7XHJcbiAgICAgICAgbGV0IGNhdE5hbWUgPSBBcnJheS5pc0FycmF5KGNhdGVnb3J5TmFtZSlcclxuICAgICAgICAgICAgPyBjYXRlZ29yeU5hbWVcclxuICAgICAgICAgICAgOiBjYXRlZ29yeU5hbWUuY2F0ZWdvcnlOYW1lO1xyXG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IHBhdGggPSBjYXROYW1lLnNsaWNlKDApO1xyXG4gICAgICAgIGxldCBncm91cElkID0gcGF0aC5zcGxpY2UoMCwgMSlbMF0udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhdGhpcy5jYXRlZ29yaWVzIHx8XHJcbiAgICAgICAgICAgICF0aGlzLmNhdGVnb3JpZXMuZ3JvdXBzIHx8XHJcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcmllcy5ncm91cHMubGVuZ3RoID09PSAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5jYXRlZ29yaWVzLmdyb3Vwcy5maW5kKFxyXG4gICAgICAgICAgICBnID0+IGcubmFtZS50b0xvd2VyQ2FzZSgpID09PSBncm91cElkXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKCFncm91cCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdC5wdXNoKGdyb3VwLmRpc3BsYXlOYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKGdyb3VwLmNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgICByZWZcclxuICAgICAgICAgICAgfSA9IHRoaXMuZ2V0Q2F0ZWdvcnlQYXRoRGlzcGxheU5hbWVGcm9tQ2F0ZWdvcmllcyhcclxuICAgICAgICAgICAgICAgIHBhdGgsXHJcbiAgICAgICAgICAgICAgICBncm91cC5jYXRlZ29yaWVzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChkaXNwbGF5TmFtZSAmJiBkaXNwbGF5TmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyKHJlc3VsdCwgcmVmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5kIHRoZSBjYXRlZ29yeSBiYXNlZCBvbiB0aGUgY2F0ZWdvcnktbmFtZSBhcnJheS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2F0ZWdvcnlOYW1lIFRoZSBjYXRlZ29yeSBhcnJheSB0aGF0IGlkZW50aWZpZXMgdGhlIGNhdGVnb3J5LlxyXG4gICAgICogQHJldHVybnMgVGhlIENhdGVnb3J5IG9iamVjdCBpZiBmb3VuZCBvciBudWxsLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmluZENhdGVnb3J5KFxyXG4gICAgICAgIGNhdGVnb3J5TmFtZTogc3RyaW5nW10sXHJcbiAgICAgICAgY2F0ZWdvcmllcz86IElDYXRlZ29yaWVzXHJcbiAgICApOiBJR3JvdXAgfCBJQ2F0ZWdvcnkgfCBudWxsIHtcclxuICAgICAgICBjYXRlZ29yaWVzID0gY2F0ZWdvcmllcyB8fCB0aGlzLmNhdGVnb3JpZXM7XHJcbiAgICAgICAgaWYgKCFjYXRlZ29yaWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZ3JvdXBJbmRleCA9IGNhdGVnb3JpZXMuZ3JvdXBzLmZpbmRJbmRleChcclxuICAgICAgICAgICAgZyA9PiBnLm5hbWUgPT09IGNhdGVnb3J5TmFtZVswXVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGdyb3VwSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZ3JvdXAgPSBjYXRlZ29yaWVzLmdyb3Vwc1tncm91cEluZGV4XTtcclxuICAgICAgICBpZiAoY2F0ZWdvcnlOYW1lLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjYXRlZ29yeSA9IHRoaXMuZ2V0Q2F0ZWdvcnlQYXRoRGlzcGxheU5hbWVGcm9tQ2F0ZWdvcmllcyhcclxuICAgICAgICAgICAgY2F0ZWdvcnlOYW1lLnNsaWNlKDEpLFxyXG4gICAgICAgICAgICBncm91cC5jYXRlZ29yaWVzXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhdGVnb3J5ID8gY2F0ZWdvcnkucmVmIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgbWlzc2luZyBmaWx0ZXJzIGFzIGNhdGVnb3J5LXRyZWUtbm9kZXMuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRkRmlsdGVyc0lmTWlzc2luZyhmaWx0ZXJzOiBGaWx0ZXJbXSwgY2F0czogSUNhdGVnb3JpZXMpIHtcclxuICAgICAgICBmaWx0ZXJzLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcHRoID0gZi5kaXNwbGF5TmFtZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwdGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNhdGVnb3J5TmFtZXMgPSBmLmNhdGVnb3J5LmNhdGVnb3J5TmFtZS5zbGljZSgwLCBpICsgMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZmluZENhdGVnb3J5KGNhdGVnb3J5TmFtZXMsIGNhdHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRpc3BsYXlOYW1lID0gZi5kaXNwbGF5TmFtZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50Q2F0ZWdvcnlOYW1lcyA9IGNhdGVnb3J5TmFtZXMuc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gYWRkIGdyb3VwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjYXRlZ29yeU5hbWVzWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYXMgSUdyb3VwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGFkZCBjaGlsZCBjYXRlZ29yeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5maW5kQ2F0ZWdvcnkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDYXRlZ29yeU5hbWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJTaW5jZSB3ZSBhcmUgaXRlcmF0aW5nIGZyb20gZ3JvdXBzIGFuZCBvdXR3YXJkcyB0aGlzIHNob3VsZCBub3QgaGFwcGVuLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yeSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID09PSBkZXB0aCAtIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC8vIFNpbmNlIHdlIGFyZSBvbiB0aGUgbGFzdCBlbGVtZW50IHdlIGNhbiBhZGQgdGhlIGNhdGVnb3J5IHdpdGhpbiB0aGUgZmlsdGVyIGRpcmVjdGx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZi5jYXRlZ29yeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi57IGNvdW50OiAwLCBleHBhbmRlZDogZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogLy8gTm90IGF0IHRoZSBsZWFmLW5vZGUgeWV0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeU5hbWU6IGNhdGVnb3J5TmFtZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjYXRlZ29yeU5hbWVzW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGFzIElDYXRlZ29yeSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgcGFyZW50IGhhcyBhIGNoaWxkLCBzZXQgdGhlIG5vZGUgdG8gYmUgZXhwYW5kZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5leHBhbmRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNoaWxkLWNhdGVnb3J5IHRvIHRoZSBwYXJlbnQtbm9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFyZW50IGlzIGEgZ3JvdXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJlbnQgYXMgSUdyb3VwKS5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFyZW50IGlzIGEgY2F0ZWdvcnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJlbnQgYXMgSUNhdGVnb3J5KS5jaGlsZHJlbi5wdXNoKGNhdGVnb3J5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsdGVyQ2F0ZWdvcmllcyhcclxuICAgICAgICBjYXRlZ29yaWVzOiBJQ2F0ZWdvcmllcyxcclxuICAgICAgICBxdWVyeTogUXVlcnkgPSBuZXcgUXVlcnkoKVxyXG4gICAgKTogSUNhdGVnb3JpZXMge1xyXG4gICAgICAgIC8vIFJPT1QgbGV2ZWwgYWRqdXN0bWVudHNcclxuICAgICAgICBsZXQgY2F0cyA9IHsgLi4uY2F0ZWdvcmllcyB9O1xyXG4gICAgICAgIGxldCByb290T3ZlcnJpZGUgPSB0aGlzLnNldHRpbmdzLnByZXNlbnRhdGlvbnMuX19ST09UX187XHJcbiAgICAgICAgaWYgKHJvb3RPdmVycmlkZSkge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICByb290T3ZlcnJpZGUuZ3JvdXAgJiZcclxuICAgICAgICAgICAgICAgIHJvb3RPdmVycmlkZS5ncm91cC5lbmFibGVkICYmXHJcbiAgICAgICAgICAgICAgICBjYXRzLmdyb3Vwcy5sZW5ndGggPj0gcm9vdE92ZXJyaWRlLmdyb3VwLm1pbkNvdW50XHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGxldmVsIG9mIGNhdGVnb3JpZXMgdG8gZ3JvdXAgYWNjb3JkaW5nIHRvIHBhdHRlcm5cclxuICAgICAgICAgICAgICAgIGNhdHMuZ3JvdXBzID0gdGhpcy5ncm91cGluZyhyb290T3ZlcnJpZGUsIGNhdHMuZ3JvdXBzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocm9vdE92ZXJyaWRlLmZpbHRlciAmJiByb290T3ZlcnJpZGUuZmlsdGVyLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhdHMuZ3JvdXBzID0gdGhpcy5maWx0ZXJpbmcocm9vdE92ZXJyaWRlLCBjYXRzLmdyb3Vwcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJvb3RPdmVycmlkZS5zb3J0ICYmIHJvb3RPdmVycmlkZS5zb3J0LmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlb3JkZXIgbGV2ZWxcclxuICAgICAgICAgICAgICAgIGNhdHMuZ3JvdXBzID0gdGhpcy5zb3J0aW5nKHJvb3RPdmVycmlkZSwgY2F0cy5ncm91cHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyb290T3ZlcnJpZGUubGltaXQgJiYgcm9vdE92ZXJyaWRlLmxpbWl0LmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIExpbWl0IHdoaWNoIGNhdGVnb3JpZXMgdG8gc2hvd1xyXG4gICAgICAgICAgICAgICAgY2F0cy5ncm91cHMgPSB0aGlzLmxpbWl0aW5nKGNhdHMuZ3JvdXBzLCByb290T3ZlcnJpZGUubGltaXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNraXBwaW5nIGV4cGFuc2lvbiwgYXMgcm9vdCBpcyBhbHdheXMgZXhwYW5kZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gR1JPVVAtbGV2ZWwgYWRqdXN0bWVudHNcclxuICAgICAgICBsZXQgZ3JvdXBzID0gY2F0cy5ncm91cHMubWFwKChpbkdyb3VwOiBJR3JvdXApID0+IHtcclxuICAgICAgICAgICAgbGV0IGdyb3VwID0geyAuLi5pbkdyb3VwIH07XHJcbiAgICAgICAgICAgIGxldCBncm91cE92ZXJyaWRlID0gdGhpcy5zZXR0aW5ncy5wcmVzZW50YXRpb25zW2dyb3VwLm5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoZ3JvdXBPdmVycmlkZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwT3ZlcnJpZGUuZ3JvdXAgJiZcclxuICAgICAgICAgICAgICAgICAgICBncm91cE92ZXJyaWRlLmdyb3VwLmVuYWJsZWQgJiZcclxuICAgICAgICAgICAgICAgICAgICBncm91cC5jYXRlZ29yaWVzLmxlbmd0aCA+PSBncm91cE92ZXJyaWRlLmdyb3VwLm1pbkNvdW50XHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbGV2ZWwgb2YgY2F0ZWdvcmllcyB0byBncm91cCBhY2NvcmRpbmcgdG8gcGF0dGVyblxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmNhdGVnb3JpZXMgPSB0aGlzLmdyb3VwaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cE92ZXJyaWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5jYXRlZ29yaWVzXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChncm91cE92ZXJyaWRlLmZpbHRlciAmJiBncm91cE92ZXJyaWRlLmZpbHRlci5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY2F0ZWdvcmllcyA9IHRoaXMuZmlsdGVyaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cE92ZXJyaWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5jYXRlZ29yaWVzXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChncm91cE92ZXJyaWRlLnNvcnQgJiYgZ3JvdXBPdmVycmlkZS5zb3J0LmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW9yZGVyIGxldmVsXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY2F0ZWdvcmllcyA9IHRoaXMuc29ydGluZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBPdmVycmlkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY2F0ZWdvcmllc1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBPdmVycmlkZS5saW1pdCAmJiBncm91cE92ZXJyaWRlLmxpbWl0LmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBMaW1pdCB3aGljaCBjYXRlZ29yaWVzIHRvIHNob3dcclxuICAgICAgICAgICAgICAgICAgICBncm91cC5jYXRlZ29yaWVzID0gdGhpcy5saW1pdGluZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBPdmVycmlkZS5saW1pdFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBPdmVycmlkZS5leHBhbmRlZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlIHdoZXRoZXIgdGhlIGdyb3VwIGlzIHRvIGJlIGV4cGFuZGVkIG9yIG5vdFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmV4cGFuZGVkID0gZ3JvdXBPdmVycmlkZS5leHBhbmRlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JvdXAuY2F0ZWdvcmllcyAmJiBncm91cC5jYXRlZ29yaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGdyb3VwLmNhdGVnb3JpZXMgPSB0aGlzLm1hcENhdGVnb3JpZXMoZ3JvdXAuY2F0ZWdvcmllcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNhdHMuZ3JvdXBzID0gZ3JvdXBzLmZpbHRlcihnID0+IGcgIT09IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgdGhpcy5hZGRGaWx0ZXJzSWZNaXNzaW5nKHF1ZXJ5LmZpbHRlcnMsIGNhdHMpO1xyXG4gICAgICAgIHJldHVybiBjYXRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFwQ2F0ZWdvcmllcyhjYXRlZ29yaWVzOiBJQ2F0ZWdvcnlbXSk6IElDYXRlZ29yeVtdIHtcclxuICAgICAgICAvLyBDQVRFR09SWV9sZXZlbCBhZGp1c3RtZW50c1xyXG4gICAgICAgIGxldCBjYXRzID0gWy4uLmNhdGVnb3JpZXNdO1xyXG4gICAgICAgIGNhdHMgPSBjYXRzLm1hcCgoaW5DYXRlZ29yeTogSUNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjYXRlZ29yeSA9IHsgLi4uaW5DYXRlZ29yeSB9O1xyXG4gICAgICAgICAgICBsZXQgY2F0ZWdvcnlPdmVycmlkZSA9IHRoaXMuc2V0dGluZ3MucHJlc2VudGF0aW9uc1tcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNhdGVnb3J5TmFtZS5qb2luKFwifFwiKVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnlPdmVycmlkZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5T3ZlcnJpZGUuZ3JvdXAgJiZcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeU92ZXJyaWRlLmdyb3VwLmVuYWJsZWQgJiZcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5jaGlsZHJlbi5sZW5ndGggPj0gY2F0ZWdvcnlPdmVycmlkZS5ncm91cC5taW5Db3VudFxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuY2hpbGRyZW4gPSB0aGlzLmdyb3VwaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeU92ZXJyaWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5jaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlPdmVycmlkZS5maWx0ZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeU92ZXJyaWRlLmZpbHRlci5lbmFibGVkXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5jaGlsZHJlbiA9IHRoaXMuZmlsdGVyaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeU92ZXJyaWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5jaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2F0ZWdvcnlPdmVycmlkZS5zb3J0ICYmIGNhdGVnb3J5T3ZlcnJpZGUuc29ydC5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuY2hpbGRyZW4gPSB0aGlzLnNvcnRpbmcoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5T3ZlcnJpZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjYXRlZ29yeU92ZXJyaWRlLmxpbWl0ICYmIGNhdGVnb3J5T3ZlcnJpZGUubGltaXQuZW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNoaWxkcmVuID0gdGhpcy5saW1pdGluZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkuY2hpbGRyZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5T3ZlcnJpZGUubGltaXRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNhdGVnb3J5T3ZlcnJpZGUuZXhwYW5kZWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5leHBhbmRlZCA9IGNhdGVnb3J5T3ZlcnJpZGUuZXhwYW5kZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNhdGVnb3J5LmNoaWxkcmVuICYmIGNhdGVnb3J5LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNoaWxkcmVuID0gdGhpcy5tYXBDYXRlZ29yaWVzKGNhdGVnb3J5LmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3J5O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjYXRzID0gY2F0cy5maWx0ZXIoYyA9PiBjICE9PSB1bmRlZmluZWQpO1xyXG4gICAgICAgIHJldHVybiBjYXRzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBncm91cGluZzxUIGV4dGVuZHMgSUdyb3VwIHwgSUNhdGVnb3J5PihcclxuICAgICAgICBjYXRlZ29yeU92ZXJyaWRlOiBDYXRlZ29yeVByZXNlbnRhdGlvbixcclxuICAgICAgICBjYXRlZ29yaWVzOiBUW11cclxuICAgICk6IFRbXSB7XHJcbiAgICAgICAgbGV0IG1hdGNoQ2F0ZWdvcmllczogTWFwPHN0cmluZywgSUNhdGVnb3J5W10+ID0gbmV3IE1hcDxcclxuICAgICAgICAgICAgc3RyaW5nLFxyXG4gICAgICAgICAgICBJQ2F0ZWdvcnlbXVxyXG4gICAgICAgID4oKTtcclxuXHJcbiAgICAgICAgbGV0IGNhdGVnb3J5Mk1hdGNoQ2F0ZWdvcnk6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwPFxyXG4gICAgICAgICAgICBzdHJpbmcsXHJcbiAgICAgICAgICAgIHN0cmluZ1xyXG4gICAgICAgID4oKTtcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSwgbWFwIGFuZCBjb3VudCB0byBjaGVjayB3aGV0aGVyIG9yIG5vdCB0byBncm91cCByZXN1bHRzLlxyXG4gICAgICAgIGxldCBpc0NhdGVnb3J5OiBib29sZWFuO1xyXG4gICAgICAgIGZvciAobGV0IGMgb2YgY2F0ZWdvcmllcykge1xyXG4gICAgICAgICAgICBsZXQgZ3JvdXBOYW1lID0gY2F0ZWdvcnlPdmVycmlkZS5ncm91cC5nZXRNYXRjaChjLmRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFncm91cE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0NhdGVnb3J5ID0gYy5oYXNPd25Qcm9wZXJ0eShcImNvdW50XCIpO1xyXG4gICAgICAgICAgICBsZXQgbmV3Tm9kZTogSUNhdGVnb3J5ID0gaXNDYXRlZ29yeVxyXG4gICAgICAgICAgICAgICAgPyAoYyBhcyBJQ2F0ZWdvcnkpXHJcbiAgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5TmFtZTogW2MubmFtZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogKGMgYXMgSUdyb3VwKS5jYXRlZ29yaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlIHJlYWxseSBub3Qgc3VyZSB3aGF0IHRoZSByZWFsIGNvdW50IGlzLCBhcyB0aGUgY2F0ZWdvcnktaGl0cyBtYXkgb3IgbWF5IG5vdCBiZSByZWZlcnJpbmcgdG8gdGhlIHNhbWUgaXRlbXNcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIC0xIHNob3VsZCBpbmRpY2F0ZSBcImRvIG5vdCBzaG93XCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBjLmRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQ6IGMuZXhwYW5kZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjLm5hbWVcclxuICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICghbWF0Y2hDYXRlZ29yaWVzLmhhcyhncm91cE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaENhdGVnb3JpZXMuc2V0KGdyb3VwTmFtZSwgW25ld05vZGVdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uID0gbWF0Y2hDYXRlZ29yaWVzLmdldChncm91cE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKG5ld05vZGUpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hDYXRlZ29yaWVzLnNldChncm91cE5hbWUsIGNvbGxlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGVnb3J5Mk1hdGNoQ2F0ZWdvcnkuc2V0KGMuZGlzcGxheU5hbWUsIGdyb3VwTmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEbyBhY3R1YWwgcmUtbWFwcGluZywgaWYgYW55XHJcbiAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXNcclxuICAgICAgICAgICAgLm1hcChjID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkaXNwbGF5TmFtZSA9IGNhdGVnb3J5Mk1hdGNoQ2F0ZWdvcnkuZ2V0KGMuZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbmUgYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaENhdGVnb3J5ID0gbWF0Y2hDYXRlZ29yaWVzLmdldChkaXNwbGF5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoQ2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaENhdGVnb3J5Lmxlbmd0aCA+PVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5T3ZlcnJpZGUuZ3JvdXAubWluQ291bnRQZXJHcm91cFxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0NhdGVnb3J5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBgX18ke2Rpc3BsYXlOYW1lfV9fYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IG1hdGNoQ2F0ZWdvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlOYW1lOiBbYF9fJHtkaXNwbGF5TmFtZX1fX2BdXHJcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBUO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NhdGVnb3J5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChuZXdDYXRlZ29yeSBhcyBJQ2F0ZWdvcnkpLmNvdW50ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtYXRjaENhdGVnb3J5LmZvckVhY2goaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5Mk1hdGNoQ2F0ZWdvcnkuZGVsZXRlKGkuZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdDYXRlZ29yeTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoYyA9PiBjICE9PSB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsdGVyaW5nPFQgZXh0ZW5kcyBJR3JvdXAgfCBJQ2F0ZWdvcnk+KFxyXG4gICAgICAgIG92ZXJyaWRlOiBDYXRlZ29yeVByZXNlbnRhdGlvbixcclxuICAgICAgICBncm91cHM6IFRbXVxyXG4gICAgKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gZ3JvdXBzLmZpbHRlcihnID0+IHtcclxuICAgICAgICAgICAgaWYgKG92ZXJyaWRlLmZpbHRlci5tYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoTmFtZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGUuZmlsdGVyLm1hdGNoTW9kZSA9PT0gTWF0Y2hNb2RlLkRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZy5kaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGcubmFtZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvdmVycmlkZS5maWx0ZXIubWF0Y2gudGVzdChtYXRjaE5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzb3J0aW5nPFQgZXh0ZW5kcyBJQ2F0ZWdvcnkgfCBJR3JvdXA+KFxyXG4gICAgICAgIGNhdGVnb3J5T3ZlcnJpZGU6IENhdGVnb3J5UHJlc2VudGF0aW9uLFxyXG4gICAgICAgIGNhdGVnb3JpZXM6IFRbXVxyXG4gICAgKTogVFtdIHtcclxuICAgICAgICAvLyAxLiBDcmVhdGUgcGFydHMyZ3JvdXAtbWFwXHJcbiAgICAgICAgbGV0IHBhcnQyY2F0cyA9IG5ldyBNYXA8U29ydFBhcnRDb25maWd1cmF0aW9uLCBUW10+KCk7XHJcbiAgICAgICAgZm9yIChsZXQgcCBvZiBjYXRlZ29yeU92ZXJyaWRlLnNvcnQucGFydHMpIHtcclxuICAgICAgICAgICAgcGFydDJjYXRzLnNldChwLCBbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgb3RoZXIgPSBuZXcgQXJyYXk8VD4oKTtcclxuICAgICAgICBsZXQgc3RyaW5nTWF0Y2hlcyA9IGNhdGVnb3J5T3ZlcnJpZGUuc29ydC5wYXJ0cy5maWx0ZXIoXHJcbiAgICAgICAgICAgIHAgPT4gdHlwZW9mIHAubWF0Y2ggPT09IFwic3RyaW5nXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGxldCByZWdleE1hdGNoZXMgPSBjYXRlZ29yeU92ZXJyaWRlLnNvcnQucGFydHMuZmlsdGVyKFxyXG4gICAgICAgICAgICBwID0+IHR5cGVvZiBwLm1hdGNoID09PSBcIm9iamVjdFwiXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgYyBvZiBjYXRlZ29yaWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzdHJpbmdQYXJ0IG9mIHN0cmluZ01hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdQYXJ0Lm1hdGNoID09PVxyXG4gICAgICAgICAgICAgICAgICAgIChzdHJpbmdQYXJ0Lm1hdGNoTW9kZSA9PT0gTWF0Y2hNb2RlLkRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYy5kaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGMubmFtZSlcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uID0gcGFydDJjYXRzLmdldChzdHJpbmdQYXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydDJjYXRzLnNldChzdHJpbmdQYXJ0LCBjb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCByZWdleFBhcnQgb2YgcmVnZXhNYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHJlZ2V4UGFydC5tYXRjaCBhcyBSZWdFeHApLnRlc3QoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydC5tYXRjaE1vZGUgPT09IE1hdGNoTW9kZS5EaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjLmRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGMubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uID0gcGFydDJjYXRzLmdldChyZWdleFBhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaChjKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0MmNhdHMuc2V0KHJlZ2V4UGFydCwgY29sbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZm91bmQpIHtcclxuICAgICAgICAgICAgICAgIG90aGVyLnB1c2goYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIDIuIFNvcnQgZWFjaCBwYXJ0XHJcbiAgICAgICAgbGV0IHNvcnRlZENhdHMgPSBuZXcgQXJyYXk8VD4oKTtcclxuICAgICAgICBwYXJ0MmNhdHMuZm9yRWFjaCgoY3MsIHApID0+IHtcclxuICAgICAgICAgICAgaWYgKGNzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgc29ydGVkQ2F0cyA9IHNvcnRlZENhdHMuY29uY2F0KGNzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcmVzID0gbmV3IEFycmF5PFQ+KCk7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHAuc29ydE1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBTb3J0TWV0aG9kLkFscGhhQXNjOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGNzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFWYWwgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5tYXRjaE1vZGUgPT09IE1hdGNoTW9kZS5EaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYS5kaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYlZhbCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLm1hdGNoTW9kZSA9PT0gTWF0Y2hNb2RlLkRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBiLmRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhVmFsIDwgYlZhbCA/IC0xIDogYVZhbCA+IGJWYWwgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFNvcnRNZXRob2QuQWxwaGFEZXNjOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGNzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFWYWwgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5tYXRjaE1vZGUgPT09IE1hdGNoTW9kZS5EaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYS5kaXNwbGF5TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYlZhbCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLm1hdGNoTW9kZSA9PT0gTWF0Y2hNb2RlLkRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBiLmRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhVmFsID4gYlZhbCA/IC0xIDogYVZhbCA8IGJWYWwgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFNvcnRNZXRob2QuQ291bnRBc2M6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzWzBdLmhhc093blByb3BlcnR5KFwiY291bnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gKGNzIGFzIElDYXRlZ29yeVtdKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5jb3VudCA8IGIuY291bnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC0xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhLmNvdW50ID4gYi5jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSBhcyBUW107XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gY3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBTb3J0TWV0aG9kLkNvdW50RGVzYzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3NbMF0uaGFzT3duUHJvcGVydHkoXCJjb3VudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAoY3MgYXMgSUNhdGVnb3J5W10pLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmNvdW50ID4gYi5jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGEuY291bnQgPCBiLmNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pIGFzIFRbXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBjcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFNvcnRNZXRob2QuT3JpZ2luYWw6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgb3JkZXIgdW5jaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gY3M7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNvcnRlZENhdHMgPSBzb3J0ZWRDYXRzLmNvbmNhdChyZXMpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBGaW5hbGx5IGFkZCBhbnkgbGVmdG92ZXJzIGF0IHRoZSBib3R0b21cclxuICAgICAgICByZXR1cm4gc29ydGVkQ2F0cy5jb25jYXQob3RoZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbGltaXRpbmcoYXJyYXk6IGFueVtdLCBsaW1pdDogTGltaXRQYWdlQ29uZmlndXJhdGlvbik6IGFueVtdIHtcclxuICAgICAgICBsZXQgZnJvbSA9IChsaW1pdC5wYWdlIC0gMSkgKiBsaW1pdC5wYWdlU2l6ZTtcclxuICAgICAgICBsZXQgdG8gPSBmcm9tICsgbGltaXQucGFnZVNpemU7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5LnNsaWNlKGZyb20sIHRvKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldENhdGVnb3J5UGF0aERpc3BsYXlOYW1lRnJvbUNhdGVnb3JpZXMoXHJcbiAgICAgICAgY2F0ZWdvcnlOYW1lOiBzdHJpbmdbXSxcclxuICAgICAgICBjYXRlZ29yaWVzOiBJQ2F0ZWdvcnlbXVxyXG4gICAgKTogeyBkaXNwbGF5TmFtZTogc3RyaW5nW107IHJlZjogSUNhdGVnb3J5IH0ge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IHBhdGggPSBjYXRlZ29yeU5hbWUuc2xpY2UoMCk7XHJcbiAgICAgICAgbGV0IGNhdElkID0gcGF0aC5zcGxpY2UoMCwgMSlbMF0udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgbGV0IGNhdGVnb3J5ID0gY2F0ZWdvcmllcy5maW5kKGMgPT4gYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IGNhdElkKTtcclxuXHJcbiAgICAgICAgaWYgKCFjYXRlZ29yeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdC5wdXNoKGNhdGVnb3J5LmRpc3BsYXlOYW1lKTtcclxuXHJcbiAgICAgICAgbGV0IHJlczogeyBkaXNwbGF5TmFtZTogc3RyaW5nW107IHJlZjogSUNhdGVnb3J5IH07XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCAmJiBjYXRlZ29yeS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2F0ZWdvcnkuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmVzID0gdGhpcy5nZXRDYXRlZ29yeVBhdGhEaXNwbGF5TmFtZUZyb21DYXRlZ29yaWVzKFxyXG4gICAgICAgICAgICAgICAgcGF0aCxcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5LmNoaWxkcmVuXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChyZXMuZGlzcGxheU5hbWUgJiYgcmVzLmRpc3BsYXlOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQocmVzLmRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgZGlzcGxheU5hbWU6IHJlc3VsdCwgcmVmOiByZXMgPyByZXMucmVmIDogY2F0ZWdvcnkgfTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlUXVlcnlDb252ZXJ0ZXIsIENhdGVnb3JpemF0aW9uVHlwZSwgUXVlcnkgfSBmcm9tIFwiLi4vQ29tbW9uXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3MgdG8gaGFuZGxlIGNyZWF0aW5nIGNhdGVnb3JpemUgbG9va3Vwcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYXRlZ29yaXplUXVlcnlDb252ZXJ0ZXIgZXh0ZW5kcyBCYXNlUXVlcnlDb252ZXJ0ZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgcXVlcnkgcGFyYW1zIHRvIGFuIGFycmF5IG9mIGtleT12YWx1ZSBzZWdtZW50cy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldFVybFBhcmFtcyhxdWVyeTogUXVlcnkpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgbGV0IHBhcmFtczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbUlmU2V0KHBhcmFtcywgXCJjXCIsIHF1ZXJ5LmNsaWVudElkKTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcImRmXCIsIHRoaXMuY3JlYXRlRGF0ZShxdWVyeS5kYXRlRnJvbSkpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwiZHRcIiwgdGhpcy5jcmVhdGVEYXRlKHF1ZXJ5LmRhdGVUbykpO1xyXG4gICAgICAgIGxldCBmaWx0ZXJzOiBzdHJpbmdbXSA9IHF1ZXJ5LmZpbHRlcnMubWFwKGYgPT5cclxuICAgICAgICAgICAgZi5jYXRlZ29yeS5jYXRlZ29yeU5hbWUuam9pbihcInxcIilcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwiZlwiLCBmaWx0ZXJzLmpvaW4oXCI7XCIpKTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcInFcIiwgcXVlcnkucXVlcnlUZXh0KTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcInRcIiwgcXVlcnkuc2VhcmNoVHlwZSk7XHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbUlmU2V0KHBhcmFtcywgXCJsXCIsIHF1ZXJ5LnVpTGFuZ3VhZ2VDb2RlKTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQoXHJcbiAgICAgICAgICAgIHBhcmFtcyxcclxuICAgICAgICAgICAgXCJjdFwiLFxyXG4gICAgICAgICAgICBDYXRlZ29yaXphdGlvblR5cGVbcXVlcnkuY2F0ZWdvcml6YXRpb25UeXBlXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVNldHRpbmdzLCBJQmFzZVNldHRpbmdzIH0gZnJvbSBcIi4uL0NvbW1vblwiO1xyXG5pbXBvcnQgeyBJQ2F0ZWdvcmllcyB9IGZyb20gXCIuLi9EYXRhXCI7XHJcbmltcG9ydCB7IENhdGVnb3JpemVUcmlnZ2VycyB9IGZyb20gXCIuL0NhdGVnb3JpemVUcmlnZ2Vyc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgQ2F0ZWdvcnlQcmVzZW50YXRpb25NYXAsXHJcbiAgICBDYXRlZ29yeVByZXNlbnRhdGlvblxyXG59IGZyb20gXCIuLi9Db21tb24vQ2F0ZWdvcnlQcmVzZW50YXRpb25cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNhdGVnb3JpemVTZXR0aW5ncyBleHRlbmRzIElCYXNlU2V0dGluZ3M8SUNhdGVnb3JpZXM+IHtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBpcyB0aGUgc2VwYXJhdG9yLWNoYXJhY3RlciB0aGF0IGlzIHVzZWQgd2hlbiBjb21wYXJpbmcgdGhlIGNsaWVudENhdGVnb3J5RmlsdGVyLiBZb3UgbmVlZCB0byB1c2UgdGhpc1xyXG4gICAgICogdG8gam9pbiBjYXRlZ29yeU5hbWUgYXJyYXlzIGluIHRoZSBmaWx0ZXIgc2VjdGlvbi4gU2VlIFtbU2VhcmNoQ2xpZW50LmNsaWVudENhdGVnb3J5RmlsdGVyXV0uXHJcbiAgICAgKi9cclxuICAgIGNsaWVudENhdGVnb3J5RmlsdGVyU2VwQ2hhcj86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0cmlnZ2VyLXNldHRpbmdzIGZvciB3aGVuIGF1dG9tYXRpYyBjYXRlZ29yeS11cGRhdGVzIGFyZSB0byBiZSB0cmlnZ2VyZWQuXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXJzPzogQ2F0ZWdvcml6ZVRyaWdnZXJzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0dGluZ3MgdGhhdCBkaWN0YXRlIHRoZSBwcmVzZW50YXRpb24gb2YgdGhlIGNhdGVnb3JpZXMuXHJcbiAgICAgKi9cclxuICAgIHByZXNlbnRhdGlvbnM/OiBDYXRlZ29yeVByZXNlbnRhdGlvbk1hcDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHNldHRpbmdzIHRoYXQgY2FuIGFmZmVjdCB0aGUgcmV0dXJuZWQgY2F0ZWdvcmllcyBmb3IgY2F0ZWdvcml6ZSgpIGxvb2t1cHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcml6ZVNldHRpbmdzIGV4dGVuZHMgQmFzZVNldHRpbmdzPElDYXRlZ29yaWVzPiB7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgdGhlIHNlcGFyYXRvci1jaGFyYWN0ZXIgdGhhdCBpcyB1c2VkIHdoZW4gY29tcGFyaW5nIHRoZSBjbGllbnRDYXRlZ29yeUZpbHRlci4gWW91IG5lZWQgdG8gdXNlIHRoaXNcclxuICAgICAqIHRvIGpvaW4gY2F0ZWdvcnlOYW1lIGFycmF5cyBpbiB0aGUgZmlsdGVyIHNlY3Rpb24uIFNlZSBbW1NlYXJjaENsaWVudC5jbGllbnRDYXRlZ29yeUZpbHRlcl1dLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xpZW50Q2F0ZWdvcnlGaWx0ZXJTZXBDaGFyPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyaWdnZXItc2V0dGluZ3MgZm9yIHdoZW4gYXV0b21hdGljIGNhdGVnb3J5IHJlc3VsdC11cGRhdGVzIGFyZSB0byBiZSB0cmlnZ2VyZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0cmlnZ2VyczogQ2F0ZWdvcml6ZVRyaWdnZXJzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0dGluZ3MgdGhhdCBkaWN0YXRlIHRoZSBwcmVzZW50YXRpb24gb2YgdGhlIGNhdGVnb3JpZXMuXHJcbiAgICAgKi9cclxuICAgIHByZXNlbnRhdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBDYXRlZ29yeVByZXNlbnRhdGlvbj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENhdGVnb3JpemVTZXR0aW5ncywgYmFzZWQgb24gQ2F0ZWdvcml6ZVNldHRpbmdzIGRlZmF1bHRzIGFuZCB0aGUgb3ZlcnJpZGVzIHByb3ZpZGVkIGFzIGEgcGFyYW0uXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgc2V0dGluZ3MgZGVmaW5lZCBoZXJlIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgQ2F0ZWdvcml6ZVNldHRpbmdzLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5nczogSUNhdGVnb3JpemVTZXR0aW5ncyB8IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7IC8vIGR1bW15ICh1c2luZyBpbml0IGluc3RlYWQpXHJcbiAgICAgICAgLy8gU2V0dXAgc2V0dGluZ3Mgb2JqZWN0IGJlZm9yZSBjYWxsaW5nIHN1cGVyLmluaXQgd2l0aCBpdC5cclxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzID0geyBiYXNlVXJsOiBzZXR0aW5ncyB9IGFzIElDYXRlZ29yaXplU2V0dGluZ3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldHRpbmdzLnNlcnZpY2VQYXRoID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLnNlcnZpY2VQYXRoICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHNldHRpbmdzLnNlcnZpY2VQYXRoXHJcbiAgICAgICAgICAgICAgICA6IFwic2VhcmNoL2NhdGVnb3JpemVcIjtcclxuICAgICAgICBzdXBlci5pbml0KHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgLy8gU2V0dXAgb3VyIG93biBzdHVmZiAocHJvcHMgbm90IGluIHRoZSBiYXNlIGNsYXNzKS5cclxuICAgICAgICB0aGlzLmNsaWVudENhdGVnb3J5RmlsdGVyU2VwQ2hhciA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5jbGllbnRDYXRlZ29yeUZpbHRlclNlcENoYXIgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gc2V0dGluZ3MuY2xpZW50Q2F0ZWdvcnlGaWx0ZXJTZXBDaGFyXHJcbiAgICAgICAgICAgICAgICA6IFwiX1wiO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlcnMgPSBuZXcgQ2F0ZWdvcml6ZVRyaWdnZXJzKHNldHRpbmdzLnRyaWdnZXJzKTtcclxuICAgICAgICB0aGlzLnByZXNlbnRhdGlvbnMgPSB7fSBhcyBDYXRlZ29yeVByZXNlbnRhdGlvbk1hcDtcclxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLnByZXNlbnRhdGlvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHNldHRpbmdzLnByZXNlbnRhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5wcmVzZW50YXRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNlbnRhdGlvbnNba2V5XSA9IG5ldyBDYXRlZ29yeVByZXNlbnRhdGlvbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MucHJlc2VudGF0aW9uc1trZXldXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlc2UgYXJlIHRoZSB0cmlnZ2VycyB0aGF0IGRlZmluZSB3aGVuIGFuZCB3aGVuIG5vdCB0byB0cmlnZ2VyIGEgY2F0ZWdvcml6ZSBsb29rdXAuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcml6ZVRyaWdnZXJzIHtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgY2xpZW50Q2F0ZWdvcnlFeHBhbnNpb24gaGFzIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbGllbnRDYXRlZ29yeUV4cGFuc2lvbkNoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgY2xpZW50Q2F0ZWdvcnlGaWx0ZXIgaGFzIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbGllbnRDYXRlZ29yeUZpbHRlckNoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgY2xpZW50SWQgcHJvcGVydHkgaGFzIGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNsaWVudElkQ2hhbmdlZD86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBmcm9tIGRhdGUgcHJvcGVydHkgaGFzIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkYXRlRnJvbUNoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgdG8gZGF0ZSBwcm9wZXJ0eSBoYXMgY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRhdGVUb0NoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgZmlsdGVyIHByb3BlcnR5IGhhcyBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmlsdGVyQ2hhbmdlZD86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyBvbiBvciBvZmYgYWxsIHF1ZXJ5LXJlbGF0ZWQgdHJpZ2dlcnMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBxdWVyeUNoYW5nZT86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxheSB0cmlnZ2VycyB1bnRpbCBjaGFuZ2VzIGhhcyBub3QgYmVlbiBtYWRlIHRvIHRoZSBxdWVyeSBmb3IgYSBjZXJ0YWluIHRpbWUgKG1pbGxpc2Vjb25kcykuXHJcbiAgICAgKiBUaGlzIGlzIHRvIGF2b2lkIGV4ZWN1dGluZyBzZWFyY2hlcyBjb25zdGFudGx5IHdoaWxlIHRoZSB1c2VyIGlzIHR5cGluZy5cclxuICAgICAqIFRoZSBxdWVyeUNoYW5nZUluc3RhbnRSZWdleCBoYXMgcHJlY2VkZW5jZS4gVGhpcyBkZWxheSBpcyBvbmx5IGNvbnNpZGVyZWQgd2hlbiB0aGF0IHJlZ2V4IGRvZXNuJ3QgbWF0Y2guXHJcbiAgICAgKiBTZXQgdmFsdWUgdG8gbGVzcyB0aGFuIHplcm8gdG8gbWFrZSBzdXJlIHdlIG9ubHkgdHJpZ2dlciB3aGVuIHRoZSBxdWVyeUNoYW5nZUluc3RhbnRSZWdleCBtYXRjaGVzLlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IFJlcXVpcmVzIHF1ZXJ5Q2hhbmdlIHRvIGJlIHRydWUuXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeSB0byBiZSBsb25nZXIgdGhhbiBxdWVyeU1pbkxlbmd0aC5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0IGZvciBDYXRlZ29yaXplIGlzIHRvIHJ1biBkZWxheWVkIGxvb2t1cHMgYWZ0ZXIgMiBzZWNvbmRzLiBUaGUgcXVlcnlDaGFuZ2VJbnN0YW50UmVnZXggbWF0Y2hlcyB3aWxsXHJcbiAgICAgKiBydW4gaW1tZWRpYXRlbHkgdGhvdWdoLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VEZWxheT86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIGFjdGlvbiBpbW1lZGlhdGVseSBpbnN0ZWFkIG9mIGRlbGF5ZWQgd2hlbiB0aGUgcXVlcnkgbWF0Y2hlcyB0aGUgcmVnZXguXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogUmVxdWlyZXMgcXVlcnlDaGFuZ2UgdG8gYmUgdHJ1ZS5cclxuICAgICAqIE5vdGU6IFJlcXVpcmVzIHF1ZXJ5IHRvIGJlIGxvbmdlciB0aGFuIHF1ZXJ5TWluTGVuZ3RoLlxyXG4gICAgICpcclxuICAgICAqIERlZmF1bHQ6IFRyaWdnZXIgb24gZmlyc3QgRU5URVIgb3IgU1BBQ0UuIFNhbXBsZTogaHR0cHM6Ly9yZWdleDEwMS5jb20vci9QMHhmZWovMVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VJbnN0YW50UmVnZXg/OiBSZWdFeHA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaW4gbGVuZ3RoIGJlZm9yZSB0cmlnZ2VyaW5nLiBGb3IgQ2F0ZWdvcml6ZSAoYW5kIEZpbmQpIHRoaXMgc2hvdWxkIGJlIG9rIHdpdGggc2hvcnQgcXVlcmllcyB0b28uXHJcbiAgICAgKiBPbmUgY2hhcmFjdGVyIGZvbGxvd2VkIGJ5IGFuIGVudGVyIChkZWZhdWx0KS5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeUNoYW5nZSB0byBiZSB0cnVlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VNaW5MZW5ndGg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzZWFyY2hUeXBlIHByb3BlcnR5IGhhcyBjaGFuZ2VkLiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZWFyY2hUeXBlQ2hhbmdlZD86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSB1aUxhbmd1YWdlQ29kZSBwcm9wZXJ0eSBoYXMgY2hhbmdlZC5cclxuICAgICAqIERlZmF1bHQ6IFJlLWZldGNoIG9uIGNoYW5nZSAtIGFzIHRoZSBjYXRlZ29yaWVzIG5vcm1hbGx5IGFyZSB0cmFuc2xhdGVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdWlMYW5ndWFnZUNvZGVDaGFuZ2VkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBDYXRlZ29yaXplVHJpZ2dlciBvYmplY3QgZm9yIHlvdSwgYmFzZWQgb24gQ2F0ZWdvcml6ZVRyaWdnZXIgZGVmYXVsdHMgYW5kIHRoZSBvdmVycmlkZXMgcHJvdmlkZWQgYXMgYSBwYXJhbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdHJpZ2dlcnMgLSBUaGUgdHJpZ2dlcnMgZGVmaW5lZCBoZXJlIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgQ2F0ZWdvcml6ZVRyaWdnZXIuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRyaWdnZXJzOiBDYXRlZ29yaXplVHJpZ2dlcnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuY2xpZW50Q2F0ZWdvcnlFeHBhbnNpb25DaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLmNsaWVudENhdGVnb3J5RXhwYW5zaW9uQ2hhbmdlZCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5jbGllbnRDYXRlZ29yeUV4cGFuc2lvbkNoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5jbGllbnRDYXRlZ29yeUZpbHRlckNoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuY2xpZW50Q2F0ZWdvcnlGaWx0ZXJDaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLmNsaWVudENhdGVnb3J5RmlsdGVyQ2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmNsaWVudElkQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5jbGllbnRJZENoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMuY2xpZW50SWRDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuZGF0ZUZyb21DaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLmRhdGVGcm9tQ2hhbmdlZCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5kYXRlRnJvbUNoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRlVG9DaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLmRhdGVUb0NoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMuZGF0ZVRvQ2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmZpbHRlckNoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuZmlsdGVyQ2hhbmdlZCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5maWx0ZXJDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMucXVlcnlDaGFuZ2UgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMucXVlcnlDaGFuZ2UgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMucXVlcnlDaGFuZ2VcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5xdWVyeUNoYW5nZURlbGF5ID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLnF1ZXJ5Q2hhbmdlRGVsYXkgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMucXVlcnlDaGFuZ2VEZWxheVxyXG4gICAgICAgICAgICAgICAgOiAyMDAwO1xyXG5cclxuICAgICAgICB0aGlzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4ID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4XHJcbiAgICAgICAgICAgICAgICA6IC9cXFNcXHMkL3U7XHJcblxyXG4gICAgICAgIHRoaXMucXVlcnlDaGFuZ2VNaW5MZW5ndGggPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMucXVlcnlDaGFuZ2VNaW5MZW5ndGggIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMucXVlcnlDaGFuZ2VNaW5MZW5ndGhcclxuICAgICAgICAgICAgICAgIDogMjtcclxuXHJcbiAgICAgICAgdGhpcy5zZWFyY2hUeXBlQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5zZWFyY2hUeXBlQ2hhbmdlZCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5zZWFyY2hUeXBlQ2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLnVpTGFuZ3VhZ2VDb2RlQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy51aUxhbmd1YWdlQ29kZUNoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMudWlMYW5ndWFnZUNvZGVDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IGZldGNoIGZyb20gXCJjcm9zcy1mZXRjaFwiO1xyXG5cclxuaW1wb3J0IHsgRGF0ZVNwZWNpZmljYXRpb24gfSBmcm9tIFwiLi9RdWVyeVwiO1xyXG5pbXBvcnQgeyBPcmRlckJ5IH0gZnJvbSBcIi4vT3JkZXJCeVwiO1xyXG5pbXBvcnQgeyBTZWFyY2hUeXBlIH0gZnJvbSBcIi4vU2VhcmNoVHlwZVwiO1xyXG5pbXBvcnQgeyBJQmFzZVNldHRpbmdzIH0gZnJvbSBcIi4vQmFzZVNldHRpbmdzXCI7XHJcbmltcG9ydCB7IEF1dGhUb2tlbiB9IGZyb20gXCIuLi9BdXRoZW50aWNhdGlvbi9BdXRoVG9rZW5cIjtcclxuXHJcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gXCIuL0ZpbHRlclwiO1xyXG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gXCIuL1F1ZXJ5XCI7XHJcbmltcG9ydCB7IENhdGVnb3JpemF0aW9uVHlwZSB9IGZyb20gXCIuL0NhdGVnb3JpemF0aW9uVHlwZVwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRmV0Y2ggPSAoXHJcbiAgICBpbnB1dD86IFJlcXVlc3QgfCBzdHJpbmcsXHJcbiAgICBpbml0PzogUmVxdWVzdEluaXRcclxuKSA9PiBQcm9taXNlPFJlc3BvbnNlPjtcclxuXHJcbi8qKlxyXG4gKiBBIGNvbW1vbiBzZXJ2aWNlIGJhc2UtY2xhc3MgZm9yIHRoZSBkZXNjZW5kaW5nIEF1dG9jb21wbGV0ZSwgQ2F0ZWdvcml6ZSBhbmQgRmluZCBjbGFzc2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0gVERhdGFUeXBlIERlZmluZXMgdGhlIGRhdGEtdHlwZSB0aGF0IHRoZSBkZXNjZW5kYW50IHNlcnZpY2UtY2xhc3MgbmVlZHMgdG8gcmV0dXJuIG9uIGxvb2t1cHMuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNhbGw8VERhdGFUeXBlPiB7XHJcbiAgICBwcm90ZWN0ZWQgZmV0Y2hNZXRob2Q6IEZldGNoO1xyXG5cclxuICAgIHByb3RlY3RlZCBzZXR0aW5ncz86IElCYXNlU2V0dGluZ3M8VERhdGFUeXBlPjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgYXV0aD86IEF1dGhUb2tlbjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZGVmZXJVcGRhdGU6IGJvb2xlYW47XHJcblxyXG4gICAgcHJvdGVjdGVkIGRlZmVycmVkUXVlcnk6IFF1ZXJ5IHwgbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZGVmZXJyZWRVc2VNYXRjaFBhZ2U6IGJvb2xlYW4gfCBudWxsO1xyXG5cclxuICAgIHByb3RlY3RlZCBkZWxheTogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjaWRlcyB3aGV0aGVyIGFuIHVwZGF0ZSBzaG91bGQgYmUgZXhlY3V0ZWQgb3Igbm90LiBUeXBpY2FsbHkgdXNlZCB0byB0ZW1wb3JhcmlseSB0dXJuIG9mZiB1cGRhdGUtZXhlY3V0aW9uLlxyXG4gICAgICogV2hlbiB0dXJuZWQgYmFjayBvbiB0aGUgc2Vjb25kIHBhcmFtIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHdoZXRoZXIgcGVuZGluZyB1cGRhdGVzIHNob3VsZCBiZSBleGVjdXRlZCBvciBub3QuXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgVHVybnMgb24gb3Igb2ZmIGRlZmVycmluZyBvZiB1cGRhdGVzLlxyXG4gICAgICogQHBhcmFtIHNraXBQZW5kaW5nIFVzZWQgdG8gaW5kaWNhdGUgaWYgYSBwZW5kaW5nIHVwZGF0ZSBpcyB0byBiZSBleGVjdXRlZCBvciBza2lwcGVkIHdoZW4gZGVmZXJyaW5nIGlzIHR1cm5lZCBvZmYuIFRoZSBwYXJhbSBpcyBpZ25vcmVkIGZvciBzdGF0ZT10cnVlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVmZXJVcGRhdGVzKHN0YXRlOiBib29sZWFuLCBza2lwUGVuZGluZzogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5kZWZlclVwZGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIGlmICghc3RhdGUgJiYgdGhpcy5kZWZlcnJlZFF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5kZWZlcnJlZFF1ZXJ5O1xyXG4gICAgICAgICAgICBjb25zdCB1c2VNYXRjaFBhZ2UgPSB0aGlzLmRlZmVycmVkVXNlTWF0Y2hQYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkUXVlcnkgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkVXNlTWF0Y2hQYWdlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFza2lwUGVuZGluZyAmJiB0aGlzLnNob3VsZFVwZGF0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSwgbnVsbCwgdXNlTWF0Y2hQYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbiBiZSB1c2VkIHRvIGNoZWNrIHRoZSBzdGF0ZSBvZiBkZWZlclVwZGF0ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldCBkZWZlclVwZGF0ZVN0YXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVyVXBkYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCB0aGUgUmVxdWVzdCB0aGF0IGlzIHRvIGJlIGV4ZWN1dGVkLCB3aXRoIGhlYWRlcnMgYW5kIGF1dGggYXMgbmVlZGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbmNsdWRlQXV0aG9yaXphdGlvbkhlYWRlciBTZXQgdG8gZmFsc2UgdG8gbm90IGluY2x1ZGUgdGhlIGF1dGggand0IHRva2VuIGluIHRoZSByZXF1ZXN0IGhlYWRlcnMuIERlZmF1bHQ9dHJ1ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVxdWVzdE9iamVjdChcclxuICAgICAgICBpbmNsdWRlQXV0aG9yaXphdGlvbkhlYWRlcjogYm9vbGVhbiA9IHRydWVcclxuICAgICk6IFJlcXVlc3RJbml0IHtcclxuICAgICAgICBjb25zdCBoZWFkZXJzOiBhbnkgPSB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBpbmNsdWRlQXV0aG9yaXphdGlvbkhlYWRlciAmJlxyXG4gICAgICAgICAgICB0aGlzLmF1dGggJiZcclxuICAgICAgICAgICAgdGhpcy5hdXRoLmF1dGhlbnRpY2F0aW9uVG9rZW5cclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3RoaXMuYXV0aC5hdXRoZW50aWNhdGlvblRva2VufWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYWNoZTogXCJkZWZhdWx0XCIsXHJcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcclxuICAgICAgICAgICAgaGVhZGVycyxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBtb2RlOiBcImNvcnNcIlxyXG4gICAgICAgIH0gYXMgUmVxdWVzdEluaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsIHRoZSBzZXJ2aWNlLCBidXQgdGFrZSBpbnRvIGFjY291bnQgZGVmZXJyZWRVcGRhdGVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgb2JqZWN0IHRvIGNyZWF0ZSB0aGUgZmV0Y2ggZm9yLlxyXG4gICAgICogQHBhcmFtIGRlbGF5IEEgZGVsYXkgZm9yIHdoZW4gdG8gZXhlY3V0ZSB0aGUgdXBkYXRlLCBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIHVuZGVmaW5lZC5cclxuICAgICAqIEBwYXJhbSB1c2VRdWVyeU1hdGNoUGFnZSBJZiB0cnVlIHRoZW4gdGhlIHF1ZXJ5IG1hdGNocGFnZSBudW1iZXIgd2lsbCBub3QgYmUgcmVzZXQgdG8gMS4gT3RoZXJ3aXNlIGl0IGlzIGJ5IGRlZmF1bHQgYWx3YXlzIDEuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGUoXHJcbiAgICAgICAgcXVlcnk6IFF1ZXJ5LFxyXG4gICAgICAgIGRlbGF5PzogbnVtYmVyLFxyXG4gICAgICAgIHVzZVF1ZXJ5TWF0Y2hQYWdlPzogYm9vbGVhblxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF1c2VRdWVyeU1hdGNoUGFnZSkge1xyXG4gICAgICAgICAgICBxdWVyeS5tYXRjaFBhZ2UgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kZWZlclVwZGF0ZSkge1xyXG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBxdWVyeSwgc28gdGhhdCB3aGVuIHRoZSBkZWZlclVwZGF0ZSBpcyBhZ2FpbiBmYWxzZSB3ZSBjYW4gdGhlbiBleGVjdXRlIGl0LlxyXG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkUXVlcnkgPSBxdWVyeTtcclxuICAgICAgICAgICAgdGhpcy5kZWZlcnJlZFVzZU1hdGNoUGFnZSA9IHVzZVF1ZXJ5TWF0Y2hQYWdlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgdGhpcyBhY3Rpb24gaXMgdHJpZ2dlcmVkIHdoZW4gYSBkZWxheWVkIGV4ZWN1dGlvbiBpcyBhbHJlYWR5IHBlbmRpbmcsIGNsZWFyIHRoYXQgcGVuZGluZyB0aW1lb3V0LlxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgdXAgdGhlIGRlbGF5XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZldGNoUHJvbWlzZSA9IHRoaXMuZmV0Y2gocXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmZXRjaFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hQcm9taXNlLmNhdGNoKGVycm9yID0+IFByb21pc2UucmVzb2x2ZShudWxsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpIGFzIGFueTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBmZXRjaFByb21pc2UgPSB0aGlzLmZldGNoKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgIGlmIChmZXRjaFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBmZXRjaFByb21pc2UuY2F0Y2goZXJyb3IgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2hvdWxkVXBkYXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmNiU3VjY2VzcyAmJiB0aGlzLnNldHRpbmdzLmVuYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIGNsaWVudENhdGVnb3J5RXhwYW5zaW9uQ2hhbmdlZChcclxuICAgIC8vICAgICBvbGRWYWx1ZTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0sXHJcbiAgICAvLyAgICAgcXVlcnk6IFF1ZXJ5XHJcbiAgICAvLyApOiB2b2lkIHtcclxuICAgIC8vICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgY2xpZW50Q2F0ZWdvcnlGaWx0ZXJDaGFuZ2VkKFxyXG4gICAgLy8gICAgIG9sZFZhbHVlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IFJlZ0V4cCB9LFxyXG4gICAgLy8gICAgIHF1ZXJ5OiBRdWVyeVxyXG4gICAgLy8gKTogdm9pZCB7XHJcbiAgICAvLyAgICAgLyogRGVmYXVsdCBubyBpbXBsZW1lbnRhdGlvbiovXHJcbiAgICAvLyB9XHJcblxyXG4gICAgcHVibGljIGNsaWVudElkQ2hhbmdlZChvbGRWYWx1ZTogc3RyaW5nLCBxdWVyeTogUXVlcnkpOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBjYXRlZ29yaXphdGlvblR5cGVDaGFuZ2VkKFxyXG4gICAgICAgIG9sZFZhbHVlOiBDYXRlZ29yaXphdGlvblR5cGUsXHJcbiAgICAgICAgcXVlcnk6IFF1ZXJ5XHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBkYXRlRnJvbUNoYW5nZWQob2xkVmFsdWU6IERhdGVTcGVjaWZpY2F0aW9uLCBxdWVyeTogUXVlcnkpOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBkYXRlVG9DaGFuZ2VkKG9sZFZhbHVlOiBEYXRlU3BlY2lmaWNhdGlvbiwgcXVlcnk6IFF1ZXJ5KTogdm9pZCB7XHJcbiAgICAgICAgLyogRGVmYXVsdCBubyBpbXBsZW1lbnRhdGlvbiovXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZmlsdGVyc0NoYW5nZWQob2xkVmFsdWU6IEZpbHRlcltdLCBxdWVyeTogUXVlcnkpOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBtYXRjaEdlbmVyYXRlQ29udGVudENoYW5nZWQob2xkVmFsdWU6IGJvb2xlYW4sIHF1ZXJ5OiBRdWVyeSk6IHZvaWQge1xyXG4gICAgICAgIC8qIERlZmF1bHQgbm8gaW1wbGVtZW50YXRpb24qL1xyXG4gICAgfVxyXG4gICAgcHVibGljIG1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0c0NoYW5nZWQoXHJcbiAgICAgICAgb2xkVmFsdWU6IGJvb2xlYW4sXHJcbiAgICAgICAgcXVlcnk6IFF1ZXJ5XHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBtYXRjaEdyb3VwaW5nQ2hhbmdlZChvbGRWYWx1ZTogYm9vbGVhbiwgcXVlcnk6IFF1ZXJ5KTogdm9pZCB7XHJcbiAgICAgICAgLyogRGVmYXVsdCBubyBpbXBsZW1lbnRhdGlvbiovXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbWF0Y2hPcmRlckJ5Q2hhbmdlZChvbGRWYWx1ZTogT3JkZXJCeSwgcXVlcnk6IFF1ZXJ5KTogdm9pZCB7XHJcbiAgICAgICAgLyogRGVmYXVsdCBubyBpbXBsZW1lbnRhdGlvbiovXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbWF0Y2hQYWdlQ2hhbmdlZChvbGRWYWx1ZTogbnVtYmVyLCBxdWVyeTogUXVlcnkpOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2VTaXplQ2hhbmdlZChvbGRWYWx1ZTogbnVtYmVyLCBxdWVyeTogUXVlcnkpOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBtYXhTdWdnZXN0aW9uc0NoYW5nZWQob2xkVmFsdWU6IG51bWJlciwgcXVlcnk6IFF1ZXJ5KTogdm9pZCB7XHJcbiAgICAgICAgLyogRGVmYXVsdCBubyBpbXBsZW1lbnRhdGlvbiovXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcXVlcnlUZXh0Q2hhbmdlZChvbGRWYWx1ZTogc3RyaW5nLCBxdWVyeTogUXVlcnkpOiB2b2lkIHtcclxuICAgICAgICAvKiBEZWZhdWx0IG5vIGltcGxlbWVudGF0aW9uKi9cclxuICAgIH1cclxuICAgIHB1YmxpYyBzZWFyY2hUeXBlQ2hhbmdlZChvbGRWYWx1ZTogU2VhcmNoVHlwZSwgcXVlcnk6IFF1ZXJ5KTogdm9pZCB7XHJcbiAgICAgICAgLyogRGVmYXVsdCBubyBpbXBsZW1lbnRhdGlvbiovXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgdWlMYW5ndWFnZUNvZGVDaGFuZ2VkKG9sZFZhbHVlOiBzdHJpbmcsIHF1ZXJ5OiBRdWVyeSk6IHZvaWQge1xyXG4gICAgICAgIC8qIERlZmF1bHQgbm8gaW1wbGVtZW50YXRpb24qL1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCBhIHRoZSBjb21tb24gYmFzZSBoYW5kbGluZyBmb3Igc2VydmljZXMsIHN1Y2ggYXMgY2hlY2tpbmcgdGhhdCB0aGUgdXJsIGlzIHZhbGlkIGFuZCBoYW5kbGluZyB0aGUgYXV0aGVudGljYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIC0gVGhlIGJhc2UgdXJsIGZvciB0aGUgc2VydmljZSB0byBiZSBzZXR1cC5cclxuICAgICAqIEBwYXJhbSBhdXRoIC0gVGhlIGF1dGgtb2JqZWN0IHRoYXQgY29udHJvbHMgYXV0aGVudGljYXRpb24gZm9yIHRoZSBzZXJ2aWNlLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaW5pdChcclxuICAgICAgICBzZXR0aW5nczogSUJhc2VTZXR0aW5nczxURGF0YVR5cGU+LFxyXG4gICAgICAgIGF1dGg/OiBBdXRoVG9rZW4sXHJcbiAgICAgICAgZmV0Y2hNZXRob2Q/OiBGZXRjaFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XHJcbiAgICAgICAgdGhpcy5mZXRjaE1ldGhvZCA9IGZldGNoTWV0aG9kIHx8IGZldGNoO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBmZXRjaChcclxuICAgICAgICBxdWVyeT86IFF1ZXJ5LFxyXG4gICAgICAgIHN1cHByZXNzQ2FsbGJhY2tzPzogYm9vbGVhblxyXG4gICAgKTogUHJvbWlzZTxhbnk+O1xyXG5cclxuICAgIHByb3RlY3RlZCBjYlJlcXVlc3QoXHJcbiAgICAgICAgc3VwcHJlc3NDYWxsYmFja3M6IGJvb2xlYW4sXHJcbiAgICAgICAgdXJsOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxSW5pdDogUmVxdWVzdEluaXRcclxuICAgICk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXR0aW5ncyBjYW5ub3QgYmUgZW1wdHkuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jYlJlcXVlc3QgJiYgIXN1cHByZXNzQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmNiUmVxdWVzdCh1cmwsIHJlcUluaXQpICE9PSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgbm8gcmVxdWVzdC1jYWxsYmFjayBpcyBzZXQgdXAgd2UgcmV0dXJuIHRydWUgdG8gYWxsb3cgdGhlIGZldGNoIHRvIGJlIGV4ZWN1dGVkXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNiRXJyb3IoXHJcbiAgICAgICAgc3VwcHJlc3NDYWxsYmFja3M6IGJvb2xlYW4sXHJcbiAgICAgICAgZXJyb3I6IGFueSxcclxuICAgICAgICB1cmw6IHN0cmluZyxcclxuICAgICAgICByZXFJbml0OiBSZXF1ZXN0SW5pdFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNldHRpbmdzIGNhbm5vdCBiZSBlbXB0eS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNiU3VjY2VzcyAmJiAhc3VwcHJlc3NDYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5jYkVycm9yKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNiU3VjY2VzcyhcclxuICAgICAgICBzdXBwcmVzc0NhbGxiYWNrczogYm9vbGVhbixcclxuICAgICAgICBkYXRhOiBURGF0YVR5cGUsXHJcbiAgICAgICAgdXJsOiBzdHJpbmcsXHJcbiAgICAgICAgcmVxSW5pdDogUmVxdWVzdEluaXRcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXR0aW5ncyBjYW5ub3QgYmUgZW1wdHkuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jYlN1Y2Nlc3MgJiYgIXN1cHByZXNzQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY2JTdWNjZXNzKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIi5cIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlUXVlcnlDb252ZXJ0ZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB1cmwgZm9yIHRoZSBSRVNUIEFQSS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYmFzZVVybCBpcyB0aGUgbGVhZGluZyBwYXJ0IG9mIHRoZSB1cmwgdGhhdCBpcyB0byBiZSBnZW5lcmF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gcXVlcnkgaXMgdGhlIHF1ZXJ5IHRoYXQgaXMgdG8gYmUgY29udmVydGVkIGludG8gdGhlIHVybC5cclxuICAgICAqIEByZXR1cm5zIFRoZSB1cmwgdG8gdXNlIGZvciBmZXRjaGluZyB0aGUgZGF0ZSwgcmVwcmVzZW50ZWQgYXMgYSBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVcmwodXJsOiBzdHJpbmcsIHF1ZXJ5OiBRdWVyeSk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IHRoaXMuZ2V0VXJsUGFyYW1zKHF1ZXJ5KS5zb3J0KCk7XHJcbiAgICAgICAgcmV0dXJuIGAke3VybH0/JHtwYXJhbXMuam9pbihcIiZcIil9YDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBxdWVyeSBwYXJhbXMgdG8gYW4gYXJyYXkgb2Yga2V5PXZhbHVlIHNlZ21lbnRzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0VXJsUGFyYW1zKHF1ZXJ5OiBRdWVyeSk6IHN0cmluZ1tdO1xyXG5cclxuICAgIHByb3RlY3RlZCBhZGRQYXJhbUlmU2V0KHBhcmFtczogc3RyaW5nW10sIGtleTogc3RyaW5nLCBwYXJhbTogYW55KSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyYW0udG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBjcmVhdGVEYXRlKFxyXG4gICAgICAgIGRhdGU6IERhdGUgfCBzdHJpbmcgfCBudW1iZXIgfCBtb21lbnQuRHVyYXRpb25JbnB1dE9iamVjdFxyXG4gICAgKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIWRhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGF0ZVN0cmluZzogc3RyaW5nO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdHlwZW9mIGRhdGUgPT09IFwib2JqZWN0XCIgJiZcclxuICAgICAgICAgICAgIShkYXRlIGluc3RhbmNlb2YgU3RyaW5nKSAmJlxyXG4gICAgICAgICAgICAhKGRhdGUgaW5zdGFuY2VvZiBEYXRlKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBkYXRlU3RyaW5nID0gbW9tZW50KClcclxuICAgICAgICAgICAgICAgIC5hZGQoZGF0ZSlcclxuICAgICAgICAgICAgICAgIC50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGVTdHJpbmcgPSBtb21lbnQoZGF0ZSkudG9JU09TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGVTdHJpbmc7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGludGVyZmFjZSBJQmFzZVNldHRpbmdzPFREYXRhVHlwZT4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIG5vdGlmaWVyIG1ldGhvZCB0byBjYWxsIHdoZW5ldmVyIHRoZSBsb29rdXAgZmFpbHMuXHJcbiAgICAgKiBAcGFyYW0gZXJyb3IgLSBBbiBlcnJvciBvYmplY3QgYXMgZ2l2ZW4gYnkgdGhlIGZldGNoIG9wZXJhdGlvbi5cclxuICAgICAqL1xyXG4gICAgY2JFcnJvcj86IChlcnJvcj86IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgbm90aWZpZXIgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIGp1c3QgYmVmb3JlIHRoZSBmZXRjaCBvcGVyYXRpb24gaXMgc3RhcnRlZC4gV2hlbiB0aGUgcmVxdWVzdFxyXG4gICAgICogaXMgZmluaXNoZWQgZWl0aGVyIGNiU3VjY2VzcyBvciBjYkVycm9yIHdpbGwgYmUgY2FsbGVkIHRvIGluZGljYXRlIHN1Y2Nlc3Mgb3IgZmFpbHVyZS5cclxuICAgICAqIFRoaXMgY2FsbGJhY2sgaXMgdHlwaWNhbGx5IHVzZWQgZm9yIHNldHRpbmcgbG9hZGluZyBpbmRpY2F0b3JzIGFuZC9vciBkZWJ1Z2dpbmcgcHVycG9zZXMuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2UgdGhlbiB0aGUgZmV0Y2ggb3BlcmF0aW9uIGlzIHNraXBwZWQuIFRoaXMgY2FuIHRoZW4gYmUgdXNlZFxyXG4gICAgICogdG8gY29uZGl0aW9uYWxseSBkcm9wIHJlcXVlc3RzIGZyb20gYmVpbmcgbWFkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXJsIC0gVGhpcyBpcyB0aGUgdXJsIHRoYXQgaXMvd2FzIGZldGNoZWQuIEdvb2QgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cclxuICAgICAqIEBwYXJhbSByZXFJbml0IC0gVGhpcyBpcyB0aGUgUmVxdWVzdEluaXQgb2JqZWN0IHRoYXQgd2FzIHVzZWQgZm9yIHRoZSBmZXRjaCBvcGVyYXRpb24uXHJcbiAgICAgKi9cclxuICAgIGNiUmVxdWVzdD86ICh1cmw/OiBzdHJpbmcsIHJlcUluaXQ/OiBSZXF1ZXN0SW5pdCkgPT4gYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgbm90aWZpZXIgbWV0aG9kIHRvIGNhbGwgd2hlbmV2ZXIgdGhlIGxvb2t1cCByZXN1bHRzIGhhdmUgYmVlbiByZWNlaXZlZC5cclxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGxvb2t1cCByZXN1bHRzLlxyXG4gICAgICovXHJcbiAgICBjYlN1Y2Nlc3M/OiAoZGF0YT86IFREYXRhVHlwZSkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgc2V0dGluZy1mZWF0dXJlIGlzIGVuYWJsZWQgb3Igbm90LlxyXG4gICAgICovXHJcbiAgICBlbmFibGVkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBiYXNlVXJsIGZvciB0aGUgcmVzdC1zZXJ2aWNlLlxyXG4gICAgICovXHJcbiAgICBiYXNlVXJsPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogWW91IGNhbiB1c2UgdGhpcyBwYXRoIHRvIG92ZXJyaWRlIHRoZSBwYXRoIHRvIHRoZSByZXN0LXNlcnZpY2UuXHJcbiAgICAgKiBJZiBub3Qgc2V0LCBpdCB3aWxsIGRlZmF1bHQgdG8gXCJSZXN0U2VydmljZS92XCIgYW5kIHdoYXRldmVyIGB0aGlzLnZlcnNpb25gIGlzIHNldCB0by5cclxuICAgICAqIElmIGl0IGlzIHNldCBpdCB3aWxsIHVzZSB0aGUgc2V0IHBhdGggdmVyYmF0aW0sIHdpdGhvdXQgYXBwZW5kaW5nIGB0aGlzLnZlcnNpb25gLlxyXG4gICAgICovXHJcblxyXG4gICAgYmFzZVBhdGg/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2VydmljZS1zcGVjaWZpYyBwYXRoIGFkZGVkIHRvIHRoZSBiYXNlLXBhdGguXHJcbiAgICAgKi9cclxuICAgIHNlcnZpY2VQYXRoPzogc3RyaW5nO1xyXG5cclxuICAgIHJlYWRvbmx5IHVybD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY29tbW9uIHNldHRpbmdzIGJhc2UtY2xhc3MgZm9yIHRoZSBkZXNjZW5kaW5nIEF1dG9jb21wbGV0ZSwgQ2F0ZWdvcml6ZSBhbmQgRmluZCBzZXR0aW5ncyBjbGFzc2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0gVERhdGFUeXBlIERlZmluZXMgdGhlIGRhdGEtdHlwZSB0aGF0IHRoZSBkZXNjZW5kYW50IHNldHRpbmdzLWNsYXNzIG5lZWRzIHRvIHJldHVybiBvbiBsb29rdXBzLlxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VTZXR0aW5nczxURGF0YVR5cGU+XHJcbiAgICBpbXBsZW1lbnRzIElCYXNlU2V0dGluZ3M8VERhdGFUeXBlPiB7XHJcbiAgICAvKipcclxuICAgICAqIEEgbm90aWZpZXIgbWV0aG9kIHRvIGNhbGwgd2hlbmV2ZXIgdGhlIGxvb2t1cCBmYWlscy5cclxuICAgICAqIEBwYXJhbSBlcnJvciAtIEFuIGVycm9yIG9iamVjdCBhcyBnaXZlbiBieSB0aGUgZmV0Y2ggb3BlcmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2JFcnJvcj86IChlcnJvcj86IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgbm90aWZpZXIgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIGp1c3QgYmVmb3JlIHRoZSBmZXRjaCBvcGVyYXRpb24gaXMgc3RhcnRlZC4gV2hlbiB0aGUgcmVxdWVzdFxyXG4gICAgICogaXMgZmluaXNoZWQgZWl0aGVyIGNiU3VjY2VzcyBvciBjYkVycm9yIHdpbGwgYmUgY2FsbGVkIHRvIGluZGljYXRlIHN1Y2Nlc3Mgb3IgZmFpbHVyZS5cclxuICAgICAqIFRoaXMgY2FsbGJhY2sgaXMgdHlwaWNhbGx5IHVzZWQgZm9yIHNldHRpbmcgbG9hZGluZyBpbmRpY2F0b3JzIGFuZC9vciBkZWJ1Z2dpbmcgcHVycG9zZXMuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2UgdGhlbiB0aGUgZmV0Y2ggb3BlcmF0aW9uIGlzIHNraXBwZWQuIFRoaXMgY2FuIHRoZW4gYmUgdXNlZFxyXG4gICAgICogdG8gY29uZGl0aW9uYWxseSBkcm9wIHJlcXVlc3RzIGZyb20gYmVpbmcgbWFkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXJsIC0gVGhpcyBpcyB0aGUgdXJsIHRoYXQgaXMvd2FzIGZldGNoZWQuIEdvb2QgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cclxuICAgICAqIEBwYXJhbSByZXFJbml0IC0gVGhpcyBpcyB0aGUgUmVxdWVzdEluaXQgb2JqZWN0IHRoYXQgd2FzIHVzZWQgZm9yIHRoZSBmZXRjaCBvcGVyYXRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYlJlcXVlc3Q/OiAodXJsPzogc3RyaW5nLCByZXFJbml0PzogUmVxdWVzdEluaXQpID0+IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIG5vdGlmaWVyIG1ldGhvZCB0byBjYWxsIHdoZW5ldmVyIHRoZSBsb29rdXAgcmVzdWx0cyBoYXZlIGJlZW4gcmVjZWl2ZWQuXHJcbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBsb29rdXAgcmVzdWx0cy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNiU3VjY2Vzcz86IChkYXRhPzogVERhdGFUeXBlKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciBvciBub3QgdGhpcyBzZXR0aW5nLWZlYXR1cmUgaXMgZW5hYmxlZCBvciBub3QuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbmFibGVkOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGJhc2VVcmwgZm9yIHRoZSByZXN0LXNlcnZpY2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBiYXNlVXJsOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIHBhdGggdG8gb3ZlcnJpZGUgdGhlIHBhdGggdG8gdGhlIHJlc3Qtc2VydmljZS5cclxuICAgICAqIElmIG5vdCBzZXQsIGl0IHdpbGwgZGVmYXVsdCB0byBcIlJlc3RTZXJ2aWNlL3Y0XCIuXHJcbiAgICAgKi9cclxuXHJcbiAgICBwdWJsaWMgYmFzZVBhdGg6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzZXJ2aWNlLXNwZWNpZmljIHBhdGggYWRkZWQgdG8gdGhlIGJhc2UtcGF0aC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNlcnZpY2VQYXRoOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBhY3R1YWwgdXJsIGZvciB0aGUgc2VydmljZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB1cmwoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcGFydHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgcGFydHMucHVzaCh0aGlzLmJhc2VVcmwpO1xyXG4gICAgICAgIGlmICh0aGlzLmJhc2VQYXRoKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2godGhpcy5iYXNlUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlcnZpY2VQYXRoKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2godGhpcy5zZXJ2aWNlUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHBhcnRzLmpvaW4oXCIvXCIpKTtcclxuICAgICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHRoZSBjb25zdHJ1Y3Rpb24gb2YgdGhlIGJhc2Utc2V0dGluZ3MgY2xhc3Mgd2l0aCBpdHMgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgVGhlIHNldHRpbmdzIHRoYXQgYXJlIHRvIGJlIHNldCB1cCBmb3IgdGhlIGJhc2Ugc2V0dGluZ3MgY2xhc3MuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBpbml0KHNldHRpbmdzOiBJQmFzZVNldHRpbmdzPFREYXRhVHlwZT4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5iYXNlVXJsID09PSBcInVuZGVmaW5lZFwiIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5zZXJ2aWNlUGF0aCA9PT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcclxuICAgICAgICAgICAgICAgIFwiTXVzdCBoYXZlIHNldHRpbmdzLCB3aXRoIGJhc2VVcmwsIGJhc2VQYXRoIGFuZCBzZXJ2aWNlUGF0aC5cIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVuYWJsZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLmVuYWJsZWQgOiB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBzZXR0aW5ncy5iYXNlVXJsLnJlcGxhY2UoL1xcLyskLywgXCJcIik7XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZVBhdGggPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuYmFzZVBhdGggIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gc2V0dGluZ3MuYmFzZVBhdGgucmVwbGFjZSgvKF5cXC8rKXwoXFwvKyQpL2csIFwiXCIpXHJcbiAgICAgICAgICAgICAgICA6IFwiUmVzdFNlcnZpY2UvdjRcIjtcclxuXHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlUGF0aCA9IHNldHRpbmdzLnNlcnZpY2VQYXRoLnJlcGxhY2UoLyheXFwvKyl8KFxcLyskKS9nLCBcIlwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5jYkVycm9yID0gc2V0dGluZ3MuY2JFcnJvcjtcclxuICAgICAgICB0aGlzLmNiUmVxdWVzdCA9IHNldHRpbmdzLmNiUmVxdWVzdDtcclxuICAgICAgICB0aGlzLmNiU3VjY2VzcyA9IHNldHRpbmdzLmNiU3VjY2VzcztcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogRGVmaW5lcyB0aGUgZGlmZmVyZW50IGNhdGVnb3JpemF0aW9udHlwZXMgdGhhdCBjYW4gYmUgdXNlZCAobW9kZXMpLlxyXG4gKiBAZGVmYXVsdCBBbGxcclxuICovXHJcbmV4cG9ydCBlbnVtIENhdGVnb3JpemF0aW9uVHlwZSB7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY2F0ZWdvcmllcyB3aXRoIGhpdHMgb25seS5cclxuICAgICAqL1xyXG4gICAgQWxsID0gXCJBbGxcIixcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYWxsIGNhdGVnb3JpZXMgKGV2ZW4gZm9yIGNhdGVnb3JpZXMgdGhhdCBoYXMgbm8gaGl0cykuXHJcbiAgICAgKi9cclxuICAgIERvY3VtZW50SGl0c09ubHkgPSBcIkRvY3VtZW50SGl0c09ubHlcIlxyXG59XHJcbiIsIi8qKlxyXG4gKiBEZWZpbmVzIGEgZGljdGlvbmFyeSB0eXBlIGZvciBtYXBwaW5nIENhdGVnb3J5UHJlc2VudGF0aW9uIG9iamVjdHMgdXNpbmcgYSBzdHJpbmcsIHR5cGljYWxseSBhXHJcbiAqIHBpcGUtY29uY2F0ZW5hdGVkIGxpc3Qgb2YgY2F0ZWdvcnlOYW1lcyBhcyBhIHN0cmluZy5cclxuICovXHJcbmV4cG9ydCB0eXBlIENhdGVnb3J5UHJlc2VudGF0aW9uTWFwID0ge1xyXG4gICAgW2NhdGVnb3J5TmFtZXM6IHN0cmluZ106IENhdGVnb3J5UHJlc2VudGF0aW9uO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBjb25maWd1cmF0aW9uIGRlc2NyaWJlcyBob3cgdGhlIHNwZWNpZmljIG5vZGUgaXMgdG8gYmUgZmlsdGVyZWQsIHNvcnRlZCwgYW5kL29yIGdyb3VwZWQuXHJcbiAqIEFwcGxpZWQgaW4gdGhpcyBvcmRlcjpcclxuICogLSBncm91cGluZzogR3JvdXBpbmcgbWlnaHQgY2hhbmdlIGFsbCBpdGVtcyBvbiB0aGlzIGxldmVsIChpbnRyb2R1Y2VzIGFuIGV4dHJhIGxheWVyKS5cclxuICogICAgICAgICAgICAgSWYgYW4gZXh0cmEgZ3JvdXAtbGV2ZWwgaXMgaW50cm9kdWNlZCB0aGVuIGl0IHdpbGwgYmUgc3ViamVjdCBmb3IgYWxsXHJcbiAqICAgICAgICAgICAgIGNvbnNlY3V0aXZlIHByb2Nlc3NlcyBpbiB0aGlzIGNsYXNzLlxyXG4gKiAtIGZpbHRlcjogUmVkdWNlcyB3aGljaCBjaGlsZC1jYXRlZ29yaWVzIHRoYXQgcGFzc2VzIHRocm91Z2ggYmFzZWQgb24gZmlsdGVyLlxyXG4gKiAtIHNvcnRpbmc6IENoYW5nZXMgdGhlIG9yZGVyIG9mIHRoZSBjYXRlZ29yaWVzLlxyXG4gKiAtIGxpbWl0OiBMaW1pdHMgdGhlIG5vIG9mIGNhdGVnb3JpZXMgdG8gZGlzcGxheS5cclxuICogLSBleHBhbmRlZDogSWYgYW55IGNhdGVnb3JpZXMgYXJlIGxlZnQgdG8gYmUgc2hvd24gdGhlbiB0aGlzIHNldHRpbmcgaW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90XHJcbiAqICAgICAgICAgICAgIHRvIHNob3cgdGhlIGNhdGVnb3JpZXMgaW4gdGhlIFVJLiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgYXZhaWxhYmxlIGZvciB0aGUgcm9vdC1cclxuICogICAgICAgICAgICAgbGV2ZWwgbm9kZSwgYXMgaXQgYWx3YXlzIHNob3dzIHRoZSBmaXJzdC1sZXZlbCBvZiBjYXRlZ29yeS1ub2Rlcy5cclxuICpcclxuICogQGRlZmF1bHQgLSBBbGwgZmVhdHVyZXMgZGlzYWJsZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlQcmVzZW50YXRpb24ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGNyZWF0ZSBhbiBleHRyYSBsZXZlbCBvZiBjYXRlZ29yaWVzIHRoYXQgZ3JvdXAgaXRlbXMgdG9nZXRoZXIuIERlZmF1bHQ6IERpc2FibGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBncm91cD86IEdyb3VwQ29uZmlndXJhdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gaW5jbHVkZSBvbmx5IGNhdGVnb3JpZXMgdGhhdCBtYXRjaCB0aGUgcHJvdmlkZWQgZmlsdGVyIChyZWdleCArIG1pbkNvdW50KS4gRGVmYXVsdDogRGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbHRlcj86IEZpbHRlckNvbmZpZ3VyYXRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGNoYW5nZSB0aGUgb3JkZXIgb2YgdGhlIGNhdGVnb3JpZXMuIERlZmF1bHQ6IERpc2FibGVkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzb3J0PzogU29ydENvbmZpZ3VyYXRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIGxpbWl0IHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gZGlzcGxheS4gRGVmYXVsdDogRGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxpbWl0PzogTGltaXRQYWdlQ29uZmlndXJhdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gaW5kaWNhdGUgd2hldGhlciB0aG8gc2hvdyBjYXRlZ29yeS1jaGlsZHJlbiBvciBub3QuIERlZmF1bHQ6IHVuZGVmaW5lZCAoTi9BIGZvciB0aGUgcm9vdC1lbGVtZW50KVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhwYW5kZWQ/OiBib29sZWFuIHwgbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBDYXRlZ29yeVByZXNlbnRhdGlvbiBpbnN0YW5jZS4gRGVmYXVsdDogQWxsIGZlYXR1cmVzIGRpc2FibGVkLlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIEEgQ2F0ZWdvcnlQcmVzZW50YXRpb24gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzPzogQ2F0ZWdvcnlQcmVzZW50YXRpb24pIHtcclxuICAgICAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8ICh7fSBhcyBDYXRlZ29yeVByZXNlbnRhdGlvbik7XHJcbiAgICAgICAgdGhpcy5leHBhbmRlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5leHBhbmRlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLmV4cGFuZGVkIDogbnVsbDtcclxuICAgICAgICB0aGlzLmdyb3VwID0gbmV3IEdyb3VwQ29uZmlndXJhdGlvbihzZXR0aW5ncy5ncm91cCk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBuZXcgRmlsdGVyQ29uZmlndXJhdGlvbihzZXR0aW5ncy5maWx0ZXIpO1xyXG4gICAgICAgIHRoaXMuc29ydCA9IG5ldyBTb3J0Q29uZmlndXJhdGlvbihzZXR0aW5ncy5zb3J0KTtcclxuICAgICAgICB0aGlzLmxpbWl0ID0gbmV3IExpbWl0UGFnZUNvbmZpZ3VyYXRpb24oc2V0dGluZ3MubGltaXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBob3cgZ3JvdXBpbmcgaXMgdG8gYmUgYXBwbGllZCBvbiBhIGdpdmVuIGNhdGVnb3JpZXMnIGNoaWxkcmVuXHJcbiAqIENhbiBiZSBzZXQgdG8gb25seSBiZSBleGVjdXRlZCB3aGVuIHRoZSBudW1iZXIgb2YgY2hpbGQtY2F0ZWdvcmllcyBleGNlZWRzIGEgZ2l2ZW4gbnVtYmVyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdyb3VwQ29uZmlndXJhdGlvbiB7XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZlYXR1cmUuIERlZmF1bHQ6IGZhbHNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbmFibGVkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9ubHkgYXBwbGllcyBncm91cGluZyB3aGVuIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gcmVhY2hlcyB0aGlzIG51bWJlci4gRGVmYXVsdDogMjBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1pbkNvdW50PzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzcGxheU5hbWUgb3IgTWF0Y2hDb3VudC4gRGVmYXVsdDogR3JvdXBpbmdNb2RlLkRpc3BsYXlOYW1lLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbW9kZT86IEdyb3VwaW5nTW9kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZWdleCB0byBncm91cCBvbi4gRGVmYXVsdDogTWF0Y2hlcyBmaXJzdCBjaGFyYWN0ZXIgL14uL1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWF0Y2g/OiBSZWdFeHA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY2FzaW5nIHRvIGFwcGx5IG9uIHRoZSBtYXRjaCBncm91cCAoJDApLiBEZWZhdWx0OiBDYXNpbmcuVGl0bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoQ2FzZT86IENhc2luZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9ubHkgY3JlYXRlcyB0aGUgZ3JvdXAgd2hlbiBudW1iZXIgb2YgbWF0Y2hlcyBwZXIgZ3JvdXAgcmVhY2hlcyB0aGlzIG51bWJlci4gRGVmYXVsdDogNVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWluQ291bnRQZXJHcm91cD86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBHcm91cGluZ0NvbmZpZ3VyYXRpb24gaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIEEgR3JvdXBpbmdQcmVzZW50YXRpb24gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGJlaGF2aW9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncz86IEdyb3VwQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwgKHt9IGFzIEdyb3VwQ29uZmlndXJhdGlvbik7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLmVuYWJsZWQgIT09IFwidW5kZWZpbmVkXCIgPyBzZXR0aW5ncy5lbmFibGVkIDogZmFsc2U7XHJcbiAgICAgICAgdGhpcy5taW5Db3VudCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5taW5Db3VudCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLm1pbkNvdW50IDogMjA7XHJcbiAgICAgICAgdGhpcy5tb2RlID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLm1vZGUgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gKHNldHRpbmdzLm1vZGUgYXMgR3JvdXBpbmdNb2RlKVxyXG4gICAgICAgICAgICAgICAgOiBHcm91cGluZ01vZGUuRGlzcGxheU5hbWU7XHJcbiAgICAgICAgdGhpcy5tYXRjaCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5tYXRjaCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0eXBlb2Ygc2V0dGluZ3MubWF0Y2ggPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBSZWdFeHAoc2V0dGluZ3MubWF0Y2gpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5tYXRjaFxyXG4gICAgICAgICAgICAgICAgOiAvXi4vO1xyXG4gICAgICAgIHRoaXMubWF0Y2hDYXNlID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLm1hdGNoQ2FzZSAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyAoc2V0dGluZ3MubWF0Y2hDYXNlIGFzIENhc2luZylcclxuICAgICAgICAgICAgICAgIDogQ2FzaW5nLlRpdGxlO1xyXG5cclxuICAgICAgICB0aGlzLm1pbkNvdW50UGVyR3JvdXAgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MubWluQ291bnRQZXJHcm91cCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyBzZXR0aW5ncy5taW5Db3VudFBlckdyb3VwXHJcbiAgICAgICAgICAgICAgICA6IDU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE1hdGNoPyhpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgdGVzdCA9IHRoaXMubWF0Y2guZXhlYyhpbnB1dCk7XHJcbiAgICAgICAgaWYgKHRlc3QgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5tYXRjaENhc2UpIHtcclxuICAgICAgICAgICAgY2FzZSBDYXNpbmcuTG93ZXI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVzdFswXS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjYXNlIENhc2luZy5VcHBlcjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0WzBdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FzaW5nLlRpdGxlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICB0ZXN0WzBdWzBdLnRvVXBwZXJDYXNlKCkgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3RbMF0uc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNhc2UgQ2FzaW5nLlVuY2hhbmdlZDpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0WzBdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGVudW0gR3JvdXBpbmdNb2RlIHtcclxuICAgIERpc3BsYXlOYW1lID0gXCJEaXNwbGF5TmFtZVwiLFxyXG4gICAgTWF0Y2hDb3VudCA9IFwiTWF0Y2hDb3VudFwiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENhc2luZyB7XHJcbiAgICBVbmNoYW5nZWQgPSBcIlVuY2hhbmdlZFwiLFxyXG4gICAgVXBwZXIgPSBcIlVwcGVyXCIsIC8vIFVQUEVSXHJcbiAgICBMb3dlciA9IFwiTG93ZXJcIiwgLy8gbG93ZXJcclxuICAgIFRpdGxlID0gXCJUaXRsZVwiIC8vIFRpdGxlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGhvdyB0byBmaWx0ZXIgaXRlbXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29uZmlndXJhdGlvbiB7XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZlYXR1cmUuIERlZmF1bHQ6IGZhbHNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbmFibGVkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjdXJyZW50IHJlZ2V4IG1hdGNoIGZpbHRlciwgYXBwbGllZCBvbiB0aGUgTmFtZSBvciBEaXNwbGF5TmFtZSAoc2VlIG1hdGNoTW9kZSkuIERlZmF1bHQ6IFwiXCIgKGVtcHR5IC0gbm8gbWF0Y2hlcylcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoPzogUmVnRXhwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGN1cnJlbnQgbWF0Y2gtbW9kZSBmb3IgdGhlIHJlZ2V4IGZpbHRlci4gRGVmYXVsdDogRGlzcGxheU5hbWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoTW9kZT86IE1hdGNoTW9kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIG5vIG9mIG1hdGNoZXMgZm9yIHRoZSBjYXRlZ29yeSB0byBiZSBpbmNsdWRlZC4gRGVmYXVsdDogLTEgKGRpc2FibGVkKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWF4TWF0Y2hDb3VudD86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpbnRzIHRoZSBVSSB0byBzaG93IGFuIGlucHV0IGJveCB3aGVuIHRoZSBudW1iZXIgb2YgaGl0cyBleGNlZWRzIGEgZ2l2ZW4gbnVtYmVyLiBEZWZhdWx0OiAyMFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdWlIaW50U2hvd0ZpbHRlcklucHV0VGhyZXNob2xkPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIEZpbHRlckNvbmZpZ3VyYXRpb24gaW5zdGFuY2UgdGhhdCBkZXNjcmliZXMgaG93IHRvIGZpbHRlciBjYXRlZ29yaWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyBBIEZpbHRlckNvbmZpZ3VyYXRpb24gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzPzogRmlsdGVyQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwgKHt9IGFzIEZpbHRlckNvbmZpZ3VyYXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLmVuYWJsZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLmVuYWJsZWQgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXRjaCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5tYXRjaCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0eXBlb2Ygc2V0dGluZ3MubWF0Y2ggPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBSZWdFeHAoc2V0dGluZ3MubWF0Y2gpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5tYXRjaFxyXG4gICAgICAgICAgICAgICAgOiBuZXcgUmVnRXhwKFwiXCIpO1xyXG5cclxuICAgICAgICB0aGlzLm1hdGNoTW9kZSA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5tYXRjaE1vZGUgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gKHNldHRpbmdzLm1hdGNoTW9kZSBhcyBNYXRjaE1vZGUpXHJcbiAgICAgICAgICAgICAgICA6IE1hdGNoTW9kZS5EaXNwbGF5TmFtZTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXhNYXRjaENvdW50ID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLm1heE1hdGNoQ291bnQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gc2V0dGluZ3MubWF4TWF0Y2hDb3VudFxyXG4gICAgICAgICAgICAgICAgOiAtMTsgLy8gZGlzYWJsZWRcclxuXHJcbiAgICAgICAgdGhpcy51aUhpbnRTaG93RmlsdGVySW5wdXRUaHJlc2hvbGQgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MudWlIaW50U2hvd0ZpbHRlcklucHV0VGhyZXNob2xkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHNldHRpbmdzLnVpSGludFNob3dGaWx0ZXJJbnB1dFRocmVzaG9sZFxyXG4gICAgICAgICAgICAgICAgOiAyMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGVudW0gTWF0Y2hNb2RlIHtcclxuICAgIE5hbWUgPSBcIk5hbWVcIixcclxuICAgIERpc3BsYXlOYW1lID0gXCJEaXNwbGF5TmFtZVwiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGhvdyBzb3J0aW5nIGlzIHRvIGJlIGFwcGxpZWQuXHJcbiAqIEZpcnN0IGhhbmRsZXMgdGhlIHN0YXRpYyBzdHJpbmdzLCB0aGVuIGFwcGxpZXMgdGhlIFNvcnRQYXJ0Q29uZmlndXJhdGlvbnMgdW50aWwgdGhlcmUgYXJlIG5vIGl0ZW1zIGxlZnQuXHJcbiAqIE5vdGU6IElmIHRoZXJlIGFyZSBhZGRpdGlvbmFsIGl0ZW1zIGxlZnQgd2hlbiBkb25lIGFib3ZlIHRoZW4gdGhlc2Ugd2lsbCBiZSBhZGRlZCBhdCB0aGUgYm90dG9tIGluIHRoZSBvcmlnaW5hbCBzb3J0aW5nIG9yZGVyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNvcnRDb25maWd1cmF0aW9uIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgcHVibGljIGVuYWJsZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnRzPzogU29ydFBhcnRDb25maWd1cmF0aW9uW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgc29ydC1jb25maWd1cmF0aW9uIHRoYXQgZGVmaW5lcyBob3cgdG8gb3JkZXIgdGhlIGl0ZW1zIHNjb3BlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgQSBTb3J0Q29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIHdhbnRlZCBiZWhhdmlvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncz86IFNvcnRDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCAoe30gYXMgU29ydENvbmZpZ3VyYXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLmVuYWJsZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLmVuYWJsZWQgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5wYXJ0cyAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLnNldHVwUGFydHMoc2V0dGluZ3MucGFydHMpXHJcbiAgICAgICAgICAgICAgICA6IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBQYXJ0cz8ocGFydHM6IFNvcnRQYXJ0Q29uZmlndXJhdGlvbltdKSB7XHJcbiAgICAgICAgbGV0IG9rOiBTb3J0UGFydENvbmZpZ3VyYXRpb25bXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHMgb2YgcGFydHMpIHtcclxuICAgICAgICAgICAgb2sucHVzaChuZXcgU29ydFBhcnRDb25maWd1cmF0aW9uKHMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9rO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBob3cgc29ydGluZyBpcyB0byBiZSBhcHBsaWVkIGZvciB0aGUgZ2l2ZW4gcGFydC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTb3J0UGFydENvbmZpZ3VyYXRpb24ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIHRoZSBtYXRjaCAoc3RyaW5nIG9yIHJlZ2V4KSB0aGF0IGRlZmluZXMgdGhlIHNjb3BlIG9mIGl0ZW1zIHRvIHNvcnQuIERlZmF1bHQ6IFwiLipcIiAoYW55dGhpbmcpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaD86IFJlZ0V4cCB8IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjdXJyZW50IG1hdGNoLW1vZGUgZm9yIHRoZSByZWdleCBmaWx0ZXIuIERlZmF1bHQ6IERpc3BsYXlOYW1lXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaE1vZGU/OiBNYXRjaE1vZGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmVzIHRoZSBtZXRob2QvZmllbGQgYW5kIG9yZGVyIHRvIHVzZSB3aGVuIHNvcnRpbmcuIERlZmF1bHQ6IE9yaWdpbmFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzb3J0TWV0aG9kPzogU29ydE1ldGhvZDtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIHNvcnQtcGFydCB0aGF0IGRlZmluZXMgaG93IHRvIG9yZGVyIHRoZSBpdGVtcyBzY29wZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIEEgU29ydFBhcnRDb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgd2FudGVkIGJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzPzogU29ydFBhcnRDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCAoe30gYXMgU29ydFBhcnRDb25maWd1cmF0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXRjaCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5tYXRjaCAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLm1hdGNoIDogLy4qLztcclxuXHJcbiAgICAgICAgdGhpcy5tYXRjaE1vZGUgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MubWF0Y2hNb2RlICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IChzZXR0aW5ncy5tYXRjaE1vZGUgYXMgTWF0Y2hNb2RlKVxyXG4gICAgICAgICAgICAgICAgOiBNYXRjaE1vZGUuRGlzcGxheU5hbWU7XHJcblxyXG4gICAgICAgIHRoaXMuc29ydE1ldGhvZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5zb3J0TWV0aG9kICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IChzZXR0aW5ncy5zb3J0TWV0aG9kIGFzIFNvcnRNZXRob2QpXHJcbiAgICAgICAgICAgICAgICA6IFNvcnRNZXRob2QuT3JpZ2luYWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGhvdyB0byBzb3J0IHRoZSBwYXJ0LlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGVudW0gU29ydE1ldGhvZCB7XHJcbiAgICAvKipcclxuICAgICAqIFNvcnQgaW4gdGhlIG9yZGVyIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAqL1xyXG4gICAgT3JpZ2luYWwgPSBcIk9yaWdpbmFsXCIsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0IEFzY2VuZGluZyBieSBOYW1lL0Rpc3BsYXlOYW1lIGZpZWxkLlxyXG4gICAgICovXHJcbiAgICBBbHBoYUFzYyA9IFwiQWxwaGFBc2NcIixcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNvcnQgRGVzY2VuZGluZyBieSBOYW1lL0Rpc3BsYXlOYW1lIGZpZWxkLlxyXG4gICAgICovXHJcbiAgICBBbHBoYURlc2MgPSBcIkFscGhhRGVzY1wiLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU29ydCBBc2NlbmRpbmcgYnkgTWF0Y2hDb3VudCBmaWVsZC5cclxuICAgICAqL1xyXG4gICAgQ291bnRBc2MgPSBcIkNvdW50QXNjXCIsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0IERlc2NlbmRpbmcgYnkgTWF0Y2hDb3VudCBmaWVsZC5cclxuICAgICAqL1xyXG4gICAgQ291bnREZXNjID0gXCJDb3VudERlc2NcIlxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBwYWdpbmcgcGFyYW1ldGVycyBmb3IgY29udHJvbGxpbmcgd2hpY2ggcmFuZ2Ugb2YgaXRlbXMgdG8gc2hvdy5cclxuICogVXNlZCB0byBsaW1pdCB0aGUgbnVtYmVyIG9mIGl0ZW1zIHRvIGRpc3BsYXkuXHJcbiAqIFRoZSByZWd1bGFyIHVzZS1jYXNlIGlzIHRvIHNldCBhIHBhZ2VTaXplLCB3aGljaCBhY3RzIGFzIHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gc2hvdy5cclxuICogVGhlIGxpbWl0IGlzIGFsc28gZGVzaWduZWQgdG8gYWxsb3cgcGFnaW5nLCBieSBjaGFuZ2luZyBwYWdlIGZyb20gMSBhbmQgdGh1cyBhbGxvd2luZ1xyXG4gKiBwYWdpbmcgdGhlIGNhdGVnb3JpZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGltaXRQYWdlQ29uZmlndXJhdGlvbiB7XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGZlYXR1cmUuIERlZmF1bHQ6IGZhbHNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbmFibGVkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgdGhlIHBhZ2UgdG8gc2hvdy4gRGVmYXVsdDogMVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFnZT86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgdGhlIHBhZ2VTaXplIHRoYXQgd2l0aCB0aGUgYHBhZ2VgIGNvbnRyb2xzIHdoaWNoIGl0ZW0tcmFuZ2UgdG8gc2hvdy4gRGVmYXVsdDogNVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFnZVNpemU/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaW50cyB0aGUgdWkgdG8gc2hvdyBhIHBhZ2VyIHRvIGFsbG93IGJyb3dzaW5nIHRoZSBjYXRlZ29yaWVzIGluIHRoZSBub2RlLiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1aUhpbnRTaG93UGFnZXI/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIExpbWl0UGFnZUNvbmZpZ3VyYXRpb24gaW5zdGFuY2UuIERlZmF1bHQ6IFNob3cgZmlyc3QgcGFnZSwgd2l0aCA1IGl0ZW1zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyBBIExpbWl0UGFnZUNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSB3YW50ZWQgYmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M/OiBMaW1pdFBhZ2VDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCAoe30gYXMgTGltaXRQYWdlQ29uZmlndXJhdGlvbik7XHJcblxyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5lbmFibGVkICE9PSBcInVuZGVmaW5lZFwiID8gc2V0dGluZ3MuZW5hYmxlZCA6IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnBhZ2UgPSB0eXBlb2Ygc2V0dGluZ3MucGFnZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHNldHRpbmdzLnBhZ2UgOiAxO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRQYWdlU2l6ZVRocm93T25OZWdhdGl2ZSgpIHtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnBhZ2VTaXplIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibGltaXQgcGFnZVNpemUgY2Fubm90IGJlIG5lZ2F0aXZlXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLnBhZ2VTaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFnZVNpemUgPVxyXG4gICAgICAgICAgICB0eXBlb2Ygc2V0dGluZ3MucGFnZVNpemUgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gc2V0UGFnZVNpemVUaHJvd09uTmVnYXRpdmUoKVxyXG4gICAgICAgICAgICAgICAgOiA1O1xyXG5cclxuICAgICAgICB0aGlzLnVpSGludFNob3dQYWdlciA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy51aUhpbnRTaG93UGFnZXIgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gc2V0dGluZ3MudWlIaW50U2hvd1BhZ2VyXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSUNhdGVnb3J5IH0gZnJvbSBcIi4uL0RhdGFcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgRmlsdGVyIGludGVyZmFjZSBkZWZpbmVzIHdoYXQgaW5mb3JtYXRpb24gaXMgaGVsZCBmb3IgYSBjaG9zZW4gY2F0ZWdvcnkgYXMgYSBmaWx0ZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlsdGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIEZpbHRlciBpbnN0YW5jZSwgaG9sZGluZyB0aGUgZGlzcGxheU5hbWUgYW5kIGEgY29weSBvZiB0aGUgb3JpZ2luYWwgQ2F0ZWdvcnkgKGV4Y2x1ZGluZyBjYXRlZ29yeS5jaGlsZHJlbikuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRpc3BsYXlOYW1lIEhvbGRzIGFuIGFycmF5IG9mIGFsbCBkaXNwbGF5TmFtZXMgZm9yIHRoZSBwYXRoIHRvIHRoaXMgY2F0ZWdvcnkuXHJcbiAgICAgKiBAcGFyYW0gY2F0ZWdvcnkgQSBjb3B5L3JlZmVyZW5jZSB0byB0aGUgYWN0dWFsIGNhdGVnb3J5IHNlbGVjdGVkIChmcm9tIHdoYXQgd2FzIHJlY2VpdmVkIGluIHRoZSBjYXRlZ29yaXplIGNhbGwpLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlzcGxheU5hbWU6IHN0cmluZ1tdLCBwdWJsaWMgY2F0ZWdvcnk6IElDYXRlZ29yeSkge31cclxufVxyXG4iLCIvKipcclxuICogT3JkZXJpbmcgYWxnb3JpdGhtIG9wdGlvbnMuIEFsbG93ZWQgdmFsdWVzOiBcIkRhdGVcIiwgXCJSZWxldmFuY2VcIlxyXG4gKiBAZGVmYXVsdCBcIlJlbGV2YW5jZVwiXHJcbiAqL1xyXG5leHBvcnQgZW51bSBPcmRlckJ5IHtcclxuICAgIC8qKlxyXG4gICAgICogT3JkZXIgcmVzdWx0cyBieSBSZWxldmFuY2UsIGhpZ2hlc3QgZmlyc3QuXHJcbiAgICAgKi9cclxuICAgIFJlbGV2YW5jZSA9IFwiUmVsZXZhbmNlXCIsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcmRlciByZXN1bHRzIGJ5IGRhdGUsIG5ld2VzdCBmaXJzdC5cclxuICAgICAqL1xyXG4gICAgRGF0ZSA9IFwiRGF0ZVwiXHJcbn1cclxuIiwiaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XHJcblxyXG5pbXBvcnQgeyBDYXRlZ29yaXphdGlvblR5cGUgfSBmcm9tIFwiLi9DYXRlZ29yaXphdGlvblR5cGVcIjtcclxuaW1wb3J0IHsgT3JkZXJCeSB9IGZyb20gXCIuL09yZGVyQnlcIjtcclxuaW1wb3J0IHsgU2VhcmNoVHlwZSB9IGZyb20gXCIuL1NlYXJjaFR5cGVcIjtcclxuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSBcIi4vRmlsdGVyXCI7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIGRhdGUtc3BlY2lmaWNhdGlvbiB0aGF0IGNhbiBlaXRoZXIgYmUgZml4ZWQgb3IgYSBkZWx0YSBmcm9tIG5vdy5cclxuICogSWYgdGhlIGRhdGUgaXMgYSBtb21lbnQgRHVyYXRpb25JbnB1dE9iamVjdCB3ZSBjYWxjdWxhdGUgdGhlIGRhdGUgaW4gcmVhbC10aW1lIHdoZW4gdGhlIGZldGNoLWNhbGwgaXMgZXhlY3V0ZWQuXHJcbiAqIE5vdGUgdGhhdCB0aGUgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMuIEkuZS4geyBNOiAtMSB9IC8vIE9uZSBtb250aCBhZ29cclxuICogU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2R1cmF0aW9ucy8uXHJcbiAqIE90aGVyd2lzZSB3ZSBhc3N1bWUgdGhhdCB0aGUgdmFsdWUgaXMgYSBmaXhlZCB2YWx1ZSB0aGF0IHRoZSBtb21lbnQgbGlicmFyeSBjYW4gcGFyc2Ugd2l0aG91dCBhbnkgaGVscGluZyBmb3JtYXR0aW5nXHJcbiAqIHN0cmluZ3MuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy8uXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEYXRlU3BlY2lmaWNhdGlvbiA9XHJcbiAgICB8IERhdGVcclxuICAgIHwgc3RyaW5nXHJcbiAgICB8IG51bWJlclxyXG4gICAgfCBtb21lbnQuRHVyYXRpb25JbnB1dE9iamVjdDtcclxuXHJcbmV4cG9ydCBjbGFzcyBRdWVyeSB7XHJcbiAgICAvKipcclxuICAgICAqIEFueSBzdHJpbmcgdGhhdCB5b3Ugd2FudCB0byBpZGVudGlmeSB0aGUgY2xpZW50IHdpdGguIENhbiBiZSB1c2VkIGluIHRoZSBjYXRlZ29yaWVzIGNvbmZpZ3VyYXRpb24gYW5kIGluIHRoZSByZWxldmFuY2UgdHVuaW5nLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xpZW50SWQ/OiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBzcGVjaWZ5IHdoZXRoZXIgY2F0ZWdvcml6ZSBjYWxscyBzaG91bGQgYWx3YXlzIHJldHVybiBhbGwgY2F0ZWdvcmllcyBvciBqdXN0IGNhdGVnb3JpZXMgdGhhdCBoYXMgbWF0Y2hlcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhdGVnb3JpemF0aW9uVHlwZT86IENhdGVnb3JpemF0aW9uVHlwZSA9IENhdGVnb3JpemF0aW9uVHlwZS5BbGw7XHJcblxyXG4gICAgLy8gLyoqXHJcbiAgICAvLyAgKiBDb250cm9scyB0aGUgY2F0ZWdvcnkgZXhwYW5zaW9uIG92ZXJyaWRlcy4gVXNlZCB0byBvdmVycmlkZSB0aGUgZXhwYW5kZWQgcHJvcGVydHkgZm9yIGNhdGVnb3JpZXMgaW4gdGhlIGNhdGVnb3J5LXRyZWUuXHJcbiAgICAvLyAgKiBTZXQgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIHRvZ2dsZSBmb3IgZXhwYW5kaW5nL2NvbGxhcHNpbmcgY2F0ZWdvcmllcy5cclxuICAgIC8vICAqL1xyXG4gICAgLy8gcHVibGljIGNsaWVudENhdGVnb3J5RXhwYW5zaW9uPzogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcclxuXHJcbiAgICAvLyAvKipcclxuICAgIC8vICAqIFRoaXMgaXMgYSBoYW5keSBoZWxwZXIgdG8gaGVscCB0aGUgdXNlciBuYXZpZ2F0aW5nIHRoZSBjYXRlZ29yeS10cmVlLiBJdCBpcyB0eXBpY2FsbHkgdXNlZCB3aGVuIGEgZ2l2ZW4gbm9kZVxyXG4gICAgLy8gICogaGFzIGEgbG90IG9mIGNhdGVnb3JpZXMuIFRoaXMgb2Z0ZW4gaGFwcGVucyB3aXRoIGkuZS4gdGhlIEF1dGhvciBjYXRlZ29yeSBub2RlLiBXaXRoIHRoaXMgZmVhdHVyZSB5b3UgY2FuXHJcbiAgICAvLyAgKiBwcmVzZW50IHRoZSB1c2VyIHdpdGggYSBmaWx0ZXItZWRpdC1ib3ggaW4gdGhlIEF1dGhvciBub2RlLCBhbmQgYWxsb3cgdGhlbSB0byBzdGFydCB0eXBpbmcgdmFsdWVzIHdoaWNoIHdpbGxcclxuICAgIC8vICAqIHRoZW4gZmlsdGVyIHRoZSBjYXRlZ29yeS1ub2RlcycgZGlzcGxheU5hbWUgdG8gb25seSBtYXRjaCB0aGUgdGV4dCBlbnRlcmVkLlxyXG4gICAgLy8gICpcclxuICAgIC8vICAqIE5vZGVzIHRoYXQgZG9lc24ndCBoYXZlIGFueSBmaWx0ZXJzIGFyZSByZXR1cm5lZCwgZXZlbiBpZiBmaWx0ZXJzIGZvciBvdGhlciBub2RlcyBhcmUgZGVmaW5lZC5cclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiBBbHNvIG5vdGUgdGhhdCB0aGUgZmlsdGVyIGF1dG9tYXRpY2FsbHkgc2V0cyB0aGUgZXhwYW5kZWQgcHJvcGVydHkgZm9yIGFmZmVjdGVkIG5vZGVzLCB0byBoZWxwIGFsbG93IHRoZW0gdG9cclxuICAgIC8vICAqIGF1dG9tYXRpY2FsbHkgYmUgc2hvd24sIHdpdGggdGhlaXIgaW1tZWRpYXRlIGNoaWxkcmVuLlxyXG4gICAgLy8gICpcclxuICAgIC8vICAqIFRoZSBhY3R1YWwgdmFsdWUgaXMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgdGhhdCBpbmRpY2F0ZXMgd2hpY2ggY2F0ZWdvcnktbm9kZXMgdG8gZmlsdGVyIGFuZCB3aGF0IHBhdHRlcm4gdG8gZmlsdGVyXHJcbiAgICAvLyAgKiB0aGF0IG5vZGUgd2l0aC5cclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiBJdCB3aWxsIG5vdCBleGVjdXRlIGFueSBzZXJ2ZXItc2lkZSBjYWxscywgYnV0IG1heSBydW4gdHJpZ2dlcnMgbGVhZGluZyB0byBuZXcgY29udGVudCByZXR1cm5lZCBpbiBjYWxsYmFja3MuXHJcbiAgICAvLyAgKlxyXG4gICAgLy8gICogKipOb3RlIDE6KiogVGhpcyBpcyBvbmx5IHVzZWQgd2hlbjpcclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiAqKjEuIFRoZSBjYXRlZ29yaXplIHNlcnZpY2UgaXMgZW5hYmxlZCBpbiB0aGUgW1tTZWFyY2hDbGllbnRdXSBjb25zdHJ1Y3RvciAobWF5IGJlIGRpc2FibGVkIHZpYSB0aGUgW1tTZXR0aW5nc11dXHJcbiAgICAvLyAgKiBvYmplY3QpLioqXHJcbiAgICAvLyAgKiAqKjIuIFlvdSBoYXZlIGVuYWJsZWQgYSBbW0NhdGVnb3JpemVTZXR0aW5ncy5jYlN1Y2Nlc3NdXSBjYWxsYmFjay4qKlxyXG4gICAgLy8gICogKiozLiBZb3UgaGF2ZSBub3QgZGlzYWJsZWQgdGhlIFtbQ2F0ZWdvcml6ZVRyaWdnZXJzLmNsaWVudENhdGVnb3J5RmlsdGVyQ2hhbmdlZF1dIHRyaWdnZXIuKipcclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiAqKk5vdGUgMjoqKiBbW2RlZmVyVXBkYXRlc11dIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGlzIGZ1bmN0aW9uYWxpdHkuIERlZmVycmluZyBvbmx5IGFmZmVjdHMgY2FsbHMgdG8gdGhlXHJcbiAgICAvLyAgKiBzZXJ2ZXIgYW5kIGRvZXMgbm90IHN0b3AgY2F0ZWdvcml6ZS1jYWxsYmFja3MgZnJvbSBiZWluZyBydW4gLSBhcyBsb25nIGFzIHRoZXkgYXJlIHRoZSByZXN1bHQgb2YgY2hhbmdpbmcgdGhlXHJcbiAgICAvLyAgKiBbW2NsaWVudENhdGVnb3J5RmlsdGVyXV0uXHJcbiAgICAvLyAgKlxyXG4gICAgLy8gICogQGV4YW1wbGUgSG93IHRvIHNldCB0aGUgY2xpZW50Q2F0ZWdvcnlGaWx0ZXI6XHJcbiAgICAvLyAgKlxyXG4gICAgLy8gICogICAgICBxdWVyeS5jbGllbnRDYXRlZ29yeUZpbHRlciA9IHtcclxuICAgIC8vICAqICAgICAgICAgLy8gU2hvdyBvbmx5IEF1dGhvci1ub2RlcyB3aXRoIERpc3BsYXlOYW1lIHRoYXQgbWF0Y2hlcyAvam9obi8uXHJcbiAgICAvLyAgKiAgICAgICAgIEF1dGhvcjogL2pvaG4vLFxyXG4gICAgLy8gICogICAgICAgICAvLyBTaG93IG9ubHkgbm9kZXMgaW4gdGhlIFN5c3RlbS9GaWxlL1NlcnZlciBub2RlIHRoYXQgbWF0Y2hlcyAvcHJvamVjdC9cclxuICAgIC8vICAqICAgICAgICAgU3lzdGVtX0ZpbGVfU2VydmVyOiAvcHJvamVjdC8sXHJcbiAgICAvLyAgKiAgICAgIH1cclxuICAgIC8vICAqIG9yXHJcbiAgICAvLyAgKiAgICAgIHF1ZXJ5LmNsaWVudENhdGVnb3J5RmlsdGVyW1wiQXV0aG9yXCJdID0gL2pvaG4vXHJcbiAgICAvLyAgKlxyXG4gICAgLy8gICogQXMgeW91IGNhbiBzZWUgZnJvbSB0aGUgZXhhbXBsZSB0aGUga2V5IGlzIGNvbXBvc2VkIGJ5IGpvaW5pbmcgdGhlIGNhdGVnb3J5TmFtZSB3aXRoIGFuIHVuZGVyc2NvcmUuIElmIHlvdVxyXG4gICAgLy8gICogZXhwZXJpZW5jZSBwcm9ibGVtcyB3aXRoIHRoaXMgKGkuZS4geW91ciBjYXRlZ29yaWVzIGhhdmUgYF9gIGluIHRoZWlyIG5hbWVzIGFscmVhZHkpIHRoZW4gY2hhbmdlIHRoZVxyXG4gICAgLy8gICogW1tDYXRlZ29yaXplU2V0dGluZ3MuY2xpZW50Q2F0ZWdvcnlGaWx0ZXJTZXBDaGFyXV0sIGZvciBleGFtcGxlIHRvIGB8YC4gTm90ZSB0aGF0IGlmIHlvdSBkbywgdGhlbiB5b3UgcHJvYmFibHlcclxuICAgIC8vICAqIGFsc28gbmVlZCB0byBxdW90ZSB0aGUga2V5cyB0aGF0IGhhdmUgdGhlIHBpcGUtY2hhcmFjdGVyLlxyXG4gICAgLy8gICpcclxuICAgIC8vICAqIEBleGFtcGxlIFRoZSBhYm92ZSBleGFtcGxlIHdpbGwgd2l0aCBbW0NhdGVnb3JpemVTZXR0aW5ncy5jbGllbnRDYXRlZ29yeUZpbHRlclNlcENoYXJdXSBzZXQgdG8gYHxgIGJlY29tZTpcclxuICAgIC8vICAqXHJcbiAgICAvLyAgKiAgICAgY29uc3Qgc2VhcmNoQ2xpZW50ID0gbmV3IFNlYXJjaENsaWVudChcImh0dHA6Ly9zZXJ2ZXI6OTk1MC9cIik7XHJcbiAgICAvLyAgKlxyXG4gICAgLy8gICogICAgIHF1ZXJ5LmNsaWVudENhdGVnb3J5RmlsdGVyID0ge1xyXG4gICAgLy8gICogICAgICAgICAvLyBTaG93IG9ubHkgQXV0aG9yLW5vZGVzIHdpdGggRGlzcGxheU5hbWUgdGhhdCBtYXRjaGVzIC9qb2huLy5cclxuICAgIC8vICAqICAgICAgICAgQXV0aG9yOiAvam9obi8sXHJcbiAgICAvLyAgKiAgICAgICAgIC8vIFNob3cgb25seSBub2RlcyBpbiB0aGUgU3lzdGVtL0ZpbGUvU2VydmVyIG5vZGUgdGhhdCBtYXRjaGVzIC9wcm9qZWN0L1xyXG4gICAgLy8gICogICAgICAgICBcIlN5c3RlbXxGaWxlfFNlcnZlclwiOiAvcHJvamVjdC8sXHJcbiAgICAvLyAgKiAgICAgfVxyXG4gICAgLy8gICpcclxuICAgIC8vICAqL1xyXG4gICAgLy8gcHVibGljIGNsaWVudENhdGVnb3J5RmlsdGVyPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBSZWdFeHAgfSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBzcGVjaWZ5IHRoZSBzdGFydCBkYXRlLXJhbmdlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGF0ZUZyb20/OiBEYXRlU3BlY2lmaWNhdGlvbiA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHNwZWNpZnkgdGhlIGVuZCBkYXRlLXJhbmdlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGF0ZVRvPzogRGF0ZVNwZWNpZmljYXRpb24gPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlIG9uZSBvZiB0aGlzIHF1ZXJ5IHBhcmFtZXRlciB0byBzcGVjaWZ5IHRoZSBmaWx0ZXJzIHRvIGFwcGx5LiBFYWNoIGZpbHRlciBzaG91bGQgY29udGFpbiBpdHMgZ3JvdXAgbmFtZVxyXG4gICAgICogZm9sbG93ZWQgYnkgY2F0ZWdvcnkgbmFtZXMsIHJlcHJlc2VudGluZyBjb21wbGV0ZSBoaWVyYXJjaHkgb2YgdGhlIGNhdGVnb3J5LiBUaGUgbmFtZXMgc3BlY2lmaWVkIGhlcmUgaXMgZGVyaXZlZCBmcm9tIGNhdGVnb3J5IE5hbWVcclxuICAgICAqIHByb3BlcnR5IGFuZCBub3QgaXRzIGRpc3BsYXkgbmFtZS4gV2hlbiBzcGVjaWZ5aW5nIG11bHRpcGxlIGZpbHRlcnMsIHNlcGFyYXRlIHRoZW0gZWl0aGVyIGJ5IGNvbW1hIG9yIHNlbWljb2xvbi5cclxuICAgICAqIEZvciBleGFtcGxlOiAmZj1BdXRob3JzfFNhbTtGaWxlVHlwZXN8ZG9jeFxyXG4gICAgICogTm90ZSB0aGUgYWJvdmUgbmFtZXMgYXJlIGNhc2Ugc2Vuc2l0aXZlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmlsdGVycz86IEZpbHRlcltdID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNpZGVzIHdoZXRoZXIgb3Igbm90IHRvIHJlcXVlc3QgY29udGVudCB0byBiZSBnZW5lcmF0ZWQgaW4gdGhlIHJlc3BvbnNlIG1hdGNoZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaEdlbmVyYXRlQ29udGVudD86IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlY2lkZXMgd2hldGhlciBvciBub3QgdG8gcmVxdWVzdCBoaWdobGlnaHQtdGFncyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgZ2VuZXJhdGVkIHRoZSByZXNwb25zZSBtYXRjaGVzLlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IFJlcXVpcmVzIGBtYXRjaEdlbmVyYXRlQ29udGVudGAgdG8gYmUgYHRydWVgIHRvIGJlIGVmZmVjdGl2ZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cz86IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjaWRlcyB3aGV0aGVyIG9yIG5vdCB0byB1c2UgdGhlIHBhcmVudC1ncm91cGluZyBmZWF0dXJlIHRvIGdyb3VwIHJlc3VsdHMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaEdyb3VwaW5nPzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVjaWRlcyB3aGljaCBvcmRlcmluZyBhbGdvcml0aG0gdG8gdXNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWF0Y2hPcmRlckJ5PzogT3JkZXJCeSA9IE9yZGVyQnkuUmVsZXZhbmNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGFjdHVhbCBwYWdlIHRvIGZldGNoLiBFeHBlY3RzIGEgbnVtYmVyID49IDEuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2U/OiBudW1iZXIgPSAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlIHRvIGZldGNoLiBFeHBlY3RzIGEgbnVtYmVyID49IDEuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2VTaXplPzogbnVtYmVyID0gMTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcXVlcnktc3VnZ2VzdGlvbnMgdG8gZmV0Y2guXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXhTdWdnZXN0aW9ucz86IG51bWJlciA9IDEwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHF1ZXJ5VGV4dCB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIGF1dG9jb21wbGV0ZS9maW5kL2NhdGVnb3JpemUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBxdWVyeVRleHQ/OiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHR5cGUgb2Ygc2VhcmNoIHRvIHBlcmZvcm0uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZWFyY2hUeXBlPzogU2VhcmNoVHlwZSA9IFNlYXJjaFR5cGUuS2V5d29yZHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgVUkgbGFuZ3VhZ2Ugb2YgdGhlIGNsaWVudCAodHJhbnNsYXRlcyBpLmUuIGNhdGVnb3JpZXMgdG8gdGhlIGNsaWVudCBsYW5ndWFnZSkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1aUxhbmd1YWdlQ29kZT86IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBRdWVyeSBvYmplY3QsIGJhc2VkIG9uIFF1ZXJ5IGRlZmF1bHRzIGFuZCB0aGUgb3ZlcnJpZGVzIHByb3ZpZGVkIGFzIGEgcGFyYW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIFF1ZXJ5IG9iamVjdCB3aXRoIG92ZXJyaWRlIHZhbHVlcy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocXVlcnk6IFF1ZXJ5ID0ge30gYXMgUXVlcnkpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHF1ZXJ5LmNhdGVnb3JpemF0aW9uVHlwZSAmJlxyXG4gICAgICAgICAgICBDYXRlZ29yaXphdGlvblR5cGVbcXVlcnkuY2F0ZWdvcml6YXRpb25UeXBlXSA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgIGBJbGxlZ2FsIENhdGVnb3JpemF0aW9uVHlwZSB2YWx1ZTogJHtxdWVyeS5jYXRlZ29yaXphdGlvblR5cGV9YFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocXVlcnkubWF0Y2hPcmRlckJ5ICYmIE9yZGVyQnlbcXVlcnkubWF0Y2hPcmRlckJ5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBPcmRlckJ5IHZhbHVlOiAke3F1ZXJ5Lm1hdGNoT3JkZXJCeX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHF1ZXJ5LnNlYXJjaFR5cGUgJiYgU2VhcmNoVHlwZVtxdWVyeS5zZWFyY2hUeXBlXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWxsZWdhbCBTZWFyY2hUeXBlIHZhbHVlOiAke3F1ZXJ5LnNlYXJjaFR5cGV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcXVlcnkpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBEZWZpbmVzIHRoZSBkaWZmZXJlbnQgc2VhcmNodHlwZXMgdGhhdCBjYW4gYmUgdXNlZCAobW9kZXMpLlxyXG4gKiBAZGVmYXVsdCBLZXl3b3Jkc1xyXG4gKi9cclxuZXhwb3J0IGVudW0gU2VhcmNoVHlwZSB7XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgcmVzdWx0cyB2aWEga2V5d29yZHMgbW9kZSAoQU5ELXNlYXJjaClcclxuICAgICAqL1xyXG4gICAgS2V5d29yZHMgPSBcIktleXdvcmRzXCIsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5kIHJlc3VsdHMgdmlhIHJlbGV2YW5jZS1tb2RlIChPUi1zZWFyY2gpXHJcbiAgICAgKi9cclxuICAgIFJlbGV2YW5jZSA9IFwiUmVsZXZhbmNlXCJcclxufVxyXG4iLCJpbXBvcnQgeyBBdXRoVG9rZW4gfSBmcm9tIFwiLi4vQXV0aGVudGljYXRpb25cIjtcclxuaW1wb3J0IHtcclxuICAgIEZldGNoLFxyXG4gICAgQmFzZUNhbGwsXHJcbiAgICBEYXRlU3BlY2lmaWNhdGlvbixcclxuICAgIEZpbHRlcixcclxuICAgIE9yZGVyQnksXHJcbiAgICBRdWVyeSxcclxuICAgIFNlYXJjaFR5cGVcclxufSBmcm9tIFwiLi4vQ29tbW9uXCI7XHJcbmltcG9ydCB7IEZpbmRRdWVyeUNvbnZlcnRlciB9IGZyb20gXCIuL0ZpbmRRdWVyeUNvbnZlcnRlclwiO1xyXG5pbXBvcnQgeyBGaW5kU2V0dGluZ3MsIElGaW5kU2V0dGluZ3MgfSBmcm9tIFwiLi9GaW5kU2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgSU1hdGNoZXMgfSBmcm9tIFwiLi4vRGF0YVwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBGaW5kIHNlcnZpY2UgcXVlcmllcyB0aGUgc2VhcmNoLWVuZ2luZSBmb3Igc2VhcmNoLW1hdGNoZXMgZm9yIHRoZSBnaXZlbiBxdWVyeS5cclxuICpcclxuICogSXQgaXMgbm9ybWFsbHkgdXNlZCBpbmRpcmVjdGx5IHZpYSB0aGUgU2VhcmNoQ2xpZW50IGNsYXNzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZpbmQgZXh0ZW5kcyBCYXNlQ2FsbDxJTWF0Y2hlcz4ge1xyXG4gICAgcHVibGljIHNldHRpbmdzOiBJRmluZFNldHRpbmdzO1xyXG5cclxuICAgIHByaXZhdGUgcXVlcnlDb252ZXJ0ZXI6IEZpbmRRdWVyeUNvbnZlcnRlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBGaW5kIGluc3RhbmNlIHRoYXQgaGFuZGxlcyBmZXRjaGluZyBtYXRjaGVzIGRlcGVuZGVudCBvbiBzZXR0aW5ncyBhbmQgcXVlcnkuXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgc2V0dGluZ3MgdGhhdCBkZWZpbmUgaG93IHRoZSBGaW5kIGluc3RhbmNlIGlzIHRvIG9wZXJhdGUuXHJcbiAgICAgKiBAcGFyYW0gYXV0aCAtIEFuIGF1dGgtb2JqZWN0IHRoYXQgaGFuZGxlcyB0aGUgYXV0aGVudGljYXRpb24uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHNldHRpbmdzOiBJRmluZFNldHRpbmdzIHwgc3RyaW5nLFxyXG4gICAgICAgIGF1dGg/OiBBdXRoVG9rZW4sXHJcbiAgICAgICAgZmV0Y2hNZXRob2Q/OiBGZXRjaFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoKTsgLy8gZHVtbXlcclxuICAgICAgICAvLyBwcmVwYXJlIGZvciBzdXBlci5pbml0XHJcbiAgICAgICAgc2V0dGluZ3MgPSBuZXcgRmluZFNldHRpbmdzKHNldHRpbmdzKTtcclxuICAgICAgICBhdXRoID0gYXV0aCB8fCBuZXcgQXV0aFRva2VuKCk7XHJcbiAgICAgICAgc3VwZXIuaW5pdChzZXR0aW5ncywgYXV0aCwgZmV0Y2hNZXRob2QpO1xyXG4gICAgICAgIC8vIFNldCBvd24gdGhpcyBwcm9wc1xyXG4gICAgICAgIHRoaXMucXVlcnlDb252ZXJ0ZXIgPSBuZXcgRmluZFF1ZXJ5Q29udmVydGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBzZWFyY2gtcmVzdWx0IG1hdGNoZXMgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICogTm90ZSB0aGF0IGlmIGEgcmVxdWVzdCBjYWxsYmFjayBoYXMgYmVlbiBzZXR1cCB0aGVuIGlmIGl0IHJldHVybnMgZmFsc2UgdGhlIHJlcXVlc3QgaXMgc2tpcHBlZC5cclxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeS1vYmplY3QgdGhhdCBjb250cm9scyB3aGljaCByZXN1bHRzIHRoYXQgYXJlIHRvIGJlIHJldHVybmVkLlxyXG4gICAgICogQHBhcmFtIHN1cHByZXNzQ2FsbGJhY2tzIC0gU2V0IHRvIHRydWUgaWYgeW91IGhhdmUgZGVmaW5lZCBjYWxsYmFja3MsIGJ1dCBzb21laG93IGRvbid0IHdhbnQgdGhlbSB0byBiZSBjYWxsZWQuXHJcbiAgICAgKiBAcmV0dXJucyBhIFByb21pc2UgdGhhdCB3aGVuIHJlc29sdmVkIHJldHVybnMgYSBzdHJpbmcgYXJyYXkgb2Ygc3VnZ2VzdGlvbnMgKG9yIHVuZGVmaW5lZCBpZiBhIGNhbGxiYWNrIHN0b3BzIHRoZSByZXF1ZXN0KS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZldGNoKFxyXG4gICAgICAgIHF1ZXJ5OiBRdWVyeSA9IG5ldyBRdWVyeSgpLFxyXG4gICAgICAgIHN1cHByZXNzQ2FsbGJhY2tzOiBib29sZWFuID0gZmFsc2VcclxuICAgICk6IFByb21pc2U8SU1hdGNoZXM+IHtcclxuICAgICAgICBsZXQgdXJsID0gdGhpcy5xdWVyeUNvbnZlcnRlci5nZXRVcmwoXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudXJsLFxyXG4gICAgICAgICAgICBuZXcgUXVlcnkocXVlcnkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBsZXQgcmVxSW5pdCA9IHRoaXMucmVxdWVzdE9iamVjdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jYlJlcXVlc3Qoc3VwcHJlc3NDYWxsYmFja3MsIHVybCwgcmVxSW5pdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hNZXRob2QodXJsLCByZXFJbml0KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtyZXNwb25zZS5zdGF0dXN9ICR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmb3IgcmVxdWVzdCB1cmwgJyR7dXJsfSdgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKG1hdGNoZXM6IElNYXRjaGVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYlN1Y2Nlc3Moc3VwcHJlc3NDYWxsYmFja3MsIG1hdGNoZXMsIHVybCwgcmVxSW5pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYkVycm9yKHN1cHByZXNzQ2FsbGJhY2tzLCBlcnJvciwgdXJsLCByZXFJbml0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IFdoZW4gYSBmZXRjaCBpcyBzdG9wcGVkIGR1ZSB0byBjYlJlcXVlc3QgcmV0dXJuaW5nIGZhbHNlLCBzaG91bGQgd2U6XHJcbiAgICAgICAgICAgIC8vIDEpIFJlamVjdCB0aGUgcHJvbWlzZSAod2lsbCB0aGVuIGJlIHJldHVybmVkIGFzIGFuIGVycm9yKS5cclxuICAgICAgICAgICAgLy8gb3JcclxuICAgICAgICAgICAgLy8gMikgUmVzb2x2ZSB0aGUgcHJvbWlzZSAod2lsbCB0aGVuIGJlIHJldHVybmVkIGFzIGEgc3VjY2VzcykuXHJcbiAgICAgICAgICAgIC8vIG9yXHJcbiAgICAgICAgICAgIC8vIDMpIHNob3VsZCB3ZSBkbyBzb21ldGhpbmcgZWxzZSAob2xkIGNvZGUgcmV0dXJuZWQgdW5kZWZpbmVkLi4uKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xpZW50SWRDaGFuZ2VkKG9sZFZhbHVlOiBzdHJpbmcsIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMuY2xpZW50SWRDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRhdGVGcm9tQ2hhbmdlZChvbGRWYWx1ZTogRGF0ZVNwZWNpZmljYXRpb24sIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMuZGF0ZUZyb21DaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRhdGVUb0NoYW5nZWQob2xkVmFsdWU6IERhdGVTcGVjaWZpY2F0aW9uLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGUoKSAmJiB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLmRhdGVUb0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmlsdGVyc0NoYW5nZWQob2xkVmFsdWU6IEZpbHRlcltdLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGUoKSAmJiB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLmZpbHRlckNoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbWF0Y2hHZW5lcmF0ZUNvbnRlbnRDaGFuZ2VkKG9sZFZhbHVlOiBib29sZWFuLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlKCkgJiZcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5tYXRjaEdlbmVyYXRlQ29udGVudENoYW5nZWRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbWF0Y2hHZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzQ2hhbmdlZChcclxuICAgICAgICBvbGRWYWx1ZTogYm9vbGVhbixcclxuICAgICAgICBxdWVyeTogUXVlcnlcclxuICAgICkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5zaG91bGRVcGRhdGUoKSAmJlxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLm1hdGNoR2VuZXJhdGVDb250ZW50Q2hhbmdlZCAmJlxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0c0NoYW5nZWRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUocXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbWF0Y2hHcm91cGluZ0NoYW5nZWQob2xkVmFsdWU6IGJvb2xlYW4sIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5zaG91bGRVcGRhdGUoKSAmJlxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLm1hdGNoR3JvdXBpbmdDaGFuZ2VkXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1hdGNoT3JkZXJCeUNoYW5nZWQob2xkVmFsdWU6IE9yZGVyQnksIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMubWF0Y2hPcmRlckJ5Q2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2VDaGFuZ2VkKG9sZFZhbHVlOiBudW1iZXIsIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMubWF0Y2hQYWdlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2VTaXplQ2hhbmdlZChvbGRWYWx1ZTogbnVtYmVyLCBxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlKCkgJiZcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5tYXRjaFBhZ2VTaXplQ2hhbmdlZFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBxdWVyeVRleHRDaGFuZ2VkKG9sZFZhbHVlOiBzdHJpbmcsIHF1ZXJ5OiBRdWVyeSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZSgpICYmIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMucXVlcnlDaGFuZ2UpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgcXVlcnkucXVlcnlUZXh0Lmxlbmd0aCA+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlTWluTGVuZ3RoXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMucXVlcnlDaGFuZ2VJbnN0YW50UmVnZXggJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4LnRlc3QoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LnF1ZXJ5VGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRyaWdnZXJzLnF1ZXJ5Q2hhbmdlRGVsYXkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5xdWVyeUNoYW5nZURlbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZWFyY2hUeXBlQ2hhbmdlZChvbGRWYWx1ZTogU2VhcmNoVHlwZSwgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlKCkgJiYgdGhpcy5zZXR0aW5ncy50cmlnZ2Vycy5zZWFyY2hUeXBlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShxdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1aUxhbmd1YWdlQ29kZUNoYW5nZWQob2xkVmFsdWU6IHN0cmluZywgcXVlcnk6IFF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZSgpICYmXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudHJpZ2dlcnMudWlMYW5ndWFnZUNvZGVDaGFuZ2VkXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZVF1ZXJ5Q29udmVydGVyLCBRdWVyeSB9IGZyb20gXCIuLi9Db21tb25cIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyB0byBoYW5kbGUgY3JlYXRpbmcgZmluZCBsb29rdXBzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZpbmRRdWVyeUNvbnZlcnRlciBleHRlbmRzIEJhc2VRdWVyeUNvbnZlcnRlciB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnRzIHRoZSBxdWVyeSBwYXJhbXMgdG8gYW4gYXJyYXkgb2Yga2V5PXZhbHVlIHNlZ21lbnRzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0VXJsUGFyYW1zKHF1ZXJ5OiBRdWVyeSk6IHN0cmluZ1tdIHtcclxuICAgICAgICBsZXQgcGFyYW1zOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcImNcIiwgcXVlcnkuY2xpZW50SWQpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwiZGZcIiwgdGhpcy5jcmVhdGVEYXRlKHF1ZXJ5LmRhdGVGcm9tKSk7XHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbUlmU2V0KHBhcmFtcywgXCJkdFwiLCB0aGlzLmNyZWF0ZURhdGUocXVlcnkuZGF0ZVRvKSk7XHJcbiAgICAgICAgbGV0IGZpbHRlcnM6IHN0cmluZ1tdID0gcXVlcnkuZmlsdGVycy5tYXAoZiA9PlxyXG4gICAgICAgICAgICBmLmNhdGVnb3J5LmNhdGVnb3J5TmFtZS5qb2luKFwifFwiKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbUlmU2V0KHBhcmFtcywgXCJmXCIsIGZpbHRlcnMuam9pbihcIjtcIikpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwicVwiLCBxdWVyeS5xdWVyeVRleHQpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwidFwiLCBxdWVyeS5zZWFyY2hUeXBlKTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcImxcIiwgcXVlcnkudWlMYW5ndWFnZUNvZGUpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFyYW1JZlNldChwYXJhbXMsIFwiZ1wiLCBxdWVyeS5tYXRjaEdyb3VwaW5nKTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcIm9cIiwgcXVlcnkubWF0Y2hPcmRlckJ5KTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcInBcIiwgcXVlcnkubWF0Y2hQYWdlKTtcclxuICAgICAgICB0aGlzLmFkZFBhcmFtSWZTZXQocGFyYW1zLCBcInNcIiwgcXVlcnkubWF0Y2hQYWdlU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbUlmU2V0KHBhcmFtcywgXCJnY1wiLCBxdWVyeS5tYXRjaEdlbmVyYXRlQ29udGVudCk7XHJcbiAgICAgICAgdGhpcy5hZGRQYXJhbUlmU2V0KHBhcmFtcywgXCJnY2hcIiwgcXVlcnkubWF0Y2hHZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlU2V0dGluZ3MsIElCYXNlU2V0dGluZ3MgfSBmcm9tIFwiLi4vQ29tbW9uXCI7XHJcbmltcG9ydCB7IEZpbmRUcmlnZ2VycyB9IGZyb20gXCIuL0ZpbmRUcmlnZ2Vyc1wiO1xyXG5pbXBvcnQgeyBJTWF0Y2hlcyB9IGZyb20gXCIuLi9EYXRhXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGaW5kU2V0dGluZ3MgZXh0ZW5kcyBJQmFzZVNldHRpbmdzPElNYXRjaGVzPiB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0cmlnZ2VyLXNldHRpbmdzIGZvciB3aGVuIGF1dG9tYXRpYyBtYXRjaCByZXN1bHQtdXBkYXRlcyBhcmUgdG8gYmUgdHJpZ2dlcmVkLlxyXG4gICAgICovXHJcbiAgICB0cmlnZ2Vycz86IEZpbmRUcmlnZ2VycztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHNldHRpbmdzIHRoYXQgY2FuIGFmZmVjdCB0aGUgcmV0dXJuZWQgY2F0ZWdvcmllcyBmb3IgRmluZCgpIGxvb2t1cHMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmluZFNldHRpbmdzIGV4dGVuZHMgQmFzZVNldHRpbmdzPElNYXRjaGVzPiB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0cmlnZ2VyLXNldHRpbmdzIGZvciB3aGVuIGF1dG9tYXRpYyBtYXRjaCByZXN1bHQtdXBkYXRlcyBhcmUgdG8gYmUgdHJpZ2dlcmVkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdHJpZ2dlcnM6IEZpbmRUcmlnZ2VycztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBlbmRwb2ludCB0byBkbyBGaW5kIGxvb2t1cHMgZm9yLiBEZWZhdWx0OiBcInNlYXJjaC9maW5kXCJcclxuICAgICAqIE92ZXJyaWRlcyBiYXNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2VydmljZVBhdGg6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBGaW5kU2V0dGluZ3Mgb2JqZWN0IGZvciB5b3UsIGJhc2VkIG9uIEZpbmRTZXR0aW5ncyBkZWZhdWx0cyBhbmQgdGhlIG92ZXJyaWRlcyBwcm92aWRlZCBhcyBhIHBhcmFtLlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIC0gVGhlIHNldHRpbmdzIGRlZmluZWQgaGVyZSB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IEZpbmRTZXR0aW5ncy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M6IElGaW5kU2V0dGluZ3MgfCBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcigpOyAvLyBkdW1teSAodXNpbmcgaW5pdCBpbnN0ZWFkKVxyXG4gICAgICAgIC8vIFNldHVwIHNldHRpbmdzIG9iamVjdCBiZWZvcmUgY2FsbGluZyBzdXBlci5pbml0IHdpdGggaXQuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBzZXR0aW5ncyA9IHsgYmFzZVVybDogc2V0dGluZ3MgfSBhcyBJRmluZFNldHRpbmdzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXR0aW5ncy5zZXJ2aWNlUGF0aCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBzZXR0aW5ncy5zZXJ2aWNlUGF0aCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyBzZXR0aW5ncy5zZXJ2aWNlUGF0aFxyXG4gICAgICAgICAgICAgICAgOiBcInNlYXJjaC9maW5kXCI7XHJcbiAgICAgICAgc3VwZXIuaW5pdChzZXR0aW5ncyk7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIG91ciBvd24gc3R1ZmYgKHByb3BzIG5vdCBpbiB0aGUgYmFzZSBjbGFzcykuXHJcbiAgICAgICAgdGhpcy50cmlnZ2VycyA9IG5ldyBGaW5kVHJpZ2dlcnMoc2V0dGluZ3MudHJpZ2dlcnMpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGVzZSBhcmUgdGhlIHRyaWdnZXJzIHRoYXQgZGVmaW5lIHdoZW4gYW5kIHdoZW4gbm90IHRvIHRyaWdnZXIgYSBmaW5kIGxvb2t1cC5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaW5kVHJpZ2dlcnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBjbGllbnRDYXRlZ29yeUZpbHRlciBpcyBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xpZW50Q2F0ZWdvcnlGaWx0ZXJDaGFuZ2VkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIHdoZW4gdGhlIGNsaWVudElkIHByb3BlcnR5IGhhcyBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbGllbnRJZENoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgZnJvbSBkYXRlIHByb3BlcnR5IGhhcyBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGF0ZUZyb21DaGFuZ2VkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIHdoZW4gdGhlIHRvIGRhdGUgcHJvcGVydHkgaGFzIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkYXRlVG9DaGFuZ2VkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIHdoZW4gdGhlIGZpbHRlciBwcm9wZXJ0eSBoYXMgY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbHRlckNoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgZ2VuZXJhdGVDb250ZW50IHByb3BlcnR5IGhhcyBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWF0Y2hHZW5lcmF0ZUNvbnRlbnRDaGFuZ2VkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIHdoZW4gdGhlIGdlbmVyYXRlQ29udGVudEhpZ2hsaWdodHMgcHJvcGVydHkgaGFzIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaEdlbmVyYXRlQ29udGVudEhpZ2hsaWdodHNDaGFuZ2VkPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIHdoZW4gdGhlIHVzZUdyb3VwaW5nIHByb3BlcnR5IGhhcyBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWF0Y2hHcm91cGluZ0NoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgb3JkZXJCeSBwcm9wZXJ0eSBoYXMgY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoT3JkZXJCeUNoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgcGFnZSBwcm9wZXJ0eSBoYXMgY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoUGFnZUNoYW5nZWQ/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgcGFnZVNpemUgcHJvcGVydHkgaGFzIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2VTaXplQ2hhbmdlZD86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyBvbiBvciBvZmYgYWxsIHF1ZXJ5LXJlbGF0ZWQgdHJpZ2dlcnMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBxdWVyeUNoYW5nZT86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxheSB0cmlnZ2VycyB1bnRpbCBjaGFuZ2VzIGhhcyBub3QgYmVlbiBtYWRlIHRvIHRoZSBxdWVyeSBmb3IgYSBjZXJ0YWluIHRpbWUgKG1pbGxpc2Vjb25kcykuXHJcbiAgICAgKiBUaGlzIGlzIHRvIGF2b2lkIGV4ZWN1dGluZyBzZWFyY2hlcyBjb25zdGFudGx5IHdoaWxlIHRoZSB1c2VyIGlzIHR5cGluZy5cclxuICAgICAqIFRoZSBxdWVyeUNoYW5nZUluc3RhbnRSZWdleCBoYXMgcHJlY2VkZW5jZS4gVGhpcyBkZWxheSBpcyBvbmx5IGNvbnNpZGVyZWQgd2hlbiB0aGF0IHJlZ2V4IGRvZXNuJ3QgbWF0Y2guXHJcbiAgICAgKiBTZXQgdmFsdWUgdG8gbGVzcyB0aGFuIHplcm8gdG8gbWFrZSBzdXJlIHdlIG9ubHkgdHJpZ2dlciB3aGVuIHRoZSBxdWVyeUNoYW5nZUluc3RhbnRSZWdleCBtYXRjaGVzLlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IFJlcXVpcmVzIHF1ZXJ5Q2hhbmdlIHRvIGJlIHRydWUuXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeSB0byBiZSBsb25nZXIgdGhhbiBxdWVyeU1pbkxlbmd0aC5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0IGZvciBGaW5kIGlzIHRvIHJ1biBkZWxheWVkIGxvb2t1cHMgYWZ0ZXIgMiBzZWNvbmRzLiBUaGUgcXVlcnlDaGFuZ2VJbnN0YW50UmVnZXggbWF0Y2hlcyB3aWxsXHJcbiAgICAgKiBydW4gaW1tZWRpYXRlbHkgdGhvdWdoLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VEZWxheT86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXJzIGFjdGlvbiBpbW1lZGlhdGVseSBpbnN0ZWFkIG9mIGRlbGF5ZWQgd2hlbiB0aGUgcXVlcnkgbWF0Y2hlcyB0aGUgcmVnZXguXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogUmVxdWlyZXMgcXVlcnlDaGFuZ2UgdG8gYmUgdHJ1ZS5cclxuICAgICAqIE5vdGU6IFJlcXVpcmVzIHF1ZXJ5IHRvIGJlIGxvbmdlciB0aGFuIHF1ZXJ5TWluTGVuZ3RoLlxyXG4gICAgICpcclxuICAgICAqIERlZmF1bHQ6IFRyaWdnZXIgb24gZmlyc3QgRU5URVIgb3IgU1BBQ0UuIFNhbXBsZTogaHR0cHM6Ly9yZWdleDEwMS5jb20vci9QMHhmZWovMVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VJbnN0YW50UmVnZXg/OiBSZWdFeHA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaW4gbGVuZ3RoIGJlZm9yZSB0cmlnZ2VyaW5nLiBGb3IgQ2F0ZWdvcml6ZSAoYW5kIEZpbmQpIHRoaXMgc2hvdWxkIGJlIG9rIHdpdGggc2hvcnQgcXVlcmllcyB0b28uXHJcbiAgICAgKiBPbmUgY2hhcmFjdGVyIGZvbGxvd2VkIGJ5IGFuIGVudGVyIChkZWZhdWx0KS5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlOiBSZXF1aXJlcyBxdWVyeUNoYW5nZSB0byBiZSB0cnVlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcXVlcnlDaGFuZ2VNaW5MZW5ndGg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzZWFyY2hUeXBlIHByb3BlcnR5IGhhcyBjaGFuZ2VkLiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZWFyY2hUeXBlQ2hhbmdlZD86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VycyB3aGVuIHRoZSB1aUxhbmd1YWdlQ29kZSBwcm9wZXJ0eSBoYXMgY2hhbmdlZC5cclxuICAgICAqIE5vdGU6IE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBzZXQgaW4gQ2F0ZWdvcml6ZVRyaWdnZXJzLlxyXG4gICAgICogRGVmYXVsdDogRG8gbm90IHJlLWZldGNoIG9uIGNoYW5nZSAtIGFzIHRoZXJlIGFyZSBubyBsYW5ndWFnZS1kZXBlbmRlbnQgZGF0YSBpbiB0aGUgZmluZC1yZXNwb25zZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVpTGFuZ3VhZ2VDb2RlQ2hhbmdlZD86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgRmluZFRyaWdnZXIgb2JqZWN0IGZvciB5b3UsIGJhc2VkIG9uIEZpbmRUcmlnZ2VyIGRlZmF1bHRzIGFuZCB0aGUgb3ZlcnJpZGVzIHByb3ZpZGVkIGFzIGEgcGFyYW0uXHJcbiAgICAgKiBAcGFyYW0gdHJpZ2dlcnMgLSBUaGUgdHJpZ2dlciBkZWZpbmVkIGhlcmUgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBGaW5kVHJpZ2dlci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodHJpZ2dlcnM6IEZpbmRUcmlnZ2VycyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnRDYXRlZ29yeUZpbHRlckNoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuY2xpZW50Q2F0ZWdvcnlGaWx0ZXJDaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLmNsaWVudENhdGVnb3J5RmlsdGVyQ2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmNsaWVudElkQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5jbGllbnRJZENoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMuY2xpZW50SWRDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5kYXRlRnJvbUNoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuZGF0ZUZyb21DaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLmRhdGVGcm9tQ2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGF0ZVRvQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5kYXRlVG9DaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLmRhdGVUb0NoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuICAgICAgICB0aGlzLmZpbHRlckNoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuZmlsdGVyQ2hhbmdlZCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5maWx0ZXJDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5tYXRjaEdlbmVyYXRlQ29udGVudENoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMubWF0Y2hHZW5lcmF0ZUNvbnRlbnRDaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLm1hdGNoR2VuZXJhdGVDb250ZW50Q2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG4gICAgICAgIHRoaXMubWF0Y2hHZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5tYXRjaEdlbmVyYXRlQ29udGVudEhpZ2hsaWdodHNDaGFuZ2VkICE9PVxyXG4gICAgICAgICAgICBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0c0NoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hdGNoR3JvdXBpbmdDaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLm1hdGNoR3JvdXBpbmdDaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLm1hdGNoR3JvdXBpbmdDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5tYXRjaE9yZGVyQnlDaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLm1hdGNoT3JkZXJCeUNoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMubWF0Y2hPcmRlckJ5Q2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG4gICAgICAgIHRoaXMubWF0Y2hQYWdlQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5tYXRjaFBhZ2VDaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLm1hdGNoUGFnZUNoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hdGNoUGFnZVNpemVDaGFuZ2VkID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLm1hdGNoUGFnZVNpemVDaGFuZ2VkICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLm1hdGNoUGFnZVNpemVDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNoYW5nZSA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5xdWVyeUNoYW5nZSAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5xdWVyeUNoYW5nZVxyXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xyXG4gICAgICAgIHRoaXMucXVlcnlDaGFuZ2VEZWxheSA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5xdWVyeUNoYW5nZURlbGF5ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLnF1ZXJ5Q2hhbmdlRGVsYXlcclxuICAgICAgICAgICAgICAgIDogMjAwMDtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4ID1cclxuICAgICAgICAgICAgdHlwZW9mIHRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHRyaWdnZXJzLnF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4XHJcbiAgICAgICAgICAgICAgICA6IC9cXFNcXHMkL3U7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNoYW5nZU1pbkxlbmd0aCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy5xdWVyeUNoYW5nZU1pbkxlbmd0aCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyB0cmlnZ2Vycy5xdWVyeUNoYW5nZU1pbkxlbmd0aFxyXG4gICAgICAgICAgICAgICAgOiAyO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoVHlwZUNoYW5nZWQgPVxyXG4gICAgICAgICAgICB0eXBlb2YgdHJpZ2dlcnMuc2VhcmNoVHlwZUNoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMuc2VhcmNoVHlwZUNoYW5nZWRcclxuICAgICAgICAgICAgICAgIDogdHJ1ZTtcclxuICAgICAgICB0aGlzLnVpTGFuZ3VhZ2VDb2RlQ2hhbmdlZCA9XHJcbiAgICAgICAgICAgIHR5cGVvZiB0cmlnZ2Vycy51aUxhbmd1YWdlQ29kZUNoYW5nZWQgIT09IFwidW5kZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgID8gdHJpZ2dlcnMudWlMYW5ndWFnZUNvZGVDaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICA6IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBkZWVwRXF1YWwgZnJvbSBcImRlZXAtZXF1YWxcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL0F1dGhlbnRpY2F0aW9uXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0F1dG9jb21wbGV0ZVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9DYXRlZ29yaXplXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0NvbW1vblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9EYXRhXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL0ZpbmRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vU2V0dGluZ3NcIjtcclxuXHJcbmltcG9ydCB7IEF1dGhUb2tlbiwgQXV0aGVudGljYXRpb24gfSBmcm9tIFwiLi9BdXRoZW50aWNhdGlvblwiO1xyXG5pbXBvcnQgeyBBdXRvY29tcGxldGUgfSBmcm9tIFwiLi9BdXRvY29tcGxldGVcIjtcclxuaW1wb3J0IHsgQ2F0ZWdvcml6ZSB9IGZyb20gXCIuL0NhdGVnb3JpemVcIjtcclxuaW1wb3J0IHtcclxuICAgIERhdGVTcGVjaWZpY2F0aW9uLFxyXG4gICAgRmV0Y2gsXHJcbiAgICBGaWx0ZXIsXHJcbiAgICBPcmRlckJ5LFxyXG4gICAgUXVlcnksXHJcbiAgICBTZWFyY2hUeXBlLFxyXG4gICAgQ2F0ZWdvcnlQcmVzZW50YXRpb25cclxufSBmcm9tIFwiLi9Db21tb25cIjtcclxuaW1wb3J0IHsgSUNhdGVnb3J5LCBJR3JvdXAgfSBmcm9tIFwiLi9EYXRhXCI7XHJcbmltcG9ydCB7IEZpbmQgfSBmcm9tIFwiLi9GaW5kXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzLCBJU2V0dGluZ3MgfSBmcm9tIFwiLi9TZXR0aW5nc1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIFwibWFpbiBjbGFzc1wiIG9mIHRoaXMgcGFja2FnZS4gUGxlYXNlIHJlYWQgdGhlIDxhIGhyZWY9XCJodHRwczovL2ludGVsbGlzZWFyY2guZ2l0aHViLmlvL3NlYXJjaC1jbGllbnQvXCI+Z2V0dGluZy1zdGFydGVkIHNlY3Rpb248L2E+XCJcclxuICogZm9yIGEgcHJvcGVyIGludHJvZHVjdGlvbi5cclxuICpcclxuICogVGhlIFNlYXJjaENsaWVudCBtYW5hZ2VzIGEgcmFuZ2Ugb2Ygb3RoZXIgc2VydmljZXM6XHJcbiAqICAgKiBBdXRoZW50aWNhdGlvbixcclxuICogICAqIEF1dG9jb21wbGV0ZSxcclxuICogICAqIENhdGVnb3JpemVcclxuICogICAqIEZpbmRcclxuICpcclxuICogRWFjaCBvZiB0aGUgYWJvdmUgc2VydmljZXMgY2FuIGJlIHVzZWQgaW5kZXBlbmRlbnRseSwgYnV0IGl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIFNlYXJjaENsaWVudCBpbnN0ZWFkLlxyXG4gKlxyXG4gKiBUaGUgU2VhcmNoQ2xpZW50IGFsbG93cyB5b3UgdG8gaGF2ZSBhbiBhZHZhbmNlZCBzZWFyY2ggd2l0aCBtaW5pbWFsIGVmZm9ydCBpbiByZWdhcmRzIHRvIHNldHVwIGFuZCBsb2dpY3MuIGluc3RlYWRcclxuICogb2YgaGF2aW5nIHRvIHdyaXRlIGFsbCB0aGUgbG9naWNzIHlvdXJzZWxmIHRoZSBTZWFyY2hDbGllbnQgZXhwb3NlcyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgZm9yIG1hbmFnaW5nIHlvdXIgc2VhcmNoOlxyXG4gKiAgIDEuIENvbmZpZ3VyZSBjYWxsYmFja3MgaW4geW91ciBzZXR0aW5ncy1vYmplY3QgdGhhdCB5b3UgcGFzcyB0byB0aGUgU2VhcmNoQ2xpZW50LlxyXG4gKiAgIDIuIENvbmZpZ3VyZSB0cmlnZ2VycyB0byBkZWZpbmUgd2hlbiB0byBkbyBzZXJ2ZXItbG9va3VwcyBhbmQgbm90IChpZiB5b3UgbmVlZCB0byBkZXZpYXRlIGZyb20gdGhlIGRlZmF1bHRzKVxyXG4gKiAgIDMuIFNldCBxdWVyeS12YWx1ZXMgcmVhbC10aW1lIChxdWVyeVRleHQsIGZpbHRlcnMsIGRhdGUtcmFuZ2VzLCBldGMuKVxyXG4gKiAgIDQuIFJlY2VpdmUgYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25zLCBtYXRjaGVzIGFuZCBjYXRlZ29yaWVzIGluIHlvdXIgY2FsbGJhY2sgaGFuZGxlcnMgd2hlbiB0aGUgZGF0YSBpcyBhdmFpbGFibGUuXHJcbiAqXHJcbiAqIFdoYXQgaGFwcGVucyBpcyB0aGF0IGFueSBxdWVyeS1jaGFuZ2VzIHRoYXQgYXJyaXZlIGFyZSBjaGVja2VkIGluIHJlZ2FyZHMgdG8gdHJpZ2dlci1zZXR0aW5ncy4gSWYgdGhleSBhcmUgdG8gdHJpZ2dlclxyXG4gKiBhbmQgYSBjYWxsYmFjayBoYXMgYmVlbiBzZXQgdXAgdGhlbiB0aGUgc2VydmVyIGlzIHJlcXVlc3RlZCBhbmQgd2hlbiB0aGUgZGF0YSBpcyByZWNlaXZlZCBpdCBpcyBzZW50IHRvIHRoZSBjYWxsYmFja1xyXG4gKiByZWdpc3RlcmVkIGluIHRoZSBzZXR0aW5ncy1vYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2VhcmNoQ2xpZW50IGltcGxlbWVudHMgQXV0aFRva2VuIHtcclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgYSByZWZlcmVuY2UgdG8gdGhlIHNldHVwIEF1dGhlbnRpY2F0aW9uIHNlcnZpY2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhdXRoZW50aWNhdGlvbjogQXV0aGVudGljYXRpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIb2xkcyBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudGx5IHNldCBhdXRoZW50aWNhdGlvbiB0b2tlbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGF1dGhlbnRpY2F0aW9uVG9rZW46IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBzZXR1cCBBdXRvY29tcGxldGUgc2VydmljZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGF1dG9jb21wbGV0ZTogQXV0b2NvbXBsZXRlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgYSByZWZlcmVuY2UgdG8gdGhlIHNldHVwIENhdGVnb3JpemUgc2VydmljZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhdGVnb3JpemU6IENhdGVnb3JpemUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIb2xkcyBhIHJlZmVyZW5jZSB0byB0aGUgc2V0dXAgRmluZCBzZXJ2aWNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmluZDogRmluZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgc2V0dGluZ3M6IElTZXR0aW5ncztcclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxyXG4gICAgcHJpdmF0ZSBfcXVlcnk6IFF1ZXJ5O1xyXG5cclxuICAgIHByaXZhdGUgX29yaWdTZXR0aW5nczogSVNldHRpbmdzIHwgc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfb3JpZ0ZldGNoTWV0aG9kOiBGZXRjaDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBTZWFyY2hDbGllbnQgaW5zdGFuY2UgdXNpbmcgdGhlIHN1cHBsaWVkIHNldHRpbmdzIG9iamVjdC4gUGxlYXNlIHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9pbnRlbGxpc2VhcmNoLmdpdGh1Yi5pby9zZWFyY2gtY2xpZW50L1wiPmdldHRpbmctc3RhcnRlZCBzZWN0aW9uPC9hPlxyXG4gICAgICogZm9yIGFuIGludHJvZHVjdGlvbiBvbiBob3cgdG8gc2V0IHVwIHRoZSBpbnN0YW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgQSBzZXR0aW5ncyBvYmplY3QgdGhhdCBpbmRpY2F0ZXMgaG93IHRoZSBzZWFyY2gtY2xpZW50IGluc3RhbmNlIGlzIHRvIGJlaGF2ZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M6IElTZXR0aW5ncyB8IHN0cmluZywgZmV0Y2hNZXRob2Q/OiBGZXRjaCkge1xyXG4gICAgICAgIHRoaXMuX29yaWdTZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX29yaWdGZXRjaE1ldGhvZCA9IGZldGNoTWV0aG9kO1xyXG4gICAgICAgIHRoaXMuc2V0dXAoc2V0dGluZ3MsIGZldGNoTWV0aG9kKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHR5cGljYWxseSBjYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIHNlYXJjaC1idXR0b24gaW4gdGhlIFVJLlxyXG4gICAgICpcclxuICAgICAqIEZvciBxdWVyeS1maWVsZHMgdGhhdCBhY2NlcHRzIGVudGVyIHRoZSBkZWZhdWx0IHF1ZXJ5Q2hhbmdlSW5zdGFudFJlZ2V4IGNhdGNoZXMgZW50ZXIuXHJcbiAgICAgKiBXaGVuIHRoZXkgZG9uJ3QgdGFrZSBlbnRlciB5b3Ugd2lsbCBoYXZlIHRvIHNldCB1cCBzb21ldGhpbmcgdGhhdCBlaXRoZXIgY2F0Y2hlcyB0aGUgZGVmYXVsdCBlbnRlciBvciBhIHVzZXIgY2xpY2tzXHJcbiAgICAgKiBvbiBhIFwiU2VhcmNoXCItYnV0dG9uIG9yIHNpbWlsYXIuIFlvdSBjYW4gY2hvb3NlIHRvIHVzZSB0aGUgYWxyZWFkeSBjdXJyZW50IHF1ZXJ5LCBvciB5b3UgY2FuIHBhc3MgaXQgaW4uIElmIHlvdVxyXG4gICAgICogaW5jbHVkZSB0aGUgcXVlcnkgdGhlbiB0aGUgaW50ZXJuYWwgdXBkYXRlcyBhcmUgc3VwcHJlc3NlZCB3aGlsZSBjaGFuZ2luZyB0aGUgcXVlcnktcHJvcGVydGllcywgdG8gbWFrZSBzdXJlIHRoYXRcclxuICAgICAqIG9ubHkgb25lIHVwZGF0ZSBwZXIgc2VydmljZSBpcyBtYWRlIChpZiBhbnkgb2YgdGhlaXIgdHJpZ2dlci1jaGVja3MgcmV0dXJuZWQgdHJ1ZSkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHF1ZXJ5IElmIHBhc3NlZCBpbiB0aGVuIHRoZSBxdWVyeSBvYmplY3Qgd2lsbCB1cGRhdGUgdGhlIGludGVybmFsIHF1ZXJ5LW9iamVjdCBhbmQgYW55IHVwZGF0ZXMgd2lsbCB0cmlnZ2VyXHJcbiAgICAgKiAoYnV0IG9ubHkgb25jZSkuIFRoZSBjb25zZWN1dGl2ZSBvdmVycmlkaW5nIHNlcnZpY2UgcGFyYW1zIGFyZSBpZ25vcmVkIHdoZW4gdGhpcyBwYXJhbWV0ZXIgaGFzIGEgdmFsdWUuIElmIHRoZVxyXG4gICAgICogcXVlcnkgaXMgZW1wdHkvbnVsbC91bmRlZmluZWQgdGhlbiB0aGUgc2VydmljZXMgd2lsbCBmb3JjZSBhbiB1cGRhdGUsIGJ1dCBhbGxvd3MgdGhlIGJvb2wgcGFyYW1zIHRvIG92ZXJyaWRlIHRoaXMuXHJcbiAgICAgKiBAcGFyYW0gYXV0b2NvbXBsZXRlIEFsbG93cyB0dXJuaW5nIG9mZiB1cGRhdGVzIGZvciB0aGUgQXV0b2NvbXBsZXRlIHNlcnZpY2UgKGlmIHRoZSBzZXJ2aWNlIGlzIGVuYWJsZWQgaW4gdGhlXHJcbiAgICAgKiBzZXR0aW5ncykuIE9ubHkgZWZmZWN0aXZlIHdoZW4gcXVlcnkgaXMgbm90IHNldC5cclxuICAgICAqIEBwYXJhbSBjYXRlZ29yaXplIEFsbG93cyB0dXJuaW5nIG9mZiB1cGRhdGVzIGZvciB0aGUgQ2F0ZWdvcml6ZSBzZXJ2aWNlIChpZiB0aGUgc2VydmljZSBpcyBlbmFibGVkIGluIHRoZSBzZXR0aW5ncykuXHJcbiAgICAgKiBPbmx5IGVmZmVjdGl2ZSB3aGVuIHF1ZXJ5IGlzIG5vdCBzZXQuXHJcbiAgICAgKiBAcGFyYW0gZmluZCBBbGxvd3MgdHVybmluZyBvZmYgdXBkYXRlcyBmb3IgdGhlIEZpbmQgc2VydmljZSAoaWYgdGhlIHNlcnZpY2UgaXMgZW5hYmxlZCBpbiB0aGUgc2V0dGluZ3MpLiBPbmx5XHJcbiAgICAgKiBlZmZlY3RpdmUgd2hlbiBxdWVyeSBpcyBub3Qgc2V0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlKFxyXG4gICAgICAgIHF1ZXJ5PzogUXVlcnksXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICBjYXRlZ29yaXplOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICBmaW5kOiBib29sZWFuID0gdHJ1ZVxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHF1ZXJ5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIHF1ZXJ5IHdpdGhvdXQgdHJpZ2dlcmluZyBhbnkgdXBkYXRlcy5cclxuICAgICAgICAgICAgdGhpcy5kZWZlclVwZGF0ZXModHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICAgICAgLy8gVHVybmluZyBvZiBkZWZlcnJlZFVwZGF0ZXMgd2lsbCBub3cgZXhlY3V0ZSBwZW5kaW5nIHVwZGF0ZXMgKGlmIGFueSkuXHJcbiAgICAgICAgICAgIHRoaXMuZGVmZXJVcGRhdGVzKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEEgcXVlcnkgd2FzIGluY2x1ZGVkLCBzbyB0aGUgYWJvdmUgdXBkYXRlIGlzIGFsbCB3ZSB3YW50IHRvIGRvLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaW5jZSBhIHF1ZXJ5IHdhcyBub3QgcGFzc2VkLCB0aGVuIHdlIHVwZGF0ZSBiYXNlZCBvbiBlYWNoIHNlcnZpY2UncyBzZXR0aW5nLCB1c2luZyB0aGUgYm9vbCBwYXJhbXMgYXV0b2NvbXBsZXRlLFxyXG4gICAgICAgIC8vIGNhdGVnb3JpemUgYW5kIGZpbmQgdG8gYWxsb3cgb3ZlcnJpZGluZyBhbmQgdHVybmluZyBvZmYgdGhlIGluZGl2aWR1YWwgc2VydmljZXMuXHJcbiAgICAgICAgaWYgKGF1dG9jb21wbGV0ZSAmJiB0aGlzLmF1dG9jb21wbGV0ZS5zaG91bGRVcGRhdGUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS51cGRhdGUodGhpcy5xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYXRlZ29yaXplICYmIHRoaXMuY2F0ZWdvcml6ZS5zaG91bGRVcGRhdGUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUudXBkYXRlKHRoaXMucXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmluZCAmJiB0aGlzLmZpbmQuc2hvdWxkVXBkYXRlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5maW5kLnVwZGF0ZSh0aGlzLnF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB5b3Ugd2FudCB0byBmb3JjZSBhbiB1cGRhdGUgY2FsbCB0byBiZSBtYWRlIGZvciB0aGUgc2VydmljZXMuXHJcbiAgICAgKlxyXG4gICAgICogSXQgbWF5IGZvcmNlIGFuIHVwZGF0ZSBiYXNlZCBvbiB0aGUgZXhpc3RpbmcgdGhpcy5xdWVyeSB2YWx1ZSBvciB5b3UgY2FuIHByb3ZpZGUgYSBuZXcgcXVlcnkgb2JqZWN0IHRvIGJlIHVzZWQuXHJcbiAgICAgKiBBZnRlciBoYXZpbmcgc2V0IHRoZSB2YWx1ZSB0aGUgc2VydmljZXMgd2lsbCBiZSBjYWxsZWQsIHVubGVzcyB0aGV5IGFyZSBkaXNhYmxlZCBpbiB0aGVpciByZXNwZWN0aXZlIGNvbmZpZ3NcclxuICAgICAqIG9yIHR1cm5lZCBvZmYgaW4gdGhlIHBhcmFtcyB0byB0aGlzIG1lZGhvZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcXVlcnkgSWYgcGFzc2VkIGluIHRoZW4gdGhlIHF1ZXJ5IG9iamVjdCB3aWxsIHVwZGF0ZSB0aGUgaW50ZXJuYWwgcXVlcnktb2JqZWN0IHdpdGhvdXQgdHJpZ2dlcmluZyBhbnkgdXBkYXRlcyxcclxuICAgICAqIGJ1dCB3aWxsIGp1c3QgYWZ0ZXIgdGhpcyBmb3JjZSBhbiB1cGRhdGUgb24gYWxsIGVuYWJsZWQgc2VydmljZXMsIHRoYXQgYXJlIG5vdCB0dXJuZWQgb2ZmIGJ5IHRoZSBjb25zZWN1dGl2ZSBwYXJhbXMuXHJcbiAgICAgKiBAcGFyYW0gYXV0b2NvbXBsZXRlIEFsbG93cyB0dXJuaW5nIG9mZiB1cGRhdGVzIGZvciB0aGUgQXV0b2NvbXBsZXRlIHNlcnZpY2UgKGlmIHRoZSBzZXJ2aWNlIGlzIGVuYWJsZWQgaW4gdGhlXHJcbiAgICAgKiBzZXR0aW5ncykuXHJcbiAgICAgKiBAcGFyYW0gY2F0ZWdvcml6ZSBBbGxvd3MgdHVybmluZyBvZmYgdXBkYXRlcyBmb3IgdGhlIENhdGVnb3JpemUgc2VydmljZSAoaWYgdGhlIHNlcnZpY2UgaXMgZW5hYmxlZCBpbiB0aGUgc2V0dGluZ3MpLlxyXG4gICAgICogQHBhcmFtIGZpbmQgQWxsb3dzIHR1cm5pbmcgb2ZmIHVwZGF0ZXMgZm9yIHRoZSBGaW5kIHNlcnZpY2UgKGlmIHRoZSBzZXJ2aWNlIGlzIGVuYWJsZWQgaW4gdGhlIHNldHRpbmdzKS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZvcmNlVXBkYXRlKFxyXG4gICAgICAgIHF1ZXJ5PzogUXVlcnksXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICBjYXRlZ29yaXplOiBib29sZWFuID0gdHJ1ZSxcclxuICAgICAgICBmaW5kOiBib29sZWFuID0gdHJ1ZVxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHF1ZXJ5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIHF1ZXJ5IHdpdGhvdXQgdHJpZ2dlcmluZyBhbnkgdXBkYXRlcy5cclxuICAgICAgICAgICAgdGhpcy5kZWZlclVwZGF0ZXModHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICAgICAgLy8gU2tpcCBleGVjdXRpbmcgYW55IHBvdGVudGlhbCBwZW5kaW5nIHVwZGF0ZXMuXHJcbiAgICAgICAgICAgIHRoaXMuZGVmZXJVcGRhdGVzKGZhbHNlLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZvcmNlIGFuIHVwZGF0ZSAoYnkgcGFzc2luZyBudWxsIHRvIHF1ZXJ5IHBhcmFtKSBhbmQgZm9yd2FyZGluZyBzZXJ2aWNlIG92ZXJyaWRlcy5cclxuICAgICAgICB0aGlzLnVwZGF0ZShudWxsLCBhdXRvY29tcGxldGUsIGNhdGVnb3JpemUsIGZpbmQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBTZWFyY2hDbGllbnQgaW5zdGFuY2UgKGZpbHRlcnMsIHF1ZXJ5VGV4dCwgY2F0ZWdvcnlQcmVzZW50YXRpb25zKyspIHRvIGluaXRpYWwgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZWZlclVwZGF0ZXModHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zZXR1cCh0aGlzLl9vcmlnU2V0dGluZ3MsIHRoaXMuX29yaWdGZXRjaE1ldGhvZCk7XHJcbiAgICAgICAgdGhpcy5kZWZlclVwZGF0ZXMoZmFsc2UsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXNzZWQgYXJndW1lbnQgaXMgYSBmaWx0ZXIuXHJcbiAgICAgKiBUeXBpY2FsbHkgdXNlZCB0byB2aXN1YWxseSBpbmRpY2F0ZSB0aGF0IGEgY2F0ZWdvcnkgaXMgYWxzbyBhIGZpbHRlci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzRmlsdGVyKGNhdGVnb3J5OiBzdHJpbmdbXSB8IElDYXRlZ29yeSB8IEZpbHRlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmZpbHRlcklkKGNhdGVnb3J5KTtcclxuICAgICAgICByZXR1cm4gaXRlbSA/IHRoaXMuZmlsdGVySW5kZXgoaXRlbSkgIT09IC0xIDogZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhbnkgY2hpbGQtbm9kZSBvZiB0aGUgZ2l2ZW4gY2F0ZWdvcnkgaGFzIGEgZmlsdGVyIGRlZmluZWQgZm9yIGl0LlxyXG4gICAgICogVHlwaWNhbGx5IHVzZWQgdG8gdmlzdWFsbHkgc2hvdyBpbiB0aGUgdHJlZSB0aGF0IGEgY2hpbGQtbm9kZSBoYXMgYW4gYWN0aXZlIGZpbHRlci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGhhc0NoaWxkRmlsdGVyKGNhdGVnb3J5OiBzdHJpbmdbXSB8IElDYXRlZ29yeSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmZpbHRlcklkKGNhdGVnb3J5KTtcclxuICAgICAgICBpZiAoIWl0ZW0gfHwgdGhpcy5maWx0ZXJJbmRleChpdGVtKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYXRlZ29yeVBhdGggPSBpdGVtLmpvaW4oXCJ8XCIpO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItZm9yLW9mXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGZpbHRlciA9IHRoaXMuZmlsdGVyc1tpXTtcclxuICAgICAgICAgICAgbGV0IGZpbHRlclBhdGggPSBmaWx0ZXIuY2F0ZWdvcnkuY2F0ZWdvcnlOYW1lLmpvaW4oXCJ8XCIpO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyUGF0aC5pbmRleE9mKGNhdGVnb3J5UGF0aCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCB0aGUgZ2l2ZW4gZmlsdGVyLCBpZiBpdCBpc24ndCBhbHJlYWR5IHRoZXJlLlxyXG4gICAgICpcclxuICAgICAqIFdpbGwgcnVuIHRyaWdnZXItY2hlY2tzIGFuZCBwb3RlbnRpYWxseSB1cGRhdGUgc2VydmljZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaWx0ZXJBZGQoXHJcbiAgICAgICAgZmlsdGVyOiBzdHJpbmdbXSB8IElDYXRlZ29yeSB8IEZpbHRlcixcclxuICAgICAgICBoaWRkZW46IGJvb2xlYW4gPSBmYWxzZVxyXG4gICAgKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZmlsdGVySWQoZmlsdGVyKTtcclxuICAgICAgICBjb25zdCBmb3VuZEluZGV4ID0gdGhpcy5maWx0ZXJJbmRleChpdGVtKTtcclxuXHJcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9GaWx0ZXJBZGQoaXRlbSwgaGlkZGVuKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZpbHRlciBhbHJlYWR5IHNldFxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSB0aGUgZ2l2ZW4gZmlsdGVyLCBpZiBpdCBpcyBhbHJlYWR5IHNldC5cclxuICAgICAqXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZmlsdGVyUmVtb3ZlKGZpbHRlcjogc3RyaW5nW10gfCBJQ2F0ZWdvcnkgfCBGaWx0ZXIpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5maWx0ZXJJZChmaWx0ZXIpO1xyXG4gICAgICAgIGNvbnN0IGZvdW5kSW5kZXggPSB0aGlzLmZpbHRlckluZGV4KGl0ZW0pO1xyXG5cclxuICAgICAgICBpZiAoZm91bmRJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9GaWx0ZXJSZW1vdmUoZm91bmRJbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBGaWx0ZXIgYWxyZWFkeSBzZXRcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGUgdGhlIGdpdmVuIGZpbHRlci5cclxuICAgICAqXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmaWx0ZXIgSXMgZWl0aGVyIHN0cmluZ1tdLCBGaWx0ZXIgb3IgQ2F0ZWdvcnkuIFdoZW4gc3RyaW5nIGFycmF5IGl0IGV4cGVjdHMgdGhlIGVxdWl2YWxlbnQgb2YgdGhlIENhdGVnb3J5LmNhdGVnb3J5TmFtZSBwcm9wZXJ0eSwgd2hpY2ggaXMgbGlrZSB0aGlzOiBbXCJBdXRob3JcIiwgXCJOb3JtYW5uXCJdLlxyXG4gICAgICogQHJldHVybiB0cnVlIGlmIHRoZSBmaWx0ZXIgd2FzIGFkZGVkLCBmYWxzZSBpZiBpdCB3YXMgcmVtb3ZlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbHRlclRvZ2dsZShcclxuICAgICAgICBmaWx0ZXI6IHN0cmluZ1tdIHwgSUNhdGVnb3J5IHwgRmlsdGVyLFxyXG4gICAgICAgIGhpZGRlbjogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICApOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5maWx0ZXJJZChmaWx0ZXIpO1xyXG4gICAgICAgIGNvbnN0IGZvdW5kSW5kZXggPSB0aGlzLmZpbHRlckluZGV4KGl0ZW0pO1xyXG5cclxuICAgICAgICBpZiAoZm91bmRJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9GaWx0ZXJSZW1vdmUoZm91bmRJbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRvRmlsdGVyQWRkKGl0ZW0sIGhpZGRlbik7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZXMgdGhlIGV4cGFuc2lvbi9jb2xsYXBzZWQgc3RhdGUgZm9yIHRoZSBnaXZlbiBncm91cC9jYXRlZ29yeVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRoYXQgaXMgdG8gYmUgZXhwYW5kZWQuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBuZXcgc3RhdGUgb2YgdGhlIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b2dnbGVDYXRlZ29yeUV4cGFuc2lvbihcclxuICAgICAgICBub2RlOiBzdHJpbmdbXSB8IElDYXRlZ29yeSB8IElHcm91cCxcclxuICAgICAgICBzdGF0ZT86IGJvb2xlYW5cclxuICAgICk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIExvb2sgdXAgaW50ZXJuYWwgZXhwYW5zaW9uLW92ZXJyaWRlIGxpc3QgYW5kIHNlZSBpZiB3ZSBhcmUgYWxyZWFkeSBvdmVycmlkaW5nIHRoaXMgc2V0dGluZy5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xyXG4gICAgICAgICAgICBub2RlID0gdGhpcy5maW5kQ2F0ZWdvcnkobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGtleSA9IG5vZGUuaGFzT3duUHJvcGVydHkoXCJjYXRlZ29yeU5hbWVcIilcclxuICAgICAgICAgICAgPyAobm9kZSBhcyBJQ2F0ZWdvcnkpLmNhdGVnb3J5TmFtZS5qb2luKFwifFwiKVxyXG4gICAgICAgICAgICA6IG5vZGUubmFtZTtcclxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuY2F0ZWdvcml6ZS5wcmVzZW50YXRpb25zW2tleV0pIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5jYXRlZ29yaXplLnByZXNlbnRhdGlvbnNbXHJcbiAgICAgICAgICAgICAgICBrZXlcclxuICAgICAgICAgICAgXSA9IG5ldyBDYXRlZ29yeVByZXNlbnRhdGlvbih7IGV4cGFuZGVkOiAhbm9kZS5leHBhbmRlZCB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNhdGVnb3JpemUucHJlc2VudGF0aW9uc1trZXldLmV4cGFuZGVkID0gIXRoaXNcclxuICAgICAgICAgICAgICAgIC5zZXR0aW5ncy5jYXRlZ29yaXplLnByZXNlbnRhdGlvbnNba2V5XS5leHBhbmRlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXRlZ29yaXplLmNsaWVudENhdGVnb3JpZXNVcGRhdGUodGhpcy5xdWVyeSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuY2F0ZWdvcml6ZS5wcmVzZW50YXRpb25zW2tleV0uZXhwYW5kZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNpZGVzIHdoZXRoZXIgYW4gdXBkYXRlIHNob3VsZCBiZSBleGVjdXRlZCBvciBub3QuIFR5cGljYWxseSB1c2VkIHRvIHRlbXBvcmFyaWx5IHR1cm5cclxuICAgICAqIG9mZiB1cGRhdGUtZXhlY3V0aW9uLiBXaGVuIHR1cm5lZCBiYWNrIG9uIHRoZSBzZWNvbmQgcGFyYW0gY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgd2hldGhlclxyXG4gICAgICogcGVuZGluZyB1cGRhdGVzIHNob3VsZCBiZSBleGVjdXRlZCBvciBub3QuXHJcbiAgICAgKlxyXG4gICAgICogKipOb3RlOioqIENoYW5nZXMgZGVmZXJyaW5nIG9mIHVwZGF0ZXMgZm9yIGFsbCBjb21wb25lbnRzIChBdXRvY29tcGxldGUsIENhdGVnb3JpemUgYW5kIEZpbmQpLlxyXG4gICAgICogVXNlIHRoZSBzZXJ2aWNlIHByb3BlcnRpZXMgb2YgdGhlIFNlYXJjaENsaWVudCBpbnN0YW5jZSB0byBjb250cm9sIGRlZmVycmluZyBmb3IgZWFjaCBzZXJ2aWNlLlxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlIFNvbWUgZXhhbXBsZXM6XHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIEV4YW1wbGUgMTogRGVmZXIgdXBkYXRlcyB0byBhdm9pZCBtdWx0aXBsZSB1cGRhdGVzOlxyXG4gICAgICogICAgIHNlYXJjaENsaWVudC5kZWZlclVwZGF0ZXModHJ1ZSk7XHJcbiAgICAgKlxyXG4gICAgICogICAgIC8vIEV4YW1wbGUgMjogQ2hhbmdlIHNvbWUgcHJvcHMgdGhhdCB0cmlnZ2VycyBtYXkgYmUgbGlzdGVuaW5nIGZvclxyXG4gICAgICogICAgIHNlYXJjaENsaWVudC5kYXRlRnJvbSA9IHsgTTogLTF9O1xyXG4gICAgICogICAgIHNlYXJjaENsaWVudC5kYXRlVG8gPSB7IE06IDB9O1xyXG4gICAgICogICAgIC8vIFdoZW4gY2FsbGluZyBkZWZlclVwZGF0ZXMgd2l0aCAoZmFsc2UpIHRoZSBhYm92ZSB0d28gdXBkYXRlLWV2ZW50cyBhcmUgbm93IGV4ZWN1dGVkIGFzIG9uZSBpbnN0ZWFkIChib3RoIHZhbHVlLWNoYW5nZXMgYXJlIGFjY291bnRlZCBmb3IgdGhvdWdoKVxyXG4gICAgICogICAgIHNlYXJjaENsaWVudC5kZWZlclVwZGF0ZXMoZmFsc2UpO1xyXG4gICAgICpcclxuICAgICAqICAgICAvLyBFeGFtcGxlIDM6IFN1cHByZXNzIHVwZGF0ZXMgKHZpYSBkZWZlclVwZGF0ZXMpOlxyXG4gICAgICogICAgIHNlYXJjaENsaWVudC5kZWZlclVwZGF0ZXModHJ1ZSk7XHJcbiAgICAgKiAgICAgLy8gQ2hhbmdlIGEgcHJvcCB0aGF0IHNob3VsZCB0cmlnZ2VyIHVwZGF0ZXNcclxuICAgICAqICAgICBzZWFyY2hDbGllbnQucXVlcnlUZXh0ID0gXCJzb21lIHRleHRcIjtcclxuICAgICAqICAgICAvLyBDYWxsIGRlZmVyVXBkYXRlcyB3aXRoIChmYWxzZSwgdHJ1ZSksIHRvIHNraXAgdGhlIHBlbmRpbmcgdXBkYXRlLlxyXG4gICAgICogICAgIHNlYXJjaENsaWVudC5kZWZlclVwZGF0ZXMoZmFsc2UsIHRydWUpO1xyXG4gICAgICpcclxuICAgICAqICAgICAvLyBFeGFtcGxlIDQ6IERlZmVyIHVwZGF0ZSBvbmx5IGZvciBvbmUgc2VydmljZSAoQ2F0ZWdvcml6ZSBpbiB0aGlzIHNhbXBsZSk6XHJcbiAgICAgKiAgICAgc2VhcmNoQ2xpZW50LmNhdGVnb3JpemUuZGVmZXJVcGRhdGVzKHRydWUpO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzdGF0ZSBUdXJucyBvbiBvciBvZmYgZGVmZXJyaW5nIG9mIHVwZGF0ZXMuXHJcbiAgICAgKiBAcGFyYW0gc2tpcFBlbmRpbmcgVXNlZCB0byBpbmRpY2F0ZSBpZiBhIHBlbmRpbmcgdXBkYXRlIGlzIHRvIGJlIGV4ZWN1dGVkIG9yIHNraXBwZWQgd2hlbiBkZWZlcnJpbmdcclxuICAgICAqIGlzIHR1cm5lZCBvZmYuIFRoZSBwYXJhbSBpcyBpZ25vcmVkIGZvciBgc3RhdGU9dHJ1ZWAuIERlZmF1bHQgaXMgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWZlclVwZGF0ZXMoc3RhdGU6IGJvb2xlYW4sIHNraXBQZW5kaW5nOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5kZWZlclVwZGF0ZXMoc3RhdGUsIHNraXBQZW5kaW5nKTtcclxuICAgICAgICB0aGlzLmNhdGVnb3JpemUuZGVmZXJVcGRhdGVzKHN0YXRlLCBza2lwUGVuZGluZyk7XHJcbiAgICAgICAgdGhpcy5maW5kLmRlZmVyVXBkYXRlcyhzdGF0ZSwgc2tpcFBlbmRpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmluZCB0aGUgY2F0ZWdvcnkgYmFzZWQgb24gdGhlIGNhdGVnb3J5LW5hbWUgYXJyYXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhdGVnb3J5TmFtZSBUaGUgY2F0ZWdvcnkgYXJyYXkgdGhhdCBpZGVudGlmaWVzIHRoZSBjYXRlZ29yeS5cclxuICAgICAqIEByZXR1cm5zIFRoZSBDYXRlZ29yeSBvYmplY3QgaWYgZm91bmQgb3IgbnVsbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbmRDYXRlZ29yeShjYXRlZ29yeU5hbWU6IHN0cmluZ1tdKTogSUdyb3VwIHwgSUNhdGVnb3J5IHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0ZWdvcml6ZS5maW5kQ2F0ZWdvcnkoY2F0ZWdvcnlOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHByZXZpb3VzIHBhZ2Ugb2YgbWF0Y2gtcmVzdWx0cy5cclxuICAgICAqIFdpbGwgcnVuIHRyaWdnZXItY2hlY2tzIGFuZCBwb3RlbnRpYWxseSB1cGRhdGUgc2VydmljZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtYXRjaFBhZ2VQcmV2KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIENhbm5vdCBmZXRjaCBwYWdlIGxlc3MgdGhhbiAwXHJcbiAgICAgICAgaWYgKHRoaXMuX3F1ZXJ5Lm1hdGNoUGFnZSA+IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXRjaFBhZ2UtLTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG5leHQgcGFnZSBvZiBtYXRjaC1yZXN1bHRzIChpZiBhbnkpLlxyXG4gICAgICogV2lsbCBydW4gdHJpZ2dlci1jaGVja3MgYW5kIHBvdGVudGlhbGx5IHVwZGF0ZSBzZXJ2aWNlcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hdGNoUGFnZU5leHQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhpcy5tYXRjaFBhZ2UrKztcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2xpZW50LWlkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBnZXQgY2xpZW50SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkuY2xpZW50SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNsaWVudC1pZC5cclxuICAgICAqXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBzZXQgY2xpZW50SWQoY2xpZW50SWQ6IHN0cmluZykge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXHJcbiAgICAgICAgaWYgKGNsaWVudElkICE9IHRoaXMuX3F1ZXJ5LmNsaWVudElkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkuY2xpZW50SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5LmNsaWVudElkID0gY2xpZW50SWQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5jbGllbnRJZENoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5jYXRlZ29yaXplLmNsaWVudElkQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmQuY2xpZW50SWRDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudGx5IGFjdGl2ZSBkYXRlLWZyb20gdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGdldCBkYXRlRnJvbSgpOiBEYXRlU3BlY2lmaWNhdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LmRhdGVGcm9tO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgZnJvbS1kYXRlIGZvciBtYXRjaGVzIHRvIGJlIHVzZWQuXHJcbiAgICAgKlxyXG4gICAgICogV2lsbCBydW4gdHJpZ2dlci1jaGVja3MgYW5kIHBvdGVudGlhbGx5IHVwZGF0ZSBzZXJ2aWNlcy5cclxuICAgICAqL1xyXG4gICAgc2V0IGRhdGVGcm9tKGRhdGVGcm9tOiBEYXRlU3BlY2lmaWNhdGlvbikge1xyXG4gICAgICAgIGlmICghZGVlcEVxdWFsKGRhdGVGcm9tLCB0aGlzLl9xdWVyeS5kYXRlRnJvbSkpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9xdWVyeS5kYXRlRnJvbSk7IC8vIGNsb25lXHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5LmRhdGVGcm9tID0gZGF0ZUZyb207XHJcblxyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5kYXRlRnJvbUNoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5jYXRlZ29yaXplLmRhdGVGcm9tQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmQuZGF0ZUZyb21DaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudGx5IGFjdGl2ZSBkYXRlLXRvIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBnZXQgZGF0ZVRvKCk6IERhdGVTcGVjaWZpY2F0aW9uIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkuZGF0ZVRvO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdG8tZGF0ZSBmb3IgbWF0Y2hlcyB0byBiZSB1c2VkLlxyXG4gICAgICpcclxuICAgICAqIFdpbGwgcnVuIHRyaWdnZXItY2hlY2tzIGFuZCBwb3RlbnRpYWxseSB1cGRhdGUgc2VydmljZXMuXHJcbiAgICAgKi9cclxuICAgIHNldCBkYXRlVG8oZGF0ZVRvOiBEYXRlU3BlY2lmaWNhdGlvbikge1xyXG4gICAgICAgIGlmICghZGVlcEVxdWFsKGRhdGVUbywgdGhpcy5fcXVlcnkuZGF0ZVRvKSkge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3F1ZXJ5LmRhdGVUbyk7IC8vIGNsb25lXHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5LmRhdGVUbyA9IGRhdGVUbztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmRhdGVUb0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5jYXRlZ29yaXplLmRhdGVUb0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5maW5kLmRhdGVUb0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIGZpbHRlcnMuXHJcbiAgICAgKi9cclxuICAgIGdldCBmaWx0ZXJzKCk6IEZpbHRlcltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkuZmlsdGVycztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGZpbHRlcnMgdG8gYmUgdXNlZC5cclxuICAgICAqXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBzZXQgZmlsdGVycyhmaWx0ZXJzOiBGaWx0ZXJbXSkge1xyXG4gICAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzIHx8IFtdO1xyXG4gICAgICAgIGNvbnN0IHNvcnRlZEZpbHRlcnMgPSBmaWx0ZXJzLnNvcnQoKTtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xyXG4gICAgICAgIGlmIChzb3J0ZWRGaWx0ZXJzLmpvaW4oXCJcIikgIT0gdGhpcy5fcXVlcnkuZmlsdGVycy5qb2luKFwiXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkuZmlsdGVycy5zbGljZSgwKTsgLy8gY2xvbmVcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkuZmlsdGVycyA9IHNvcnRlZEZpbHRlcnM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5maWx0ZXJzQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5maW5kLmZpbHRlcnNDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudGx5IGFjdGl2ZSBtYXRjaCBnZW5lcmF0ZUNvbnRlbnQgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgZ2V0IG1hdGNoR2VuZXJhdGVDb250ZW50KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5tYXRjaEdlbmVyYXRlQ29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgd2hldGhlciB0aGUgcmVzdWx0cyBzaG91bGQgZ2VuZXJhdGUgdGhlIGNvbnRlbnQgb3Igbm90LlxyXG4gICAgICpcclxuICAgICAqICoqTm90ZToqKiBSZXF1aXJlcyB0aGUgYmFja2VuZCBJbmRleE1hbmFnZXIgdG8gaGF2ZSB0aGUgb3B0aW9uIGVuYWJsZWQgaW4gaXQncyBjb25maWd1cmF0aW9uIHRvby5cclxuICAgICAqXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBzZXQgbWF0Y2hHZW5lcmF0ZUNvbnRlbnQoZ2VuZXJhdGVDb250ZW50OiBib29sZWFuKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcclxuICAgICAgICBpZiAoZ2VuZXJhdGVDb250ZW50ICE9IHRoaXMuX3F1ZXJ5Lm1hdGNoR2VuZXJhdGVDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkubWF0Y2hHZW5lcmF0ZUNvbnRlbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5Lm1hdGNoR2VuZXJhdGVDb250ZW50ID0gZ2VuZXJhdGVDb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUubWF0Y2hHZW5lcmF0ZUNvbnRlbnRDaGFuZ2VkKFxyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9xdWVyeVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUubWF0Y2hHZW5lcmF0ZUNvbnRlbnRDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZC5tYXRjaEdlbmVyYXRlQ29udGVudENoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG1hdGNoIGdlbmVyYXRlQ29udGVudEhpZ2hsaWdodHMgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgZ2V0IG1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkubWF0Y2hHZW5lcmF0ZUNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHdoZXRoZXIgdGhlIHJlc3VsdHMgc2hvdWxkIGdlbmVyYXRlIHRoZSBjb250ZW50LWhpZ2hsaWdodCB0YWdzIG9yIG5vdC5cclxuICAgICAqXHJcbiAgICAgKiAqKk5vdGU6KiogU2VlIHRoZSBtYXRjaEdlbmVyYXRlQ29udGVudCBwcm9wZXJ0eSBpbiByZWdhcmRzIHRvIEluZGV4TWFuYWdlciByZXF1aXJlbWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogV2lsbCBydW4gdHJpZ2dlci1jaGVja3MgYW5kIHBvdGVudGlhbGx5IHVwZGF0ZSBzZXJ2aWNlcy5cclxuICAgICAqL1xyXG4gICAgc2V0IG1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cyhnZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xyXG4gICAgICAgICAgICBnZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzICE9XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5Lm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0c1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3F1ZXJ5Lm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cztcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkubWF0Y2hHZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzID0gZ2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0cztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLm1hdGNoR2VuZXJhdGVDb250ZW50SGlnaGxpZ2h0c0NoYW5nZWQoXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXJ5XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcml6ZS5tYXRjaEdlbmVyYXRlQ29udGVudEhpZ2hsaWdodHNDaGFuZ2VkKFxyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9xdWVyeVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmQubWF0Y2hHZW5lcmF0ZUNvbnRlbnRIaWdobGlnaHRzQ2hhbmdlZChcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcXVlcnlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG1hdGNoIGdyb3VwaW5nIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXRjaEdyb3VwaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5tYXRjaEdyb3VwaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSByZXN1bHRzIHNob3VsZCBiZSBncm91cGVkIG9yIG5vdC5cclxuICAgICAqXHJcbiAgICAgKiAqKk5vdGU6KiogUmVxdWlyZXMgdGhlIHNlYXJjaC1zZXJ2aWNlIHRvIGhhdmUgdGhlIG9wdGlvbiBlbmFibGVkIGluIGl0J3MgY29uZmlndXJhdGlvbiB0b28uXHJcbiAgICAgKlxyXG4gICAgICogV2lsbCBydW4gdHJpZ2dlci1jaGVja3MgYW5kIHBvdGVudGlhbGx5IHVwZGF0ZSBzZXJ2aWNlcy5cclxuICAgICAqL1xyXG4gICAgc2V0IG1hdGNoR3JvdXBpbmcodXNlR3JvdXBpbmc6IGJvb2xlYW4pIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xyXG4gICAgICAgIGlmICh1c2VHcm91cGluZyAhPSB0aGlzLl9xdWVyeS5tYXRjaEdyb3VwaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkubWF0Y2hHcm91cGluZztcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkubWF0Y2hHcm91cGluZyA9IHVzZUdyb3VwaW5nO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUubWF0Y2hHcm91cGluZ0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5jYXRlZ29yaXplLm1hdGNoR3JvdXBpbmdDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZC5tYXRjaEdyb3VwaW5nQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgbWF0Y2gtcGFnZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IG1hdGNoUGFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5tYXRjaFBhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBtYXRjaC1wYWdlIHRvIGdldC5cclxuICAgICAqIFdpbGwgcnVuIHRyaWdnZXItY2hlY2tzIGFuZCBwb3RlbnRpYWxseSB1cGRhdGUgc2VydmljZXMuXHJcbiAgICAgKi9cclxuICAgIHNldCBtYXRjaFBhZ2UocGFnZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHBhZ2UgPCAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgICdcIm1hdGNoUGFnZVwiIGNhbm5vdCBiZSBzZXQgdG8gYSB2YWx1ZSBzbWFsbGVyIHRoYW4gMS4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXHJcbiAgICAgICAgaWYgKHBhZ2UgIT0gdGhpcy5fcXVlcnkubWF0Y2hQYWdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkubWF0Y2hQYWdlO1xyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeS5tYXRjaFBhZ2UgPSBwYWdlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUubWF0Y2hQYWdlQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUubWF0Y2hQYWdlQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmQubWF0Y2hQYWdlQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgbWF0Y2ggcGFnZS1zaXplLlxyXG4gICAgICovXHJcbiAgICBnZXQgbWF0Y2hQYWdlU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5tYXRjaFBhZ2VTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgbWF0Y2ggcGFnZS1zaXplIHRvIGJlIHVzZWQuXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBzZXQgbWF0Y2hQYWdlU2l6ZShwYWdlU2l6ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHBhZ2VTaXplIDwgMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAnXCJtYXRjaFBhZ2VTaXplXCIgY2Fubm90IGJlIHNldCB0byBhIHZhbHVlIHNtYWxsZXIgdGhhbiAxLidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcclxuICAgICAgICBpZiAocGFnZVNpemUgIT0gdGhpcy5fcXVlcnkubWF0Y2hQYWdlU2l6ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3F1ZXJ5Lm1hdGNoUGFnZVNpemU7XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5Lm1hdGNoUGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLm1hdGNoUGFnZVNpemVDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcml6ZS5tYXRjaFBhZ2VTaXplQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmQubWF0Y2hQYWdlU2l6ZUNoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIG1hdGNoIG9yZGVyLlxyXG4gICAgICovXHJcbiAgICBnZXQgbWF0Y2hPcmRlckJ5KCk6IE9yZGVyQnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWVyeS5tYXRjaE9yZGVyQnk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBtYXRjaCBzb3J0aW5nIG1vZGUgdG8gYmUgdXNlZC5cclxuICAgICAqIFdpbGwgcnVuIHRyaWdnZXItY2hlY2tzIGFuZCBwb3RlbnRpYWxseSB1cGRhdGUgc2VydmljZXMuXHJcbiAgICAgKi9cclxuICAgIHNldCBtYXRjaE9yZGVyQnkob3JkZXJCeTogT3JkZXJCeSkge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXHJcbiAgICAgICAgaWYgKG9yZGVyQnkgIT0gdGhpcy5fcXVlcnkubWF0Y2hPcmRlckJ5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkubWF0Y2hPcmRlckJ5O1xyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeS5tYXRjaE9yZGVyQnkgPSBvcmRlckJ5O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUubWF0Y2hPcmRlckJ5Q2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUubWF0Y2hPcmRlckJ5Q2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmQubWF0Y2hPcmRlckJ5Q2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgbWF4IG51bWJlciBvZiBhdXRvY29tcGxldGUgc3VnZ2VzdGlvbnMgdG8gZ2V0LlxyXG4gICAgICovXHJcbiAgICBnZXQgbWF4U3VnZ2VzdGlvbnMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkubWF4U3VnZ2VzdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBtYXggbnVtYmVyIG9mIGF1dG9jb21wbGV0ZSBzdWdnZXN0aW9ucyB0byBnZXQuXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBzZXQgbWF4U3VnZ2VzdGlvbnMobWF4U3VnZ2VzdGlvbnM6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChtYXhTdWdnZXN0aW9ucyA8IDApIHtcclxuICAgICAgICAgICAgbWF4U3VnZ2VzdGlvbnMgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xyXG4gICAgICAgIGlmIChtYXhTdWdnZXN0aW9ucyAhPSB0aGlzLl9xdWVyeS5tYXhTdWdnZXN0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3F1ZXJ5Lm1heFN1Z2dlc3Rpb25zO1xyXG4gICAgICAgICAgICB0aGlzLl9xdWVyeS5tYXhTdWdnZXN0aW9ucyA9IG1heFN1Z2dlc3Rpb25zO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUubWF4U3VnZ2VzdGlvbnNDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcml6ZS5tYXhTdWdnZXN0aW9uc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5maW5kLm1heFN1Z2dlc3Rpb25zQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBhY3RpdmUgcXVlcnkuXHJcbiAgICAgKi9cclxuICAgIGdldCBxdWVyeSgpOiBRdWVyeSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgcXVlcnkgdG8gdXNlLiBDb25zaWRlciB1c2luZyB0aGUgcXVlcnlUZXh0LXByb3BlcnR5IGZvciBxdWVyeS10ZXh0LWNoYW5nZXMgaW5zdGVhZC5cclxuICAgICAqXHJcbiAgICAgKiAqKk5vdGU6KiogQ2hhbmdpbmcgdGhlIGBxdWVyeWAgcHJvcGVydHkgd2lsbCBsaWtlbHkgbGVhZCB0byBtdWx0aXBsZSB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsIHVwZGF0ZXMuXHJcbiAgICAgKiBUaGlzIGlzIGJlY2F1c2UgY2hhbmdpbmcgdGhlIHdob2xlIHZhbHVlIHdpbGwgbGVhZCB0byBlYWNoIG9mIHRoZSBxdWVyeS1vYmplY3RzJyBwcm9wZXJ0aWVzIHRvIHRyaWdnZXIgaW5kaXZpZHVhbFxyXG4gICAgICogZXZlbnRzLlxyXG4gICAgICpcclxuICAgICAqIFRvIGF2b2lkIG11bHRpcGxlIHVwZGF0ZXMsIGNhbGwgYGRlZmVyVXBkYXRlcyh0cnVlKWAgYmVmb3JlIGFuZCBkZWZlclVwZGF0ZXMoZmFsc2UpIGFmdGVyd2FyZHMuIFRoZW4gYXQgbWF4XHJcbiAgICAgKiBvbmx5IG9uZSB1cGRhdGUgd2lsbCBiZSBnZW5lcmF0ZWQuXHJcbiAgICAgKi9cclxuICAgIHNldCBxdWVyeShxdWVyeTogUXVlcnkpIHtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gcXVlcnkuY2xpZW50SWQ7XHJcbiAgICAgICAgdGhpcy5kYXRlRnJvbSA9IHF1ZXJ5LmRhdGVGcm9tO1xyXG4gICAgICAgIHRoaXMuZGF0ZVRvID0gcXVlcnkuZGF0ZVRvO1xyXG4gICAgICAgIHRoaXMuZmlsdGVycyA9IHF1ZXJ5LmZpbHRlcnM7XHJcbiAgICAgICAgdGhpcy5tYXRjaEdyb3VwaW5nID0gcXVlcnkubWF0Y2hHcm91cGluZztcclxuICAgICAgICB0aGlzLm1hdGNoT3JkZXJCeSA9IHF1ZXJ5Lm1hdGNoT3JkZXJCeTtcclxuICAgICAgICB0aGlzLm1hdGNoUGFnZSA9IHF1ZXJ5Lm1hdGNoUGFnZTtcclxuICAgICAgICB0aGlzLm1hdGNoUGFnZVNpemUgPSBxdWVyeS5tYXRjaFBhZ2VTaXplO1xyXG4gICAgICAgIHRoaXMubWF4U3VnZ2VzdGlvbnMgPSBxdWVyeS5tYXhTdWdnZXN0aW9ucztcclxuICAgICAgICB0aGlzLnF1ZXJ5VGV4dCA9IHF1ZXJ5LnF1ZXJ5VGV4dDtcclxuICAgICAgICB0aGlzLnNlYXJjaFR5cGUgPSBxdWVyeS5zZWFyY2hUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudGx5IGFjdGl2ZSBxdWVyeS1vYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGdldCBxdWVyeVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkucXVlcnlUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgcXVlcnktdGV4dCB0byBiZSB1c2VkLlxyXG4gICAgICogV2lsbCBydW4gdHJpZ2dlci1jaGVja3MgYW5kIHBvdGVudGlhbGx5IHVwZGF0ZSBzZXJ2aWNlcy5cclxuICAgICAqL1xyXG4gICAgc2V0IHF1ZXJ5VGV4dChxdWVyeVRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXHJcbiAgICAgICAgaWYgKHF1ZXJ5VGV4dCAhPSB0aGlzLl9xdWVyeS5xdWVyeVRleHQpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl9xdWVyeS5xdWVyeVRleHQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5LnF1ZXJ5VGV4dCA9IHF1ZXJ5VGV4dDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLnF1ZXJ5VGV4dENoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5jYXRlZ29yaXplLnF1ZXJ5VGV4dENoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5maW5kLnF1ZXJ5VGV4dENoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50bHkgYWN0aXZlIHNlYXJjaC10eXBlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBnZXQgc2VhcmNoVHlwZSgpOiBTZWFyY2hUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnkuc2VhcmNoVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHNlYXJjaC10eXBlIHRvIGJlIHVzZWQuXHJcbiAgICAgKiBXaWxsIHJ1biB0cmlnZ2VyLWNoZWNrcyBhbmQgcG90ZW50aWFsbHkgdXBkYXRlIHNlcnZpY2VzLlxyXG4gICAgICovXHJcbiAgICBzZXQgc2VhcmNoVHlwZShzZWFyY2hUeXBlOiBTZWFyY2hUeXBlKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcclxuICAgICAgICBpZiAoc2VhcmNoVHlwZSAhPSB0aGlzLl9xdWVyeS5zZWFyY2hUeXBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkuc2VhcmNoVHlwZTtcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkuc2VhcmNoVHlwZSA9IHNlYXJjaFR5cGU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5zZWFyY2hUeXBlQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUuc2VhcmNoVHlwZUNoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICAgICAgdGhpcy5maW5kLnNlYXJjaFR5cGVDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY3VycmVudGx5IGFjdGl2ZSBtYXRjaCBnZW5lcmF0ZUNvbnRlbnQgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgZ2V0IHVpTGFuZ3VhZ2VDb2RlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LnVpTGFuZ3VhZ2VDb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgbGFuZ3VhZ2UgdGhhdCB0aGUgY2xpZW50IHVzZXMuIEFmZmVjdHMgY2F0ZWdvcnktbmFtZXMgKGFuZCBpbiB0aGUgZnV0dXJlIG1heWJlIG1ldGFkYXRhIHRvbykuXHJcbiAgICAgKiBUaGUgZXhwZWN0ZWQgdmFsdWVzIHNob3VsZCBiZSBhY2NvcmRpbmcgdG8gdGhlIGh0dHBzOi8vd3d3Lndpa2l3YW5kLmNvbS9lbi9JRVRGX2xhbmd1YWdlX3RhZyBzdGFuZGFyZC5cclxuICAgICAqXHJcbiAgICAgKiBDaGFuZ2VzIHdpbGwgcnVuIHRyaWdnZXItY2hlY2tzIGFuZCBwb3RlbnRpYWxseSB1cGRhdGUgc2VydmljZXMuXHJcbiAgICAgKi9cclxuICAgIHNldCB1aUxhbmd1YWdlQ29kZSh1aUxhbmd1YWdlQ29kZTogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcclxuICAgICAgICBpZiAodWlMYW5ndWFnZUNvZGUgIT0gdGhpcy5fcXVlcnkudWlMYW5ndWFnZUNvZGUpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl9xdWVyeS51aUxhbmd1YWdlQ29kZTtcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkudWlMYW5ndWFnZUNvZGUgPSB1aUxhbmd1YWdlQ29kZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLnVpTGFuZ3VhZ2VDb2RlQ2hhbmdlZChvbGRWYWx1ZSwgdGhpcy5fcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhdGVnb3JpemUudWlMYW5ndWFnZUNvZGVDaGFuZ2VkKG9sZFZhbHVlLCB0aGlzLl9xdWVyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZC51aUxhbmd1YWdlQ29kZUNoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkb0ZpbHRlckFkZChmaWx0ZXI6IHN0cmluZ1tdLCBoaWRkZW46IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIC8vIEZpbmQgaXRlbSBpbiBjYXRlZ29yaXplLmNhdGVnb3JpZXMsIGFuZCBidWlsZCBkaXNwbGF5TmFtZSBmb3IgdGhlIEZpbHRlciAoZGlzcGxheU5hbWUgZm9yIGVhY2ggY2F0ZWdvcnlOb2RlIGluIHRoZSBoaWVyYXJjaHkpXHJcbiAgICAgICAgY29uc3QgbmV3RmlsdGVyID0gdGhpcy5jYXRlZ29yaXplLmNyZWF0ZUNhdGVnb3J5RmlsdGVyKGZpbHRlcik7XHJcbiAgICAgICAgaWYgKCFuZXdGaWx0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3F1ZXJ5LmZpbHRlcnMuc2xpY2UoMCk7XHJcblxyXG4gICAgICAgIGxldCB0b1JlbW92ZTogRmlsdGVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgLy8gRmluZCBwYXJlbnQgZmlsdGVycyBvbiB0aGUgc2FtZSBwYXRoICh0byBiZSByZW1vdmVkKVxyXG4gICAgICAgIGxldCBmaWx0ZXJOYW1lID0gbmV3RmlsdGVyLmNhdGVnb3J5LmNhdGVnb3J5TmFtZVswXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG5ld0ZpbHRlci5jYXRlZ29yeS5jYXRlZ29yeU5hbWUubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZpbHRlck5hbWUgKz0gYHwke25ld0ZpbHRlci5jYXRlZ29yeS5jYXRlZ29yeU5hbWVbaV19YDtcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkuZmlsdGVycy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZOYW1lID0gZi5jYXRlZ29yeS5jYXRlZ29yeU5hbWUuam9pbihcInxcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZk5hbWUgPT09IGZpbHRlck5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b1JlbW92ZS5wdXNoKGYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbHRlck5hbWUgKz0gYHwke1xyXG4gICAgICAgICAgICBuZXdGaWx0ZXIuY2F0ZWdvcnkuY2F0ZWdvcnlOYW1lW1xyXG4gICAgICAgICAgICAgICAgbmV3RmlsdGVyLmNhdGVnb3J5LmNhdGVnb3J5TmFtZS5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9YDtcclxuXHJcbiAgICAgICAgLy8gRmluZCBjaGlsZCBmaWx0ZXJzIG9mIHRoZSBzYW1lIHBhdGggKHRvIGJlIHJlbW92ZWQpXHJcbiAgICAgICAgdGhpcy5fcXVlcnkuZmlsdGVycy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZk5hbWUgPSBmLmNhdGVnb3J5LmNhdGVnb3J5TmFtZS5qb2luKFwifFwiKTtcclxuICAgICAgICAgICAgaWYgKGZOYW1lLnN0YXJ0c1dpdGgoZmlsdGVyTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRvUmVtb3ZlLnB1c2goZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gRWN4ZWN1dGUgdGhlIGFjdHVhbCByZW1vdmVsICh3aWh0aG91dCB0cmlnZ2VyaW5nIGFuIHVwZGF0ZSkuXHJcbiAgICAgICAgdG9SZW1vdmUuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcXVlcnkuZmlsdGVycy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IGYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWVyeS5maWx0ZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIG5ldyBmaWx0ZXJcclxuICAgICAgICB0aGlzLl9xdWVyeS5maWx0ZXJzLnB1c2gobmV3RmlsdGVyKTtcclxuICAgICAgICB0aGlzLl9xdWVyeS5maWx0ZXJzLnNvcnQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGUuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB0aGlzLmNhdGVnb3JpemUuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB0aGlzLmZpbmQuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRvRmlsdGVyUmVtb3ZlKGk6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5fcXVlcnkuZmlsdGVycy5zbGljZSgwKTtcclxuICAgICAgICB0aGlzLl9xdWVyeS5maWx0ZXJzLnNwbGljZShpLCAxKTtcclxuXHJcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byBzb3J0IHRoZSBmaWx0ZXItbGlzdCBhZnRlcndhcmRzLCBhcyByZW1vdmluZyBhbiBpdGVtIGNhbm5vdCBjaGFuZ2UgdGhlIG9yZGVyIGFueXdheS5cclxuXHJcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGUuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB0aGlzLmNhdGVnb3JpemUuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuICAgICAgICB0aGlzLmZpbmQuZmlsdGVyc0NoYW5nZWQob2xkVmFsdWUsIHRoaXMuX3F1ZXJ5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaWx0ZXJJZChmaWx0ZXI6IHN0cmluZ1tdIHwgSUNhdGVnb3J5IHwgRmlsdGVyKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGxldCBpZDogc3RyaW5nW107XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyKSkge1xyXG4gICAgICAgICAgICBpZCA9IGZpbHRlcjtcclxuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlciBpbnN0YW5jZW9mIEZpbHRlcikge1xyXG4gICAgICAgICAgICBpZCA9IGZpbHRlci5jYXRlZ29yeS5jYXRlZ29yeU5hbWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWQgPSBmaWx0ZXIuY2F0ZWdvcnlOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaWx0ZXJJbmRleChmaWx0ZXI6IHN0cmluZ1tdKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBmaWx0ZXJTdHJpbmcgPSBmaWx0ZXIuam9pbihcInxcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5LmZpbHRlcnMuZmluZEluZGV4KFxyXG4gICAgICAgICAgICBmID0+IGYuY2F0ZWdvcnkuY2F0ZWdvcnlOYW1lLmpvaW4oXCJ8XCIpID09PSBmaWx0ZXJTdHJpbmdcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXAoc2V0dGluZ3M6IHN0cmluZyB8IElTZXR0aW5ncywgZmV0Y2hNZXRob2Q6IEZldGNoKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvbiA9IG5ldyBBdXRoZW50aWNhdGlvbihcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5hdXRoZW50aWNhdGlvbixcclxuICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgZmV0Y2hNZXRob2RcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuYXV0aGVudGljYXRpb24gPSB0aGlzLmF1dGhlbnRpY2F0aW9uLnNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gbmV3IEF1dG9jb21wbGV0ZShcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5hdXRvY29tcGxldGUsXHJcbiAgICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgICAgIGZldGNoTWV0aG9kXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzLmF1dG9jb21wbGV0ZSA9IHRoaXMuYXV0b2NvbXBsZXRlLnNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuY2F0ZWdvcml6ZSA9IG5ldyBDYXRlZ29yaXplKFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNhdGVnb3JpemUsXHJcbiAgICAgICAgICAgIHRoaXMsXHJcbiAgICAgICAgICAgIGZldGNoTWV0aG9kXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzLmNhdGVnb3JpemUgPSB0aGlzLmNhdGVnb3JpemUuc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5maW5kID0gbmV3IEZpbmQodGhpcy5zZXR0aW5ncy5maW5kLCB0aGlzLCBmZXRjaE1ldGhvZCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5maW5kID0gdGhpcy5maW5kLnNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX3F1ZXJ5ID0gdGhpcy5zZXR0aW5ncy5xdWVyeTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gICAgQXV0aGVudGljYXRpb25TZXR0aW5ncyxcclxuICAgIElBdXRoZW50aWNhdGlvblNldHRpbmdzXHJcbn0gZnJvbSBcIi4vQXV0aGVudGljYXRpb25cIjtcclxuaW1wb3J0IHsgQXV0b2NvbXBsZXRlU2V0dGluZ3MsIElBdXRvY29tcGxldGVTZXR0aW5ncyB9IGZyb20gXCIuL0F1dG9jb21wbGV0ZVwiO1xyXG5pbXBvcnQgeyBDYXRlZ29yaXplU2V0dGluZ3MsIElDYXRlZ29yaXplU2V0dGluZ3MgfSBmcm9tIFwiLi9DYXRlZ29yaXplXCI7XHJcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIi4vQ29tbW9uXCI7XHJcbmltcG9ydCB7IEZpbmRTZXR0aW5ncywgSUZpbmRTZXR0aW5ncyB9IGZyb20gXCIuL0ZpbmRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNldHRpbmdzIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIEpXVCBhdXRoZW50aWNhdGlvbiB0b2tlbiB0byB1c2UuXHJcbiAgICAgKi9cclxuICAgIGF1dGhlbnRpY2F0aW9uPzogSUF1dGhlbnRpY2F0aW9uU2V0dGluZ3M7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR0aW5ncyBmb3IgYXV0b2NvbXBsZXRlKCkuXHJcbiAgICAgKi9cclxuICAgIGF1dG9jb21wbGV0ZT86IElBdXRvY29tcGxldGVTZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHRpbmdzIGZvciBjYXRlZ29yaXplKCkuXHJcbiAgICAgKi9cclxuICAgIGNhdGVnb3JpemU/OiBJQ2F0ZWdvcml6ZVNldHRpbmdzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0dGluZ3MgZm9yIGZpbmQoKS5cclxuICAgICAqL1xyXG4gICAgZmluZD86IElGaW5kU2V0dGluZ3M7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIHBhdGggdG8gb3ZlcnJpZGUgdGhlIHBhdGggdG8gdGhlIHJlc3Qtc2VydmljZS5cclxuICAgICAqIElmIG5vdCBzZXQsIGl0IHdpbGwgZGVmYXVsdCB0byBcIlJlc3RTZXJ2aWNlL3Y0XCIuXHJcbiAgICAgKi9cclxuICAgIGJhc2VQYXRoPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0dGluZ3MgZm9yIHRoZSBjb21tb24gcXVlcnkgKGF1dG9jb21wbGV0ZS9maW5kL2NhdGVnb3JpemUpXHJcbiAgICAgKi9cclxuICAgIHF1ZXJ5PzogUXVlcnk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlVXJsIGZvciB0aGUgU2VhcmNoQ2xpZW50IHNlcnZpY2UgKGNhbiBiZSBvdmVycmlkZW4gaW4gc3BlY2lmaWMgc2VydmljZXMpXHJcbiAgICAgKi9cclxuICAgIGJhc2VVcmw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXR0aW5ncyBhcyB1c2VkIGJ5IHRoZSBTZWFyY2hDbGllbnQuXHJcbiAqXHJcbiAqIFBsZWFzZSBzZWUgdGhlIGRhdGEtdHlwZSBkZXNjcmlwdGlvbiBmb3IgZWFjaCBwcm9wZXJ0eSBpbiBxdWVzdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5ncyB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBKV1QgYXV0aGVudGljYXRpb24gdG9rZW4gdG8gdXNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXV0aGVudGljYXRpb24/OiBJQXV0aGVudGljYXRpb25TZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHRpbmdzIGZvciBhdXRvY29tcGxldGUoKS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGF1dG9jb21wbGV0ZT86IElBdXRvY29tcGxldGVTZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHRpbmdzIGZvciBjYXRlZ29yaXplKCkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYXRlZ29yaXplPzogSUNhdGVnb3JpemVTZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHRpbmdzIGZvciBmaW5kKCkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaW5kPzogSUZpbmRTZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFlvdSBjYW4gdXNlIHRoaXMgcGF0aCB0byBvdmVycmlkZSB0aGUgcGF0aCB0byB0aGUgcmVzdC1zZXJ2aWNlLlxyXG4gICAgICogSWYgbm90IHNldCwgaXQgd2lsbCBkZWZhdWx0IHRvIFwiUmVzdFNlcnZpY2UvdjRcIi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGJhc2VQYXRoPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0dGluZ3MgZm9yIHRoZSBjb21tb24gcXVlcnkgKGF1dG9jb21wbGV0ZS9maW5kL2NhdGVnb3JpemUpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBxdWVyeT86IFF1ZXJ5O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQmFzZVVybCBmb3IgdGhlIFNlYXJjaENsaWVudCBzZXJ2aWNlIChjYW4gYmUgb3ZlcnJpZGVuIGluIHNwZWNpZmljIHNlcnZpY2VzKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYmFzZVVybD86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBTZXR0aW5ncyBvYmplY3QgZm9yIHlvdSwgYmFzZWQgb24gU2V0dGluZ3MgZGVmYXVsdHMgYW5kIHRoZSBvdmVycmlkZXMgcHJvdmlkZWQgYXMgYSBwYXJhbS5cclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyAtIFRoZSBzZXR0aW5ncyBkZWZpbmVkIGhlcmUgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBTZXR0aW5ncy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M6IElTZXR0aW5ncyB8IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSB7IGJhc2VVcmw6IHNldHRpbmdzIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBzZXR0aW5ncy5iYXNlVXJsO1xyXG5cclxuICAgICAgICB0aGlzLmJhc2VQYXRoID1cclxuICAgICAgICAgICAgdHlwZW9mIHNldHRpbmdzLmJhc2VQYXRoICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHNldHRpbmdzLmJhc2VQYXRoXHJcbiAgICAgICAgICAgICAgICA6IFwiUmVzdFNlcnZpY2UvdjRcIjtcclxuXHJcbiAgICAgICAgLy8gVGhlIGJhc2VVcmwgaXMgdG8gYmUgdXNlZCBieSBhbGwgc2VydmljZXMsIHVubGVzcyB0aGV5IGhhdmUgYSBzcGVjaWZpZWQgYmFzZVVybCB0aGVtc2VsdmVzLlxyXG4gICAgICAgIGxldCBjb21tb24gPSB7IGJhc2VQYXRoOiB0aGlzLmJhc2VQYXRoLCBiYXNlVXJsOiB0aGlzLmJhc2VVcmwgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvbiA9IG5ldyBBdXRoZW50aWNhdGlvblNldHRpbmdzKHtcclxuICAgICAgICAgICAgLi4uY29tbW9uLFxyXG4gICAgICAgICAgICAuLi5zZXR0aW5ncy5hdXRoZW50aWNhdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gbmV3IEF1dG9jb21wbGV0ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgLi4uY29tbW9uLFxyXG4gICAgICAgICAgICAuLi5zZXR0aW5ncy5hdXRvY29tcGxldGVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNhdGVnb3JpemUgPSBuZXcgQ2F0ZWdvcml6ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgLi4uY29tbW9uLFxyXG4gICAgICAgICAgICAuLi5zZXR0aW5ncy5jYXRlZ29yaXplXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maW5kID0gbmV3IEZpbmRTZXR0aW5ncyh7IC4uLmNvbW1vbiwgLi4uc2V0dGluZ3MuZmluZCB9KTtcclxuICAgICAgICB0aGlzLnF1ZXJ5ID0gbmV3IFF1ZXJ5KHNldHRpbmdzLnF1ZXJ5KTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9